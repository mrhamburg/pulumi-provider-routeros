// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routeros

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := routeros.NewResourceSystemScheduler(ctx, "schedule1", &routeros.ResourceSystemSchedulerArgs{
//				OnEvent: pulumi.String("script name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/system/scheduler get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:index/resourceSystemScheduler:ResourceSystemScheduler schedule1 "*0"
//
// ```
type ResourceSystemScheduler struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	Comment  pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
	// otherwise it is executed repeatedly at the time interval is specified.
	Interval pulumi.StringOutput `pulumi:"interval"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name    pulumi.StringOutput `pulumi:"name"`
	NextRun pulumi.StringOutput `pulumi:"nextRun"`
	// Name of the script to execute. It must be presented at /system script.
	OnEvent pulumi.StringOutput `pulumi:"onEvent"`
	Owner   pulumi.StringOutput `pulumi:"owner"`
	// List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
	// full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
	// used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
	// that grants user management rights. Should be used together with the write policy. Allows also to see global variables
	// created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
	// configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
	// Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
	// Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
	// displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
	// ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
	// access to the router's configuration, except for user management. This policy does not allow to read the configuration,
	// so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
	// This counter is incremented each time the script is executed.
	RunCount pulumi.StringOutput `pulumi:"runCount"`
	// Date of the first script execution.
	StartDate pulumi.StringOutput `pulumi:"startDate"`
	// Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
	// start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
	// and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
	// will not run at startup.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
}

// NewResourceSystemScheduler registers a new resource with the given unique name, arguments, and options.
func NewResourceSystemScheduler(ctx *pulumi.Context,
	name string, args *ResourceSystemSchedulerArgs, opts ...pulumi.ResourceOption) (*ResourceSystemScheduler, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OnEvent == nil {
		return nil, errors.New("invalid value for required argument 'OnEvent'")
	}
	var resource ResourceSystemScheduler
	err := ctx.RegisterResource("routeros:index/resourceSystemScheduler:ResourceSystemScheduler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceSystemScheduler gets an existing ResourceSystemScheduler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceSystemScheduler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceSystemSchedulerState, opts ...pulumi.ResourceOption) (*ResourceSystemScheduler, error) {
	var resource ResourceSystemScheduler
	err := ctx.ReadResource("routeros:index/resourceSystemScheduler:ResourceSystemScheduler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceSystemScheduler resources.
type resourceSystemSchedulerState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
	// otherwise it is executed repeatedly at the time interval is specified.
	Interval *string `pulumi:"interval"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name    *string `pulumi:"name"`
	NextRun *string `pulumi:"nextRun"`
	// Name of the script to execute. It must be presented at /system script.
	OnEvent *string `pulumi:"onEvent"`
	Owner   *string `pulumi:"owner"`
	// List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
	// full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
	// used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
	// that grants user management rights. Should be used together with the write policy. Allows also to see global variables
	// created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
	// configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
	// Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
	// Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
	// displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
	// ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
	// access to the router's configuration, except for user management. This policy does not allow to read the configuration,
	// so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
	Policies []string `pulumi:"policies"`
	// This counter is incremented each time the script is executed.
	RunCount *string `pulumi:"runCount"`
	// Date of the first script execution.
	StartDate *string `pulumi:"startDate"`
	// Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
	// start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
	// and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
	// will not run at startup.
	StartTime *string `pulumi:"startTime"`
}

type ResourceSystemSchedulerState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
	// otherwise it is executed repeatedly at the time interval is specified.
	Interval pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name    pulumi.StringPtrInput
	NextRun pulumi.StringPtrInput
	// Name of the script to execute. It must be presented at /system script.
	OnEvent pulumi.StringPtrInput
	Owner   pulumi.StringPtrInput
	// List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
	// full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
	// used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
	// that grants user management rights. Should be used together with the write policy. Allows also to see global variables
	// created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
	// configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
	// Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
	// Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
	// displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
	// ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
	// access to the router's configuration, except for user management. This policy does not allow to read the configuration,
	// so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
	Policies pulumi.StringArrayInput
	// This counter is incremented each time the script is executed.
	RunCount pulumi.StringPtrInput
	// Date of the first script execution.
	StartDate pulumi.StringPtrInput
	// Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
	// start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
	// and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
	// will not run at startup.
	StartTime pulumi.StringPtrInput
}

func (ResourceSystemSchedulerState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSystemSchedulerState)(nil)).Elem()
}

type resourceSystemSchedulerArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
	// otherwise it is executed repeatedly at the time interval is specified.
	Interval *string `pulumi:"interval"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name *string `pulumi:"name"`
	// Name of the script to execute. It must be presented at /system script.
	OnEvent string `pulumi:"onEvent"`
	// List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
	// full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
	// used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
	// that grants user management rights. Should be used together with the write policy. Allows also to see global variables
	// created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
	// configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
	// Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
	// Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
	// displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
	// ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
	// access to the router's configuration, except for user management. This policy does not allow to read the configuration,
	// so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
	Policies []string `pulumi:"policies"`
	// Date of the first script execution.
	StartDate *string `pulumi:"startDate"`
	// Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
	// start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
	// and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
	// will not run at startup.
	StartTime *string `pulumi:"startTime"`
}

// The set of arguments for constructing a ResourceSystemScheduler resource.
type ResourceSystemSchedulerArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
	// otherwise it is executed repeatedly at the time interval is specified.
	Interval pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringPtrInput
	// Name of the script to execute. It must be presented at /system script.
	OnEvent pulumi.StringInput
	// List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
	// full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
	// used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
	// that grants user management rights. Should be used together with the write policy. Allows also to see global variables
	// created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
	// configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
	// Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
	// Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
	// displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
	// ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
	// access to the router's configuration, except for user management. This policy does not allow to read the configuration,
	// so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
	Policies pulumi.StringArrayInput
	// Date of the first script execution.
	StartDate pulumi.StringPtrInput
	// Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
	// start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
	// and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
	// will not run at startup.
	StartTime pulumi.StringPtrInput
}

func (ResourceSystemSchedulerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSystemSchedulerArgs)(nil)).Elem()
}

type ResourceSystemSchedulerInput interface {
	pulumi.Input

	ToResourceSystemSchedulerOutput() ResourceSystemSchedulerOutput
	ToResourceSystemSchedulerOutputWithContext(ctx context.Context) ResourceSystemSchedulerOutput
}

func (*ResourceSystemScheduler) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSystemScheduler)(nil)).Elem()
}

func (i *ResourceSystemScheduler) ToResourceSystemSchedulerOutput() ResourceSystemSchedulerOutput {
	return i.ToResourceSystemSchedulerOutputWithContext(context.Background())
}

func (i *ResourceSystemScheduler) ToResourceSystemSchedulerOutputWithContext(ctx context.Context) ResourceSystemSchedulerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSystemSchedulerOutput)
}

// ResourceSystemSchedulerArrayInput is an input type that accepts ResourceSystemSchedulerArray and ResourceSystemSchedulerArrayOutput values.
// You can construct a concrete instance of `ResourceSystemSchedulerArrayInput` via:
//
//	ResourceSystemSchedulerArray{ ResourceSystemSchedulerArgs{...} }
type ResourceSystemSchedulerArrayInput interface {
	pulumi.Input

	ToResourceSystemSchedulerArrayOutput() ResourceSystemSchedulerArrayOutput
	ToResourceSystemSchedulerArrayOutputWithContext(context.Context) ResourceSystemSchedulerArrayOutput
}

type ResourceSystemSchedulerArray []ResourceSystemSchedulerInput

func (ResourceSystemSchedulerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSystemScheduler)(nil)).Elem()
}

func (i ResourceSystemSchedulerArray) ToResourceSystemSchedulerArrayOutput() ResourceSystemSchedulerArrayOutput {
	return i.ToResourceSystemSchedulerArrayOutputWithContext(context.Background())
}

func (i ResourceSystemSchedulerArray) ToResourceSystemSchedulerArrayOutputWithContext(ctx context.Context) ResourceSystemSchedulerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSystemSchedulerArrayOutput)
}

// ResourceSystemSchedulerMapInput is an input type that accepts ResourceSystemSchedulerMap and ResourceSystemSchedulerMapOutput values.
// You can construct a concrete instance of `ResourceSystemSchedulerMapInput` via:
//
//	ResourceSystemSchedulerMap{ "key": ResourceSystemSchedulerArgs{...} }
type ResourceSystemSchedulerMapInput interface {
	pulumi.Input

	ToResourceSystemSchedulerMapOutput() ResourceSystemSchedulerMapOutput
	ToResourceSystemSchedulerMapOutputWithContext(context.Context) ResourceSystemSchedulerMapOutput
}

type ResourceSystemSchedulerMap map[string]ResourceSystemSchedulerInput

func (ResourceSystemSchedulerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSystemScheduler)(nil)).Elem()
}

func (i ResourceSystemSchedulerMap) ToResourceSystemSchedulerMapOutput() ResourceSystemSchedulerMapOutput {
	return i.ToResourceSystemSchedulerMapOutputWithContext(context.Background())
}

func (i ResourceSystemSchedulerMap) ToResourceSystemSchedulerMapOutputWithContext(ctx context.Context) ResourceSystemSchedulerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSystemSchedulerMapOutput)
}

type ResourceSystemSchedulerOutput struct{ *pulumi.OutputState }

func (ResourceSystemSchedulerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSystemScheduler)(nil)).Elem()
}

func (o ResourceSystemSchedulerOutput) ToResourceSystemSchedulerOutput() ResourceSystemSchedulerOutput {
	return o
}

func (o ResourceSystemSchedulerOutput) ToResourceSystemSchedulerOutputWithContext(ctx context.Context) ResourceSystemSchedulerOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ResourceSystemSchedulerOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ResourceSystemSchedulerOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

func (o ResourceSystemSchedulerOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o ResourceSystemSchedulerOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
// otherwise it is executed repeatedly at the time interval is specified.
func (o ResourceSystemSchedulerOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringOutput { return v.Interval }).(pulumi.StringOutput)
}

// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
// integrity for that resource!
func (o ResourceSystemSchedulerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ResourceSystemSchedulerOutput) NextRun() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringOutput { return v.NextRun }).(pulumi.StringOutput)
}

// Name of the script to execute. It must be presented at /system script.
func (o ResourceSystemSchedulerOutput) OnEvent() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringOutput { return v.OnEvent }).(pulumi.StringOutput)
}

func (o ResourceSystemSchedulerOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
// full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
// used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
// that grants user management rights. Should be used together with the write policy. Allows also to see global variables
// created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
// configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
// Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
// Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
// displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
// ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
// access to the router's configuration, except for user management. This policy does not allow to read the configuration,
// so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
func (o ResourceSystemSchedulerOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringArrayOutput { return v.Policies }).(pulumi.StringArrayOutput)
}

// This counter is incremented each time the script is executed.
func (o ResourceSystemSchedulerOutput) RunCount() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringOutput { return v.RunCount }).(pulumi.StringOutput)
}

// Date of the first script execution.
func (o ResourceSystemSchedulerOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

// Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
// start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
// and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
// will not run at startup.
func (o ResourceSystemSchedulerOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemScheduler) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

type ResourceSystemSchedulerArrayOutput struct{ *pulumi.OutputState }

func (ResourceSystemSchedulerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSystemScheduler)(nil)).Elem()
}

func (o ResourceSystemSchedulerArrayOutput) ToResourceSystemSchedulerArrayOutput() ResourceSystemSchedulerArrayOutput {
	return o
}

func (o ResourceSystemSchedulerArrayOutput) ToResourceSystemSchedulerArrayOutputWithContext(ctx context.Context) ResourceSystemSchedulerArrayOutput {
	return o
}

func (o ResourceSystemSchedulerArrayOutput) Index(i pulumi.IntInput) ResourceSystemSchedulerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceSystemScheduler {
		return vs[0].([]*ResourceSystemScheduler)[vs[1].(int)]
	}).(ResourceSystemSchedulerOutput)
}

type ResourceSystemSchedulerMapOutput struct{ *pulumi.OutputState }

func (ResourceSystemSchedulerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSystemScheduler)(nil)).Elem()
}

func (o ResourceSystemSchedulerMapOutput) ToResourceSystemSchedulerMapOutput() ResourceSystemSchedulerMapOutput {
	return o
}

func (o ResourceSystemSchedulerMapOutput) ToResourceSystemSchedulerMapOutputWithContext(ctx context.Context) ResourceSystemSchedulerMapOutput {
	return o
}

func (o ResourceSystemSchedulerMapOutput) MapIndex(k pulumi.StringInput) ResourceSystemSchedulerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceSystemScheduler {
		return vs[0].(map[string]*ResourceSystemScheduler)[vs[1].(string)]
	}).(ResourceSystemSchedulerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSystemSchedulerInput)(nil)).Elem(), &ResourceSystemScheduler{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSystemSchedulerArrayInput)(nil)).Elem(), ResourceSystemSchedulerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSystemSchedulerMapInput)(nil)).Elem(), ResourceSystemSchedulerMap{})
	pulumi.RegisterOutputType(ResourceSystemSchedulerOutput{})
	pulumi.RegisterOutputType(ResourceSystemSchedulerArrayOutput{})
	pulumi.RegisterOutputType(ResourceSystemSchedulerMapOutput{})
}
