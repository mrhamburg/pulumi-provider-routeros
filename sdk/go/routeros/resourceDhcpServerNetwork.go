// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routeros

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := routeros.NewResourceDhcpServerNetwork(ctx, "dhcpServerNetwork", &routeros.ResourceDhcpServerNetworkArgs{
//				Address:   pulumi.String("10.0.0.0/24"),
//				DnsServer: pulumi.String("1.1.1.1"),
//				Gateway:   pulumi.String("10.0.0.1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/dhcp-server/network get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:index/resourceDhcpServerNetwork:ResourceDhcpServerNetwork dhcp_server_network "*0"
//
// ```
type ResourceDhcpServerNetwork struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// The network DHCP server(s) will lease addresses from.
	Address pulumi.StringOutput `pulumi:"address"`
	// Boot filename.
	BootFileName pulumi.StringPtrOutput `pulumi:"bootFileName"`
	// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
	CapsManager pulumi.StringPtrOutput `pulumi:"capsManager"`
	Comment     pulumi.StringPtrOutput `pulumi:"comment"`
	// Add additional DHCP options from the option list.
	DhcpOption pulumi.StringPtrOutput `pulumi:"dhcpOption"`
	// Add an additional set of DHCP options.
	DhcpOptionSet pulumi.StringPtrOutput `pulumi:"dhcpOptionSet"`
	// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
	DnsNone pulumi.BoolPtrOutput `pulumi:"dnsNone"`
	// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
	DnsServer pulumi.StringPtrOutput `pulumi:"dnsServer"`
	// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// The default gateway to be used by DHCP Client.
	Gateway pulumi.StringPtrOutput `pulumi:"gateway"`
	// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
	Netmask pulumi.IntPtrOutput `pulumi:"netmask"`
	// The IP address of the next server to use in bootstrap.
	NextServer pulumi.StringPtrOutput `pulumi:"nextServer"`
	// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
	NtpServer pulumi.StringPtrOutput `pulumi:"ntpServer"`
	// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
	WinsServer pulumi.StringPtrOutput `pulumi:"winsServer"`
}

// NewResourceDhcpServerNetwork registers a new resource with the given unique name, arguments, and options.
func NewResourceDhcpServerNetwork(ctx *pulumi.Context,
	name string, args *ResourceDhcpServerNetworkArgs, opts ...pulumi.ResourceOption) (*ResourceDhcpServerNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	var resource ResourceDhcpServerNetwork
	err := ctx.RegisterResource("routeros:index/resourceDhcpServerNetwork:ResourceDhcpServerNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceDhcpServerNetwork gets an existing ResourceDhcpServerNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceDhcpServerNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceDhcpServerNetworkState, opts ...pulumi.ResourceOption) (*ResourceDhcpServerNetwork, error) {
	var resource ResourceDhcpServerNetwork
	err := ctx.ReadResource("routeros:index/resourceDhcpServerNetwork:ResourceDhcpServerNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceDhcpServerNetwork resources.
type resourceDhcpServerNetworkState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The network DHCP server(s) will lease addresses from.
	Address *string `pulumi:"address"`
	// Boot filename.
	BootFileName *string `pulumi:"bootFileName"`
	// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
	CapsManager *string `pulumi:"capsManager"`
	Comment     *string `pulumi:"comment"`
	// Add additional DHCP options from the option list.
	DhcpOption *string `pulumi:"dhcpOption"`
	// Add an additional set of DHCP options.
	DhcpOptionSet *string `pulumi:"dhcpOptionSet"`
	// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
	DnsNone *bool `pulumi:"dnsNone"`
	// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
	DnsServer *string `pulumi:"dnsServer"`
	// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
	Domain *string `pulumi:"domain"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// The default gateway to be used by DHCP Client.
	Gateway *string `pulumi:"gateway"`
	// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
	Netmask *int `pulumi:"netmask"`
	// The IP address of the next server to use in bootstrap.
	NextServer *string `pulumi:"nextServer"`
	// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
	NtpServer *string `pulumi:"ntpServer"`
	// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
	WinsServer *string `pulumi:"winsServer"`
}

type ResourceDhcpServerNetworkState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The network DHCP server(s) will lease addresses from.
	Address pulumi.StringPtrInput
	// Boot filename.
	BootFileName pulumi.StringPtrInput
	// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
	CapsManager pulumi.StringPtrInput
	Comment     pulumi.StringPtrInput
	// Add additional DHCP options from the option list.
	DhcpOption pulumi.StringPtrInput
	// Add an additional set of DHCP options.
	DhcpOptionSet pulumi.StringPtrInput
	// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
	DnsNone pulumi.BoolPtrInput
	// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
	DnsServer pulumi.StringPtrInput
	// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
	Domain pulumi.StringPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// The default gateway to be used by DHCP Client.
	Gateway pulumi.StringPtrInput
	// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
	Netmask pulumi.IntPtrInput
	// The IP address of the next server to use in bootstrap.
	NextServer pulumi.StringPtrInput
	// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
	NtpServer pulumi.StringPtrInput
	// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
	WinsServer pulumi.StringPtrInput
}

func (ResourceDhcpServerNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDhcpServerNetworkState)(nil)).Elem()
}

type resourceDhcpServerNetworkArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The network DHCP server(s) will lease addresses from.
	Address string `pulumi:"address"`
	// Boot filename.
	BootFileName *string `pulumi:"bootFileName"`
	// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
	CapsManager *string `pulumi:"capsManager"`
	Comment     *string `pulumi:"comment"`
	// Add additional DHCP options from the option list.
	DhcpOption *string `pulumi:"dhcpOption"`
	// Add an additional set of DHCP options.
	DhcpOptionSet *string `pulumi:"dhcpOptionSet"`
	// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
	DnsNone *bool `pulumi:"dnsNone"`
	// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
	DnsServer *string `pulumi:"dnsServer"`
	// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
	Domain *string `pulumi:"domain"`
	// The default gateway to be used by DHCP Client.
	Gateway *string `pulumi:"gateway"`
	// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
	Netmask *int `pulumi:"netmask"`
	// The IP address of the next server to use in bootstrap.
	NextServer *string `pulumi:"nextServer"`
	// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
	NtpServer *string `pulumi:"ntpServer"`
	// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
	WinsServer *string `pulumi:"winsServer"`
}

// The set of arguments for constructing a ResourceDhcpServerNetwork resource.
type ResourceDhcpServerNetworkArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The network DHCP server(s) will lease addresses from.
	Address pulumi.StringInput
	// Boot filename.
	BootFileName pulumi.StringPtrInput
	// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
	CapsManager pulumi.StringPtrInput
	Comment     pulumi.StringPtrInput
	// Add additional DHCP options from the option list.
	DhcpOption pulumi.StringPtrInput
	// Add an additional set of DHCP options.
	DhcpOptionSet pulumi.StringPtrInput
	// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
	DnsNone pulumi.BoolPtrInput
	// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
	DnsServer pulumi.StringPtrInput
	// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
	Domain pulumi.StringPtrInput
	// The default gateway to be used by DHCP Client.
	Gateway pulumi.StringPtrInput
	// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
	Netmask pulumi.IntPtrInput
	// The IP address of the next server to use in bootstrap.
	NextServer pulumi.StringPtrInput
	// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
	NtpServer pulumi.StringPtrInput
	// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
	WinsServer pulumi.StringPtrInput
}

func (ResourceDhcpServerNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDhcpServerNetworkArgs)(nil)).Elem()
}

type ResourceDhcpServerNetworkInput interface {
	pulumi.Input

	ToResourceDhcpServerNetworkOutput() ResourceDhcpServerNetworkOutput
	ToResourceDhcpServerNetworkOutputWithContext(ctx context.Context) ResourceDhcpServerNetworkOutput
}

func (*ResourceDhcpServerNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDhcpServerNetwork)(nil)).Elem()
}

func (i *ResourceDhcpServerNetwork) ToResourceDhcpServerNetworkOutput() ResourceDhcpServerNetworkOutput {
	return i.ToResourceDhcpServerNetworkOutputWithContext(context.Background())
}

func (i *ResourceDhcpServerNetwork) ToResourceDhcpServerNetworkOutputWithContext(ctx context.Context) ResourceDhcpServerNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDhcpServerNetworkOutput)
}

// ResourceDhcpServerNetworkArrayInput is an input type that accepts ResourceDhcpServerNetworkArray and ResourceDhcpServerNetworkArrayOutput values.
// You can construct a concrete instance of `ResourceDhcpServerNetworkArrayInput` via:
//
//	ResourceDhcpServerNetworkArray{ ResourceDhcpServerNetworkArgs{...} }
type ResourceDhcpServerNetworkArrayInput interface {
	pulumi.Input

	ToResourceDhcpServerNetworkArrayOutput() ResourceDhcpServerNetworkArrayOutput
	ToResourceDhcpServerNetworkArrayOutputWithContext(context.Context) ResourceDhcpServerNetworkArrayOutput
}

type ResourceDhcpServerNetworkArray []ResourceDhcpServerNetworkInput

func (ResourceDhcpServerNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceDhcpServerNetwork)(nil)).Elem()
}

func (i ResourceDhcpServerNetworkArray) ToResourceDhcpServerNetworkArrayOutput() ResourceDhcpServerNetworkArrayOutput {
	return i.ToResourceDhcpServerNetworkArrayOutputWithContext(context.Background())
}

func (i ResourceDhcpServerNetworkArray) ToResourceDhcpServerNetworkArrayOutputWithContext(ctx context.Context) ResourceDhcpServerNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDhcpServerNetworkArrayOutput)
}

// ResourceDhcpServerNetworkMapInput is an input type that accepts ResourceDhcpServerNetworkMap and ResourceDhcpServerNetworkMapOutput values.
// You can construct a concrete instance of `ResourceDhcpServerNetworkMapInput` via:
//
//	ResourceDhcpServerNetworkMap{ "key": ResourceDhcpServerNetworkArgs{...} }
type ResourceDhcpServerNetworkMapInput interface {
	pulumi.Input

	ToResourceDhcpServerNetworkMapOutput() ResourceDhcpServerNetworkMapOutput
	ToResourceDhcpServerNetworkMapOutputWithContext(context.Context) ResourceDhcpServerNetworkMapOutput
}

type ResourceDhcpServerNetworkMap map[string]ResourceDhcpServerNetworkInput

func (ResourceDhcpServerNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceDhcpServerNetwork)(nil)).Elem()
}

func (i ResourceDhcpServerNetworkMap) ToResourceDhcpServerNetworkMapOutput() ResourceDhcpServerNetworkMapOutput {
	return i.ToResourceDhcpServerNetworkMapOutputWithContext(context.Background())
}

func (i ResourceDhcpServerNetworkMap) ToResourceDhcpServerNetworkMapOutputWithContext(ctx context.Context) ResourceDhcpServerNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDhcpServerNetworkMapOutput)
}

type ResourceDhcpServerNetworkOutput struct{ *pulumi.OutputState }

func (ResourceDhcpServerNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDhcpServerNetwork)(nil)).Elem()
}

func (o ResourceDhcpServerNetworkOutput) ToResourceDhcpServerNetworkOutput() ResourceDhcpServerNetworkOutput {
	return o
}

func (o ResourceDhcpServerNetworkOutput) ToResourceDhcpServerNetworkOutputWithContext(ctx context.Context) ResourceDhcpServerNetworkOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ResourceDhcpServerNetworkOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ResourceDhcpServerNetworkOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// The network DHCP server(s) will lease addresses from.
func (o ResourceDhcpServerNetworkOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Boot filename.
func (o ResourceDhcpServerNetworkOutput) BootFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.BootFileName }).(pulumi.StringPtrOutput)
}

// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
func (o ResourceDhcpServerNetworkOutput) CapsManager() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.CapsManager }).(pulumi.StringPtrOutput)
}

func (o ResourceDhcpServerNetworkOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Add additional DHCP options from the option list.
func (o ResourceDhcpServerNetworkOutput) DhcpOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.DhcpOption }).(pulumi.StringPtrOutput)
}

// Add an additional set of DHCP options.
func (o ResourceDhcpServerNetworkOutput) DhcpOptionSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.DhcpOptionSet }).(pulumi.StringPtrOutput)
}

// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
func (o ResourceDhcpServerNetworkOutput) DnsNone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.BoolPtrOutput { return v.DnsNone }).(pulumi.BoolPtrOutput)
}

// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
func (o ResourceDhcpServerNetworkOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.DnsServer }).(pulumi.StringPtrOutput)
}

// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
func (o ResourceDhcpServerNetworkOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o ResourceDhcpServerNetworkOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// The default gateway to be used by DHCP Client.
func (o ResourceDhcpServerNetworkOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.Gateway }).(pulumi.StringPtrOutput)
}

// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
func (o ResourceDhcpServerNetworkOutput) Netmask() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.IntPtrOutput { return v.Netmask }).(pulumi.IntPtrOutput)
}

// The IP address of the next server to use in bootstrap.
func (o ResourceDhcpServerNetworkOutput) NextServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.NextServer }).(pulumi.StringPtrOutput)
}

// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
func (o ResourceDhcpServerNetworkOutput) NtpServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.NtpServer }).(pulumi.StringPtrOutput)
}

// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
func (o ResourceDhcpServerNetworkOutput) WinsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDhcpServerNetwork) pulumi.StringPtrOutput { return v.WinsServer }).(pulumi.StringPtrOutput)
}

type ResourceDhcpServerNetworkArrayOutput struct{ *pulumi.OutputState }

func (ResourceDhcpServerNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceDhcpServerNetwork)(nil)).Elem()
}

func (o ResourceDhcpServerNetworkArrayOutput) ToResourceDhcpServerNetworkArrayOutput() ResourceDhcpServerNetworkArrayOutput {
	return o
}

func (o ResourceDhcpServerNetworkArrayOutput) ToResourceDhcpServerNetworkArrayOutputWithContext(ctx context.Context) ResourceDhcpServerNetworkArrayOutput {
	return o
}

func (o ResourceDhcpServerNetworkArrayOutput) Index(i pulumi.IntInput) ResourceDhcpServerNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceDhcpServerNetwork {
		return vs[0].([]*ResourceDhcpServerNetwork)[vs[1].(int)]
	}).(ResourceDhcpServerNetworkOutput)
}

type ResourceDhcpServerNetworkMapOutput struct{ *pulumi.OutputState }

func (ResourceDhcpServerNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceDhcpServerNetwork)(nil)).Elem()
}

func (o ResourceDhcpServerNetworkMapOutput) ToResourceDhcpServerNetworkMapOutput() ResourceDhcpServerNetworkMapOutput {
	return o
}

func (o ResourceDhcpServerNetworkMapOutput) ToResourceDhcpServerNetworkMapOutputWithContext(ctx context.Context) ResourceDhcpServerNetworkMapOutput {
	return o
}

func (o ResourceDhcpServerNetworkMapOutput) MapIndex(k pulumi.StringInput) ResourceDhcpServerNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceDhcpServerNetwork {
		return vs[0].(map[string]*ResourceDhcpServerNetwork)[vs[1].(string)]
	}).(ResourceDhcpServerNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDhcpServerNetworkInput)(nil)).Elem(), &ResourceDhcpServerNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDhcpServerNetworkArrayInput)(nil)).Elem(), ResourceDhcpServerNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDhcpServerNetworkMapInput)(nil)).Elem(), ResourceDhcpServerNetworkMap{})
	pulumi.RegisterOutputType(ResourceDhcpServerNetworkOutput{})
	pulumi.RegisterOutputType(ResourceDhcpServerNetworkArrayOutput{})
	pulumi.RegisterOutputType(ResourceDhcpServerNetworkMapOutput{})
}
