// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routeros

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := routeros.NewResourceIPv6Address(ctx, "ipv6Address", &routeros.ResourceIPv6AddressArgs{
//				Address:   pulumi.String("fd55::1/64"),
//				Disabled:  pulumi.Bool(false),
//				Interface: pulumi.String("ether1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ipv6/address get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:index/resourceIPv6Address:ResourceIPv6Address ipv6_address "*0"
//
// ```
type ResourceIPv6Address struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Name of the actual interface the logical one is bound to.
	ActualInterface pulumi.StringOutput `pulumi:"actualInterface"`
	// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
	Address pulumi.StringOutput `pulumi:"address"`
	// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
	Advertise pulumi.BoolPtrOutput   `pulumi:"advertise"`
	Comment   pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled  pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
	Eui64 pulumi.BoolPtrOutput `pulumi:"eui64"`
	// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
	FromPool pulumi.StringPtrOutput `pulumi:"fromPool"`
	// Whether address is global.
	Global pulumi.BoolOutput `pulumi:"global"`
	// Name of the interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	Invalid   pulumi.BoolOutput   `pulumi:"invalid"`
	// Whether address is link local.
	LinkLocal pulumi.BoolOutput `pulumi:"linkLocal"`
	// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
	NoDad pulumi.BoolPtrOutput `pulumi:"noDad"`
}

// NewResourceIPv6Address registers a new resource with the given unique name, arguments, and options.
func NewResourceIPv6Address(ctx *pulumi.Context,
	name string, args *ResourceIPv6AddressArgs, opts ...pulumi.ResourceOption) (*ResourceIPv6Address, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	var resource ResourceIPv6Address
	err := ctx.RegisterResource("routeros:index/resourceIPv6Address:ResourceIPv6Address", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceIPv6Address gets an existing ResourceIPv6Address resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceIPv6Address(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceIPv6AddressState, opts ...pulumi.ResourceOption) (*ResourceIPv6Address, error) {
	var resource ResourceIPv6Address
	err := ctx.ReadResource("routeros:index/resourceIPv6Address:ResourceIPv6Address", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceIPv6Address resources.
type resourceIPv6AddressState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Name of the actual interface the logical one is bound to.
	ActualInterface *string `pulumi:"actualInterface"`
	// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
	Address *string `pulumi:"address"`
	// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
	Advertise *bool   `pulumi:"advertise"`
	Comment   *string `pulumi:"comment"`
	Disabled  *bool   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
	Eui64 *bool `pulumi:"eui64"`
	// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
	FromPool *string `pulumi:"fromPool"`
	// Whether address is global.
	Global *bool `pulumi:"global"`
	// Name of the interface.
	Interface *string `pulumi:"interface"`
	Invalid   *bool   `pulumi:"invalid"`
	// Whether address is link local.
	LinkLocal *bool `pulumi:"linkLocal"`
	// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
	NoDad *bool `pulumi:"noDad"`
}

type ResourceIPv6AddressState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Name of the actual interface the logical one is bound to.
	ActualInterface pulumi.StringPtrInput
	// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
	Address pulumi.StringPtrInput
	// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
	Advertise pulumi.BoolPtrInput
	Comment   pulumi.StringPtrInput
	Disabled  pulumi.BoolPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
	Eui64 pulumi.BoolPtrInput
	// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
	FromPool pulumi.StringPtrInput
	// Whether address is global.
	Global pulumi.BoolPtrInput
	// Name of the interface.
	Interface pulumi.StringPtrInput
	Invalid   pulumi.BoolPtrInput
	// Whether address is link local.
	LinkLocal pulumi.BoolPtrInput
	// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
	NoDad pulumi.BoolPtrInput
}

func (ResourceIPv6AddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceIPv6AddressState)(nil)).Elem()
}

type resourceIPv6AddressArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
	Address *string `pulumi:"address"`
	// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
	Advertise *bool   `pulumi:"advertise"`
	Comment   *string `pulumi:"comment"`
	Disabled  *bool   `pulumi:"disabled"`
	// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
	Eui64 *bool `pulumi:"eui64"`
	// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
	FromPool *string `pulumi:"fromPool"`
	// Name of the interface.
	Interface string `pulumi:"interface"`
	// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
	NoDad *bool `pulumi:"noDad"`
}

// The set of arguments for constructing a ResourceIPv6Address resource.
type ResourceIPv6AddressArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
	Address pulumi.StringPtrInput
	// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
	Advertise pulumi.BoolPtrInput
	Comment   pulumi.StringPtrInput
	Disabled  pulumi.BoolPtrInput
	// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
	Eui64 pulumi.BoolPtrInput
	// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
	FromPool pulumi.StringPtrInput
	// Name of the interface.
	Interface pulumi.StringInput
	// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
	NoDad pulumi.BoolPtrInput
}

func (ResourceIPv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceIPv6AddressArgs)(nil)).Elem()
}

type ResourceIPv6AddressInput interface {
	pulumi.Input

	ToResourceIPv6AddressOutput() ResourceIPv6AddressOutput
	ToResourceIPv6AddressOutputWithContext(ctx context.Context) ResourceIPv6AddressOutput
}

func (*ResourceIPv6Address) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIPv6Address)(nil)).Elem()
}

func (i *ResourceIPv6Address) ToResourceIPv6AddressOutput() ResourceIPv6AddressOutput {
	return i.ToResourceIPv6AddressOutputWithContext(context.Background())
}

func (i *ResourceIPv6Address) ToResourceIPv6AddressOutputWithContext(ctx context.Context) ResourceIPv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIPv6AddressOutput)
}

// ResourceIPv6AddressArrayInput is an input type that accepts ResourceIPv6AddressArray and ResourceIPv6AddressArrayOutput values.
// You can construct a concrete instance of `ResourceIPv6AddressArrayInput` via:
//
//	ResourceIPv6AddressArray{ ResourceIPv6AddressArgs{...} }
type ResourceIPv6AddressArrayInput interface {
	pulumi.Input

	ToResourceIPv6AddressArrayOutput() ResourceIPv6AddressArrayOutput
	ToResourceIPv6AddressArrayOutputWithContext(context.Context) ResourceIPv6AddressArrayOutput
}

type ResourceIPv6AddressArray []ResourceIPv6AddressInput

func (ResourceIPv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceIPv6Address)(nil)).Elem()
}

func (i ResourceIPv6AddressArray) ToResourceIPv6AddressArrayOutput() ResourceIPv6AddressArrayOutput {
	return i.ToResourceIPv6AddressArrayOutputWithContext(context.Background())
}

func (i ResourceIPv6AddressArray) ToResourceIPv6AddressArrayOutputWithContext(ctx context.Context) ResourceIPv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIPv6AddressArrayOutput)
}

// ResourceIPv6AddressMapInput is an input type that accepts ResourceIPv6AddressMap and ResourceIPv6AddressMapOutput values.
// You can construct a concrete instance of `ResourceIPv6AddressMapInput` via:
//
//	ResourceIPv6AddressMap{ "key": ResourceIPv6AddressArgs{...} }
type ResourceIPv6AddressMapInput interface {
	pulumi.Input

	ToResourceIPv6AddressMapOutput() ResourceIPv6AddressMapOutput
	ToResourceIPv6AddressMapOutputWithContext(context.Context) ResourceIPv6AddressMapOutput
}

type ResourceIPv6AddressMap map[string]ResourceIPv6AddressInput

func (ResourceIPv6AddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceIPv6Address)(nil)).Elem()
}

func (i ResourceIPv6AddressMap) ToResourceIPv6AddressMapOutput() ResourceIPv6AddressMapOutput {
	return i.ToResourceIPv6AddressMapOutputWithContext(context.Background())
}

func (i ResourceIPv6AddressMap) ToResourceIPv6AddressMapOutputWithContext(ctx context.Context) ResourceIPv6AddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIPv6AddressMapOutput)
}

type ResourceIPv6AddressOutput struct{ *pulumi.OutputState }

func (ResourceIPv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIPv6Address)(nil)).Elem()
}

func (o ResourceIPv6AddressOutput) ToResourceIPv6AddressOutput() ResourceIPv6AddressOutput {
	return o
}

func (o ResourceIPv6AddressOutput) ToResourceIPv6AddressOutputWithContext(ctx context.Context) ResourceIPv6AddressOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ResourceIPv6AddressOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ResourceIPv6AddressOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Name of the actual interface the logical one is bound to.
func (o ResourceIPv6AddressOutput) ActualInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.StringOutput { return v.ActualInterface }).(pulumi.StringOutput)
}

// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
func (o ResourceIPv6AddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
func (o ResourceIPv6AddressOutput) Advertise() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.BoolPtrOutput { return v.Advertise }).(pulumi.BoolPtrOutput)
}

func (o ResourceIPv6AddressOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o ResourceIPv6AddressOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o ResourceIPv6AddressOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
func (o ResourceIPv6AddressOutput) Eui64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.BoolPtrOutput { return v.Eui64 }).(pulumi.BoolPtrOutput)
}

// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
func (o ResourceIPv6AddressOutput) FromPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.StringPtrOutput { return v.FromPool }).(pulumi.StringPtrOutput)
}

// Whether address is global.
func (o ResourceIPv6AddressOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.BoolOutput { return v.Global }).(pulumi.BoolOutput)
}

// Name of the interface.
func (o ResourceIPv6AddressOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o ResourceIPv6AddressOutput) Invalid() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.BoolOutput { return v.Invalid }).(pulumi.BoolOutput)
}

// Whether address is link local.
func (o ResourceIPv6AddressOutput) LinkLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.BoolOutput { return v.LinkLocal }).(pulumi.BoolOutput)
}

// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
func (o ResourceIPv6AddressOutput) NoDad() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Address) pulumi.BoolPtrOutput { return v.NoDad }).(pulumi.BoolPtrOutput)
}

type ResourceIPv6AddressArrayOutput struct{ *pulumi.OutputState }

func (ResourceIPv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceIPv6Address)(nil)).Elem()
}

func (o ResourceIPv6AddressArrayOutput) ToResourceIPv6AddressArrayOutput() ResourceIPv6AddressArrayOutput {
	return o
}

func (o ResourceIPv6AddressArrayOutput) ToResourceIPv6AddressArrayOutputWithContext(ctx context.Context) ResourceIPv6AddressArrayOutput {
	return o
}

func (o ResourceIPv6AddressArrayOutput) Index(i pulumi.IntInput) ResourceIPv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceIPv6Address {
		return vs[0].([]*ResourceIPv6Address)[vs[1].(int)]
	}).(ResourceIPv6AddressOutput)
}

type ResourceIPv6AddressMapOutput struct{ *pulumi.OutputState }

func (ResourceIPv6AddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceIPv6Address)(nil)).Elem()
}

func (o ResourceIPv6AddressMapOutput) ToResourceIPv6AddressMapOutput() ResourceIPv6AddressMapOutput {
	return o
}

func (o ResourceIPv6AddressMapOutput) ToResourceIPv6AddressMapOutputWithContext(ctx context.Context) ResourceIPv6AddressMapOutput {
	return o
}

func (o ResourceIPv6AddressMapOutput) MapIndex(k pulumi.StringInput) ResourceIPv6AddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceIPv6Address {
		return vs[0].(map[string]*ResourceIPv6Address)[vs[1].(string)]
	}).(ResourceIPv6AddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceIPv6AddressInput)(nil)).Elem(), &ResourceIPv6Address{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceIPv6AddressArrayInput)(nil)).Elem(), ResourceIPv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceIPv6AddressMapInput)(nil)).Elem(), ResourceIPv6AddressMap{})
	pulumi.RegisterOutputType(ResourceIPv6AddressOutput{})
	pulumi.RegisterOutputType(ResourceIPv6AddressArrayOutput{})
	pulumi.RegisterOutputType(ResourceIPv6AddressMapOutput{})
}
