// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iface

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-routeros/sdk/go/routeros"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "routeros:Iface/bridge:Bridge":
		r = &Bridge{}
	case "routeros:Iface/bridgePort:BridgePort":
		r = &BridgePort{}
	case "routeros:Iface/bridgeVlan:BridgeVlan":
		r = &BridgeVlan{}
	case "routeros:Iface/gre:Gre":
		r = &Gre{}
	case "routeros:Iface/interfaceBridge:InterfaceBridge":
		r = &InterfaceBridge{}
	case "routeros:Iface/interfaceBridgePort:InterfaceBridgePort":
		r = &InterfaceBridgePort{}
	case "routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan":
		r = &InterfaceBridgeVlan{}
	case "routeros:Iface/interfaceGre:InterfaceGre":
		r = &InterfaceGre{}
	case "routeros:Iface/interfaceVlan:InterfaceVlan":
		r = &InterfaceVlan{}
	case "routeros:Iface/interfaceVrrp:InterfaceVrrp":
		r = &InterfaceVrrp{}
	case "routeros:Iface/interfaceWireguard:InterfaceWireguard":
		r = &InterfaceWireguard{}
	case "routeros:Iface/interfaceWireguardPeer:InterfaceWireguardPeer":
		r = &InterfaceWireguardPeer{}
	case "routeros:Iface/list:List":
		r = &List{}
	case "routeros:Iface/listMember:ListMember":
		r = &ListMember{}
	case "routeros:Iface/openVpnServer:OpenVpnServer":
		r = &OpenVpnServer{}
	case "routeros:Iface/vlan:Vlan":
		r = &Vlan{}
	case "routeros:Iface/vrrp:Vrrp":
		r = &Vrrp{}
	case "routeros:Iface/wireguard:Wireguard":
		r = &Wireguard{}
	case "routeros:Iface/wireguardPeer:WireguardPeer":
		r = &WireguardPeer{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := routeros.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/bridge",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/bridgePort",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/bridgeVlan",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/gre",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/interfaceBridge",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/interfaceBridgePort",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/interfaceBridgeVlan",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/interfaceGre",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/interfaceVlan",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/interfaceVrrp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/interfaceWireguard",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/interfaceWireguardPeer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/list",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/listMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/openVpnServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/vlan",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/vrrp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/wireguard",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"Iface/wireguardPeer",
		&module{version},
	)
}
