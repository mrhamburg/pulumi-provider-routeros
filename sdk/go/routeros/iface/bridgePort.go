// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iface

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Iface.BridgePort (Resource)
//
// ***
//
// #### This is an alias for backwards compatibility between plugin versions.
// Please see documentation for Iface.InterfaceBridgePort
type BridgePort struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring
	// bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when
	// protocol-mode is set to rstp or mstp and edge is set to no.
	AutoIsolate pulumi.BoolPtrOutput `pulumi:"autoIsolate"`
	// This property has no effect when protocol-mode is set to none.
	BpduGuard pulumi.BoolPtrOutput `pulumi:"bpduGuard"`
	Bridge    pulumi.StringOutput  `pulumi:"bridge"`
	// When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on
	// egress ports.
	BroadcastFlood pulumi.BoolPtrOutput   `pulumi:"broadcastFlood"`
	Comment        pulumi.StringPtrOutput `pulumi:"comment"`
	DebugInfo      pulumi.StringOutput    `pulumi:"debugInfo"`
	// Root bridge ID (bridge priority and the bridge MAC address).
	DesignatedBridge pulumi.StringOutput `pulumi:"designatedBridge"`
	// Designated cost.
	DesignatedCost pulumi.StringOutput `pulumi:"designatedCost"`
	// Designated port number.
	DesignatedPortNumber pulumi.IntOutput     `pulumi:"designatedPortNumber"`
	Disabled             pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other
	// bridges attached.
	Edge pulumi.StringPtrOutput `pulumi:"edge"`
	// Whether port is an edge port or not.
	EdgePort pulumi.BoolOutput `pulumi:"edgePort"`
	// Whether port is set to automatically detect edge ports.
	EdgePortDiscovery pulumi.BoolOutput `pulumi:"edgePortDiscovery"`
	// Whether registration table is used instead of forwarding data base.
	ExternalFdbStatus pulumi.BoolOutput `pulumi:"externalFdbStatus"`
	// Enables IGMP Fast leave feature on the port.
	FastLeave pulumi.BoolPtrOutput `pulumi:"fastLeave"`
	// Shows if the port is not blocked by (R/M)STP.
	Forwarding pulumi.BoolOutput `pulumi:"forwarding"`
	// Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
	FrameTypes pulumi.StringPtrOutput `pulumi:"frameTypes"`
	// Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from
	// sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware
	// offloading. This value is integer '0'..'429496729' or 'none'.
	Horizon pulumi.StringPtrOutput `pulumi:"horizon"`
	// Enable or disable Hardware Offloading of the interface.
	Hw pulumi.BoolOutput `pulumi:"hw"`
	// Hardware offloading state.
	HwOffload pulumi.BoolOutput `pulumi:"hwOffload"`
	// Switch chip used by the port.
	HwOffloadGroup pulumi.StringOutput `pulumi:"hwOffloadGroup"`
	Inactive       pulumi.BoolOutput   `pulumi:"inactive"`
	// Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
	// bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
	// property only has effect when vlan-filtering is set to yes.
	IngressFiltering pulumi.BoolOutput `pulumi:"ingressFiltering"`
	// Name of the interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
	InternalPathCost pulumi.IntPtrOutput `pulumi:"internalPathCost"`
	// Changes MAC learning behaviour on a bridge port
	Learn pulumi.StringPtrOutput `pulumi:"learn"`
	// Shows whether the port is capable of learning MAC addresses.
	Learning pulumi.BoolOutput `pulumi:"learning"`
	// Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
	MulticastRouter pulumi.StringPtrOutput `pulumi:"multicastRouter"`
	Nextid          pulumi.StringOutput    `pulumi:"nextid"`
	// Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between
	// regions. This property has no effect when protocol-mode is set to none.
	PathCost pulumi.StringPtrOutput `pulumi:"pathCost"`
	// Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of
	// failure. This property has no effect when protocol-mode is set to none.
	PointToPoint pulumi.StringPtrOutput `pulumi:"pointToPoint"`
	// Whether the port is connected to a bridge port using full-duplex (true) or half-duplex (false).
	PointToPointPort pulumi.BoolOutput `pulumi:"pointToPointPort"`
	// Port number will be assigned in the order that ports got added to the bridge, but this is only true until reboot. After
	// reboot internal numbering will be used.
	PortNumber pulumi.IntOutput `pulumi:"portNumber"`
	// The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between
	// regions.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when
	// vlan-filtering is set to yes.
	Pvid pulumi.IntOutput `pulumi:"pvid"`
	// Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect
	// when protocol-mode is set to mstp.
	RestrictedRole pulumi.BoolPtrOutput `pulumi:"restrictedRole"`
	// Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to
	// propagate. This property only has effect when protocol-mode is set to mstp.
	RestrictedTcn pulumi.BoolPtrOutput `pulumi:"restrictedTcn"`
	// (R/M)STP algorithm assigned role of the port
	Role pulumi.StringOutput `pulumi:"role"`
	// The total cost of the path to the root-bridge.
	RootPathCost pulumi.IntOutput `pulumi:"rootPathCost"`
	// Whether the port is sending RSTP or MSTP BPDU types. A port will transit to STP type when RSTP/MSTP enabled port
	// receives a STP BPDU
	SendingRstp pulumi.StringOutput `pulumi:"sendingRstp"`
	// Port status ('in-bridge' - port is enabled).
	Status pulumi.StringOutput `pulumi:"status"`
	// Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag
	// regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use
	// EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
	TagStacking pulumi.BoolPtrOutput `pulumi:"tagStacking"`
	// When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized
	// servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
	Trusted pulumi.BoolPtrOutput `pulumi:"trusted"`
	// When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
	UnknownMulticastFlood pulumi.BoolPtrOutput `pulumi:"unknownMulticastFlood"`
	// When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
	UnknownUnicastFlood pulumi.BoolPtrOutput `pulumi:"unknownUnicastFlood"`
}

// NewBridgePort registers a new resource with the given unique name, arguments, and options.
func NewBridgePort(ctx *pulumi.Context,
	name string, args *BridgePortArgs, opts ...pulumi.ResourceOption) (*BridgePort, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bridge == nil {
		return nil, errors.New("invalid value for required argument 'Bridge'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Pvid == nil {
		return nil, errors.New("invalid value for required argument 'Pvid'")
	}
	var resource BridgePort
	err := ctx.RegisterResource("routeros:Iface/bridgePort:BridgePort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBridgePort gets an existing BridgePort resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBridgePort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BridgePortState, opts ...pulumi.ResourceOption) (*BridgePort, error) {
	var resource BridgePort
	err := ctx.ReadResource("routeros:Iface/bridgePort:BridgePort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BridgePort resources.
type bridgePortState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring
	// bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when
	// protocol-mode is set to rstp or mstp and edge is set to no.
	AutoIsolate *bool `pulumi:"autoIsolate"`
	// This property has no effect when protocol-mode is set to none.
	BpduGuard *bool   `pulumi:"bpduGuard"`
	Bridge    *string `pulumi:"bridge"`
	// When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on
	// egress ports.
	BroadcastFlood *bool   `pulumi:"broadcastFlood"`
	Comment        *string `pulumi:"comment"`
	DebugInfo      *string `pulumi:"debugInfo"`
	// Root bridge ID (bridge priority and the bridge MAC address).
	DesignatedBridge *string `pulumi:"designatedBridge"`
	// Designated cost.
	DesignatedCost *string `pulumi:"designatedCost"`
	// Designated port number.
	DesignatedPortNumber *int  `pulumi:"designatedPortNumber"`
	Disabled             *bool `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic *bool `pulumi:"dynamic"`
	// Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other
	// bridges attached.
	Edge *string `pulumi:"edge"`
	// Whether port is an edge port or not.
	EdgePort *bool `pulumi:"edgePort"`
	// Whether port is set to automatically detect edge ports.
	EdgePortDiscovery *bool `pulumi:"edgePortDiscovery"`
	// Whether registration table is used instead of forwarding data base.
	ExternalFdbStatus *bool `pulumi:"externalFdbStatus"`
	// Enables IGMP Fast leave feature on the port.
	FastLeave *bool `pulumi:"fastLeave"`
	// Shows if the port is not blocked by (R/M)STP.
	Forwarding *bool `pulumi:"forwarding"`
	// Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
	FrameTypes *string `pulumi:"frameTypes"`
	// Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from
	// sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware
	// offloading. This value is integer '0'..'429496729' or 'none'.
	Horizon *string `pulumi:"horizon"`
	// Enable or disable Hardware Offloading of the interface.
	Hw *bool `pulumi:"hw"`
	// Hardware offloading state.
	HwOffload *bool `pulumi:"hwOffload"`
	// Switch chip used by the port.
	HwOffloadGroup *string `pulumi:"hwOffloadGroup"`
	Inactive       *bool   `pulumi:"inactive"`
	// Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
	// bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
	// property only has effect when vlan-filtering is set to yes.
	IngressFiltering *bool `pulumi:"ingressFiltering"`
	// Name of the interface.
	Interface *string `pulumi:"interface"`
	// Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
	InternalPathCost *int `pulumi:"internalPathCost"`
	// Changes MAC learning behaviour on a bridge port
	Learn *string `pulumi:"learn"`
	// Shows whether the port is capable of learning MAC addresses.
	Learning *bool `pulumi:"learning"`
	// Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
	MulticastRouter *string `pulumi:"multicastRouter"`
	Nextid          *string `pulumi:"nextid"`
	// Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between
	// regions. This property has no effect when protocol-mode is set to none.
	PathCost *string `pulumi:"pathCost"`
	// Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of
	// failure. This property has no effect when protocol-mode is set to none.
	PointToPoint *string `pulumi:"pointToPoint"`
	// Whether the port is connected to a bridge port using full-duplex (true) or half-duplex (false).
	PointToPointPort *bool `pulumi:"pointToPointPort"`
	// Port number will be assigned in the order that ports got added to the bridge, but this is only true until reboot. After
	// reboot internal numbering will be used.
	PortNumber *int `pulumi:"portNumber"`
	// The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between
	// regions.
	Priority *string `pulumi:"priority"`
	// ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when
	// vlan-filtering is set to yes.
	Pvid *int `pulumi:"pvid"`
	// Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect
	// when protocol-mode is set to mstp.
	RestrictedRole *bool `pulumi:"restrictedRole"`
	// Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to
	// propagate. This property only has effect when protocol-mode is set to mstp.
	RestrictedTcn *bool `pulumi:"restrictedTcn"`
	// (R/M)STP algorithm assigned role of the port
	Role *string `pulumi:"role"`
	// The total cost of the path to the root-bridge.
	RootPathCost *int `pulumi:"rootPathCost"`
	// Whether the port is sending RSTP or MSTP BPDU types. A port will transit to STP type when RSTP/MSTP enabled port
	// receives a STP BPDU
	SendingRstp *string `pulumi:"sendingRstp"`
	// Port status ('in-bridge' - port is enabled).
	Status *string `pulumi:"status"`
	// Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag
	// regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use
	// EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
	TagStacking *bool `pulumi:"tagStacking"`
	// When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized
	// servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
	Trusted *bool `pulumi:"trusted"`
	// When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
	UnknownMulticastFlood *bool `pulumi:"unknownMulticastFlood"`
	// When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
	UnknownUnicastFlood *bool `pulumi:"unknownUnicastFlood"`
}

type BridgePortState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring
	// bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when
	// protocol-mode is set to rstp or mstp and edge is set to no.
	AutoIsolate pulumi.BoolPtrInput
	// This property has no effect when protocol-mode is set to none.
	BpduGuard pulumi.BoolPtrInput
	Bridge    pulumi.StringPtrInput
	// When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on
	// egress ports.
	BroadcastFlood pulumi.BoolPtrInput
	Comment        pulumi.StringPtrInput
	DebugInfo      pulumi.StringPtrInput
	// Root bridge ID (bridge priority and the bridge MAC address).
	DesignatedBridge pulumi.StringPtrInput
	// Designated cost.
	DesignatedCost pulumi.StringPtrInput
	// Designated port number.
	DesignatedPortNumber pulumi.IntPtrInput
	Disabled             pulumi.BoolPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic pulumi.BoolPtrInput
	// Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other
	// bridges attached.
	Edge pulumi.StringPtrInput
	// Whether port is an edge port or not.
	EdgePort pulumi.BoolPtrInput
	// Whether port is set to automatically detect edge ports.
	EdgePortDiscovery pulumi.BoolPtrInput
	// Whether registration table is used instead of forwarding data base.
	ExternalFdbStatus pulumi.BoolPtrInput
	// Enables IGMP Fast leave feature on the port.
	FastLeave pulumi.BoolPtrInput
	// Shows if the port is not blocked by (R/M)STP.
	Forwarding pulumi.BoolPtrInput
	// Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
	FrameTypes pulumi.StringPtrInput
	// Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from
	// sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware
	// offloading. This value is integer '0'..'429496729' or 'none'.
	Horizon pulumi.StringPtrInput
	// Enable or disable Hardware Offloading of the interface.
	Hw pulumi.BoolPtrInput
	// Hardware offloading state.
	HwOffload pulumi.BoolPtrInput
	// Switch chip used by the port.
	HwOffloadGroup pulumi.StringPtrInput
	Inactive       pulumi.BoolPtrInput
	// Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
	// bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
	// property only has effect when vlan-filtering is set to yes.
	IngressFiltering pulumi.BoolPtrInput
	// Name of the interface.
	Interface pulumi.StringPtrInput
	// Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
	InternalPathCost pulumi.IntPtrInput
	// Changes MAC learning behaviour on a bridge port
	Learn pulumi.StringPtrInput
	// Shows whether the port is capable of learning MAC addresses.
	Learning pulumi.BoolPtrInput
	// Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
	MulticastRouter pulumi.StringPtrInput
	Nextid          pulumi.StringPtrInput
	// Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between
	// regions. This property has no effect when protocol-mode is set to none.
	PathCost pulumi.StringPtrInput
	// Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of
	// failure. This property has no effect when protocol-mode is set to none.
	PointToPoint pulumi.StringPtrInput
	// Whether the port is connected to a bridge port using full-duplex (true) or half-duplex (false).
	PointToPointPort pulumi.BoolPtrInput
	// Port number will be assigned in the order that ports got added to the bridge, but this is only true until reboot. After
	// reboot internal numbering will be used.
	PortNumber pulumi.IntPtrInput
	// The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between
	// regions.
	Priority pulumi.StringPtrInput
	// ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when
	// vlan-filtering is set to yes.
	Pvid pulumi.IntPtrInput
	// Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect
	// when protocol-mode is set to mstp.
	RestrictedRole pulumi.BoolPtrInput
	// Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to
	// propagate. This property only has effect when protocol-mode is set to mstp.
	RestrictedTcn pulumi.BoolPtrInput
	// (R/M)STP algorithm assigned role of the port
	Role pulumi.StringPtrInput
	// The total cost of the path to the root-bridge.
	RootPathCost pulumi.IntPtrInput
	// Whether the port is sending RSTP or MSTP BPDU types. A port will transit to STP type when RSTP/MSTP enabled port
	// receives a STP BPDU
	SendingRstp pulumi.StringPtrInput
	// Port status ('in-bridge' - port is enabled).
	Status pulumi.StringPtrInput
	// Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag
	// regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use
	// EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
	TagStacking pulumi.BoolPtrInput
	// When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized
	// servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
	Trusted pulumi.BoolPtrInput
	// When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
	UnknownMulticastFlood pulumi.BoolPtrInput
	// When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
	UnknownUnicastFlood pulumi.BoolPtrInput
}

func (BridgePortState) ElementType() reflect.Type {
	return reflect.TypeOf((*bridgePortState)(nil)).Elem()
}

type bridgePortArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring
	// bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when
	// protocol-mode is set to rstp or mstp and edge is set to no.
	AutoIsolate *bool `pulumi:"autoIsolate"`
	// This property has no effect when protocol-mode is set to none.
	BpduGuard *bool  `pulumi:"bpduGuard"`
	Bridge    string `pulumi:"bridge"`
	// When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on
	// egress ports.
	BroadcastFlood *bool   `pulumi:"broadcastFlood"`
	Comment        *string `pulumi:"comment"`
	Disabled       *bool   `pulumi:"disabled"`
	// Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other
	// bridges attached.
	Edge *string `pulumi:"edge"`
	// Enables IGMP Fast leave feature on the port.
	FastLeave *bool `pulumi:"fastLeave"`
	// Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
	FrameTypes *string `pulumi:"frameTypes"`
	// Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from
	// sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware
	// offloading. This value is integer '0'..'429496729' or 'none'.
	Horizon *string `pulumi:"horizon"`
	// Enable or disable Hardware Offloading of the interface.
	Hw *bool `pulumi:"hw"`
	// Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
	// bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
	// property only has effect when vlan-filtering is set to yes.
	IngressFiltering *bool `pulumi:"ingressFiltering"`
	// Name of the interface.
	Interface string `pulumi:"interface"`
	// Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
	InternalPathCost *int `pulumi:"internalPathCost"`
	// Changes MAC learning behaviour on a bridge port
	Learn *string `pulumi:"learn"`
	// Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
	MulticastRouter *string `pulumi:"multicastRouter"`
	// Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between
	// regions. This property has no effect when protocol-mode is set to none.
	PathCost *string `pulumi:"pathCost"`
	// Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of
	// failure. This property has no effect when protocol-mode is set to none.
	PointToPoint *string `pulumi:"pointToPoint"`
	// The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between
	// regions.
	Priority *string `pulumi:"priority"`
	// ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when
	// vlan-filtering is set to yes.
	Pvid int `pulumi:"pvid"`
	// Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect
	// when protocol-mode is set to mstp.
	RestrictedRole *bool `pulumi:"restrictedRole"`
	// Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to
	// propagate. This property only has effect when protocol-mode is set to mstp.
	RestrictedTcn *bool `pulumi:"restrictedTcn"`
	// Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag
	// regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use
	// EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
	TagStacking *bool `pulumi:"tagStacking"`
	// When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized
	// servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
	Trusted *bool `pulumi:"trusted"`
	// When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
	UnknownMulticastFlood *bool `pulumi:"unknownMulticastFlood"`
	// When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
	UnknownUnicastFlood *bool `pulumi:"unknownUnicastFlood"`
}

// The set of arguments for constructing a BridgePort resource.
type BridgePortArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring
	// bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when
	// protocol-mode is set to rstp or mstp and edge is set to no.
	AutoIsolate pulumi.BoolPtrInput
	// This property has no effect when protocol-mode is set to none.
	BpduGuard pulumi.BoolPtrInput
	Bridge    pulumi.StringInput
	// When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on
	// egress ports.
	BroadcastFlood pulumi.BoolPtrInput
	Comment        pulumi.StringPtrInput
	Disabled       pulumi.BoolPtrInput
	// Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other
	// bridges attached.
	Edge pulumi.StringPtrInput
	// Enables IGMP Fast leave feature on the port.
	FastLeave pulumi.BoolPtrInput
	// Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
	FrameTypes pulumi.StringPtrInput
	// Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from
	// sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware
	// offloading. This value is integer '0'..'429496729' or 'none'.
	Horizon pulumi.StringPtrInput
	// Enable or disable Hardware Offloading of the interface.
	Hw pulumi.BoolPtrInput
	// Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
	// bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
	// property only has effect when vlan-filtering is set to yes.
	IngressFiltering pulumi.BoolPtrInput
	// Name of the interface.
	Interface pulumi.StringInput
	// Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
	InternalPathCost pulumi.IntPtrInput
	// Changes MAC learning behaviour on a bridge port
	Learn pulumi.StringPtrInput
	// Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
	MulticastRouter pulumi.StringPtrInput
	// Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between
	// regions. This property has no effect when protocol-mode is set to none.
	PathCost pulumi.StringPtrInput
	// Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of
	// failure. This property has no effect when protocol-mode is set to none.
	PointToPoint pulumi.StringPtrInput
	// The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between
	// regions.
	Priority pulumi.StringPtrInput
	// ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when
	// vlan-filtering is set to yes.
	Pvid pulumi.IntInput
	// Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect
	// when protocol-mode is set to mstp.
	RestrictedRole pulumi.BoolPtrInput
	// Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to
	// propagate. This property only has effect when protocol-mode is set to mstp.
	RestrictedTcn pulumi.BoolPtrInput
	// Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag
	// regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use
	// EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
	TagStacking pulumi.BoolPtrInput
	// When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized
	// servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
	Trusted pulumi.BoolPtrInput
	// When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
	UnknownMulticastFlood pulumi.BoolPtrInput
	// When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
	UnknownUnicastFlood pulumi.BoolPtrInput
}

func (BridgePortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bridgePortArgs)(nil)).Elem()
}

type BridgePortInput interface {
	pulumi.Input

	ToBridgePortOutput() BridgePortOutput
	ToBridgePortOutputWithContext(ctx context.Context) BridgePortOutput
}

func (*BridgePort) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgePort)(nil)).Elem()
}

func (i *BridgePort) ToBridgePortOutput() BridgePortOutput {
	return i.ToBridgePortOutputWithContext(context.Background())
}

func (i *BridgePort) ToBridgePortOutputWithContext(ctx context.Context) BridgePortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgePortOutput)
}

// BridgePortArrayInput is an input type that accepts BridgePortArray and BridgePortArrayOutput values.
// You can construct a concrete instance of `BridgePortArrayInput` via:
//
//	BridgePortArray{ BridgePortArgs{...} }
type BridgePortArrayInput interface {
	pulumi.Input

	ToBridgePortArrayOutput() BridgePortArrayOutput
	ToBridgePortArrayOutputWithContext(context.Context) BridgePortArrayOutput
}

type BridgePortArray []BridgePortInput

func (BridgePortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BridgePort)(nil)).Elem()
}

func (i BridgePortArray) ToBridgePortArrayOutput() BridgePortArrayOutput {
	return i.ToBridgePortArrayOutputWithContext(context.Background())
}

func (i BridgePortArray) ToBridgePortArrayOutputWithContext(ctx context.Context) BridgePortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgePortArrayOutput)
}

// BridgePortMapInput is an input type that accepts BridgePortMap and BridgePortMapOutput values.
// You can construct a concrete instance of `BridgePortMapInput` via:
//
//	BridgePortMap{ "key": BridgePortArgs{...} }
type BridgePortMapInput interface {
	pulumi.Input

	ToBridgePortMapOutput() BridgePortMapOutput
	ToBridgePortMapOutputWithContext(context.Context) BridgePortMapOutput
}

type BridgePortMap map[string]BridgePortInput

func (BridgePortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BridgePort)(nil)).Elem()
}

func (i BridgePortMap) ToBridgePortMapOutput() BridgePortMapOutput {
	return i.ToBridgePortMapOutputWithContext(context.Background())
}

func (i BridgePortMap) ToBridgePortMapOutputWithContext(ctx context.Context) BridgePortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgePortMapOutput)
}

type BridgePortOutput struct{ *pulumi.OutputState }

func (BridgePortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgePort)(nil)).Elem()
}

func (o BridgePortOutput) ToBridgePortOutput() BridgePortOutput {
	return o
}

func (o BridgePortOutput) ToBridgePortOutputWithContext(ctx context.Context) BridgePortOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o BridgePortOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o BridgePortOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring
// bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when
// protocol-mode is set to rstp or mstp and edge is set to no.
func (o BridgePortOutput) AutoIsolate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.AutoIsolate }).(pulumi.BoolPtrOutput)
}

// This property has no effect when protocol-mode is set to none.
func (o BridgePortOutput) BpduGuard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.BpduGuard }).(pulumi.BoolPtrOutput)
}

func (o BridgePortOutput) Bridge() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringOutput { return v.Bridge }).(pulumi.StringOutput)
}

// When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on
// egress ports.
func (o BridgePortOutput) BroadcastFlood() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.BroadcastFlood }).(pulumi.BoolPtrOutput)
}

func (o BridgePortOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o BridgePortOutput) DebugInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringOutput { return v.DebugInfo }).(pulumi.StringOutput)
}

// Root bridge ID (bridge priority and the bridge MAC address).
func (o BridgePortOutput) DesignatedBridge() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringOutput { return v.DesignatedBridge }).(pulumi.StringOutput)
}

// Designated cost.
func (o BridgePortOutput) DesignatedCost() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringOutput { return v.DesignatedCost }).(pulumi.StringOutput)
}

// Designated port number.
func (o BridgePortOutput) DesignatedPortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.IntOutput { return v.DesignatedPortNumber }).(pulumi.IntOutput)
}

func (o BridgePortOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
// modified.
func (o BridgePortOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other
// bridges attached.
func (o BridgePortOutput) Edge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringPtrOutput { return v.Edge }).(pulumi.StringPtrOutput)
}

// Whether port is an edge port or not.
func (o BridgePortOutput) EdgePort() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.EdgePort }).(pulumi.BoolOutput)
}

// Whether port is set to automatically detect edge ports.
func (o BridgePortOutput) EdgePortDiscovery() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.EdgePortDiscovery }).(pulumi.BoolOutput)
}

// Whether registration table is used instead of forwarding data base.
func (o BridgePortOutput) ExternalFdbStatus() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.ExternalFdbStatus }).(pulumi.BoolOutput)
}

// Enables IGMP Fast leave feature on the port.
func (o BridgePortOutput) FastLeave() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.FastLeave }).(pulumi.BoolPtrOutput)
}

// Shows if the port is not blocked by (R/M)STP.
func (o BridgePortOutput) Forwarding() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.Forwarding }).(pulumi.BoolOutput)
}

// Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
func (o BridgePortOutput) FrameTypes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringPtrOutput { return v.FrameTypes }).(pulumi.StringPtrOutput)
}

// Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from
// sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware
// offloading. This value is integer '0'..'429496729' or 'none'.
func (o BridgePortOutput) Horizon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringPtrOutput { return v.Horizon }).(pulumi.StringPtrOutput)
}

// Enable or disable Hardware Offloading of the interface.
func (o BridgePortOutput) Hw() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.Hw }).(pulumi.BoolOutput)
}

// Hardware offloading state.
func (o BridgePortOutput) HwOffload() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.HwOffload }).(pulumi.BoolOutput)
}

// Switch chip used by the port.
func (o BridgePortOutput) HwOffloadGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringOutput { return v.HwOffloadGroup }).(pulumi.StringOutput)
}

func (o BridgePortOutput) Inactive() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.Inactive }).(pulumi.BoolOutput)
}

// Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
// bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
// property only has effect when vlan-filtering is set to yes.
func (o BridgePortOutput) IngressFiltering() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.IngressFiltering }).(pulumi.BoolOutput)
}

// Name of the interface.
func (o BridgePortOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
func (o BridgePortOutput) InternalPathCost() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.IntPtrOutput { return v.InternalPathCost }).(pulumi.IntPtrOutput)
}

// Changes MAC learning behaviour on a bridge port
func (o BridgePortOutput) Learn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringPtrOutput { return v.Learn }).(pulumi.StringPtrOutput)
}

// Shows whether the port is capable of learning MAC addresses.
func (o BridgePortOutput) Learning() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.Learning }).(pulumi.BoolOutput)
}

// Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
func (o BridgePortOutput) MulticastRouter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringPtrOutput { return v.MulticastRouter }).(pulumi.StringPtrOutput)
}

func (o BridgePortOutput) Nextid() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringOutput { return v.Nextid }).(pulumi.StringOutput)
}

// Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between
// regions. This property has no effect when protocol-mode is set to none.
func (o BridgePortOutput) PathCost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringPtrOutput { return v.PathCost }).(pulumi.StringPtrOutput)
}

// Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of
// failure. This property has no effect when protocol-mode is set to none.
func (o BridgePortOutput) PointToPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringPtrOutput { return v.PointToPoint }).(pulumi.StringPtrOutput)
}

// Whether the port is connected to a bridge port using full-duplex (true) or half-duplex (false).
func (o BridgePortOutput) PointToPointPort() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolOutput { return v.PointToPointPort }).(pulumi.BoolOutput)
}

// Port number will be assigned in the order that ports got added to the bridge, but this is only true until reboot. After
// reboot internal numbering will be used.
func (o BridgePortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.IntOutput { return v.PortNumber }).(pulumi.IntOutput)
}

// The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between
// regions.
func (o BridgePortOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when
// vlan-filtering is set to yes.
func (o BridgePortOutput) Pvid() pulumi.IntOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.IntOutput { return v.Pvid }).(pulumi.IntOutput)
}

// Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect
// when protocol-mode is set to mstp.
func (o BridgePortOutput) RestrictedRole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.RestrictedRole }).(pulumi.BoolPtrOutput)
}

// Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to
// propagate. This property only has effect when protocol-mode is set to mstp.
func (o BridgePortOutput) RestrictedTcn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.RestrictedTcn }).(pulumi.BoolPtrOutput)
}

// (R/M)STP algorithm assigned role of the port
func (o BridgePortOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The total cost of the path to the root-bridge.
func (o BridgePortOutput) RootPathCost() pulumi.IntOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.IntOutput { return v.RootPathCost }).(pulumi.IntOutput)
}

// Whether the port is sending RSTP or MSTP BPDU types. A port will transit to STP type when RSTP/MSTP enabled port
// receives a STP BPDU
func (o BridgePortOutput) SendingRstp() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringOutput { return v.SendingRstp }).(pulumi.StringOutput)
}

// Port status ('in-bridge' - port is enabled).
func (o BridgePortOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag
// regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use
// EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
func (o BridgePortOutput) TagStacking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.TagStacking }).(pulumi.BoolPtrOutput)
}

// When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized
// servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
func (o BridgePortOutput) Trusted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.Trusted }).(pulumi.BoolPtrOutput)
}

// When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
func (o BridgePortOutput) UnknownMulticastFlood() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.UnknownMulticastFlood }).(pulumi.BoolPtrOutput)
}

// When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
func (o BridgePortOutput) UnknownUnicastFlood() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgePort) pulumi.BoolPtrOutput { return v.UnknownUnicastFlood }).(pulumi.BoolPtrOutput)
}

type BridgePortArrayOutput struct{ *pulumi.OutputState }

func (BridgePortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BridgePort)(nil)).Elem()
}

func (o BridgePortArrayOutput) ToBridgePortArrayOutput() BridgePortArrayOutput {
	return o
}

func (o BridgePortArrayOutput) ToBridgePortArrayOutputWithContext(ctx context.Context) BridgePortArrayOutput {
	return o
}

func (o BridgePortArrayOutput) Index(i pulumi.IntInput) BridgePortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BridgePort {
		return vs[0].([]*BridgePort)[vs[1].(int)]
	}).(BridgePortOutput)
}

type BridgePortMapOutput struct{ *pulumi.OutputState }

func (BridgePortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BridgePort)(nil)).Elem()
}

func (o BridgePortMapOutput) ToBridgePortMapOutput() BridgePortMapOutput {
	return o
}

func (o BridgePortMapOutput) ToBridgePortMapOutputWithContext(ctx context.Context) BridgePortMapOutput {
	return o
}

func (o BridgePortMapOutput) MapIndex(k pulumi.StringInput) BridgePortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BridgePort {
		return vs[0].(map[string]*BridgePort)[vs[1].(string)]
	}).(BridgePortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BridgePortInput)(nil)).Elem(), &BridgePort{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgePortArrayInput)(nil)).Elem(), BridgePortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgePortMapInput)(nil)).Elem(), BridgePortMap{})
	pulumi.RegisterOutputType(BridgePortOutput{})
	pulumi.RegisterOutputType(BridgePortArrayOutput{})
	pulumi.RegisterOutputType(BridgePortMapOutput{})
}
