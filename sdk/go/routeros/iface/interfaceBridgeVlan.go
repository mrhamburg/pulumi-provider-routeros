// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iface

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Iface"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Iface.NewInterfaceBridgeVlan(ctx, "bridgeVlan", &Iface.InterfaceBridgeVlanArgs{
//				Bridge: pulumi.String("bridge"),
//				Taggeds: pulumi.StringArray{
//					pulumi.String("bridge"),
//					pulumi.String("ether1"),
//				},
//				Untaggeds: pulumi.StringArray{
//					pulumi.String("ether5"),
//				},
//				VlanIds: pulumi.String("50"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/bridge/vlan get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan bridge_vlan "*0"
//
// ```
type InterfaceBridgeVlan struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// The bridge interface which the respective VLAN entry is intended for.
	Bridge           pulumi.StringOutput      `pulumi:"bridge"`
	Comment          pulumi.StringPtrOutput   `pulumi:"comment"`
	CurrentTaggeds   pulumi.StringArrayOutput `pulumi:"currentTaggeds"`
	CurrentUntaggeds pulumi.StringArrayOutput `pulumi:"currentUntaggeds"`
	Disabled         pulumi.BoolPtrOutput     `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
	Taggeds pulumi.StringArrayOutput `pulumi:"taggeds"`
	// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
	Untaggeds pulumi.StringArrayOutput `pulumi:"untaggeds"`
	// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
	VlanIds pulumi.StringOutput `pulumi:"vlanIds"`
}

// NewInterfaceBridgeVlan registers a new resource with the given unique name, arguments, and options.
func NewInterfaceBridgeVlan(ctx *pulumi.Context,
	name string, args *InterfaceBridgeVlanArgs, opts ...pulumi.ResourceOption) (*InterfaceBridgeVlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bridge == nil {
		return nil, errors.New("invalid value for required argument 'Bridge'")
	}
	if args.VlanIds == nil {
		return nil, errors.New("invalid value for required argument 'VlanIds'")
	}
	var resource InterfaceBridgeVlan
	err := ctx.RegisterResource("routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfaceBridgeVlan gets an existing InterfaceBridgeVlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfaceBridgeVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceBridgeVlanState, opts ...pulumi.ResourceOption) (*InterfaceBridgeVlan, error) {
	var resource InterfaceBridgeVlan
	err := ctx.ReadResource("routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfaceBridgeVlan resources.
type interfaceBridgeVlanState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The bridge interface which the respective VLAN entry is intended for.
	Bridge           *string  `pulumi:"bridge"`
	Comment          *string  `pulumi:"comment"`
	CurrentTaggeds   []string `pulumi:"currentTaggeds"`
	CurrentUntaggeds []string `pulumi:"currentUntaggeds"`
	Disabled         *bool    `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
	Taggeds []string `pulumi:"taggeds"`
	// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
	Untaggeds []string `pulumi:"untaggeds"`
	// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
	VlanIds *string `pulumi:"vlanIds"`
}

type InterfaceBridgeVlanState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The bridge interface which the respective VLAN entry is intended for.
	Bridge           pulumi.StringPtrInput
	Comment          pulumi.StringPtrInput
	CurrentTaggeds   pulumi.StringArrayInput
	CurrentUntaggeds pulumi.StringArrayInput
	Disabled         pulumi.BoolPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
	Taggeds pulumi.StringArrayInput
	// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
	Untaggeds pulumi.StringArrayInput
	// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
	VlanIds pulumi.StringPtrInput
}

func (InterfaceBridgeVlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceBridgeVlanState)(nil)).Elem()
}

type interfaceBridgeVlanArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The bridge interface which the respective VLAN entry is intended for.
	Bridge   string  `pulumi:"bridge"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
	Taggeds []string `pulumi:"taggeds"`
	// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
	Untaggeds []string `pulumi:"untaggeds"`
	// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
	VlanIds string `pulumi:"vlanIds"`
}

// The set of arguments for constructing a InterfaceBridgeVlan resource.
type InterfaceBridgeVlanArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The bridge interface which the respective VLAN entry is intended for.
	Bridge   pulumi.StringInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
	Taggeds pulumi.StringArrayInput
	// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
	Untaggeds pulumi.StringArrayInput
	// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
	VlanIds pulumi.StringInput
}

func (InterfaceBridgeVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceBridgeVlanArgs)(nil)).Elem()
}

type InterfaceBridgeVlanInput interface {
	pulumi.Input

	ToInterfaceBridgeVlanOutput() InterfaceBridgeVlanOutput
	ToInterfaceBridgeVlanOutputWithContext(ctx context.Context) InterfaceBridgeVlanOutput
}

func (*InterfaceBridgeVlan) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceBridgeVlan)(nil)).Elem()
}

func (i *InterfaceBridgeVlan) ToInterfaceBridgeVlanOutput() InterfaceBridgeVlanOutput {
	return i.ToInterfaceBridgeVlanOutputWithContext(context.Background())
}

func (i *InterfaceBridgeVlan) ToInterfaceBridgeVlanOutputWithContext(ctx context.Context) InterfaceBridgeVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceBridgeVlanOutput)
}

// InterfaceBridgeVlanArrayInput is an input type that accepts InterfaceBridgeVlanArray and InterfaceBridgeVlanArrayOutput values.
// You can construct a concrete instance of `InterfaceBridgeVlanArrayInput` via:
//
//	InterfaceBridgeVlanArray{ InterfaceBridgeVlanArgs{...} }
type InterfaceBridgeVlanArrayInput interface {
	pulumi.Input

	ToInterfaceBridgeVlanArrayOutput() InterfaceBridgeVlanArrayOutput
	ToInterfaceBridgeVlanArrayOutputWithContext(context.Context) InterfaceBridgeVlanArrayOutput
}

type InterfaceBridgeVlanArray []InterfaceBridgeVlanInput

func (InterfaceBridgeVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceBridgeVlan)(nil)).Elem()
}

func (i InterfaceBridgeVlanArray) ToInterfaceBridgeVlanArrayOutput() InterfaceBridgeVlanArrayOutput {
	return i.ToInterfaceBridgeVlanArrayOutputWithContext(context.Background())
}

func (i InterfaceBridgeVlanArray) ToInterfaceBridgeVlanArrayOutputWithContext(ctx context.Context) InterfaceBridgeVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceBridgeVlanArrayOutput)
}

// InterfaceBridgeVlanMapInput is an input type that accepts InterfaceBridgeVlanMap and InterfaceBridgeVlanMapOutput values.
// You can construct a concrete instance of `InterfaceBridgeVlanMapInput` via:
//
//	InterfaceBridgeVlanMap{ "key": InterfaceBridgeVlanArgs{...} }
type InterfaceBridgeVlanMapInput interface {
	pulumi.Input

	ToInterfaceBridgeVlanMapOutput() InterfaceBridgeVlanMapOutput
	ToInterfaceBridgeVlanMapOutputWithContext(context.Context) InterfaceBridgeVlanMapOutput
}

type InterfaceBridgeVlanMap map[string]InterfaceBridgeVlanInput

func (InterfaceBridgeVlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceBridgeVlan)(nil)).Elem()
}

func (i InterfaceBridgeVlanMap) ToInterfaceBridgeVlanMapOutput() InterfaceBridgeVlanMapOutput {
	return i.ToInterfaceBridgeVlanMapOutputWithContext(context.Background())
}

func (i InterfaceBridgeVlanMap) ToInterfaceBridgeVlanMapOutputWithContext(ctx context.Context) InterfaceBridgeVlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceBridgeVlanMapOutput)
}

type InterfaceBridgeVlanOutput struct{ *pulumi.OutputState }

func (InterfaceBridgeVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceBridgeVlan)(nil)).Elem()
}

func (o InterfaceBridgeVlanOutput) ToInterfaceBridgeVlanOutput() InterfaceBridgeVlanOutput {
	return o
}

func (o InterfaceBridgeVlanOutput) ToInterfaceBridgeVlanOutputWithContext(ctx context.Context) InterfaceBridgeVlanOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o InterfaceBridgeVlanOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o InterfaceBridgeVlanOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// The bridge interface which the respective VLAN entry is intended for.
func (o InterfaceBridgeVlanOutput) Bridge() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.StringOutput { return v.Bridge }).(pulumi.StringOutput)
}

func (o InterfaceBridgeVlanOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o InterfaceBridgeVlanOutput) CurrentTaggeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.StringArrayOutput { return v.CurrentTaggeds }).(pulumi.StringArrayOutput)
}

func (o InterfaceBridgeVlanOutput) CurrentUntaggeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.StringArrayOutput { return v.CurrentUntaggeds }).(pulumi.StringArrayOutput)
}

func (o InterfaceBridgeVlanOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o InterfaceBridgeVlanOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
func (o InterfaceBridgeVlanOutput) Taggeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.StringArrayOutput { return v.Taggeds }).(pulumi.StringArrayOutput)
}

// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
func (o InterfaceBridgeVlanOutput) Untaggeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.StringArrayOutput { return v.Untaggeds }).(pulumi.StringArrayOutput)
}

// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
func (o InterfaceBridgeVlanOutput) VlanIds() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceBridgeVlan) pulumi.StringOutput { return v.VlanIds }).(pulumi.StringOutput)
}

type InterfaceBridgeVlanArrayOutput struct{ *pulumi.OutputState }

func (InterfaceBridgeVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceBridgeVlan)(nil)).Elem()
}

func (o InterfaceBridgeVlanArrayOutput) ToInterfaceBridgeVlanArrayOutput() InterfaceBridgeVlanArrayOutput {
	return o
}

func (o InterfaceBridgeVlanArrayOutput) ToInterfaceBridgeVlanArrayOutputWithContext(ctx context.Context) InterfaceBridgeVlanArrayOutput {
	return o
}

func (o InterfaceBridgeVlanArrayOutput) Index(i pulumi.IntInput) InterfaceBridgeVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfaceBridgeVlan {
		return vs[0].([]*InterfaceBridgeVlan)[vs[1].(int)]
	}).(InterfaceBridgeVlanOutput)
}

type InterfaceBridgeVlanMapOutput struct{ *pulumi.OutputState }

func (InterfaceBridgeVlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceBridgeVlan)(nil)).Elem()
}

func (o InterfaceBridgeVlanMapOutput) ToInterfaceBridgeVlanMapOutput() InterfaceBridgeVlanMapOutput {
	return o
}

func (o InterfaceBridgeVlanMapOutput) ToInterfaceBridgeVlanMapOutputWithContext(ctx context.Context) InterfaceBridgeVlanMapOutput {
	return o
}

func (o InterfaceBridgeVlanMapOutput) MapIndex(k pulumi.StringInput) InterfaceBridgeVlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfaceBridgeVlan {
		return vs[0].(map[string]*InterfaceBridgeVlan)[vs[1].(string)]
	}).(InterfaceBridgeVlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceBridgeVlanInput)(nil)).Elem(), &InterfaceBridgeVlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceBridgeVlanArrayInput)(nil)).Elem(), InterfaceBridgeVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceBridgeVlanMapInput)(nil)).Elem(), InterfaceBridgeVlanMap{})
	pulumi.RegisterOutputType(InterfaceBridgeVlanOutput{})
	pulumi.RegisterOutputType(InterfaceBridgeVlanArrayOutput{})
	pulumi.RegisterOutputType(InterfaceBridgeVlanMapOutput{})
}
