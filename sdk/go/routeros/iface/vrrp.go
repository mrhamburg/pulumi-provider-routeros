// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iface

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Iface.Vrrp (Resource)
//
// ***
//
// #### This is an alias for backwards compatibility between plugin versions.
// Please see documentation for Iface.InterfaceVrrp
type Vrrp struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// ARP resolution protocol mode.
	Arp pulumi.StringPtrOutput `pulumi:"arp"`
	// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
	// the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
	// minutes, hours or days. If no postfix is set then seconds (s) is used.
	ArpTimeout pulumi.StringPtrOutput `pulumi:"arpTimeout"`
	// Authentication method to use for VRRP advertisement packets.
	Authentication pulumi.StringPtrOutput `pulumi:"authentication"`
	Comment        pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled       pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
	GroupMaster pulumi.StringOutput `pulumi:"groupMaster"`
	// Name of the interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// VRRP update interval in seconds. Defines how often master sends advertisement packets.
	Interval   pulumi.StringPtrOutput `pulumi:"interval"`
	Invalid    pulumi.BoolOutput      `pulumi:"invalid"`
	MacAddress pulumi.StringOutput    `pulumi:"macAddress"`
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu pulumi.StringOutput `pulumi:"mtu"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringOutput `pulumi:"name"`
	// Script to execute when the node is switched to the backup state.
	OnBackup pulumi.StringPtrOutput `pulumi:"onBackup"`
	// Script to execute when the node fails.
	OnFail pulumi.StringPtrOutput `pulumi:"onFail"`
	// Script to execute when the node is switched to master state.
	OnMaster pulumi.StringPtrOutput `pulumi:"onMaster"`
	// Password required for authentication. Can be ignored if authentication is not used.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master
	// until the current master fails, even if the backup node has higher priority than the current master. This setting is
	// ignored if the owner router becomes available
	PreemptionMode pulumi.BoolPtrOutput `pulumi:"preemptionMode"`
	// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for
	// the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system
	// autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection
	// tracking uses UDP port 8275.
	RemoteAddress pulumi.StringPtrOutput `pulumi:"remoteAddress"`
	Running       pulumi.BoolOutput      `pulumi:"running"`
	// Synchronize connection tracking entries from Master to Backup device.
	SyncConnectionTracking pulumi.BoolPtrOutput `pulumi:"syncConnectionTracking"`
	// A protocol that will be used by VRRPv3. Valid only if the version is 3.
	V3Protocol pulumi.StringPtrOutput `pulumi:"v3Protocol"`
	// Which VRRP version to use.
	Version pulumi.IntPtrOutput `pulumi:"version"`
	// Virtual Router identifier. Each Virtual router must have a unique id number.
	Vrid pulumi.IntPtrOutput `pulumi:"vrid"`
}

// NewVrrp registers a new resource with the given unique name, arguments, and options.
func NewVrrp(ctx *pulumi.Context,
	name string, args *VrrpArgs, opts ...pulumi.ResourceOption) (*Vrrp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	var resource Vrrp
	err := ctx.RegisterResource("routeros:Iface/vrrp:Vrrp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrrp gets an existing Vrrp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrrp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrrpState, opts ...pulumi.ResourceOption) (*Vrrp, error) {
	var resource Vrrp
	err := ctx.ReadResource("routeros:Iface/vrrp:Vrrp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vrrp resources.
type vrrpState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// ARP resolution protocol mode.
	Arp *string `pulumi:"arp"`
	// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
	// the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
	// minutes, hours or days. If no postfix is set then seconds (s) is used.
	ArpTimeout *string `pulumi:"arpTimeout"`
	// Authentication method to use for VRRP advertisement packets.
	Authentication *string `pulumi:"authentication"`
	Comment        *string `pulumi:"comment"`
	Disabled       *bool   `pulumi:"disabled"`
	// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
	GroupMaster *string `pulumi:"groupMaster"`
	// Name of the interface.
	Interface *string `pulumi:"interface"`
	// VRRP update interval in seconds. Defines how often master sends advertisement packets.
	Interval   *string `pulumi:"interval"`
	Invalid    *bool   `pulumi:"invalid"`
	MacAddress *string `pulumi:"macAddress"`
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu *string `pulumi:"mtu"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name *string `pulumi:"name"`
	// Script to execute when the node is switched to the backup state.
	OnBackup *string `pulumi:"onBackup"`
	// Script to execute when the node fails.
	OnFail *string `pulumi:"onFail"`
	// Script to execute when the node is switched to master state.
	OnMaster *string `pulumi:"onMaster"`
	// Password required for authentication. Can be ignored if authentication is not used.
	Password *string `pulumi:"password"`
	// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master
	// until the current master fails, even if the backup node has higher priority than the current master. This setting is
	// ignored if the owner router becomes available
	PreemptionMode *bool `pulumi:"preemptionMode"`
	// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for
	// the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
	Priority *int `pulumi:"priority"`
	// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system
	// autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection
	// tracking uses UDP port 8275.
	RemoteAddress *string `pulumi:"remoteAddress"`
	Running       *bool   `pulumi:"running"`
	// Synchronize connection tracking entries from Master to Backup device.
	SyncConnectionTracking *bool `pulumi:"syncConnectionTracking"`
	// A protocol that will be used by VRRPv3. Valid only if the version is 3.
	V3Protocol *string `pulumi:"v3Protocol"`
	// Which VRRP version to use.
	Version *int `pulumi:"version"`
	// Virtual Router identifier. Each Virtual router must have a unique id number.
	Vrid *int `pulumi:"vrid"`
}

type VrrpState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// ARP resolution protocol mode.
	Arp pulumi.StringPtrInput
	// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
	// the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
	// minutes, hours or days. If no postfix is set then seconds (s) is used.
	ArpTimeout pulumi.StringPtrInput
	// Authentication method to use for VRRP advertisement packets.
	Authentication pulumi.StringPtrInput
	Comment        pulumi.StringPtrInput
	Disabled       pulumi.BoolPtrInput
	// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
	GroupMaster pulumi.StringPtrInput
	// Name of the interface.
	Interface pulumi.StringPtrInput
	// VRRP update interval in seconds. Defines how often master sends advertisement packets.
	Interval   pulumi.StringPtrInput
	Invalid    pulumi.BoolPtrInput
	MacAddress pulumi.StringPtrInput
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringPtrInput
	// Script to execute when the node is switched to the backup state.
	OnBackup pulumi.StringPtrInput
	// Script to execute when the node fails.
	OnFail pulumi.StringPtrInput
	// Script to execute when the node is switched to master state.
	OnMaster pulumi.StringPtrInput
	// Password required for authentication. Can be ignored if authentication is not used.
	Password pulumi.StringPtrInput
	// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master
	// until the current master fails, even if the backup node has higher priority than the current master. This setting is
	// ignored if the owner router becomes available
	PreemptionMode pulumi.BoolPtrInput
	// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for
	// the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
	Priority pulumi.IntPtrInput
	// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system
	// autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection
	// tracking uses UDP port 8275.
	RemoteAddress pulumi.StringPtrInput
	Running       pulumi.BoolPtrInput
	// Synchronize connection tracking entries from Master to Backup device.
	SyncConnectionTracking pulumi.BoolPtrInput
	// A protocol that will be used by VRRPv3. Valid only if the version is 3.
	V3Protocol pulumi.StringPtrInput
	// Which VRRP version to use.
	Version pulumi.IntPtrInput
	// Virtual Router identifier. Each Virtual router must have a unique id number.
	Vrid pulumi.IntPtrInput
}

func (VrrpState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrrpState)(nil)).Elem()
}

type vrrpArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// ARP resolution protocol mode.
	Arp *string `pulumi:"arp"`
	// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
	// the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
	// minutes, hours or days. If no postfix is set then seconds (s) is used.
	ArpTimeout *string `pulumi:"arpTimeout"`
	// Authentication method to use for VRRP advertisement packets.
	Authentication *string `pulumi:"authentication"`
	Comment        *string `pulumi:"comment"`
	Disabled       *bool   `pulumi:"disabled"`
	// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
	GroupMaster *string `pulumi:"groupMaster"`
	// Name of the interface.
	Interface string `pulumi:"interface"`
	// VRRP update interval in seconds. Defines how often master sends advertisement packets.
	Interval *string `pulumi:"interval"`
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu *string `pulumi:"mtu"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name *string `pulumi:"name"`
	// Script to execute when the node is switched to the backup state.
	OnBackup *string `pulumi:"onBackup"`
	// Script to execute when the node fails.
	OnFail *string `pulumi:"onFail"`
	// Script to execute when the node is switched to master state.
	OnMaster *string `pulumi:"onMaster"`
	// Password required for authentication. Can be ignored if authentication is not used.
	Password *string `pulumi:"password"`
	// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master
	// until the current master fails, even if the backup node has higher priority than the current master. This setting is
	// ignored if the owner router becomes available
	PreemptionMode *bool `pulumi:"preemptionMode"`
	// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for
	// the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
	Priority *int `pulumi:"priority"`
	// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system
	// autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection
	// tracking uses UDP port 8275.
	RemoteAddress *string `pulumi:"remoteAddress"`
	// Synchronize connection tracking entries from Master to Backup device.
	SyncConnectionTracking *bool `pulumi:"syncConnectionTracking"`
	// A protocol that will be used by VRRPv3. Valid only if the version is 3.
	V3Protocol *string `pulumi:"v3Protocol"`
	// Which VRRP version to use.
	Version *int `pulumi:"version"`
	// Virtual Router identifier. Each Virtual router must have a unique id number.
	Vrid *int `pulumi:"vrid"`
}

// The set of arguments for constructing a Vrrp resource.
type VrrpArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// ARP resolution protocol mode.
	Arp pulumi.StringPtrInput
	// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
	// the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
	// minutes, hours or days. If no postfix is set then seconds (s) is used.
	ArpTimeout pulumi.StringPtrInput
	// Authentication method to use for VRRP advertisement packets.
	Authentication pulumi.StringPtrInput
	Comment        pulumi.StringPtrInput
	Disabled       pulumi.BoolPtrInput
	// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
	GroupMaster pulumi.StringPtrInput
	// Name of the interface.
	Interface pulumi.StringInput
	// VRRP update interval in seconds. Defines how often master sends advertisement packets.
	Interval pulumi.StringPtrInput
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringPtrInput
	// Script to execute when the node is switched to the backup state.
	OnBackup pulumi.StringPtrInput
	// Script to execute when the node fails.
	OnFail pulumi.StringPtrInput
	// Script to execute when the node is switched to master state.
	OnMaster pulumi.StringPtrInput
	// Password required for authentication. Can be ignored if authentication is not used.
	Password pulumi.StringPtrInput
	// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master
	// until the current master fails, even if the backup node has higher priority than the current master. This setting is
	// ignored if the owner router becomes available
	PreemptionMode pulumi.BoolPtrInput
	// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for
	// the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
	Priority pulumi.IntPtrInput
	// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system
	// autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection
	// tracking uses UDP port 8275.
	RemoteAddress pulumi.StringPtrInput
	// Synchronize connection tracking entries from Master to Backup device.
	SyncConnectionTracking pulumi.BoolPtrInput
	// A protocol that will be used by VRRPv3. Valid only if the version is 3.
	V3Protocol pulumi.StringPtrInput
	// Which VRRP version to use.
	Version pulumi.IntPtrInput
	// Virtual Router identifier. Each Virtual router must have a unique id number.
	Vrid pulumi.IntPtrInput
}

func (VrrpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrrpArgs)(nil)).Elem()
}

type VrrpInput interface {
	pulumi.Input

	ToVrrpOutput() VrrpOutput
	ToVrrpOutputWithContext(ctx context.Context) VrrpOutput
}

func (*Vrrp) ElementType() reflect.Type {
	return reflect.TypeOf((**Vrrp)(nil)).Elem()
}

func (i *Vrrp) ToVrrpOutput() VrrpOutput {
	return i.ToVrrpOutputWithContext(context.Background())
}

func (i *Vrrp) ToVrrpOutputWithContext(ctx context.Context) VrrpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrrpOutput)
}

// VrrpArrayInput is an input type that accepts VrrpArray and VrrpArrayOutput values.
// You can construct a concrete instance of `VrrpArrayInput` via:
//
//	VrrpArray{ VrrpArgs{...} }
type VrrpArrayInput interface {
	pulumi.Input

	ToVrrpArrayOutput() VrrpArrayOutput
	ToVrrpArrayOutputWithContext(context.Context) VrrpArrayOutput
}

type VrrpArray []VrrpInput

func (VrrpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vrrp)(nil)).Elem()
}

func (i VrrpArray) ToVrrpArrayOutput() VrrpArrayOutput {
	return i.ToVrrpArrayOutputWithContext(context.Background())
}

func (i VrrpArray) ToVrrpArrayOutputWithContext(ctx context.Context) VrrpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrrpArrayOutput)
}

// VrrpMapInput is an input type that accepts VrrpMap and VrrpMapOutput values.
// You can construct a concrete instance of `VrrpMapInput` via:
//
//	VrrpMap{ "key": VrrpArgs{...} }
type VrrpMapInput interface {
	pulumi.Input

	ToVrrpMapOutput() VrrpMapOutput
	ToVrrpMapOutputWithContext(context.Context) VrrpMapOutput
}

type VrrpMap map[string]VrrpInput

func (VrrpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vrrp)(nil)).Elem()
}

func (i VrrpMap) ToVrrpMapOutput() VrrpMapOutput {
	return i.ToVrrpMapOutputWithContext(context.Background())
}

func (i VrrpMap) ToVrrpMapOutputWithContext(ctx context.Context) VrrpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrrpMapOutput)
}

type VrrpOutput struct{ *pulumi.OutputState }

func (VrrpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vrrp)(nil)).Elem()
}

func (o VrrpOutput) ToVrrpOutput() VrrpOutput {
	return o
}

func (o VrrpOutput) ToVrrpOutputWithContext(ctx context.Context) VrrpOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o VrrpOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o VrrpOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// ARP resolution protocol mode.
func (o VrrpOutput) Arp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.Arp }).(pulumi.StringPtrOutput)
}

// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
// the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
// minutes, hours or days. If no postfix is set then seconds (s) is used.
func (o VrrpOutput) ArpTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.ArpTimeout }).(pulumi.StringPtrOutput)
}

// Authentication method to use for VRRP advertisement packets.
func (o VrrpOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.Authentication }).(pulumi.StringPtrOutput)
}

func (o VrrpOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o VrrpOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
func (o VrrpOutput) GroupMaster() pulumi.StringOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringOutput { return v.GroupMaster }).(pulumi.StringOutput)
}

// Name of the interface.
func (o VrrpOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// VRRP update interval in seconds. Defines how often master sends advertisement packets.
func (o VrrpOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o VrrpOutput) Invalid() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.BoolOutput { return v.Invalid }).(pulumi.BoolOutput)
}

func (o VrrpOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
func (o VrrpOutput) Mtu() pulumi.StringOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringOutput { return v.Mtu }).(pulumi.StringOutput)
}

// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
// integrity for that resource!
func (o VrrpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Script to execute when the node is switched to the backup state.
func (o VrrpOutput) OnBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.OnBackup }).(pulumi.StringPtrOutput)
}

// Script to execute when the node fails.
func (o VrrpOutput) OnFail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.OnFail }).(pulumi.StringPtrOutput)
}

// Script to execute when the node is switched to master state.
func (o VrrpOutput) OnMaster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.OnMaster }).(pulumi.StringPtrOutput)
}

// Password required for authentication. Can be ignored if authentication is not used.
func (o VrrpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master
// until the current master fails, even if the backup node has higher priority than the current master. This setting is
// ignored if the owner router becomes available
func (o VrrpOutput) PreemptionMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.BoolPtrOutput { return v.PreemptionMode }).(pulumi.BoolPtrOutput)
}

// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for
// the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
func (o VrrpOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system
// autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection
// tracking uses UDP port 8275.
func (o VrrpOutput) RemoteAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.RemoteAddress }).(pulumi.StringPtrOutput)
}

func (o VrrpOutput) Running() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.BoolOutput { return v.Running }).(pulumi.BoolOutput)
}

// Synchronize connection tracking entries from Master to Backup device.
func (o VrrpOutput) SyncConnectionTracking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.BoolPtrOutput { return v.SyncConnectionTracking }).(pulumi.BoolPtrOutput)
}

// A protocol that will be used by VRRPv3. Valid only if the version is 3.
func (o VrrpOutput) V3Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.StringPtrOutput { return v.V3Protocol }).(pulumi.StringPtrOutput)
}

// Which VRRP version to use.
func (o VrrpOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.IntPtrOutput { return v.Version }).(pulumi.IntPtrOutput)
}

// Virtual Router identifier. Each Virtual router must have a unique id number.
func (o VrrpOutput) Vrid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vrrp) pulumi.IntPtrOutput { return v.Vrid }).(pulumi.IntPtrOutput)
}

type VrrpArrayOutput struct{ *pulumi.OutputState }

func (VrrpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vrrp)(nil)).Elem()
}

func (o VrrpArrayOutput) ToVrrpArrayOutput() VrrpArrayOutput {
	return o
}

func (o VrrpArrayOutput) ToVrrpArrayOutputWithContext(ctx context.Context) VrrpArrayOutput {
	return o
}

func (o VrrpArrayOutput) Index(i pulumi.IntInput) VrrpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vrrp {
		return vs[0].([]*Vrrp)[vs[1].(int)]
	}).(VrrpOutput)
}

type VrrpMapOutput struct{ *pulumi.OutputState }

func (VrrpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vrrp)(nil)).Elem()
}

func (o VrrpMapOutput) ToVrrpMapOutput() VrrpMapOutput {
	return o
}

func (o VrrpMapOutput) ToVrrpMapOutputWithContext(ctx context.Context) VrrpMapOutput {
	return o
}

func (o VrrpMapOutput) MapIndex(k pulumi.StringInput) VrrpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vrrp {
		return vs[0].(map[string]*Vrrp)[vs[1].(string)]
	}).(VrrpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrrpInput)(nil)).Elem(), &Vrrp{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrrpArrayInput)(nil)).Elem(), VrrpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrrpMapInput)(nil)).Elem(), VrrpMap{})
	pulumi.RegisterOutputType(VrrpOutput{})
	pulumi.RegisterOutputType(VrrpArrayOutput{})
	pulumi.RegisterOutputType(VrrpMapOutput{})
}
