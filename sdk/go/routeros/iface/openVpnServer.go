// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iface

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Iface"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Iface.NewOpenVpnServer(ctx, "user1", &Iface.OpenVpnServerArgs{
//				User: pulumi.String("user1"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				routeros_ovpn_server.Server,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/ovpn-server get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:Iface/openVpnServer:OpenVpnServer user1 *29
//
// ```
type OpenVpnServer struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// The address of the remote side.
	ClientAddress pulumi.StringOutput    `pulumi:"clientAddress"`
	Comment       pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled      pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Encryption characteristics.
	Encoding pulumi.StringOutput `pulumi:"encoding"`
	// Layer2 Maximum transmission unit.
	Mtu pulumi.IntOutput `pulumi:"mtu"`
	// Interface name (Example: ovpn-in1).
	Name    pulumi.StringOutput `pulumi:"name"`
	Running pulumi.BoolOutput   `pulumi:"running"`
	// Connection uptime.
	Uptime pulumi.StringOutput `pulumi:"uptime"`
	// User name used for authentication.
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewOpenVpnServer registers a new resource with the given unique name, arguments, and options.
func NewOpenVpnServer(ctx *pulumi.Context,
	name string, args *OpenVpnServerArgs, opts ...pulumi.ResourceOption) (*OpenVpnServer, error) {
	if args == nil {
		args = &OpenVpnServerArgs{}
	}

	var resource OpenVpnServer
	err := ctx.RegisterResource("routeros:Iface/openVpnServer:OpenVpnServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenVpnServer gets an existing OpenVpnServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenVpnServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenVpnServerState, opts ...pulumi.ResourceOption) (*OpenVpnServer, error) {
	var resource OpenVpnServer
	err := ctx.ReadResource("routeros:Iface/openVpnServer:OpenVpnServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenVpnServer resources.
type openVpnServerState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The address of the remote side.
	ClientAddress *string `pulumi:"clientAddress"`
	Comment       *string `pulumi:"comment"`
	Disabled      *bool   `pulumi:"disabled"`
	// Encryption characteristics.
	Encoding *string `pulumi:"encoding"`
	// Layer2 Maximum transmission unit.
	Mtu *int `pulumi:"mtu"`
	// Interface name (Example: ovpn-in1).
	Name    *string `pulumi:"name"`
	Running *bool   `pulumi:"running"`
	// Connection uptime.
	Uptime *string `pulumi:"uptime"`
	// User name used for authentication.
	User *string `pulumi:"user"`
}

type OpenVpnServerState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The address of the remote side.
	ClientAddress pulumi.StringPtrInput
	Comment       pulumi.StringPtrInput
	Disabled      pulumi.BoolPtrInput
	// Encryption characteristics.
	Encoding pulumi.StringPtrInput
	// Layer2 Maximum transmission unit.
	Mtu pulumi.IntPtrInput
	// Interface name (Example: ovpn-in1).
	Name    pulumi.StringPtrInput
	Running pulumi.BoolPtrInput
	// Connection uptime.
	Uptime pulumi.StringPtrInput
	// User name used for authentication.
	User pulumi.StringPtrInput
}

func (OpenVpnServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*openVpnServerState)(nil)).Elem()
}

type openVpnServerArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// Interface name (Example: ovpn-in1).
	Name *string `pulumi:"name"`
	// User name used for authentication.
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a OpenVpnServer resource.
type OpenVpnServerArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Interface name (Example: ovpn-in1).
	Name pulumi.StringPtrInput
	// User name used for authentication.
	User pulumi.StringPtrInput
}

func (OpenVpnServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openVpnServerArgs)(nil)).Elem()
}

type OpenVpnServerInput interface {
	pulumi.Input

	ToOpenVpnServerOutput() OpenVpnServerOutput
	ToOpenVpnServerOutputWithContext(ctx context.Context) OpenVpnServerOutput
}

func (*OpenVpnServer) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenVpnServer)(nil)).Elem()
}

func (i *OpenVpnServer) ToOpenVpnServerOutput() OpenVpnServerOutput {
	return i.ToOpenVpnServerOutputWithContext(context.Background())
}

func (i *OpenVpnServer) ToOpenVpnServerOutputWithContext(ctx context.Context) OpenVpnServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenVpnServerOutput)
}

// OpenVpnServerArrayInput is an input type that accepts OpenVpnServerArray and OpenVpnServerArrayOutput values.
// You can construct a concrete instance of `OpenVpnServerArrayInput` via:
//
//	OpenVpnServerArray{ OpenVpnServerArgs{...} }
type OpenVpnServerArrayInput interface {
	pulumi.Input

	ToOpenVpnServerArrayOutput() OpenVpnServerArrayOutput
	ToOpenVpnServerArrayOutputWithContext(context.Context) OpenVpnServerArrayOutput
}

type OpenVpnServerArray []OpenVpnServerInput

func (OpenVpnServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenVpnServer)(nil)).Elem()
}

func (i OpenVpnServerArray) ToOpenVpnServerArrayOutput() OpenVpnServerArrayOutput {
	return i.ToOpenVpnServerArrayOutputWithContext(context.Background())
}

func (i OpenVpnServerArray) ToOpenVpnServerArrayOutputWithContext(ctx context.Context) OpenVpnServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenVpnServerArrayOutput)
}

// OpenVpnServerMapInput is an input type that accepts OpenVpnServerMap and OpenVpnServerMapOutput values.
// You can construct a concrete instance of `OpenVpnServerMapInput` via:
//
//	OpenVpnServerMap{ "key": OpenVpnServerArgs{...} }
type OpenVpnServerMapInput interface {
	pulumi.Input

	ToOpenVpnServerMapOutput() OpenVpnServerMapOutput
	ToOpenVpnServerMapOutputWithContext(context.Context) OpenVpnServerMapOutput
}

type OpenVpnServerMap map[string]OpenVpnServerInput

func (OpenVpnServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenVpnServer)(nil)).Elem()
}

func (i OpenVpnServerMap) ToOpenVpnServerMapOutput() OpenVpnServerMapOutput {
	return i.ToOpenVpnServerMapOutputWithContext(context.Background())
}

func (i OpenVpnServerMap) ToOpenVpnServerMapOutputWithContext(ctx context.Context) OpenVpnServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenVpnServerMapOutput)
}

type OpenVpnServerOutput struct{ *pulumi.OutputState }

func (OpenVpnServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenVpnServer)(nil)).Elem()
}

func (o OpenVpnServerOutput) ToOpenVpnServerOutput() OpenVpnServerOutput {
	return o
}

func (o OpenVpnServerOutput) ToOpenVpnServerOutputWithContext(ctx context.Context) OpenVpnServerOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o OpenVpnServerOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o OpenVpnServerOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// The address of the remote side.
func (o OpenVpnServerOutput) ClientAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.StringOutput { return v.ClientAddress }).(pulumi.StringOutput)
}

func (o OpenVpnServerOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o OpenVpnServerOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Encryption characteristics.
func (o OpenVpnServerOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.StringOutput { return v.Encoding }).(pulumi.StringOutput)
}

// Layer2 Maximum transmission unit.
func (o OpenVpnServerOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

// Interface name (Example: ovpn-in1).
func (o OpenVpnServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o OpenVpnServerOutput) Running() pulumi.BoolOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.BoolOutput { return v.Running }).(pulumi.BoolOutput)
}

// Connection uptime.
func (o OpenVpnServerOutput) Uptime() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.StringOutput { return v.Uptime }).(pulumi.StringOutput)
}

// User name used for authentication.
func (o OpenVpnServerOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenVpnServer) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

type OpenVpnServerArrayOutput struct{ *pulumi.OutputState }

func (OpenVpnServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OpenVpnServer)(nil)).Elem()
}

func (o OpenVpnServerArrayOutput) ToOpenVpnServerArrayOutput() OpenVpnServerArrayOutput {
	return o
}

func (o OpenVpnServerArrayOutput) ToOpenVpnServerArrayOutputWithContext(ctx context.Context) OpenVpnServerArrayOutput {
	return o
}

func (o OpenVpnServerArrayOutput) Index(i pulumi.IntInput) OpenVpnServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OpenVpnServer {
		return vs[0].([]*OpenVpnServer)[vs[1].(int)]
	}).(OpenVpnServerOutput)
}

type OpenVpnServerMapOutput struct{ *pulumi.OutputState }

func (OpenVpnServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OpenVpnServer)(nil)).Elem()
}

func (o OpenVpnServerMapOutput) ToOpenVpnServerMapOutput() OpenVpnServerMapOutput {
	return o
}

func (o OpenVpnServerMapOutput) ToOpenVpnServerMapOutputWithContext(ctx context.Context) OpenVpnServerMapOutput {
	return o
}

func (o OpenVpnServerMapOutput) MapIndex(k pulumi.StringInput) OpenVpnServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OpenVpnServer {
		return vs[0].(map[string]*OpenVpnServer)[vs[1].(string)]
	}).(OpenVpnServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OpenVpnServerInput)(nil)).Elem(), &OpenVpnServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenVpnServerArrayInput)(nil)).Elem(), OpenVpnServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OpenVpnServerMapInput)(nil)).Elem(), OpenVpnServerMap{})
	pulumi.RegisterOutputType(OpenVpnServerOutput{})
	pulumi.RegisterOutputType(OpenVpnServerArrayOutput{})
	pulumi.RegisterOutputType(OpenVpnServerMapOutput{})
}
