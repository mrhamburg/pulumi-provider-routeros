// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iface

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Iface.Gre (Resource)
//
// ***
//
// #### This is an alias for backwards compatibility between plugin versions.
// Please see documentation for Iface.InterfaceGre
type Gre struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_  pulumi.StringPtrOutput `pulumi:"___path_"`
	ActualMtu pulumi.IntOutput       `pulumi:"actualMtu"`
	// Whether to allow FastPath processing. Must be disabled if IPsec tunneling is used.
	AllowFastPath pulumi.BoolPtrOutput `pulumi:"allowFastPath"`
	// Controls whether to change MSS size for received TCP SYN packets. When enabled, a router will change the MSS size for
	// received TCP SYN packets if the current MSS size exceeds the tunnel interface MTU (taking into account the TCP/IP
	// overhead). The received encapsulated packet will still contain the original MSS, and only after decapsulation the MSS is
	// changed.
	ClampTcpMss  pulumi.BoolPtrOutput   `pulumi:"clampTcpMss"`
	Comment      pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled     pulumi.BoolPtrOutput   `pulumi:"disabled"`
	DontFragment pulumi.StringPtrOutput `pulumi:"dontFragment"`
	// Set dscp value in GRE header to a fixed value '0..63' or 'inherit' from dscp value taken from tunnelled traffic.
	Dscp pulumi.StringPtrOutput `pulumi:"dscp"`
	// When secret is specified, router adds dynamic IPsec peer to remote-address with pre-shared key and policy (by default
	// phase2 uses sha1/aes128cbc).
	IpsecSecret pulumi.StringPtrOutput `pulumi:"ipsecSecret"`
	// Tunnel keepalive parameter sets the time interval in which the tunnel running flag will remain even if the remote end of
	// tunnel goes down. If configured time,retries fail, interface running flag is removed. Parameters are written in
	// following format: KeepaliveInterval,KeepaliveRetries where KeepaliveInterval is time interval and KeepaliveRetries -
	// number of retry attempts. KeepaliveInterval is integer 0..4294967295
	Keepalive pulumi.StringPtrOutput `pulumi:"keepalive"`
	// Layer2 Maximum transmission unit.
	L2mtu        pulumi.IntOutput       `pulumi:"l2mtu"`
	LocalAddress pulumi.StringPtrOutput `pulumi:"localAddress"`
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu pulumi.StringOutput `pulumi:"mtu"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name          pulumi.StringOutput `pulumi:"name"`
	RemoteAddress pulumi.StringOutput `pulumi:"remoteAddress"`
	Running       pulumi.BoolOutput   `pulumi:"running"`
}

// NewGre registers a new resource with the given unique name, arguments, and options.
func NewGre(ctx *pulumi.Context,
	name string, args *GreArgs, opts ...pulumi.ResourceOption) (*Gre, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RemoteAddress == nil {
		return nil, errors.New("invalid value for required argument 'RemoteAddress'")
	}
	if args.IpsecSecret != nil {
		args.IpsecSecret = pulumi.ToSecret(args.IpsecSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ipsecSecret",
	})
	opts = append(opts, secrets)
	var resource Gre
	err := ctx.RegisterResource("routeros:Iface/gre:Gre", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGre gets an existing Gre resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGre(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GreState, opts ...pulumi.ResourceOption) (*Gre, error) {
	var resource Gre
	err := ctx.ReadResource("routeros:Iface/gre:Gre", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gre resources.
type greState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_  *string `pulumi:"___path_"`
	ActualMtu *int    `pulumi:"actualMtu"`
	// Whether to allow FastPath processing. Must be disabled if IPsec tunneling is used.
	AllowFastPath *bool `pulumi:"allowFastPath"`
	// Controls whether to change MSS size for received TCP SYN packets. When enabled, a router will change the MSS size for
	// received TCP SYN packets if the current MSS size exceeds the tunnel interface MTU (taking into account the TCP/IP
	// overhead). The received encapsulated packet will still contain the original MSS, and only after decapsulation the MSS is
	// changed.
	ClampTcpMss  *bool   `pulumi:"clampTcpMss"`
	Comment      *string `pulumi:"comment"`
	Disabled     *bool   `pulumi:"disabled"`
	DontFragment *string `pulumi:"dontFragment"`
	// Set dscp value in GRE header to a fixed value '0..63' or 'inherit' from dscp value taken from tunnelled traffic.
	Dscp *string `pulumi:"dscp"`
	// When secret is specified, router adds dynamic IPsec peer to remote-address with pre-shared key and policy (by default
	// phase2 uses sha1/aes128cbc).
	IpsecSecret *string `pulumi:"ipsecSecret"`
	// Tunnel keepalive parameter sets the time interval in which the tunnel running flag will remain even if the remote end of
	// tunnel goes down. If configured time,retries fail, interface running flag is removed. Parameters are written in
	// following format: KeepaliveInterval,KeepaliveRetries where KeepaliveInterval is time interval and KeepaliveRetries -
	// number of retry attempts. KeepaliveInterval is integer 0..4294967295
	Keepalive *string `pulumi:"keepalive"`
	// Layer2 Maximum transmission unit.
	L2mtu        *int    `pulumi:"l2mtu"`
	LocalAddress *string `pulumi:"localAddress"`
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu *string `pulumi:"mtu"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name          *string `pulumi:"name"`
	RemoteAddress *string `pulumi:"remoteAddress"`
	Running       *bool   `pulumi:"running"`
}

type GreState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_  pulumi.StringPtrInput
	ActualMtu pulumi.IntPtrInput
	// Whether to allow FastPath processing. Must be disabled if IPsec tunneling is used.
	AllowFastPath pulumi.BoolPtrInput
	// Controls whether to change MSS size for received TCP SYN packets. When enabled, a router will change the MSS size for
	// received TCP SYN packets if the current MSS size exceeds the tunnel interface MTU (taking into account the TCP/IP
	// overhead). The received encapsulated packet will still contain the original MSS, and only after decapsulation the MSS is
	// changed.
	ClampTcpMss  pulumi.BoolPtrInput
	Comment      pulumi.StringPtrInput
	Disabled     pulumi.BoolPtrInput
	DontFragment pulumi.StringPtrInput
	// Set dscp value in GRE header to a fixed value '0..63' or 'inherit' from dscp value taken from tunnelled traffic.
	Dscp pulumi.StringPtrInput
	// When secret is specified, router adds dynamic IPsec peer to remote-address with pre-shared key and policy (by default
	// phase2 uses sha1/aes128cbc).
	IpsecSecret pulumi.StringPtrInput
	// Tunnel keepalive parameter sets the time interval in which the tunnel running flag will remain even if the remote end of
	// tunnel goes down. If configured time,retries fail, interface running flag is removed. Parameters are written in
	// following format: KeepaliveInterval,KeepaliveRetries where KeepaliveInterval is time interval and KeepaliveRetries -
	// number of retry attempts. KeepaliveInterval is integer 0..4294967295
	Keepalive pulumi.StringPtrInput
	// Layer2 Maximum transmission unit.
	L2mtu        pulumi.IntPtrInput
	LocalAddress pulumi.StringPtrInput
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name          pulumi.StringPtrInput
	RemoteAddress pulumi.StringPtrInput
	Running       pulumi.BoolPtrInput
}

func (GreState) ElementType() reflect.Type {
	return reflect.TypeOf((*greState)(nil)).Elem()
}

type greArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Whether to allow FastPath processing. Must be disabled if IPsec tunneling is used.
	AllowFastPath *bool `pulumi:"allowFastPath"`
	// Controls whether to change MSS size for received TCP SYN packets. When enabled, a router will change the MSS size for
	// received TCP SYN packets if the current MSS size exceeds the tunnel interface MTU (taking into account the TCP/IP
	// overhead). The received encapsulated packet will still contain the original MSS, and only after decapsulation the MSS is
	// changed.
	ClampTcpMss  *bool   `pulumi:"clampTcpMss"`
	Comment      *string `pulumi:"comment"`
	Disabled     *bool   `pulumi:"disabled"`
	DontFragment *string `pulumi:"dontFragment"`
	// Set dscp value in GRE header to a fixed value '0..63' or 'inherit' from dscp value taken from tunnelled traffic.
	Dscp *string `pulumi:"dscp"`
	// When secret is specified, router adds dynamic IPsec peer to remote-address with pre-shared key and policy (by default
	// phase2 uses sha1/aes128cbc).
	IpsecSecret *string `pulumi:"ipsecSecret"`
	// Tunnel keepalive parameter sets the time interval in which the tunnel running flag will remain even if the remote end of
	// tunnel goes down. If configured time,retries fail, interface running flag is removed. Parameters are written in
	// following format: KeepaliveInterval,KeepaliveRetries where KeepaliveInterval is time interval and KeepaliveRetries -
	// number of retry attempts. KeepaliveInterval is integer 0..4294967295
	Keepalive    *string `pulumi:"keepalive"`
	LocalAddress *string `pulumi:"localAddress"`
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu *string `pulumi:"mtu"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name          *string `pulumi:"name"`
	RemoteAddress string  `pulumi:"remoteAddress"`
}

// The set of arguments for constructing a Gre resource.
type GreArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Whether to allow FastPath processing. Must be disabled if IPsec tunneling is used.
	AllowFastPath pulumi.BoolPtrInput
	// Controls whether to change MSS size for received TCP SYN packets. When enabled, a router will change the MSS size for
	// received TCP SYN packets if the current MSS size exceeds the tunnel interface MTU (taking into account the TCP/IP
	// overhead). The received encapsulated packet will still contain the original MSS, and only after decapsulation the MSS is
	// changed.
	ClampTcpMss  pulumi.BoolPtrInput
	Comment      pulumi.StringPtrInput
	Disabled     pulumi.BoolPtrInput
	DontFragment pulumi.StringPtrInput
	// Set dscp value in GRE header to a fixed value '0..63' or 'inherit' from dscp value taken from tunnelled traffic.
	Dscp pulumi.StringPtrInput
	// When secret is specified, router adds dynamic IPsec peer to remote-address with pre-shared key and policy (by default
	// phase2 uses sha1/aes128cbc).
	IpsecSecret pulumi.StringPtrInput
	// Tunnel keepalive parameter sets the time interval in which the tunnel running flag will remain even if the remote end of
	// tunnel goes down. If configured time,retries fail, interface running flag is removed. Parameters are written in
	// following format: KeepaliveInterval,KeepaliveRetries where KeepaliveInterval is time interval and KeepaliveRetries -
	// number of retry attempts. KeepaliveInterval is integer 0..4294967295
	Keepalive    pulumi.StringPtrInput
	LocalAddress pulumi.StringPtrInput
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name          pulumi.StringPtrInput
	RemoteAddress pulumi.StringInput
}

func (GreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*greArgs)(nil)).Elem()
}

type GreInput interface {
	pulumi.Input

	ToGreOutput() GreOutput
	ToGreOutputWithContext(ctx context.Context) GreOutput
}

func (*Gre) ElementType() reflect.Type {
	return reflect.TypeOf((**Gre)(nil)).Elem()
}

func (i *Gre) ToGreOutput() GreOutput {
	return i.ToGreOutputWithContext(context.Background())
}

func (i *Gre) ToGreOutputWithContext(ctx context.Context) GreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreOutput)
}

// GreArrayInput is an input type that accepts GreArray and GreArrayOutput values.
// You can construct a concrete instance of `GreArrayInput` via:
//
//	GreArray{ GreArgs{...} }
type GreArrayInput interface {
	pulumi.Input

	ToGreArrayOutput() GreArrayOutput
	ToGreArrayOutputWithContext(context.Context) GreArrayOutput
}

type GreArray []GreInput

func (GreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gre)(nil)).Elem()
}

func (i GreArray) ToGreArrayOutput() GreArrayOutput {
	return i.ToGreArrayOutputWithContext(context.Background())
}

func (i GreArray) ToGreArrayOutputWithContext(ctx context.Context) GreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreArrayOutput)
}

// GreMapInput is an input type that accepts GreMap and GreMapOutput values.
// You can construct a concrete instance of `GreMapInput` via:
//
//	GreMap{ "key": GreArgs{...} }
type GreMapInput interface {
	pulumi.Input

	ToGreMapOutput() GreMapOutput
	ToGreMapOutputWithContext(context.Context) GreMapOutput
}

type GreMap map[string]GreInput

func (GreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gre)(nil)).Elem()
}

func (i GreMap) ToGreMapOutput() GreMapOutput {
	return i.ToGreMapOutputWithContext(context.Background())
}

func (i GreMap) ToGreMapOutputWithContext(ctx context.Context) GreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreMapOutput)
}

type GreOutput struct{ *pulumi.OutputState }

func (GreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gre)(nil)).Elem()
}

func (o GreOutput) ToGreOutput() GreOutput {
	return o
}

func (o GreOutput) ToGreOutputWithContext(ctx context.Context) GreOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o GreOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o GreOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

func (o GreOutput) ActualMtu() pulumi.IntOutput {
	return o.ApplyT(func(v *Gre) pulumi.IntOutput { return v.ActualMtu }).(pulumi.IntOutput)
}

// Whether to allow FastPath processing. Must be disabled if IPsec tunneling is used.
func (o GreOutput) AllowFastPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.BoolPtrOutput { return v.AllowFastPath }).(pulumi.BoolPtrOutput)
}

// Controls whether to change MSS size for received TCP SYN packets. When enabled, a router will change the MSS size for
// received TCP SYN packets if the current MSS size exceeds the tunnel interface MTU (taking into account the TCP/IP
// overhead). The received encapsulated packet will still contain the original MSS, and only after decapsulation the MSS is
// changed.
func (o GreOutput) ClampTcpMss() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.BoolPtrOutput { return v.ClampTcpMss }).(pulumi.BoolPtrOutput)
}

func (o GreOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o GreOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o GreOutput) DontFragment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.StringPtrOutput { return v.DontFragment }).(pulumi.StringPtrOutput)
}

// Set dscp value in GRE header to a fixed value '0..63' or 'inherit' from dscp value taken from tunnelled traffic.
func (o GreOutput) Dscp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.StringPtrOutput { return v.Dscp }).(pulumi.StringPtrOutput)
}

// When secret is specified, router adds dynamic IPsec peer to remote-address with pre-shared key and policy (by default
// phase2 uses sha1/aes128cbc).
func (o GreOutput) IpsecSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.StringPtrOutput { return v.IpsecSecret }).(pulumi.StringPtrOutput)
}

// Tunnel keepalive parameter sets the time interval in which the tunnel running flag will remain even if the remote end of
// tunnel goes down. If configured time,retries fail, interface running flag is removed. Parameters are written in
// following format: KeepaliveInterval,KeepaliveRetries where KeepaliveInterval is time interval and KeepaliveRetries -
// number of retry attempts. KeepaliveInterval is integer 0..4294967295
func (o GreOutput) Keepalive() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.StringPtrOutput { return v.Keepalive }).(pulumi.StringPtrOutput)
}

// Layer2 Maximum transmission unit.
func (o GreOutput) L2mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *Gre) pulumi.IntOutput { return v.L2mtu }).(pulumi.IntOutput)
}

func (o GreOutput) LocalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gre) pulumi.StringPtrOutput { return v.LocalAddress }).(pulumi.StringPtrOutput)
}

// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
func (o GreOutput) Mtu() pulumi.StringOutput {
	return o.ApplyT(func(v *Gre) pulumi.StringOutput { return v.Mtu }).(pulumi.StringOutput)
}

// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
// integrity for that resource!
func (o GreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gre) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GreOutput) RemoteAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Gre) pulumi.StringOutput { return v.RemoteAddress }).(pulumi.StringOutput)
}

func (o GreOutput) Running() pulumi.BoolOutput {
	return o.ApplyT(func(v *Gre) pulumi.BoolOutput { return v.Running }).(pulumi.BoolOutput)
}

type GreArrayOutput struct{ *pulumi.OutputState }

func (GreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gre)(nil)).Elem()
}

func (o GreArrayOutput) ToGreArrayOutput() GreArrayOutput {
	return o
}

func (o GreArrayOutput) ToGreArrayOutputWithContext(ctx context.Context) GreArrayOutput {
	return o
}

func (o GreArrayOutput) Index(i pulumi.IntInput) GreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gre {
		return vs[0].([]*Gre)[vs[1].(int)]
	}).(GreOutput)
}

type GreMapOutput struct{ *pulumi.OutputState }

func (GreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gre)(nil)).Elem()
}

func (o GreMapOutput) ToGreMapOutput() GreMapOutput {
	return o
}

func (o GreMapOutput) ToGreMapOutputWithContext(ctx context.Context) GreMapOutput {
	return o
}

func (o GreMapOutput) MapIndex(k pulumi.StringInput) GreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gre {
		return vs[0].(map[string]*Gre)[vs[1].(string)]
	}).(GreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GreInput)(nil)).Elem(), &Gre{})
	pulumi.RegisterInputType(reflect.TypeOf((*GreArrayInput)(nil)).Elem(), GreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GreMapInput)(nil)).Elem(), GreMap{})
	pulumi.RegisterOutputType(GreOutput{})
	pulumi.RegisterOutputType(GreArrayOutput{})
	pulumi.RegisterOutputType(GreMapOutput{})
}
