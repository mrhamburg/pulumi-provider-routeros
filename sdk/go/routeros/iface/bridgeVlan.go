// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iface

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Iface.BridgeVlan (Resource)
//
// ***
//
// #### This is an alias for backwards compatibility between plugin versions.
// Please see documentation for Iface.InterfaceBridgeVlan
type BridgeVlan struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// The bridge interface which the respective VLAN entry is intended for.
	Bridge           pulumi.StringOutput      `pulumi:"bridge"`
	Comment          pulumi.StringPtrOutput   `pulumi:"comment"`
	CurrentTaggeds   pulumi.StringArrayOutput `pulumi:"currentTaggeds"`
	CurrentUntaggeds pulumi.StringArrayOutput `pulumi:"currentUntaggeds"`
	Disabled         pulumi.BoolPtrOutput     `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g.
	// tagged=ether1,ether2.
	Taggeds pulumi.StringArrayOutput `pulumi:"taggeds"`
	// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g.
	// untagged=ether3,ether4
	Untaggeds pulumi.StringArrayOutput `pulumi:"untaggeds"`
	// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated
	// values. E.g. vlan-ids=100-115,120,122,128-130.
	VlanIds pulumi.StringOutput `pulumi:"vlanIds"`
}

// NewBridgeVlan registers a new resource with the given unique name, arguments, and options.
func NewBridgeVlan(ctx *pulumi.Context,
	name string, args *BridgeVlanArgs, opts ...pulumi.ResourceOption) (*BridgeVlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bridge == nil {
		return nil, errors.New("invalid value for required argument 'Bridge'")
	}
	if args.VlanIds == nil {
		return nil, errors.New("invalid value for required argument 'VlanIds'")
	}
	var resource BridgeVlan
	err := ctx.RegisterResource("routeros:Iface/bridgeVlan:BridgeVlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBridgeVlan gets an existing BridgeVlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBridgeVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BridgeVlanState, opts ...pulumi.ResourceOption) (*BridgeVlan, error) {
	var resource BridgeVlan
	err := ctx.ReadResource("routeros:Iface/bridgeVlan:BridgeVlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BridgeVlan resources.
type bridgeVlanState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The bridge interface which the respective VLAN entry is intended for.
	Bridge           *string  `pulumi:"bridge"`
	Comment          *string  `pulumi:"comment"`
	CurrentTaggeds   []string `pulumi:"currentTaggeds"`
	CurrentUntaggeds []string `pulumi:"currentUntaggeds"`
	Disabled         *bool    `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic *bool `pulumi:"dynamic"`
	// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g.
	// tagged=ether1,ether2.
	Taggeds []string `pulumi:"taggeds"`
	// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g.
	// untagged=ether3,ether4
	Untaggeds []string `pulumi:"untaggeds"`
	// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated
	// values. E.g. vlan-ids=100-115,120,122,128-130.
	VlanIds *string `pulumi:"vlanIds"`
}

type BridgeVlanState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The bridge interface which the respective VLAN entry is intended for.
	Bridge           pulumi.StringPtrInput
	Comment          pulumi.StringPtrInput
	CurrentTaggeds   pulumi.StringArrayInput
	CurrentUntaggeds pulumi.StringArrayInput
	Disabled         pulumi.BoolPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic pulumi.BoolPtrInput
	// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g.
	// tagged=ether1,ether2.
	Taggeds pulumi.StringArrayInput
	// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g.
	// untagged=ether3,ether4
	Untaggeds pulumi.StringArrayInput
	// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated
	// values. E.g. vlan-ids=100-115,120,122,128-130.
	VlanIds pulumi.StringPtrInput
}

func (BridgeVlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*bridgeVlanState)(nil)).Elem()
}

type bridgeVlanArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The bridge interface which the respective VLAN entry is intended for.
	Bridge   string  `pulumi:"bridge"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g.
	// tagged=ether1,ether2.
	Taggeds []string `pulumi:"taggeds"`
	// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g.
	// untagged=ether3,ether4
	Untaggeds []string `pulumi:"untaggeds"`
	// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated
	// values. E.g. vlan-ids=100-115,120,122,128-130.
	VlanIds string `pulumi:"vlanIds"`
}

// The set of arguments for constructing a BridgeVlan resource.
type BridgeVlanArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The bridge interface which the respective VLAN entry is intended for.
	Bridge   pulumi.StringInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g.
	// tagged=ether1,ether2.
	Taggeds pulumi.StringArrayInput
	// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g.
	// untagged=ether3,ether4
	Untaggeds pulumi.StringArrayInput
	// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated
	// values. E.g. vlan-ids=100-115,120,122,128-130.
	VlanIds pulumi.StringInput
}

func (BridgeVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bridgeVlanArgs)(nil)).Elem()
}

type BridgeVlanInput interface {
	pulumi.Input

	ToBridgeVlanOutput() BridgeVlanOutput
	ToBridgeVlanOutputWithContext(ctx context.Context) BridgeVlanOutput
}

func (*BridgeVlan) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeVlan)(nil)).Elem()
}

func (i *BridgeVlan) ToBridgeVlanOutput() BridgeVlanOutput {
	return i.ToBridgeVlanOutputWithContext(context.Background())
}

func (i *BridgeVlan) ToBridgeVlanOutputWithContext(ctx context.Context) BridgeVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeVlanOutput)
}

// BridgeVlanArrayInput is an input type that accepts BridgeVlanArray and BridgeVlanArrayOutput values.
// You can construct a concrete instance of `BridgeVlanArrayInput` via:
//
//	BridgeVlanArray{ BridgeVlanArgs{...} }
type BridgeVlanArrayInput interface {
	pulumi.Input

	ToBridgeVlanArrayOutput() BridgeVlanArrayOutput
	ToBridgeVlanArrayOutputWithContext(context.Context) BridgeVlanArrayOutput
}

type BridgeVlanArray []BridgeVlanInput

func (BridgeVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BridgeVlan)(nil)).Elem()
}

func (i BridgeVlanArray) ToBridgeVlanArrayOutput() BridgeVlanArrayOutput {
	return i.ToBridgeVlanArrayOutputWithContext(context.Background())
}

func (i BridgeVlanArray) ToBridgeVlanArrayOutputWithContext(ctx context.Context) BridgeVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeVlanArrayOutput)
}

// BridgeVlanMapInput is an input type that accepts BridgeVlanMap and BridgeVlanMapOutput values.
// You can construct a concrete instance of `BridgeVlanMapInput` via:
//
//	BridgeVlanMap{ "key": BridgeVlanArgs{...} }
type BridgeVlanMapInput interface {
	pulumi.Input

	ToBridgeVlanMapOutput() BridgeVlanMapOutput
	ToBridgeVlanMapOutputWithContext(context.Context) BridgeVlanMapOutput
}

type BridgeVlanMap map[string]BridgeVlanInput

func (BridgeVlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BridgeVlan)(nil)).Elem()
}

func (i BridgeVlanMap) ToBridgeVlanMapOutput() BridgeVlanMapOutput {
	return i.ToBridgeVlanMapOutputWithContext(context.Background())
}

func (i BridgeVlanMap) ToBridgeVlanMapOutputWithContext(ctx context.Context) BridgeVlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeVlanMapOutput)
}

type BridgeVlanOutput struct{ *pulumi.OutputState }

func (BridgeVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeVlan)(nil)).Elem()
}

func (o BridgeVlanOutput) ToBridgeVlanOutput() BridgeVlanOutput {
	return o
}

func (o BridgeVlanOutput) ToBridgeVlanOutputWithContext(ctx context.Context) BridgeVlanOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o BridgeVlanOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o BridgeVlanOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// The bridge interface which the respective VLAN entry is intended for.
func (o BridgeVlanOutput) Bridge() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.StringOutput { return v.Bridge }).(pulumi.StringOutput)
}

func (o BridgeVlanOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o BridgeVlanOutput) CurrentTaggeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.StringArrayOutput { return v.CurrentTaggeds }).(pulumi.StringArrayOutput)
}

func (o BridgeVlanOutput) CurrentUntaggeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.StringArrayOutput { return v.CurrentUntaggeds }).(pulumi.StringArrayOutput)
}

func (o BridgeVlanOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
// modified.
func (o BridgeVlanOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g.
// tagged=ether1,ether2.
func (o BridgeVlanOutput) Taggeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.StringArrayOutput { return v.Taggeds }).(pulumi.StringArrayOutput)
}

// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g.
// untagged=ether3,ether4
func (o BridgeVlanOutput) Untaggeds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.StringArrayOutput { return v.Untaggeds }).(pulumi.StringArrayOutput)
}

// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated
// values. E.g. vlan-ids=100-115,120,122,128-130.
func (o BridgeVlanOutput) VlanIds() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgeVlan) pulumi.StringOutput { return v.VlanIds }).(pulumi.StringOutput)
}

type BridgeVlanArrayOutput struct{ *pulumi.OutputState }

func (BridgeVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BridgeVlan)(nil)).Elem()
}

func (o BridgeVlanArrayOutput) ToBridgeVlanArrayOutput() BridgeVlanArrayOutput {
	return o
}

func (o BridgeVlanArrayOutput) ToBridgeVlanArrayOutputWithContext(ctx context.Context) BridgeVlanArrayOutput {
	return o
}

func (o BridgeVlanArrayOutput) Index(i pulumi.IntInput) BridgeVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BridgeVlan {
		return vs[0].([]*BridgeVlan)[vs[1].(int)]
	}).(BridgeVlanOutput)
}

type BridgeVlanMapOutput struct{ *pulumi.OutputState }

func (BridgeVlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BridgeVlan)(nil)).Elem()
}

func (o BridgeVlanMapOutput) ToBridgeVlanMapOutput() BridgeVlanMapOutput {
	return o
}

func (o BridgeVlanMapOutput) ToBridgeVlanMapOutputWithContext(ctx context.Context) BridgeVlanMapOutput {
	return o
}

func (o BridgeVlanMapOutput) MapIndex(k pulumi.StringInput) BridgeVlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BridgeVlan {
		return vs[0].(map[string]*BridgeVlan)[vs[1].(string)]
	}).(BridgeVlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeVlanInput)(nil)).Elem(), &BridgeVlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeVlanArrayInput)(nil)).Elem(), BridgeVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeVlanMapInput)(nil)).Elem(), BridgeVlanMap{})
	pulumi.RegisterOutputType(BridgeVlanOutput{})
	pulumi.RegisterOutputType(BridgeVlanArrayOutput{})
	pulumi.RegisterOutputType(BridgeVlanMapOutput{})
}
