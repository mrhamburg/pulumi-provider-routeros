// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iface

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Iface"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Iface.NewInterfaceVrrp(ctx, "interfaceVrrp", &Iface.InterfaceVrrpArgs{
//				Interface: pulumi.String("bridge"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/vrrp get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:Iface/interfaceVrrp:InterfaceVrrp interface_vrrp "*0"
//
// ```
type InterfaceVrrp struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// ARP resolution protocol mode.
	Arp pulumi.StringPtrOutput `pulumi:"arp"`
	// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
	ArpTimeout pulumi.StringPtrOutput `pulumi:"arpTimeout"`
	// Authentication method to use for VRRP advertisement packets.
	Authentication pulumi.StringPtrOutput `pulumi:"authentication"`
	Comment        pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled       pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
	GroupMaster pulumi.StringOutput `pulumi:"groupMaster"`
	// Name of the interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// VRRP update interval in seconds. Defines how often master sends advertisement packets.
	Interval   pulumi.StringPtrOutput `pulumi:"interval"`
	Invalid    pulumi.BoolOutput      `pulumi:"invalid"`
	MacAddress pulumi.StringOutput    `pulumi:"macAddress"`
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu pulumi.StringOutput `pulumi:"mtu"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringOutput `pulumi:"name"`
	// Script to execute when the node is switched to the backup state.
	OnBackup pulumi.StringPtrOutput `pulumi:"onBackup"`
	// Script to execute when the node fails.
	OnFail pulumi.StringPtrOutput `pulumi:"onFail"`
	// Script to execute when the node is switched to master state.
	OnMaster pulumi.StringPtrOutput `pulumi:"onMaster"`
	// Password required for authentication. Can be ignored if authentication is not used.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
	PreemptionMode pulumi.BoolPtrOutput `pulumi:"preemptionMode"`
	// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
	RemoteAddress pulumi.StringPtrOutput `pulumi:"remoteAddress"`
	Running       pulumi.BoolOutput      `pulumi:"running"`
	// Synchronize connection tracking entries from Master to Backup device.
	SyncConnectionTracking pulumi.BoolPtrOutput `pulumi:"syncConnectionTracking"`
	// A protocol that will be used by VRRPv3. Valid only if the version is 3.
	V3Protocol pulumi.StringPtrOutput `pulumi:"v3Protocol"`
	// Which VRRP version to use.
	Version pulumi.IntPtrOutput `pulumi:"version"`
	// Virtual Router identifier. Each Virtual router must have a unique id number.
	Vrid pulumi.IntPtrOutput `pulumi:"vrid"`
}

// NewInterfaceVrrp registers a new resource with the given unique name, arguments, and options.
func NewInterfaceVrrp(ctx *pulumi.Context,
	name string, args *InterfaceVrrpArgs, opts ...pulumi.ResourceOption) (*InterfaceVrrp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	var resource InterfaceVrrp
	err := ctx.RegisterResource("routeros:Iface/interfaceVrrp:InterfaceVrrp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfaceVrrp gets an existing InterfaceVrrp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfaceVrrp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceVrrpState, opts ...pulumi.ResourceOption) (*InterfaceVrrp, error) {
	var resource InterfaceVrrp
	err := ctx.ReadResource("routeros:Iface/interfaceVrrp:InterfaceVrrp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfaceVrrp resources.
type interfaceVrrpState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// ARP resolution protocol mode.
	Arp *string `pulumi:"arp"`
	// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
	ArpTimeout *string `pulumi:"arpTimeout"`
	// Authentication method to use for VRRP advertisement packets.
	Authentication *string `pulumi:"authentication"`
	Comment        *string `pulumi:"comment"`
	Disabled       *bool   `pulumi:"disabled"`
	// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
	GroupMaster *string `pulumi:"groupMaster"`
	// Name of the interface.
	Interface *string `pulumi:"interface"`
	// VRRP update interval in seconds. Defines how often master sends advertisement packets.
	Interval   *string `pulumi:"interval"`
	Invalid    *bool   `pulumi:"invalid"`
	MacAddress *string `pulumi:"macAddress"`
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu *string `pulumi:"mtu"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name *string `pulumi:"name"`
	// Script to execute when the node is switched to the backup state.
	OnBackup *string `pulumi:"onBackup"`
	// Script to execute when the node fails.
	OnFail *string `pulumi:"onFail"`
	// Script to execute when the node is switched to master state.
	OnMaster *string `pulumi:"onMaster"`
	// Password required for authentication. Can be ignored if authentication is not used.
	Password *string `pulumi:"password"`
	// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
	PreemptionMode *bool `pulumi:"preemptionMode"`
	// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
	Priority *int `pulumi:"priority"`
	// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
	RemoteAddress *string `pulumi:"remoteAddress"`
	Running       *bool   `pulumi:"running"`
	// Synchronize connection tracking entries from Master to Backup device.
	SyncConnectionTracking *bool `pulumi:"syncConnectionTracking"`
	// A protocol that will be used by VRRPv3. Valid only if the version is 3.
	V3Protocol *string `pulumi:"v3Protocol"`
	// Which VRRP version to use.
	Version *int `pulumi:"version"`
	// Virtual Router identifier. Each Virtual router must have a unique id number.
	Vrid *int `pulumi:"vrid"`
}

type InterfaceVrrpState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// ARP resolution protocol mode.
	Arp pulumi.StringPtrInput
	// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
	ArpTimeout pulumi.StringPtrInput
	// Authentication method to use for VRRP advertisement packets.
	Authentication pulumi.StringPtrInput
	Comment        pulumi.StringPtrInput
	Disabled       pulumi.BoolPtrInput
	// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
	GroupMaster pulumi.StringPtrInput
	// Name of the interface.
	Interface pulumi.StringPtrInput
	// VRRP update interval in seconds. Defines how often master sends advertisement packets.
	Interval   pulumi.StringPtrInput
	Invalid    pulumi.BoolPtrInput
	MacAddress pulumi.StringPtrInput
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringPtrInput
	// Script to execute when the node is switched to the backup state.
	OnBackup pulumi.StringPtrInput
	// Script to execute when the node fails.
	OnFail pulumi.StringPtrInput
	// Script to execute when the node is switched to master state.
	OnMaster pulumi.StringPtrInput
	// Password required for authentication. Can be ignored if authentication is not used.
	Password pulumi.StringPtrInput
	// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
	PreemptionMode pulumi.BoolPtrInput
	// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
	Priority pulumi.IntPtrInput
	// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
	RemoteAddress pulumi.StringPtrInput
	Running       pulumi.BoolPtrInput
	// Synchronize connection tracking entries from Master to Backup device.
	SyncConnectionTracking pulumi.BoolPtrInput
	// A protocol that will be used by VRRPv3. Valid only if the version is 3.
	V3Protocol pulumi.StringPtrInput
	// Which VRRP version to use.
	Version pulumi.IntPtrInput
	// Virtual Router identifier. Each Virtual router must have a unique id number.
	Vrid pulumi.IntPtrInput
}

func (InterfaceVrrpState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceVrrpState)(nil)).Elem()
}

type interfaceVrrpArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// ARP resolution protocol mode.
	Arp *string `pulumi:"arp"`
	// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
	ArpTimeout *string `pulumi:"arpTimeout"`
	// Authentication method to use for VRRP advertisement packets.
	Authentication *string `pulumi:"authentication"`
	Comment        *string `pulumi:"comment"`
	Disabled       *bool   `pulumi:"disabled"`
	// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
	GroupMaster *string `pulumi:"groupMaster"`
	// Name of the interface.
	Interface string `pulumi:"interface"`
	// VRRP update interval in seconds. Defines how often master sends advertisement packets.
	Interval *string `pulumi:"interval"`
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu *string `pulumi:"mtu"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name *string `pulumi:"name"`
	// Script to execute when the node is switched to the backup state.
	OnBackup *string `pulumi:"onBackup"`
	// Script to execute when the node fails.
	OnFail *string `pulumi:"onFail"`
	// Script to execute when the node is switched to master state.
	OnMaster *string `pulumi:"onMaster"`
	// Password required for authentication. Can be ignored if authentication is not used.
	Password *string `pulumi:"password"`
	// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
	PreemptionMode *bool `pulumi:"preemptionMode"`
	// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
	Priority *int `pulumi:"priority"`
	// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
	RemoteAddress *string `pulumi:"remoteAddress"`
	// Synchronize connection tracking entries from Master to Backup device.
	SyncConnectionTracking *bool `pulumi:"syncConnectionTracking"`
	// A protocol that will be used by VRRPv3. Valid only if the version is 3.
	V3Protocol *string `pulumi:"v3Protocol"`
	// Which VRRP version to use.
	Version *int `pulumi:"version"`
	// Virtual Router identifier. Each Virtual router must have a unique id number.
	Vrid *int `pulumi:"vrid"`
}

// The set of arguments for constructing a InterfaceVrrp resource.
type InterfaceVrrpArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// ARP resolution protocol mode.
	Arp pulumi.StringPtrInput
	// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
	ArpTimeout pulumi.StringPtrInput
	// Authentication method to use for VRRP advertisement packets.
	Authentication pulumi.StringPtrInput
	Comment        pulumi.StringPtrInput
	Disabled       pulumi.BoolPtrInput
	// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
	GroupMaster pulumi.StringPtrInput
	// Name of the interface.
	Interface pulumi.StringInput
	// VRRP update interval in seconds. Defines how often master sends advertisement packets.
	Interval pulumi.StringPtrInput
	// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
	Mtu pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringPtrInput
	// Script to execute when the node is switched to the backup state.
	OnBackup pulumi.StringPtrInput
	// Script to execute when the node fails.
	OnFail pulumi.StringPtrInput
	// Script to execute when the node is switched to master state.
	OnMaster pulumi.StringPtrInput
	// Password required for authentication. Can be ignored if authentication is not used.
	Password pulumi.StringPtrInput
	// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
	PreemptionMode pulumi.BoolPtrInput
	// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
	Priority pulumi.IntPtrInput
	// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
	RemoteAddress pulumi.StringPtrInput
	// Synchronize connection tracking entries from Master to Backup device.
	SyncConnectionTracking pulumi.BoolPtrInput
	// A protocol that will be used by VRRPv3. Valid only if the version is 3.
	V3Protocol pulumi.StringPtrInput
	// Which VRRP version to use.
	Version pulumi.IntPtrInput
	// Virtual Router identifier. Each Virtual router must have a unique id number.
	Vrid pulumi.IntPtrInput
}

func (InterfaceVrrpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceVrrpArgs)(nil)).Elem()
}

type InterfaceVrrpInput interface {
	pulumi.Input

	ToInterfaceVrrpOutput() InterfaceVrrpOutput
	ToInterfaceVrrpOutputWithContext(ctx context.Context) InterfaceVrrpOutput
}

func (*InterfaceVrrp) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceVrrp)(nil)).Elem()
}

func (i *InterfaceVrrp) ToInterfaceVrrpOutput() InterfaceVrrpOutput {
	return i.ToInterfaceVrrpOutputWithContext(context.Background())
}

func (i *InterfaceVrrp) ToInterfaceVrrpOutputWithContext(ctx context.Context) InterfaceVrrpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVrrpOutput)
}

// InterfaceVrrpArrayInput is an input type that accepts InterfaceVrrpArray and InterfaceVrrpArrayOutput values.
// You can construct a concrete instance of `InterfaceVrrpArrayInput` via:
//
//	InterfaceVrrpArray{ InterfaceVrrpArgs{...} }
type InterfaceVrrpArrayInput interface {
	pulumi.Input

	ToInterfaceVrrpArrayOutput() InterfaceVrrpArrayOutput
	ToInterfaceVrrpArrayOutputWithContext(context.Context) InterfaceVrrpArrayOutput
}

type InterfaceVrrpArray []InterfaceVrrpInput

func (InterfaceVrrpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceVrrp)(nil)).Elem()
}

func (i InterfaceVrrpArray) ToInterfaceVrrpArrayOutput() InterfaceVrrpArrayOutput {
	return i.ToInterfaceVrrpArrayOutputWithContext(context.Background())
}

func (i InterfaceVrrpArray) ToInterfaceVrrpArrayOutputWithContext(ctx context.Context) InterfaceVrrpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVrrpArrayOutput)
}

// InterfaceVrrpMapInput is an input type that accepts InterfaceVrrpMap and InterfaceVrrpMapOutput values.
// You can construct a concrete instance of `InterfaceVrrpMapInput` via:
//
//	InterfaceVrrpMap{ "key": InterfaceVrrpArgs{...} }
type InterfaceVrrpMapInput interface {
	pulumi.Input

	ToInterfaceVrrpMapOutput() InterfaceVrrpMapOutput
	ToInterfaceVrrpMapOutputWithContext(context.Context) InterfaceVrrpMapOutput
}

type InterfaceVrrpMap map[string]InterfaceVrrpInput

func (InterfaceVrrpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceVrrp)(nil)).Elem()
}

func (i InterfaceVrrpMap) ToInterfaceVrrpMapOutput() InterfaceVrrpMapOutput {
	return i.ToInterfaceVrrpMapOutputWithContext(context.Background())
}

func (i InterfaceVrrpMap) ToInterfaceVrrpMapOutputWithContext(ctx context.Context) InterfaceVrrpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVrrpMapOutput)
}

type InterfaceVrrpOutput struct{ *pulumi.OutputState }

func (InterfaceVrrpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceVrrp)(nil)).Elem()
}

func (o InterfaceVrrpOutput) ToInterfaceVrrpOutput() InterfaceVrrpOutput {
	return o
}

func (o InterfaceVrrpOutput) ToInterfaceVrrpOutputWithContext(ctx context.Context) InterfaceVrrpOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o InterfaceVrrpOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o InterfaceVrrpOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// ARP resolution protocol mode.
func (o InterfaceVrrpOutput) Arp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.Arp }).(pulumi.StringPtrOutput)
}

// ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
func (o InterfaceVrrpOutput) ArpTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.ArpTimeout }).(pulumi.StringPtrOutput)
}

// Authentication method to use for VRRP advertisement packets.
func (o InterfaceVrrpOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.Authentication }).(pulumi.StringPtrOutput)
}

func (o InterfaceVrrpOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o InterfaceVrrpOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
func (o InterfaceVrrpOutput) GroupMaster() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringOutput { return v.GroupMaster }).(pulumi.StringOutput)
}

// Name of the interface.
func (o InterfaceVrrpOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// VRRP update interval in seconds. Defines how often master sends advertisement packets.
func (o InterfaceVrrpOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o InterfaceVrrpOutput) Invalid() pulumi.BoolOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.BoolOutput { return v.Invalid }).(pulumi.BoolOutput)
}

func (o InterfaceVrrpOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// Layer3 Maximum transmission unit ('auto', 0 .. 65535)
func (o InterfaceVrrpOutput) Mtu() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringOutput { return v.Mtu }).(pulumi.StringOutput)
}

// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
// integrity for that resource!
func (o InterfaceVrrpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Script to execute when the node is switched to the backup state.
func (o InterfaceVrrpOutput) OnBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.OnBackup }).(pulumi.StringPtrOutput)
}

// Script to execute when the node fails.
func (o InterfaceVrrpOutput) OnFail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.OnFail }).(pulumi.StringPtrOutput)
}

// Script to execute when the node is switched to master state.
func (o InterfaceVrrpOutput) OnMaster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.OnMaster }).(pulumi.StringPtrOutput)
}

// Password required for authentication. Can be ignored if authentication is not used.
func (o InterfaceVrrpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
func (o InterfaceVrrpOutput) PreemptionMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.BoolPtrOutput { return v.PreemptionMode }).(pulumi.BoolPtrOutput)
}

// Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
func (o InterfaceVrrpOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
func (o InterfaceVrrpOutput) RemoteAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.RemoteAddress }).(pulumi.StringPtrOutput)
}

func (o InterfaceVrrpOutput) Running() pulumi.BoolOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.BoolOutput { return v.Running }).(pulumi.BoolOutput)
}

// Synchronize connection tracking entries from Master to Backup device.
func (o InterfaceVrrpOutput) SyncConnectionTracking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.BoolPtrOutput { return v.SyncConnectionTracking }).(pulumi.BoolPtrOutput)
}

// A protocol that will be used by VRRPv3. Valid only if the version is 3.
func (o InterfaceVrrpOutput) V3Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.StringPtrOutput { return v.V3Protocol }).(pulumi.StringPtrOutput)
}

// Which VRRP version to use.
func (o InterfaceVrrpOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.IntPtrOutput { return v.Version }).(pulumi.IntPtrOutput)
}

// Virtual Router identifier. Each Virtual router must have a unique id number.
func (o InterfaceVrrpOutput) Vrid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceVrrp) pulumi.IntPtrOutput { return v.Vrid }).(pulumi.IntPtrOutput)
}

type InterfaceVrrpArrayOutput struct{ *pulumi.OutputState }

func (InterfaceVrrpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceVrrp)(nil)).Elem()
}

func (o InterfaceVrrpArrayOutput) ToInterfaceVrrpArrayOutput() InterfaceVrrpArrayOutput {
	return o
}

func (o InterfaceVrrpArrayOutput) ToInterfaceVrrpArrayOutputWithContext(ctx context.Context) InterfaceVrrpArrayOutput {
	return o
}

func (o InterfaceVrrpArrayOutput) Index(i pulumi.IntInput) InterfaceVrrpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfaceVrrp {
		return vs[0].([]*InterfaceVrrp)[vs[1].(int)]
	}).(InterfaceVrrpOutput)
}

type InterfaceVrrpMapOutput struct{ *pulumi.OutputState }

func (InterfaceVrrpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceVrrp)(nil)).Elem()
}

func (o InterfaceVrrpMapOutput) ToInterfaceVrrpMapOutput() InterfaceVrrpMapOutput {
	return o
}

func (o InterfaceVrrpMapOutput) ToInterfaceVrrpMapOutputWithContext(ctx context.Context) InterfaceVrrpMapOutput {
	return o
}

func (o InterfaceVrrpMapOutput) MapIndex(k pulumi.StringInput) InterfaceVrrpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfaceVrrp {
		return vs[0].(map[string]*InterfaceVrrp)[vs[1].(string)]
	}).(InterfaceVrrpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVrrpInput)(nil)).Elem(), &InterfaceVrrp{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVrrpArrayInput)(nil)).Elem(), InterfaceVrrpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVrrpMapInput)(nil)).Elem(), InterfaceVrrpMap{})
	pulumi.RegisterOutputType(InterfaceVrrpOutput{})
	pulumi.RegisterOutputType(InterfaceVrrpArrayOutput{})
	pulumi.RegisterOutputType(InterfaceVrrpMapOutput{})
}
