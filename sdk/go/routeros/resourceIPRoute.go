// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routeros

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := routeros.NewResourceIPRoute(ctx, "aRoute", &routeros.ResourceIPRouteArgs{
//				DstAddress: pulumi.String("0.0.0.0/0"),
//				Gateway:    pulumi.String("10.0.0.1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/route get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:index/resourceIPRoute:ResourceIPRoute a_route "*0"
//
// ```
type ResourceIPRoute struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
	Active pulumi.BoolOutput `pulumi:"active"`
	// It's a blackhole route.
	Blackhole pulumi.BoolPtrOutput `pulumi:"blackhole"`
	// Currently used check-gateway option.
	CheckGateway pulumi.StringPtrOutput `pulumi:"checkGateway"`
	Comment      pulumi.StringPtrOutput `pulumi:"comment"`
	// A flag indicates whether the route was added by the DHCP service.
	Dhcp     pulumi.BoolOutput    `pulumi:"dhcp"`
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance pulumi.IntPtrOutput `pulumi:"distance"`
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress pulumi.StringPtrOutput `pulumi:"dstAddress"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
	Ecmp pulumi.BoolOutput `pulumi:"ecmp"`
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
	HwOffloaded pulumi.BoolOutput `pulumi:"hwOffloaded"`
	// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
	ImmediateGw pulumi.StringOutput `pulumi:"immediateGw"`
	Inactive    pulumi.BoolOutput   `pulumi:"inactive"`
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc pulumi.StringPtrOutput `pulumi:"prefSrc"`
	// Routing table this route belongs to.
	RoutingTable pulumi.StringPtrOutput `pulumi:"routingTable"`
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope             pulumi.IntPtrOutput `pulumi:"scope"`
	Static            pulumi.BoolOutput   `pulumi:"static"`
	SuppressHwOffload pulumi.BoolOutput   `pulumi:"suppressHwOffload"`
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope pulumi.IntPtrOutput `pulumi:"targetScope"`
	// VRF interface name.
	VrfInterface pulumi.StringOutput `pulumi:"vrfInterface"`
}

// NewResourceIPRoute registers a new resource with the given unique name, arguments, and options.
func NewResourceIPRoute(ctx *pulumi.Context,
	name string, args *ResourceIPRouteArgs, opts ...pulumi.ResourceOption) (*ResourceIPRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	var resource ResourceIPRoute
	err := ctx.RegisterResource("routeros:index/resourceIPRoute:ResourceIPRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceIPRoute gets an existing ResourceIPRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceIPRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceIPRouteState, opts ...pulumi.ResourceOption) (*ResourceIPRoute, error) {
	var resource ResourceIPRoute
	err := ctx.ReadResource("routeros:index/resourceIPRoute:ResourceIPRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceIPRoute resources.
type resourceIPRouteState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
	Active *bool `pulumi:"active"`
	// It's a blackhole route.
	Blackhole *bool `pulumi:"blackhole"`
	// Currently used check-gateway option.
	CheckGateway *string `pulumi:"checkGateway"`
	Comment      *string `pulumi:"comment"`
	// A flag indicates whether the route was added by the DHCP service.
	Dhcp     *bool `pulumi:"dhcp"`
	Disabled *bool `pulumi:"disabled"`
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance *int `pulumi:"distance"`
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress *string `pulumi:"dstAddress"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
	Ecmp *bool `pulumi:"ecmp"`
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway *string `pulumi:"gateway"`
	// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
	HwOffloaded *bool `pulumi:"hwOffloaded"`
	// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
	ImmediateGw *string `pulumi:"immediateGw"`
	Inactive    *bool   `pulumi:"inactive"`
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc *string `pulumi:"prefSrc"`
	// Routing table this route belongs to.
	RoutingTable *string `pulumi:"routingTable"`
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope             *int  `pulumi:"scope"`
	Static            *bool `pulumi:"static"`
	SuppressHwOffload *bool `pulumi:"suppressHwOffload"`
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope *int `pulumi:"targetScope"`
	// VRF interface name.
	VrfInterface *string `pulumi:"vrfInterface"`
}

type ResourceIPRouteState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
	Active pulumi.BoolPtrInput
	// It's a blackhole route.
	Blackhole pulumi.BoolPtrInput
	// Currently used check-gateway option.
	CheckGateway pulumi.StringPtrInput
	Comment      pulumi.StringPtrInput
	// A flag indicates whether the route was added by the DHCP service.
	Dhcp     pulumi.BoolPtrInput
	Disabled pulumi.BoolPtrInput
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance pulumi.IntPtrInput
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress pulumi.StringPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
	Ecmp pulumi.BoolPtrInput
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway pulumi.StringPtrInput
	// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
	HwOffloaded pulumi.BoolPtrInput
	// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
	ImmediateGw pulumi.StringPtrInput
	Inactive    pulumi.BoolPtrInput
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc pulumi.StringPtrInput
	// Routing table this route belongs to.
	RoutingTable pulumi.StringPtrInput
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope             pulumi.IntPtrInput
	Static            pulumi.BoolPtrInput
	SuppressHwOffload pulumi.BoolPtrInput
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope pulumi.IntPtrInput
	// VRF interface name.
	VrfInterface pulumi.StringPtrInput
}

func (ResourceIPRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceIPRouteState)(nil)).Elem()
}

type resourceIPRouteArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// It's a blackhole route.
	Blackhole *bool `pulumi:"blackhole"`
	// Currently used check-gateway option.
	CheckGateway *string `pulumi:"checkGateway"`
	Comment      *string `pulumi:"comment"`
	Disabled     *bool   `pulumi:"disabled"`
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance *int `pulumi:"distance"`
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress *string `pulumi:"dstAddress"`
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway string `pulumi:"gateway"`
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc *string `pulumi:"prefSrc"`
	// Routing table this route belongs to.
	RoutingTable *string `pulumi:"routingTable"`
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope *int `pulumi:"scope"`
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope *int `pulumi:"targetScope"`
	// VRF interface name.
	VrfInterface *string `pulumi:"vrfInterface"`
}

// The set of arguments for constructing a ResourceIPRoute resource.
type ResourceIPRouteArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// It's a blackhole route.
	Blackhole pulumi.BoolPtrInput
	// Currently used check-gateway option.
	CheckGateway pulumi.StringPtrInput
	Comment      pulumi.StringPtrInput
	Disabled     pulumi.BoolPtrInput
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance pulumi.IntPtrInput
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress pulumi.StringPtrInput
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway pulumi.StringInput
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc pulumi.StringPtrInput
	// Routing table this route belongs to.
	RoutingTable pulumi.StringPtrInput
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope pulumi.IntPtrInput
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope pulumi.IntPtrInput
	// VRF interface name.
	VrfInterface pulumi.StringPtrInput
}

func (ResourceIPRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceIPRouteArgs)(nil)).Elem()
}

type ResourceIPRouteInput interface {
	pulumi.Input

	ToResourceIPRouteOutput() ResourceIPRouteOutput
	ToResourceIPRouteOutputWithContext(ctx context.Context) ResourceIPRouteOutput
}

func (*ResourceIPRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIPRoute)(nil)).Elem()
}

func (i *ResourceIPRoute) ToResourceIPRouteOutput() ResourceIPRouteOutput {
	return i.ToResourceIPRouteOutputWithContext(context.Background())
}

func (i *ResourceIPRoute) ToResourceIPRouteOutputWithContext(ctx context.Context) ResourceIPRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIPRouteOutput)
}

// ResourceIPRouteArrayInput is an input type that accepts ResourceIPRouteArray and ResourceIPRouteArrayOutput values.
// You can construct a concrete instance of `ResourceIPRouteArrayInput` via:
//
//	ResourceIPRouteArray{ ResourceIPRouteArgs{...} }
type ResourceIPRouteArrayInput interface {
	pulumi.Input

	ToResourceIPRouteArrayOutput() ResourceIPRouteArrayOutput
	ToResourceIPRouteArrayOutputWithContext(context.Context) ResourceIPRouteArrayOutput
}

type ResourceIPRouteArray []ResourceIPRouteInput

func (ResourceIPRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceIPRoute)(nil)).Elem()
}

func (i ResourceIPRouteArray) ToResourceIPRouteArrayOutput() ResourceIPRouteArrayOutput {
	return i.ToResourceIPRouteArrayOutputWithContext(context.Background())
}

func (i ResourceIPRouteArray) ToResourceIPRouteArrayOutputWithContext(ctx context.Context) ResourceIPRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIPRouteArrayOutput)
}

// ResourceIPRouteMapInput is an input type that accepts ResourceIPRouteMap and ResourceIPRouteMapOutput values.
// You can construct a concrete instance of `ResourceIPRouteMapInput` via:
//
//	ResourceIPRouteMap{ "key": ResourceIPRouteArgs{...} }
type ResourceIPRouteMapInput interface {
	pulumi.Input

	ToResourceIPRouteMapOutput() ResourceIPRouteMapOutput
	ToResourceIPRouteMapOutputWithContext(context.Context) ResourceIPRouteMapOutput
}

type ResourceIPRouteMap map[string]ResourceIPRouteInput

func (ResourceIPRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceIPRoute)(nil)).Elem()
}

func (i ResourceIPRouteMap) ToResourceIPRouteMapOutput() ResourceIPRouteMapOutput {
	return i.ToResourceIPRouteMapOutputWithContext(context.Background())
}

func (i ResourceIPRouteMap) ToResourceIPRouteMapOutputWithContext(ctx context.Context) ResourceIPRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIPRouteMapOutput)
}

type ResourceIPRouteOutput struct{ *pulumi.OutputState }

func (ResourceIPRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIPRoute)(nil)).Elem()
}

func (o ResourceIPRouteOutput) ToResourceIPRouteOutput() ResourceIPRouteOutput {
	return o
}

func (o ResourceIPRouteOutput) ToResourceIPRouteOutputWithContext(ctx context.Context) ResourceIPRouteOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ResourceIPRouteOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ResourceIPRouteOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
func (o ResourceIPRouteOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// It's a blackhole route.
func (o ResourceIPRouteOutput) Blackhole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.BoolPtrOutput { return v.Blackhole }).(pulumi.BoolPtrOutput)
}

// Currently used check-gateway option.
func (o ResourceIPRouteOutput) CheckGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.StringPtrOutput { return v.CheckGateway }).(pulumi.StringPtrOutput)
}

func (o ResourceIPRouteOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// A flag indicates whether the route was added by the DHCP service.
func (o ResourceIPRouteOutput) Dhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.BoolOutput { return v.Dhcp }).(pulumi.BoolOutput)
}

func (o ResourceIPRouteOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Value used in route selection. Routes with smaller distance value are given preference.
func (o ResourceIPRouteOutput) Distance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.IntPtrOutput { return v.Distance }).(pulumi.IntPtrOutput)
}

// IP prefix of route, specifies destination addresses that this route can be used for.
func (o ResourceIPRouteOutput) DstAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.StringPtrOutput { return v.DstAddress }).(pulumi.StringPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o ResourceIPRouteOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
func (o ResourceIPRouteOutput) Ecmp() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.BoolOutput { return v.Ecmp }).(pulumi.BoolOutput)
}

// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
func (o ResourceIPRouteOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
func (o ResourceIPRouteOutput) HwOffloaded() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.BoolOutput { return v.HwOffloaded }).(pulumi.BoolOutput)
}

// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
func (o ResourceIPRouteOutput) ImmediateGw() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.StringOutput { return v.ImmediateGw }).(pulumi.StringOutput)
}

func (o ResourceIPRouteOutput) Inactive() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.BoolOutput { return v.Inactive }).(pulumi.BoolOutput)
}

// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
func (o ResourceIPRouteOutput) PrefSrc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.StringPtrOutput { return v.PrefSrc }).(pulumi.StringPtrOutput)
}

// Routing table this route belongs to.
func (o ResourceIPRouteOutput) RoutingTable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.StringPtrOutput { return v.RoutingTable }).(pulumi.StringPtrOutput)
}

// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
func (o ResourceIPRouteOutput) Scope() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.IntPtrOutput { return v.Scope }).(pulumi.IntPtrOutput)
}

func (o ResourceIPRouteOutput) Static() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.BoolOutput { return v.Static }).(pulumi.BoolOutput)
}

func (o ResourceIPRouteOutput) SuppressHwOffload() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.BoolOutput { return v.SuppressHwOffload }).(pulumi.BoolOutput)
}

// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
func (o ResourceIPRouteOutput) TargetScope() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.IntPtrOutput { return v.TargetScope }).(pulumi.IntPtrOutput)
}

// VRF interface name.
func (o ResourceIPRouteOutput) VrfInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceIPRoute) pulumi.StringOutput { return v.VrfInterface }).(pulumi.StringOutput)
}

type ResourceIPRouteArrayOutput struct{ *pulumi.OutputState }

func (ResourceIPRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceIPRoute)(nil)).Elem()
}

func (o ResourceIPRouteArrayOutput) ToResourceIPRouteArrayOutput() ResourceIPRouteArrayOutput {
	return o
}

func (o ResourceIPRouteArrayOutput) ToResourceIPRouteArrayOutputWithContext(ctx context.Context) ResourceIPRouteArrayOutput {
	return o
}

func (o ResourceIPRouteArrayOutput) Index(i pulumi.IntInput) ResourceIPRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceIPRoute {
		return vs[0].([]*ResourceIPRoute)[vs[1].(int)]
	}).(ResourceIPRouteOutput)
}

type ResourceIPRouteMapOutput struct{ *pulumi.OutputState }

func (ResourceIPRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceIPRoute)(nil)).Elem()
}

func (o ResourceIPRouteMapOutput) ToResourceIPRouteMapOutput() ResourceIPRouteMapOutput {
	return o
}

func (o ResourceIPRouteMapOutput) ToResourceIPRouteMapOutputWithContext(ctx context.Context) ResourceIPRouteMapOutput {
	return o
}

func (o ResourceIPRouteMapOutput) MapIndex(k pulumi.StringInput) ResourceIPRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceIPRoute {
		return vs[0].(map[string]*ResourceIPRoute)[vs[1].(string)]
	}).(ResourceIPRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceIPRouteInput)(nil)).Elem(), &ResourceIPRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceIPRouteArrayInput)(nil)).Elem(), ResourceIPRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceIPRouteMapInput)(nil)).Elem(), ResourceIPRouteMap{})
	pulumi.RegisterOutputType(ResourceIPRouteOutput{})
	pulumi.RegisterOutputType(ResourceIPRouteArrayOutput{})
	pulumi.RegisterOutputType(ResourceIPRouteMapOutput{})
}
