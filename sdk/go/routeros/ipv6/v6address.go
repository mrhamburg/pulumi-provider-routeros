// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipv6

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Ipv6"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ipv6.NewV6Address(ctx, "ipv6Address", &Ipv6.V6AddressArgs{
//				Address:   pulumi.String("fd55::1/64"),
//				Disabled:  pulumi.Bool(false),
//				Interface: pulumi.String("ether1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ipv6/address get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:Ipv6/v6Address:V6Address ipv6_address "*0"
//
// ```
type V6Address struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Name of the actual interface the logical one is bound to.
	ActualInterface pulumi.StringOutput `pulumi:"actualInterface"`
	// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
	Address pulumi.StringOutput `pulumi:"address"`
	// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
	Advertise pulumi.BoolPtrOutput   `pulumi:"advertise"`
	Comment   pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled  pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
	Eui64 pulumi.BoolPtrOutput `pulumi:"eui64"`
	// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
	FromPool pulumi.StringPtrOutput `pulumi:"fromPool"`
	// Whether address is global.
	Global pulumi.BoolOutput `pulumi:"global"`
	// Name of the interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	Invalid   pulumi.BoolOutput   `pulumi:"invalid"`
	// Whether address is link local.
	LinkLocal pulumi.BoolOutput `pulumi:"linkLocal"`
	// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
	NoDad pulumi.BoolPtrOutput `pulumi:"noDad"`
}

// NewV6Address registers a new resource with the given unique name, arguments, and options.
func NewV6Address(ctx *pulumi.Context,
	name string, args *V6AddressArgs, opts ...pulumi.ResourceOption) (*V6Address, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	var resource V6Address
	err := ctx.RegisterResource("routeros:Ipv6/v6Address:V6Address", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV6Address gets an existing V6Address resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV6Address(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V6AddressState, opts ...pulumi.ResourceOption) (*V6Address, error) {
	var resource V6Address
	err := ctx.ReadResource("routeros:Ipv6/v6Address:V6Address", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V6Address resources.
type v6addressState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Name of the actual interface the logical one is bound to.
	ActualInterface *string `pulumi:"actualInterface"`
	// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
	Address *string `pulumi:"address"`
	// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
	Advertise *bool   `pulumi:"advertise"`
	Comment   *string `pulumi:"comment"`
	Disabled  *bool   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
	Eui64 *bool `pulumi:"eui64"`
	// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
	FromPool *string `pulumi:"fromPool"`
	// Whether address is global.
	Global *bool `pulumi:"global"`
	// Name of the interface.
	Interface *string `pulumi:"interface"`
	Invalid   *bool   `pulumi:"invalid"`
	// Whether address is link local.
	LinkLocal *bool `pulumi:"linkLocal"`
	// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
	NoDad *bool `pulumi:"noDad"`
}

type V6AddressState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Name of the actual interface the logical one is bound to.
	ActualInterface pulumi.StringPtrInput
	// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
	Address pulumi.StringPtrInput
	// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
	Advertise pulumi.BoolPtrInput
	Comment   pulumi.StringPtrInput
	Disabled  pulumi.BoolPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
	Eui64 pulumi.BoolPtrInput
	// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
	FromPool pulumi.StringPtrInput
	// Whether address is global.
	Global pulumi.BoolPtrInput
	// Name of the interface.
	Interface pulumi.StringPtrInput
	Invalid   pulumi.BoolPtrInput
	// Whether address is link local.
	LinkLocal pulumi.BoolPtrInput
	// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
	NoDad pulumi.BoolPtrInput
}

func (V6AddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*v6addressState)(nil)).Elem()
}

type v6addressArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
	Address *string `pulumi:"address"`
	// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
	Advertise *bool   `pulumi:"advertise"`
	Comment   *string `pulumi:"comment"`
	Disabled  *bool   `pulumi:"disabled"`
	// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
	Eui64 *bool `pulumi:"eui64"`
	// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
	FromPool *string `pulumi:"fromPool"`
	// Name of the interface.
	Interface string `pulumi:"interface"`
	// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
	NoDad *bool `pulumi:"noDad"`
}

// The set of arguments for constructing a V6Address resource.
type V6AddressArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
	Address pulumi.StringPtrInput
	// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
	Advertise pulumi.BoolPtrInput
	Comment   pulumi.StringPtrInput
	Disabled  pulumi.BoolPtrInput
	// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
	Eui64 pulumi.BoolPtrInput
	// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
	FromPool pulumi.StringPtrInput
	// Name of the interface.
	Interface pulumi.StringInput
	// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
	NoDad pulumi.BoolPtrInput
}

func (V6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v6addressArgs)(nil)).Elem()
}

type V6AddressInput interface {
	pulumi.Input

	ToV6AddressOutput() V6AddressOutput
	ToV6AddressOutputWithContext(ctx context.Context) V6AddressOutput
}

func (*V6Address) ElementType() reflect.Type {
	return reflect.TypeOf((**V6Address)(nil)).Elem()
}

func (i *V6Address) ToV6AddressOutput() V6AddressOutput {
	return i.ToV6AddressOutputWithContext(context.Background())
}

func (i *V6Address) ToV6AddressOutputWithContext(ctx context.Context) V6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V6AddressOutput)
}

// V6AddressArrayInput is an input type that accepts V6AddressArray and V6AddressArrayOutput values.
// You can construct a concrete instance of `V6AddressArrayInput` via:
//
//	V6AddressArray{ V6AddressArgs{...} }
type V6AddressArrayInput interface {
	pulumi.Input

	ToV6AddressArrayOutput() V6AddressArrayOutput
	ToV6AddressArrayOutputWithContext(context.Context) V6AddressArrayOutput
}

type V6AddressArray []V6AddressInput

func (V6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V6Address)(nil)).Elem()
}

func (i V6AddressArray) ToV6AddressArrayOutput() V6AddressArrayOutput {
	return i.ToV6AddressArrayOutputWithContext(context.Background())
}

func (i V6AddressArray) ToV6AddressArrayOutputWithContext(ctx context.Context) V6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V6AddressArrayOutput)
}

// V6AddressMapInput is an input type that accepts V6AddressMap and V6AddressMapOutput values.
// You can construct a concrete instance of `V6AddressMapInput` via:
//
//	V6AddressMap{ "key": V6AddressArgs{...} }
type V6AddressMapInput interface {
	pulumi.Input

	ToV6AddressMapOutput() V6AddressMapOutput
	ToV6AddressMapOutputWithContext(context.Context) V6AddressMapOutput
}

type V6AddressMap map[string]V6AddressInput

func (V6AddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V6Address)(nil)).Elem()
}

func (i V6AddressMap) ToV6AddressMapOutput() V6AddressMapOutput {
	return i.ToV6AddressMapOutputWithContext(context.Background())
}

func (i V6AddressMap) ToV6AddressMapOutputWithContext(ctx context.Context) V6AddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V6AddressMapOutput)
}

type V6AddressOutput struct{ *pulumi.OutputState }

func (V6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V6Address)(nil)).Elem()
}

func (o V6AddressOutput) ToV6AddressOutput() V6AddressOutput {
	return o
}

func (o V6AddressOutput) ToV6AddressOutputWithContext(ctx context.Context) V6AddressOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o V6AddressOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *V6Address) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o V6AddressOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V6Address) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Name of the actual interface the logical one is bound to.
func (o V6AddressOutput) ActualInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *V6Address) pulumi.StringOutput { return v.ActualInterface }).(pulumi.StringOutput)
}

// IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
func (o V6AddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *V6Address) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
func (o V6AddressOutput) Advertise() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *V6Address) pulumi.BoolPtrOutput { return v.Advertise }).(pulumi.BoolPtrOutput)
}

func (o V6AddressOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V6Address) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o V6AddressOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *V6Address) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o V6AddressOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *V6Address) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
func (o V6AddressOutput) Eui64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *V6Address) pulumi.BoolPtrOutput { return v.Eui64 }).(pulumi.BoolPtrOutput)
}

// Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
func (o V6AddressOutput) FromPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V6Address) pulumi.StringPtrOutput { return v.FromPool }).(pulumi.StringPtrOutput)
}

// Whether address is global.
func (o V6AddressOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v *V6Address) pulumi.BoolOutput { return v.Global }).(pulumi.BoolOutput)
}

// Name of the interface.
func (o V6AddressOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *V6Address) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o V6AddressOutput) Invalid() pulumi.BoolOutput {
	return o.ApplyT(func(v *V6Address) pulumi.BoolOutput { return v.Invalid }).(pulumi.BoolOutput)
}

// Whether address is link local.
func (o V6AddressOutput) LinkLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v *V6Address) pulumi.BoolOutput { return v.LinkLocal }).(pulumi.BoolOutput)
}

// If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
func (o V6AddressOutput) NoDad() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *V6Address) pulumi.BoolPtrOutput { return v.NoDad }).(pulumi.BoolPtrOutput)
}

type V6AddressArrayOutput struct{ *pulumi.OutputState }

func (V6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V6Address)(nil)).Elem()
}

func (o V6AddressArrayOutput) ToV6AddressArrayOutput() V6AddressArrayOutput {
	return o
}

func (o V6AddressArrayOutput) ToV6AddressArrayOutputWithContext(ctx context.Context) V6AddressArrayOutput {
	return o
}

func (o V6AddressArrayOutput) Index(i pulumi.IntInput) V6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V6Address {
		return vs[0].([]*V6Address)[vs[1].(int)]
	}).(V6AddressOutput)
}

type V6AddressMapOutput struct{ *pulumi.OutputState }

func (V6AddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V6Address)(nil)).Elem()
}

func (o V6AddressMapOutput) ToV6AddressMapOutput() V6AddressMapOutput {
	return o
}

func (o V6AddressMapOutput) ToV6AddressMapOutputWithContext(ctx context.Context) V6AddressMapOutput {
	return o
}

func (o V6AddressMapOutput) MapIndex(k pulumi.StringInput) V6AddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V6Address {
		return vs[0].(map[string]*V6Address)[vs[1].(string)]
	}).(V6AddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V6AddressInput)(nil)).Elem(), &V6Address{})
	pulumi.RegisterInputType(reflect.TypeOf((*V6AddressArrayInput)(nil)).Elem(), V6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V6AddressMapInput)(nil)).Elem(), V6AddressMap{})
	pulumi.RegisterOutputType(V6AddressOutput{})
	pulumi.RegisterOutputType(V6AddressArrayOutput{})
	pulumi.RegisterOutputType(V6AddressMapOutput{})
}
