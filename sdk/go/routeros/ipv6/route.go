// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipv6

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Ipv6"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ipv6.NewRoute(ctx, "aRoute", &Ipv6.RouteArgs{
//				DstAddress: pulumi.String("::/0"),
//				Gateway:    pulumi.String("2001:DB8:1000::1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ipv6/route get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:Ipv6/route:Route a_route "*0"
//
// ```
type Route struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
	Active pulumi.BoolOutput `pulumi:"active"`
	// It's a blackhole route.
	Blackhole pulumi.BoolPtrOutput   `pulumi:"blackhole"`
	Comment   pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled  pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance pulumi.IntPtrOutput `pulumi:"distance"`
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress pulumi.StringOutput `pulumi:"dstAddress"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
	Ecmp pulumi.BoolOutput `pulumi:"ecmp"`
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
	HwOffloaded pulumi.BoolOutput `pulumi:"hwOffloaded"`
	// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
	ImmediateGw pulumi.StringOutput `pulumi:"immediateGw"`
	Inactive    pulumi.BoolOutput   `pulumi:"inactive"`
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc pulumi.StringPtrOutput `pulumi:"prefSrc"`
	// Routing table this route belongs to.
	RoutingTable pulumi.StringPtrOutput `pulumi:"routingTable"`
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope             pulumi.IntPtrOutput `pulumi:"scope"`
	Static            pulumi.BoolOutput   `pulumi:"static"`
	SuppressHwOffload pulumi.BoolOutput   `pulumi:"suppressHwOffload"`
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope pulumi.IntPtrOutput `pulumi:"targetScope"`
	// VRF interface name.
	VrfInterface pulumi.StringOutput `pulumi:"vrfInterface"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DstAddress == nil {
		return nil, errors.New("invalid value for required argument 'DstAddress'")
	}
	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	var resource Route
	err := ctx.RegisterResource("routeros:Ipv6/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("routeros:Ipv6/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
	Active *bool `pulumi:"active"`
	// It's a blackhole route.
	Blackhole *bool   `pulumi:"blackhole"`
	Comment   *string `pulumi:"comment"`
	Disabled  *bool   `pulumi:"disabled"`
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance *int `pulumi:"distance"`
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress *string `pulumi:"dstAddress"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
	Ecmp *bool `pulumi:"ecmp"`
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway *string `pulumi:"gateway"`
	// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
	HwOffloaded *bool `pulumi:"hwOffloaded"`
	// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
	ImmediateGw *string `pulumi:"immediateGw"`
	Inactive    *bool   `pulumi:"inactive"`
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc *string `pulumi:"prefSrc"`
	// Routing table this route belongs to.
	RoutingTable *string `pulumi:"routingTable"`
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope             *int  `pulumi:"scope"`
	Static            *bool `pulumi:"static"`
	SuppressHwOffload *bool `pulumi:"suppressHwOffload"`
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope *int `pulumi:"targetScope"`
	// VRF interface name.
	VrfInterface *string `pulumi:"vrfInterface"`
}

type RouteState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
	Active pulumi.BoolPtrInput
	// It's a blackhole route.
	Blackhole pulumi.BoolPtrInput
	Comment   pulumi.StringPtrInput
	Disabled  pulumi.BoolPtrInput
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance pulumi.IntPtrInput
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress pulumi.StringPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
	Ecmp pulumi.BoolPtrInput
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway pulumi.StringPtrInput
	// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
	HwOffloaded pulumi.BoolPtrInput
	// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
	ImmediateGw pulumi.StringPtrInput
	Inactive    pulumi.BoolPtrInput
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc pulumi.StringPtrInput
	// Routing table this route belongs to.
	RoutingTable pulumi.StringPtrInput
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope             pulumi.IntPtrInput
	Static            pulumi.BoolPtrInput
	SuppressHwOffload pulumi.BoolPtrInput
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope pulumi.IntPtrInput
	// VRF interface name.
	VrfInterface pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// It's a blackhole route.
	Blackhole *bool   `pulumi:"blackhole"`
	Comment   *string `pulumi:"comment"`
	Disabled  *bool   `pulumi:"disabled"`
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance *int `pulumi:"distance"`
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress string `pulumi:"dstAddress"`
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway string `pulumi:"gateway"`
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc *string `pulumi:"prefSrc"`
	// Routing table this route belongs to.
	RoutingTable *string `pulumi:"routingTable"`
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope *int `pulumi:"scope"`
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope *int `pulumi:"targetScope"`
	// VRF interface name.
	VrfInterface *string `pulumi:"vrfInterface"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// It's a blackhole route.
	Blackhole pulumi.BoolPtrInput
	Comment   pulumi.StringPtrInput
	Disabled  pulumi.BoolPtrInput
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance pulumi.IntPtrInput
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress pulumi.StringInput
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway pulumi.StringInput
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc pulumi.StringPtrInput
	// Routing table this route belongs to.
	RoutingTable pulumi.StringPtrInput
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope pulumi.IntPtrInput
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope pulumi.IntPtrInput
	// VRF interface name.
	VrfInterface pulumi.StringPtrInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

// RouteArrayInput is an input type that accepts RouteArray and RouteArrayOutput values.
// You can construct a concrete instance of `RouteArrayInput` via:
//
//	RouteArray{ RouteArgs{...} }
type RouteArrayInput interface {
	pulumi.Input

	ToRouteArrayOutput() RouteArrayOutput
	ToRouteArrayOutputWithContext(context.Context) RouteArrayOutput
}

type RouteArray []RouteInput

func (RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (i RouteArray) ToRouteArrayOutput() RouteArrayOutput {
	return i.ToRouteArrayOutputWithContext(context.Background())
}

func (i RouteArray) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteArrayOutput)
}

// RouteMapInput is an input type that accepts RouteMap and RouteMapOutput values.
// You can construct a concrete instance of `RouteMapInput` via:
//
//	RouteMap{ "key": RouteArgs{...} }
type RouteMapInput interface {
	pulumi.Input

	ToRouteMapOutput() RouteMapOutput
	ToRouteMapOutputWithContext(context.Context) RouteMapOutput
}

type RouteMap map[string]RouteInput

func (RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (i RouteMap) ToRouteMapOutput() RouteMapOutput {
	return i.ToRouteMapOutputWithContext(context.Background())
}

func (i RouteMap) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o RouteOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o RouteOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
func (o RouteOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// It's a blackhole route.
func (o RouteOutput) Blackhole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolPtrOutput { return v.Blackhole }).(pulumi.BoolPtrOutput)
}

func (o RouteOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o RouteOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Value used in route selection. Routes with smaller distance value are given preference.
func (o RouteOutput) Distance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.IntPtrOutput { return v.Distance }).(pulumi.IntPtrOutput)
}

// IP prefix of route, specifies destination addresses that this route can be used for.
func (o RouteOutput) DstAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.DstAddress }).(pulumi.StringOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o RouteOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
func (o RouteOutput) Ecmp() pulumi.BoolOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolOutput { return v.Ecmp }).(pulumi.BoolOutput)
}

// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
func (o RouteOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
func (o RouteOutput) HwOffloaded() pulumi.BoolOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolOutput { return v.HwOffloaded }).(pulumi.BoolOutput)
}

// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
func (o RouteOutput) ImmediateGw() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.ImmediateGw }).(pulumi.StringOutput)
}

func (o RouteOutput) Inactive() pulumi.BoolOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolOutput { return v.Inactive }).(pulumi.BoolOutput)
}

// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
func (o RouteOutput) PrefSrc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.PrefSrc }).(pulumi.StringPtrOutput)
}

// Routing table this route belongs to.
func (o RouteOutput) RoutingTable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.RoutingTable }).(pulumi.StringPtrOutput)
}

// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
func (o RouteOutput) Scope() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.IntPtrOutput { return v.Scope }).(pulumi.IntPtrOutput)
}

func (o RouteOutput) Static() pulumi.BoolOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolOutput { return v.Static }).(pulumi.BoolOutput)
}

func (o RouteOutput) SuppressHwOffload() pulumi.BoolOutput {
	return o.ApplyT(func(v *Route) pulumi.BoolOutput { return v.SuppressHwOffload }).(pulumi.BoolOutput)
}

// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
func (o RouteOutput) TargetScope() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.IntPtrOutput { return v.TargetScope }).(pulumi.IntPtrOutput)
}

// VRF interface name.
func (o RouteOutput) VrfInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.VrfInterface }).(pulumi.StringOutput)
}

type RouteArrayOutput struct{ *pulumi.OutputState }

func (RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (o RouteArrayOutput) ToRouteArrayOutput() RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) Index(i pulumi.IntInput) RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Route {
		return vs[0].([]*Route)[vs[1].(int)]
	}).(RouteOutput)
}

type RouteMapOutput struct{ *pulumi.OutputState }

func (RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (o RouteMapOutput) ToRouteMapOutput() RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return o
}

func (o RouteMapOutput) MapIndex(k pulumi.StringInput) RouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Route {
		return vs[0].(map[string]*Route)[vs[1].(string)]
	}).(RouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteArrayInput)(nil)).Elem(), RouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapInput)(nil)).Elem(), RouteMap{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RouteArrayOutput{})
	pulumi.RegisterOutputType(RouteMapOutput{})
}
