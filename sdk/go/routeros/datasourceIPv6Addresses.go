// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routeros

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func DatasourceIPv6Addresses(ctx *pulumi.Context, args *DatasourceIPv6AddressesArgs, opts ...pulumi.InvokeOption) (*DatasourceIPv6AddressesResult, error) {
	var rv DatasourceIPv6AddressesResult
	err := ctx.Invoke("routeros:index/datasourceIPv6Addresses:DatasourceIPv6Addresses", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking DatasourceIPv6Addresses.
type DatasourceIPv6AddressesArgs struct {
	___id_   *int    `pulumi:"___id_"`
	___path_ *string `pulumi:"___path_"`
	// Additional request filtering options.
	Filter map[string]interface{} `pulumi:"filter"`
}

// A collection of values returned by DatasourceIPv6Addresses.
type DatasourceIPv6AddressesResult struct {
	___id_    *int                             `pulumi:"___id_"`
	___path_  *string                          `pulumi:"___path_"`
	Addresses []DatasourceIPv6AddressesAddress `pulumi:"addresses"`
	// Additional request filtering options.
	Filter map[string]interface{} `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
}

func DatasourceIPv6AddressesOutput(ctx *pulumi.Context, args DatasourceIPv6AddressesOutputArgs, opts ...pulumi.InvokeOption) DatasourceIPv6AddressesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (DatasourceIPv6AddressesResult, error) {
			args := v.(DatasourceIPv6AddressesArgs)
			r, err := DatasourceIPv6Addresses(ctx, &args, opts...)
			var s DatasourceIPv6AddressesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(DatasourceIPv6AddressesResultOutput)
}

// A collection of arguments for invoking DatasourceIPv6Addresses.
type DatasourceIPv6AddressesOutputArgs struct {
	___id_   pulumi.IntPtrInput    `pulumi:"___id_"`
	___path_ pulumi.StringPtrInput `pulumi:"___path_"`
	// Additional request filtering options.
	Filter pulumi.MapInput `pulumi:"filter"`
}

func (DatasourceIPv6AddressesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasourceIPv6AddressesArgs)(nil)).Elem()
}

// A collection of values returned by DatasourceIPv6Addresses.
type DatasourceIPv6AddressesResultOutput struct{ *pulumi.OutputState }

func (DatasourceIPv6AddressesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasourceIPv6AddressesResult)(nil)).Elem()
}

func (o DatasourceIPv6AddressesResultOutput) ToDatasourceIPv6AddressesResultOutput() DatasourceIPv6AddressesResultOutput {
	return o
}

func (o DatasourceIPv6AddressesResultOutput) ToDatasourceIPv6AddressesResultOutputWithContext(ctx context.Context) DatasourceIPv6AddressesResultOutput {
	return o
}

func (o DatasourceIPv6AddressesResultOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatasourceIPv6AddressesResult) *int { return v.___id_ }).(pulumi.IntPtrOutput)
}

func (o DatasourceIPv6AddressesResultOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasourceIPv6AddressesResult) *string { return v.___path_ }).(pulumi.StringPtrOutput)
}

func (o DatasourceIPv6AddressesResultOutput) Addresses() DatasourceIPv6AddressesAddressArrayOutput {
	return o.ApplyT(func(v DatasourceIPv6AddressesResult) []DatasourceIPv6AddressesAddress { return v.Addresses }).(DatasourceIPv6AddressesAddressArrayOutput)
}

// Additional request filtering options.
func (o DatasourceIPv6AddressesResultOutput) Filter() pulumi.MapOutput {
	return o.ApplyT(func(v DatasourceIPv6AddressesResult) map[string]interface{} { return v.Filter }).(pulumi.MapOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o DatasourceIPv6AddressesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DatasourceIPv6AddressesResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DatasourceIPv6AddressesResultOutput{})
}
