// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package capsman

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/CapsMan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CapsMan.NewManager(ctx, "testManager", &CapsMan.ManagerArgs{
//				Enabled:       pulumi.Bool(true),
//				UpgradePolicy: pulumi.String("require-same-version"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import routeros:CapsMan/manager:Manager test_manager .
//
// ```
type Manager struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Device CA certificate.
	CaCertificate pulumi.StringPtrOutput `pulumi:"caCertificate"`
	// Device certificate.
	Certificate pulumi.StringPtrOutput `pulumi:"certificate"`
	// Disable or enable CAPsMAN functionality.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
	PackagePath pulumi.StringPtrOutput `pulumi:"packagePath"`
	// Require all connecting CAPs to have a valid certificate.
	RequirePeerCertificate pulumi.BoolPtrOutput `pulumi:"requirePeerCertificate"`
	// Upgrade policy options.
	UpgradePolicy pulumi.StringPtrOutput `pulumi:"upgradePolicy"`
}

// NewManager registers a new resource with the given unique name, arguments, and options.
func NewManager(ctx *pulumi.Context,
	name string, args *ManagerArgs, opts ...pulumi.ResourceOption) (*Manager, error) {
	if args == nil {
		args = &ManagerArgs{}
	}

	var resource Manager
	err := ctx.RegisterResource("routeros:CapsMan/manager:Manager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManager gets an existing Manager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagerState, opts ...pulumi.ResourceOption) (*Manager, error) {
	var resource Manager
	err := ctx.ReadResource("routeros:CapsMan/manager:Manager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Manager resources.
type managerState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Device CA certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// Device certificate.
	Certificate *string `pulumi:"certificate"`
	// Disable or enable CAPsMAN functionality.
	Enabled *bool `pulumi:"enabled"`
	// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
	PackagePath *string `pulumi:"packagePath"`
	// Require all connecting CAPs to have a valid certificate.
	RequirePeerCertificate *bool `pulumi:"requirePeerCertificate"`
	// Upgrade policy options.
	UpgradePolicy *string `pulumi:"upgradePolicy"`
}

type ManagerState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Device CA certificate.
	CaCertificate pulumi.StringPtrInput
	// Device certificate.
	Certificate pulumi.StringPtrInput
	// Disable or enable CAPsMAN functionality.
	Enabled pulumi.BoolPtrInput
	// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
	PackagePath pulumi.StringPtrInput
	// Require all connecting CAPs to have a valid certificate.
	RequirePeerCertificate pulumi.BoolPtrInput
	// Upgrade policy options.
	UpgradePolicy pulumi.StringPtrInput
}

func (ManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*managerState)(nil)).Elem()
}

type managerArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Device CA certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// Device certificate.
	Certificate *string `pulumi:"certificate"`
	// Disable or enable CAPsMAN functionality.
	Enabled *bool `pulumi:"enabled"`
	// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
	PackagePath *string `pulumi:"packagePath"`
	// Require all connecting CAPs to have a valid certificate.
	RequirePeerCertificate *bool `pulumi:"requirePeerCertificate"`
	// Upgrade policy options.
	UpgradePolicy *string `pulumi:"upgradePolicy"`
}

// The set of arguments for constructing a Manager resource.
type ManagerArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Device CA certificate.
	CaCertificate pulumi.StringPtrInput
	// Device certificate.
	Certificate pulumi.StringPtrInput
	// Disable or enable CAPsMAN functionality.
	Enabled pulumi.BoolPtrInput
	// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
	PackagePath pulumi.StringPtrInput
	// Require all connecting CAPs to have a valid certificate.
	RequirePeerCertificate pulumi.BoolPtrInput
	// Upgrade policy options.
	UpgradePolicy pulumi.StringPtrInput
}

func (ManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managerArgs)(nil)).Elem()
}

type ManagerInput interface {
	pulumi.Input

	ToManagerOutput() ManagerOutput
	ToManagerOutputWithContext(ctx context.Context) ManagerOutput
}

func (*Manager) ElementType() reflect.Type {
	return reflect.TypeOf((**Manager)(nil)).Elem()
}

func (i *Manager) ToManagerOutput() ManagerOutput {
	return i.ToManagerOutputWithContext(context.Background())
}

func (i *Manager) ToManagerOutputWithContext(ctx context.Context) ManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagerOutput)
}

// ManagerArrayInput is an input type that accepts ManagerArray and ManagerArrayOutput values.
// You can construct a concrete instance of `ManagerArrayInput` via:
//
//	ManagerArray{ ManagerArgs{...} }
type ManagerArrayInput interface {
	pulumi.Input

	ToManagerArrayOutput() ManagerArrayOutput
	ToManagerArrayOutputWithContext(context.Context) ManagerArrayOutput
}

type ManagerArray []ManagerInput

func (ManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Manager)(nil)).Elem()
}

func (i ManagerArray) ToManagerArrayOutput() ManagerArrayOutput {
	return i.ToManagerArrayOutputWithContext(context.Background())
}

func (i ManagerArray) ToManagerArrayOutputWithContext(ctx context.Context) ManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagerArrayOutput)
}

// ManagerMapInput is an input type that accepts ManagerMap and ManagerMapOutput values.
// You can construct a concrete instance of `ManagerMapInput` via:
//
//	ManagerMap{ "key": ManagerArgs{...} }
type ManagerMapInput interface {
	pulumi.Input

	ToManagerMapOutput() ManagerMapOutput
	ToManagerMapOutputWithContext(context.Context) ManagerMapOutput
}

type ManagerMap map[string]ManagerInput

func (ManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Manager)(nil)).Elem()
}

func (i ManagerMap) ToManagerMapOutput() ManagerMapOutput {
	return i.ToManagerMapOutputWithContext(context.Background())
}

func (i ManagerMap) ToManagerMapOutputWithContext(ctx context.Context) ManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagerMapOutput)
}

type ManagerOutput struct{ *pulumi.OutputState }

func (ManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Manager)(nil)).Elem()
}

func (o ManagerOutput) ToManagerOutput() ManagerOutput {
	return o
}

func (o ManagerOutput) ToManagerOutputWithContext(ctx context.Context) ManagerOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ManagerOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Manager) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ManagerOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Manager) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Device CA certificate.
func (o ManagerOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Manager) pulumi.StringPtrOutput { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// Device certificate.
func (o ManagerOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Manager) pulumi.StringPtrOutput { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Disable or enable CAPsMAN functionality.
func (o ManagerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Manager) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
func (o ManagerOutput) PackagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Manager) pulumi.StringPtrOutput { return v.PackagePath }).(pulumi.StringPtrOutput)
}

// Require all connecting CAPs to have a valid certificate.
func (o ManagerOutput) RequirePeerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Manager) pulumi.BoolPtrOutput { return v.RequirePeerCertificate }).(pulumi.BoolPtrOutput)
}

// Upgrade policy options.
func (o ManagerOutput) UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Manager) pulumi.StringPtrOutput { return v.UpgradePolicy }).(pulumi.StringPtrOutput)
}

type ManagerArrayOutput struct{ *pulumi.OutputState }

func (ManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Manager)(nil)).Elem()
}

func (o ManagerArrayOutput) ToManagerArrayOutput() ManagerArrayOutput {
	return o
}

func (o ManagerArrayOutput) ToManagerArrayOutputWithContext(ctx context.Context) ManagerArrayOutput {
	return o
}

func (o ManagerArrayOutput) Index(i pulumi.IntInput) ManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Manager {
		return vs[0].([]*Manager)[vs[1].(int)]
	}).(ManagerOutput)
}

type ManagerMapOutput struct{ *pulumi.OutputState }

func (ManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Manager)(nil)).Elem()
}

func (o ManagerMapOutput) ToManagerMapOutput() ManagerMapOutput {
	return o
}

func (o ManagerMapOutput) ToManagerMapOutputWithContext(ctx context.Context) ManagerMapOutput {
	return o
}

func (o ManagerMapOutput) MapIndex(k pulumi.StringInput) ManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Manager {
		return vs[0].(map[string]*Manager)[vs[1].(string)]
	}).(ManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagerInput)(nil)).Elem(), &Manager{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagerArrayInput)(nil)).Elem(), ManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagerMapInput)(nil)).Elem(), ManagerMap{})
	pulumi.RegisterOutputType(ManagerOutput{})
	pulumi.RegisterOutputType(ManagerArrayOutput{})
	pulumi.RegisterOutputType(ManagerMapOutput{})
}
