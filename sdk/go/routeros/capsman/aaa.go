// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package capsman

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/CapsMan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CapsMan.NewAaa(ctx, "test3a", &CapsMan.AaaArgs{
//				CalledFormat: pulumi.String("ssid"),
//				MacMode:      pulumi.String("as-username-and-password"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import routeros:CapsMan/aaa:Aaa test_3a .
//
// ```
type Aaa struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Format of how the 'called-id' identifier will be passed to RADIUS. When configuring radius server clients, you can specify 'called-id' in order to separate multiple entires.
	CalledFormat pulumi.StringPtrOutput `pulumi:"calledFormat"`
	// When RADIUS accounting is used, Access Point periodically sends accounting information updates to the RADIUS server. This property specifies the default update interval that can be overridden by the RADIUS server using the Acct-Interim-Interval attribute.
	InterimUpdate pulumi.StringOutput `pulumi:"interimUpdate"`
	// If this value is set to a time interval, the Access Point will cache RADIUS MAC authentication responses for a specified time, and will not contact the RADIUS server if matching cache entry already exists. The value disabled will disable the cache, Access Point will always contact the RADIUS server.
	MacCaching pulumi.StringOutput `pulumi:"macCaching"`
	// Controls how the MAC address of the client is encoded by Access Point in the User-Name attribute of the MAC authentication and MAC accounting RADIUS requests.
	MacFormat pulumi.StringPtrOutput `pulumi:"macFormat"`
	// By default Access Point uses an empty password, when sending Access-Request during MAC authentication. When this property is set to as-username-and-password, Access Point will use the same value for the User-Password attribute as for the User-Name attribute.
	MacMode pulumi.StringPtrOutput `pulumi:"macMode"`
}

// NewAaa registers a new resource with the given unique name, arguments, and options.
func NewAaa(ctx *pulumi.Context,
	name string, args *AaaArgs, opts ...pulumi.ResourceOption) (*Aaa, error) {
	if args == nil {
		args = &AaaArgs{}
	}

	var resource Aaa
	err := ctx.RegisterResource("routeros:CapsMan/aaa:Aaa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAaa gets an existing Aaa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAaa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AaaState, opts ...pulumi.ResourceOption) (*Aaa, error) {
	var resource Aaa
	err := ctx.ReadResource("routeros:CapsMan/aaa:Aaa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Aaa resources.
type aaaState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Format of how the 'called-id' identifier will be passed to RADIUS. When configuring radius server clients, you can specify 'called-id' in order to separate multiple entires.
	CalledFormat *string `pulumi:"calledFormat"`
	// When RADIUS accounting is used, Access Point periodically sends accounting information updates to the RADIUS server. This property specifies the default update interval that can be overridden by the RADIUS server using the Acct-Interim-Interval attribute.
	InterimUpdate *string `pulumi:"interimUpdate"`
	// If this value is set to a time interval, the Access Point will cache RADIUS MAC authentication responses for a specified time, and will not contact the RADIUS server if matching cache entry already exists. The value disabled will disable the cache, Access Point will always contact the RADIUS server.
	MacCaching *string `pulumi:"macCaching"`
	// Controls how the MAC address of the client is encoded by Access Point in the User-Name attribute of the MAC authentication and MAC accounting RADIUS requests.
	MacFormat *string `pulumi:"macFormat"`
	// By default Access Point uses an empty password, when sending Access-Request during MAC authentication. When this property is set to as-username-and-password, Access Point will use the same value for the User-Password attribute as for the User-Name attribute.
	MacMode *string `pulumi:"macMode"`
}

type AaaState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Format of how the 'called-id' identifier will be passed to RADIUS. When configuring radius server clients, you can specify 'called-id' in order to separate multiple entires.
	CalledFormat pulumi.StringPtrInput
	// When RADIUS accounting is used, Access Point periodically sends accounting information updates to the RADIUS server. This property specifies the default update interval that can be overridden by the RADIUS server using the Acct-Interim-Interval attribute.
	InterimUpdate pulumi.StringPtrInput
	// If this value is set to a time interval, the Access Point will cache RADIUS MAC authentication responses for a specified time, and will not contact the RADIUS server if matching cache entry already exists. The value disabled will disable the cache, Access Point will always contact the RADIUS server.
	MacCaching pulumi.StringPtrInput
	// Controls how the MAC address of the client is encoded by Access Point in the User-Name attribute of the MAC authentication and MAC accounting RADIUS requests.
	MacFormat pulumi.StringPtrInput
	// By default Access Point uses an empty password, when sending Access-Request during MAC authentication. When this property is set to as-username-and-password, Access Point will use the same value for the User-Password attribute as for the User-Name attribute.
	MacMode pulumi.StringPtrInput
}

func (AaaState) ElementType() reflect.Type {
	return reflect.TypeOf((*aaaState)(nil)).Elem()
}

type aaaArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Format of how the 'called-id' identifier will be passed to RADIUS. When configuring radius server clients, you can specify 'called-id' in order to separate multiple entires.
	CalledFormat *string `pulumi:"calledFormat"`
	// When RADIUS accounting is used, Access Point periodically sends accounting information updates to the RADIUS server. This property specifies the default update interval that can be overridden by the RADIUS server using the Acct-Interim-Interval attribute.
	InterimUpdate *string `pulumi:"interimUpdate"`
	// If this value is set to a time interval, the Access Point will cache RADIUS MAC authentication responses for a specified time, and will not contact the RADIUS server if matching cache entry already exists. The value disabled will disable the cache, Access Point will always contact the RADIUS server.
	MacCaching *string `pulumi:"macCaching"`
	// Controls how the MAC address of the client is encoded by Access Point in the User-Name attribute of the MAC authentication and MAC accounting RADIUS requests.
	MacFormat *string `pulumi:"macFormat"`
	// By default Access Point uses an empty password, when sending Access-Request during MAC authentication. When this property is set to as-username-and-password, Access Point will use the same value for the User-Password attribute as for the User-Name attribute.
	MacMode *string `pulumi:"macMode"`
}

// The set of arguments for constructing a Aaa resource.
type AaaArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Format of how the 'called-id' identifier will be passed to RADIUS. When configuring radius server clients, you can specify 'called-id' in order to separate multiple entires.
	CalledFormat pulumi.StringPtrInput
	// When RADIUS accounting is used, Access Point periodically sends accounting information updates to the RADIUS server. This property specifies the default update interval that can be overridden by the RADIUS server using the Acct-Interim-Interval attribute.
	InterimUpdate pulumi.StringPtrInput
	// If this value is set to a time interval, the Access Point will cache RADIUS MAC authentication responses for a specified time, and will not contact the RADIUS server if matching cache entry already exists. The value disabled will disable the cache, Access Point will always contact the RADIUS server.
	MacCaching pulumi.StringPtrInput
	// Controls how the MAC address of the client is encoded by Access Point in the User-Name attribute of the MAC authentication and MAC accounting RADIUS requests.
	MacFormat pulumi.StringPtrInput
	// By default Access Point uses an empty password, when sending Access-Request during MAC authentication. When this property is set to as-username-and-password, Access Point will use the same value for the User-Password attribute as for the User-Name attribute.
	MacMode pulumi.StringPtrInput
}

func (AaaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aaaArgs)(nil)).Elem()
}

type AaaInput interface {
	pulumi.Input

	ToAaaOutput() AaaOutput
	ToAaaOutputWithContext(ctx context.Context) AaaOutput
}

func (*Aaa) ElementType() reflect.Type {
	return reflect.TypeOf((**Aaa)(nil)).Elem()
}

func (i *Aaa) ToAaaOutput() AaaOutput {
	return i.ToAaaOutputWithContext(context.Background())
}

func (i *Aaa) ToAaaOutputWithContext(ctx context.Context) AaaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaOutput)
}

// AaaArrayInput is an input type that accepts AaaArray and AaaArrayOutput values.
// You can construct a concrete instance of `AaaArrayInput` via:
//
//	AaaArray{ AaaArgs{...} }
type AaaArrayInput interface {
	pulumi.Input

	ToAaaArrayOutput() AaaArrayOutput
	ToAaaArrayOutputWithContext(context.Context) AaaArrayOutput
}

type AaaArray []AaaInput

func (AaaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Aaa)(nil)).Elem()
}

func (i AaaArray) ToAaaArrayOutput() AaaArrayOutput {
	return i.ToAaaArrayOutputWithContext(context.Background())
}

func (i AaaArray) ToAaaArrayOutputWithContext(ctx context.Context) AaaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaArrayOutput)
}

// AaaMapInput is an input type that accepts AaaMap and AaaMapOutput values.
// You can construct a concrete instance of `AaaMapInput` via:
//
//	AaaMap{ "key": AaaArgs{...} }
type AaaMapInput interface {
	pulumi.Input

	ToAaaMapOutput() AaaMapOutput
	ToAaaMapOutputWithContext(context.Context) AaaMapOutput
}

type AaaMap map[string]AaaInput

func (AaaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Aaa)(nil)).Elem()
}

func (i AaaMap) ToAaaMapOutput() AaaMapOutput {
	return i.ToAaaMapOutputWithContext(context.Background())
}

func (i AaaMap) ToAaaMapOutputWithContext(ctx context.Context) AaaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaMapOutput)
}

type AaaOutput struct{ *pulumi.OutputState }

func (AaaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Aaa)(nil)).Elem()
}

func (o AaaOutput) ToAaaOutput() AaaOutput {
	return o
}

func (o AaaOutput) ToAaaOutputWithContext(ctx context.Context) AaaOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o AaaOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Aaa) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o AaaOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aaa) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Format of how the 'called-id' identifier will be passed to RADIUS. When configuring radius server clients, you can specify 'called-id' in order to separate multiple entires.
func (o AaaOutput) CalledFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aaa) pulumi.StringPtrOutput { return v.CalledFormat }).(pulumi.StringPtrOutput)
}

// When RADIUS accounting is used, Access Point periodically sends accounting information updates to the RADIUS server. This property specifies the default update interval that can be overridden by the RADIUS server using the Acct-Interim-Interval attribute.
func (o AaaOutput) InterimUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v *Aaa) pulumi.StringOutput { return v.InterimUpdate }).(pulumi.StringOutput)
}

// If this value is set to a time interval, the Access Point will cache RADIUS MAC authentication responses for a specified time, and will not contact the RADIUS server if matching cache entry already exists. The value disabled will disable the cache, Access Point will always contact the RADIUS server.
func (o AaaOutput) MacCaching() pulumi.StringOutput {
	return o.ApplyT(func(v *Aaa) pulumi.StringOutput { return v.MacCaching }).(pulumi.StringOutput)
}

// Controls how the MAC address of the client is encoded by Access Point in the User-Name attribute of the MAC authentication and MAC accounting RADIUS requests.
func (o AaaOutput) MacFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aaa) pulumi.StringPtrOutput { return v.MacFormat }).(pulumi.StringPtrOutput)
}

// By default Access Point uses an empty password, when sending Access-Request during MAC authentication. When this property is set to as-username-and-password, Access Point will use the same value for the User-Password attribute as for the User-Name attribute.
func (o AaaOutput) MacMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aaa) pulumi.StringPtrOutput { return v.MacMode }).(pulumi.StringPtrOutput)
}

type AaaArrayOutput struct{ *pulumi.OutputState }

func (AaaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Aaa)(nil)).Elem()
}

func (o AaaArrayOutput) ToAaaArrayOutput() AaaArrayOutput {
	return o
}

func (o AaaArrayOutput) ToAaaArrayOutputWithContext(ctx context.Context) AaaArrayOutput {
	return o
}

func (o AaaArrayOutput) Index(i pulumi.IntInput) AaaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Aaa {
		return vs[0].([]*Aaa)[vs[1].(int)]
	}).(AaaOutput)
}

type AaaMapOutput struct{ *pulumi.OutputState }

func (AaaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Aaa)(nil)).Elem()
}

func (o AaaMapOutput) ToAaaMapOutput() AaaMapOutput {
	return o
}

func (o AaaMapOutput) ToAaaMapOutputWithContext(ctx context.Context) AaaMapOutput {
	return o
}

func (o AaaMapOutput) MapIndex(k pulumi.StringInput) AaaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Aaa {
		return vs[0].(map[string]*Aaa)[vs[1].(string)]
	}).(AaaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AaaInput)(nil)).Elem(), &Aaa{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaArrayInput)(nil)).Elem(), AaaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaMapInput)(nil)).Elem(), AaaMap{})
	pulumi.RegisterOutputType(AaaOutput{})
	pulumi.RegisterOutputType(AaaArrayOutput{})
	pulumi.RegisterOutputType(AaaMapOutput{})
}
