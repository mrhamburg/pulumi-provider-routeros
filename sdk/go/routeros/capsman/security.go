// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package capsman

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/CapsMan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CapsMan.NewSecurity(ctx, "testSecurity", &CapsMan.SecurityArgs{
//				AuthenticationTypes: pulumi.StringArray{
//					pulumi.String("wpa-psk"),
//					pulumi.String("wpa-eap"),
//					pulumi.String("wpa2-psk"),
//				},
//				Comment:             pulumi.String("test_security"),
//				DisablePmkid:        pulumi.Bool(true),
//				EapMethods:          pulumi.String("eap-tls,passthrough"),
//				EapRadiusAccounting: pulumi.Bool(true),
//				Encryptions: pulumi.StringArray{
//					pulumi.String("tkip"),
//					pulumi.String("aes-ccm"),
//				},
//				GroupEncryption: pulumi.String("aes-ccm"),
//				GroupKeyUpdate:  pulumi.String("1h"),
//				Passphrase:      pulumi.String("0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDE"),
//				TlsCertificate:  pulumi.String("none"),
//				TlsMode:         pulumi.String("verify-certificate"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import with the name of the CAPsMAN security profile in case of the example use test-security-config
//
// ```sh
//
//	$ pulumi import routeros:CapsMan/security:Security test_security test-security-config
//
// ```
type Security struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
	AuthenticationTypes pulumi.StringArrayOutput `pulumi:"authenticationTypes"`
	Comment             pulumi.StringPtrOutput   `pulumi:"comment"`
	// Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
	DisablePmkid pulumi.BoolPtrOutput `pulumi:"disablePmkid"`
	// eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
	EapMethods pulumi.StringPtrOutput `pulumi:"eapMethods"`
	// Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
	EapRadiusAccounting pulumi.BoolPtrOutput `pulumi:"eapRadiusAccounting"`
	// Set type of unicast encryption algorithm used.
	Encryptions pulumi.StringArrayOutput `pulumi:"encryptions"`
	// Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
	GroupEncryption pulumi.StringPtrOutput `pulumi:"groupEncryption"`
	// Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
	GroupKeyUpdate pulumi.StringPtrOutput `pulumi:"groupKeyUpdate"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringOutput `pulumi:"name"`
	// WPA or WPA2 pre-shared key.
	Passphrase pulumi.StringPtrOutput `pulumi:"passphrase"`
	// Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
	TlsCertificate pulumi.StringPtrOutput `pulumi:"tlsCertificate"`
	// This property has effect only when security.eap-methods contains eap-tls.
	TlsMode pulumi.StringPtrOutput `pulumi:"tlsMode"`
}

// NewSecurity registers a new resource with the given unique name, arguments, and options.
func NewSecurity(ctx *pulumi.Context,
	name string, args *SecurityArgs, opts ...pulumi.ResourceOption) (*Security, error) {
	if args == nil {
		args = &SecurityArgs{}
	}

	if args.Passphrase != nil {
		args.Passphrase = pulumi.ToSecret(args.Passphrase).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"passphrase",
	})
	opts = append(opts, secrets)
	var resource Security
	err := ctx.RegisterResource("routeros:CapsMan/security:Security", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurity gets an existing Security resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityState, opts ...pulumi.ResourceOption) (*Security, error) {
	var resource Security
	err := ctx.ReadResource("routeros:CapsMan/security:Security", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Security resources.
type securityState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
	AuthenticationTypes []string `pulumi:"authenticationTypes"`
	Comment             *string  `pulumi:"comment"`
	// Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
	DisablePmkid *bool `pulumi:"disablePmkid"`
	// eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
	EapMethods *string `pulumi:"eapMethods"`
	// Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
	EapRadiusAccounting *bool `pulumi:"eapRadiusAccounting"`
	// Set type of unicast encryption algorithm used.
	Encryptions []string `pulumi:"encryptions"`
	// Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
	GroupEncryption *string `pulumi:"groupEncryption"`
	// Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
	GroupKeyUpdate *string `pulumi:"groupKeyUpdate"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name *string `pulumi:"name"`
	// WPA or WPA2 pre-shared key.
	Passphrase *string `pulumi:"passphrase"`
	// Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
	TlsCertificate *string `pulumi:"tlsCertificate"`
	// This property has effect only when security.eap-methods contains eap-tls.
	TlsMode *string `pulumi:"tlsMode"`
}

type SecurityState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
	AuthenticationTypes pulumi.StringArrayInput
	Comment             pulumi.StringPtrInput
	// Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
	DisablePmkid pulumi.BoolPtrInput
	// eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
	EapMethods pulumi.StringPtrInput
	// Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
	EapRadiusAccounting pulumi.BoolPtrInput
	// Set type of unicast encryption algorithm used.
	Encryptions pulumi.StringArrayInput
	// Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
	GroupEncryption pulumi.StringPtrInput
	// Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
	GroupKeyUpdate pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringPtrInput
	// WPA or WPA2 pre-shared key.
	Passphrase pulumi.StringPtrInput
	// Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
	TlsCertificate pulumi.StringPtrInput
	// This property has effect only when security.eap-methods contains eap-tls.
	TlsMode pulumi.StringPtrInput
}

func (SecurityState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityState)(nil)).Elem()
}

type securityArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
	AuthenticationTypes []string `pulumi:"authenticationTypes"`
	Comment             *string  `pulumi:"comment"`
	// Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
	DisablePmkid *bool `pulumi:"disablePmkid"`
	// eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
	EapMethods *string `pulumi:"eapMethods"`
	// Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
	EapRadiusAccounting *bool `pulumi:"eapRadiusAccounting"`
	// Set type of unicast encryption algorithm used.
	Encryptions []string `pulumi:"encryptions"`
	// Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
	GroupEncryption *string `pulumi:"groupEncryption"`
	// Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
	GroupKeyUpdate *string `pulumi:"groupKeyUpdate"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name *string `pulumi:"name"`
	// WPA or WPA2 pre-shared key.
	Passphrase *string `pulumi:"passphrase"`
	// Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
	TlsCertificate *string `pulumi:"tlsCertificate"`
	// This property has effect only when security.eap-methods contains eap-tls.
	TlsMode *string `pulumi:"tlsMode"`
}

// The set of arguments for constructing a Security resource.
type SecurityArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
	AuthenticationTypes pulumi.StringArrayInput
	Comment             pulumi.StringPtrInput
	// Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
	DisablePmkid pulumi.BoolPtrInput
	// eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
	EapMethods pulumi.StringPtrInput
	// Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
	EapRadiusAccounting pulumi.BoolPtrInput
	// Set type of unicast encryption algorithm used.
	Encryptions pulumi.StringArrayInput
	// Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
	GroupEncryption pulumi.StringPtrInput
	// Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
	GroupKeyUpdate pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringPtrInput
	// WPA or WPA2 pre-shared key.
	Passphrase pulumi.StringPtrInput
	// Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
	TlsCertificate pulumi.StringPtrInput
	// This property has effect only when security.eap-methods contains eap-tls.
	TlsMode pulumi.StringPtrInput
}

func (SecurityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityArgs)(nil)).Elem()
}

type SecurityInput interface {
	pulumi.Input

	ToSecurityOutput() SecurityOutput
	ToSecurityOutputWithContext(ctx context.Context) SecurityOutput
}

func (*Security) ElementType() reflect.Type {
	return reflect.TypeOf((**Security)(nil)).Elem()
}

func (i *Security) ToSecurityOutput() SecurityOutput {
	return i.ToSecurityOutputWithContext(context.Background())
}

func (i *Security) ToSecurityOutputWithContext(ctx context.Context) SecurityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityOutput)
}

// SecurityArrayInput is an input type that accepts SecurityArray and SecurityArrayOutput values.
// You can construct a concrete instance of `SecurityArrayInput` via:
//
//	SecurityArray{ SecurityArgs{...} }
type SecurityArrayInput interface {
	pulumi.Input

	ToSecurityArrayOutput() SecurityArrayOutput
	ToSecurityArrayOutputWithContext(context.Context) SecurityArrayOutput
}

type SecurityArray []SecurityInput

func (SecurityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Security)(nil)).Elem()
}

func (i SecurityArray) ToSecurityArrayOutput() SecurityArrayOutput {
	return i.ToSecurityArrayOutputWithContext(context.Background())
}

func (i SecurityArray) ToSecurityArrayOutputWithContext(ctx context.Context) SecurityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityArrayOutput)
}

// SecurityMapInput is an input type that accepts SecurityMap and SecurityMapOutput values.
// You can construct a concrete instance of `SecurityMapInput` via:
//
//	SecurityMap{ "key": SecurityArgs{...} }
type SecurityMapInput interface {
	pulumi.Input

	ToSecurityMapOutput() SecurityMapOutput
	ToSecurityMapOutputWithContext(context.Context) SecurityMapOutput
}

type SecurityMap map[string]SecurityInput

func (SecurityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Security)(nil)).Elem()
}

func (i SecurityMap) ToSecurityMapOutput() SecurityMapOutput {
	return i.ToSecurityMapOutputWithContext(context.Background())
}

func (i SecurityMap) ToSecurityMapOutputWithContext(ctx context.Context) SecurityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMapOutput)
}

type SecurityOutput struct{ *pulumi.OutputState }

func (SecurityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Security)(nil)).Elem()
}

func (o SecurityOutput) ToSecurityOutput() SecurityOutput {
	return o
}

func (o SecurityOutput) ToSecurityOutputWithContext(ctx context.Context) SecurityOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o SecurityOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o SecurityOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
func (o SecurityOutput) AuthenticationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Security) pulumi.StringArrayOutput { return v.AuthenticationTypes }).(pulumi.StringArrayOutput)
}

func (o SecurityOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
func (o SecurityOutput) DisablePmkid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.BoolPtrOutput { return v.DisablePmkid }).(pulumi.BoolPtrOutput)
}

// eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
func (o SecurityOutput) EapMethods() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.StringPtrOutput { return v.EapMethods }).(pulumi.StringPtrOutput)
}

// Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
func (o SecurityOutput) EapRadiusAccounting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.BoolPtrOutput { return v.EapRadiusAccounting }).(pulumi.BoolPtrOutput)
}

// Set type of unicast encryption algorithm used.
func (o SecurityOutput) Encryptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Security) pulumi.StringArrayOutput { return v.Encryptions }).(pulumi.StringArrayOutput)
}

// Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
func (o SecurityOutput) GroupEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.StringPtrOutput { return v.GroupEncryption }).(pulumi.StringPtrOutput)
}

// Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
func (o SecurityOutput) GroupKeyUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.StringPtrOutput { return v.GroupKeyUpdate }).(pulumi.StringPtrOutput)
}

// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
// integrity for that resource!
func (o SecurityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Security) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// WPA or WPA2 pre-shared key.
func (o SecurityOutput) Passphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.StringPtrOutput { return v.Passphrase }).(pulumi.StringPtrOutput)
}

// Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
func (o SecurityOutput) TlsCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.StringPtrOutput { return v.TlsCertificate }).(pulumi.StringPtrOutput)
}

// This property has effect only when security.eap-methods contains eap-tls.
func (o SecurityOutput) TlsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Security) pulumi.StringPtrOutput { return v.TlsMode }).(pulumi.StringPtrOutput)
}

type SecurityArrayOutput struct{ *pulumi.OutputState }

func (SecurityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Security)(nil)).Elem()
}

func (o SecurityArrayOutput) ToSecurityArrayOutput() SecurityArrayOutput {
	return o
}

func (o SecurityArrayOutput) ToSecurityArrayOutputWithContext(ctx context.Context) SecurityArrayOutput {
	return o
}

func (o SecurityArrayOutput) Index(i pulumi.IntInput) SecurityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Security {
		return vs[0].([]*Security)[vs[1].(int)]
	}).(SecurityOutput)
}

type SecurityMapOutput struct{ *pulumi.OutputState }

func (SecurityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Security)(nil)).Elem()
}

func (o SecurityMapOutput) ToSecurityMapOutput() SecurityMapOutput {
	return o
}

func (o SecurityMapOutput) ToSecurityMapOutputWithContext(ctx context.Context) SecurityMapOutput {
	return o
}

func (o SecurityMapOutput) MapIndex(k pulumi.StringInput) SecurityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Security {
		return vs[0].(map[string]*Security)[vs[1].(string)]
	}).(SecurityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityInput)(nil)).Elem(), &Security{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityArrayInput)(nil)).Elem(), SecurityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityMapInput)(nil)).Elem(), SecurityMap{})
	pulumi.RegisterOutputType(SecurityOutput{})
	pulumi.RegisterOutputType(SecurityArrayOutput{})
	pulumi.RegisterOutputType(SecurityMapOutput{})
}
