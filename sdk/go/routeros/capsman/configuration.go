// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package capsman

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/CapsMan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := CapsMan.NewConfiguration(ctx, "testConfiguration", &CapsMan.ConfigurationArgs{
//				Comment:            pulumi.String("Comment"),
//				Country:            pulumi.String("no_country_set"),
//				DisconnectTimeout:  pulumi.String("1s150ms"),
//				Distance:           pulumi.String("indoors"),
//				FrameLifetime:      pulumi.String("0.12"),
//				GuardInterval:      pulumi.String("long"),
//				HideSsid:           pulumi.Bool(true),
//				HwProtectionMode:   pulumi.String("rts-cts"),
//				HwRetries:          pulumi.Int(1),
//				Installation:       pulumi.String("indoor"),
//				KeepaliveFrames:    pulumi.String("enabled"),
//				LoadBalancingGroup: pulumi.String(""),
//				MaxStaCount:        pulumi.Int(1),
//				Mode:               pulumi.String("ap"),
//				MulticastHelper:    pulumi.String("full"),
//				RxChains: pulumi.IntArray{
//					pulumi.Int(1),
//					pulumi.Int(3),
//				},
//				Ssid: pulumi.String("SSID"),
//				TxChains: pulumi.IntArray{
//					pulumi.Int(0),
//					pulumi.Int(2),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			testChannel, err := CapsMan.NewChannel(ctx, "testChannel", nil)
//			if err != nil {
//				return err
//			}
//			testDatapath, err := CapsMan.NewDatapath(ctx, "testDatapath", nil)
//			if err != nil {
//				return err
//			}
//			testRates, err := CapsMan.NewRates(ctx, "testRates", nil)
//			if err != nil {
//				return err
//			}
//			testSecurity, err := CapsMan.NewSecurity(ctx, "testSecurity", nil)
//			if err != nil {
//				return err
//			}
//			_, err = CapsMan.NewConfiguration(ctx, "testConfiguration2", &CapsMan.ConfigurationArgs{
//				Channel: pulumi.StringMap{
//					"config":                testChannel.Name,
//					"band":                  pulumi.String("2ghz-b/g/n"),
//					"control_channel_width": pulumi.String("10mhz"),
//					"extension_channel":     pulumi.String("eCee"),
//					"frequency":             pulumi.String("2412"),
//					"reselect_interval":     pulumi.String("1h"),
//					"save_selected":         pulumi.String("true"),
//					"secondary_frequency":   pulumi.String("disabled"),
//					"skip_dfs_channels":     pulumi.String("true"),
//					"tx_power":              pulumi.String("20"),
//				},
//				Datapath: pulumi.StringMap{
//					"config":                      testDatapath.Name,
//					"arp":                         pulumi.String("local-proxy-arp"),
//					"bridge":                      pulumi.String("bridge"),
//					"bridge_cost":                 pulumi.String("100"),
//					"bridge_horizon":              pulumi.String("200"),
//					"client_to_client_forwarding": pulumi.String("true"),
//					"interface_list":              pulumi.String("static"),
//					"l2mtu":                       pulumi.String("1450"),
//					"local_forwarding":            pulumi.String("true"),
//					"mtu":                         pulumi.String("1500"),
//					"vlan_id":                     pulumi.String("101"),
//					"vlan_mode":                   pulumi.String("no-tag"),
//				},
//				Rates: pulumi.StringMap{
//					"config":            testRates.Name,
//					"basic":             pulumi.String("1Mbps,5.5Mbps,6Mbps,18Mbps,36Mbps,54Mbps"),
//					"ht_basic_mcs":      pulumi.String("mcs-0,mcs-7,mcs-11,mcs-14,mcs-16,mcs-21"),
//					"ht_supported_mcs":  pulumi.String("mcs-3,mcs-8,mcs-10,mcs-13,mcs-17,mcs-18"),
//					"supported":         pulumi.String("2Mbps,11Mbps,9Mbps,12Mbps,24Mbps,48Mbps"),
//					"vht_basic_mcs":     pulumi.String("none"),
//					"vht_supported_mcs": pulumi.String("mcs0-9,mcs0-7"),
//				},
//				Security: pulumi.StringMap{
//					"config":                testSecurity.Name,
//					"authentication_types":  pulumi.String("wpa-psk,wpa-eap"),
//					"disable_pmkid":         pulumi.String("true"),
//					"eap_methods":           pulumi.String("eap-tls,passthrough"),
//					"eap_radius_accounting": pulumi.String("true"),
//					"encryption":            pulumi.String("aes-ccm,tkip"),
//					"group_encryption":      pulumi.String("aes-ccm"),
//					"group_key_update":      pulumi.String("1h"),
//					"passphrase":            pulumi.String("AAAAAAAAA"),
//					"tls_certificate":       pulumi.String("none"),
//					"tls_mode":              pulumi.String("verify-certificate"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				testChannel,
//				testDatapath,
//				testRates,
//				testSecurity,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import with the name of the CAPsMAN configuration in case of the example use test_configuration_name
//
// ```sh
//
//	$ pulumi import routeros:CapsMan/configuration:Configuration test_configuration_2 test_configuration_name
//
// ```
type Configuration struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
	___ts_ pulumi.StringPtrOutput `pulumi:"___ts_"`
	// Channel inline settings.
	Channel pulumi.StringMapOutput `pulumi:"channel"`
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
	Country pulumi.StringPtrOutput `pulumi:"country"`
	// Datapath inline settings.
	Datapath pulumi.StringMapOutput `pulumi:"datapath"`
	// This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
	DisconnectTimeout pulumi.StringPtrOutput `pulumi:"disconnectTimeout"`
	// How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
	Distance pulumi.StringPtrOutput `pulumi:"distance"`
	// Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
	FrameLifetime pulumi.StringPtrOutput `pulumi:"frameLifetime"`
	// Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
	GuardInterval pulumi.StringPtrOutput `pulumi:"guardInterval"`
	// This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
	HideSsid pulumi.BoolOutput `pulumi:"hideSsid"`
	// Frame protection support property. [See docs](<https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)>).
	HwProtectionMode pulumi.StringPtrOutput `pulumi:"hwProtectionMode"`
	// Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
	HwRetries pulumi.IntPtrOutput `pulumi:"hwRetries"`
	// Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
	Installation pulumi.StringPtrOutput `pulumi:"installation"`
	// If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
	KeepaliveFrames pulumi.StringPtrOutput `pulumi:"keepaliveFrames"`
	// Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
	LoadBalancingGroup pulumi.StringPtrOutput `pulumi:"loadBalancingGroup"`
	// Maximum number of associated clients.
	MaxStaCount pulumi.IntPtrOutput `pulumi:"maxStaCount"`
	// Set operational mode. Only **ap** currently supported.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
	MulticastHelper pulumi.StringPtrOutput `pulumi:"multicastHelper"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringOutput `pulumi:"name"`
	// Rates inline settings.
	Rates pulumi.StringMapOutput `pulumi:"rates"`
	// Which antennas to use for receive.
	RxChains pulumi.IntArrayOutput `pulumi:"rxChains"`
	// Security inline settings.
	Security pulumi.StringMapOutput `pulumi:"security"`
	// SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
	Ssid pulumi.StringPtrOutput `pulumi:"ssid"`
	// Which antennas to use for transmit.
	TxChains pulumi.IntArrayOutput `pulumi:"txChains"`
}

// NewConfiguration registers a new resource with the given unique name, arguments, and options.
func NewConfiguration(ctx *pulumi.Context,
	name string, args *ConfigurationArgs, opts ...pulumi.ResourceOption) (*Configuration, error) {
	if args == nil {
		args = &ConfigurationArgs{}
	}

	var resource Configuration
	err := ctx.RegisterResource("routeros:CapsMan/configuration:Configuration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfiguration gets an existing Configuration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationState, opts ...pulumi.ResourceOption) (*Configuration, error) {
	var resource Configuration
	err := ctx.ReadResource("routeros:CapsMan/configuration:Configuration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Configuration resources.
type configurationState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
	___ts_ *string `pulumi:"___ts_"`
	// Channel inline settings.
	Channel map[string]string `pulumi:"channel"`
	Comment *string           `pulumi:"comment"`
	// Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
	Country *string `pulumi:"country"`
	// Datapath inline settings.
	Datapath map[string]string `pulumi:"datapath"`
	// This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
	DisconnectTimeout *string `pulumi:"disconnectTimeout"`
	// How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
	Distance *string `pulumi:"distance"`
	// Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
	FrameLifetime *string `pulumi:"frameLifetime"`
	// Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
	GuardInterval *string `pulumi:"guardInterval"`
	// This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
	HideSsid *bool `pulumi:"hideSsid"`
	// Frame protection support property. [See docs](<https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)>).
	HwProtectionMode *string `pulumi:"hwProtectionMode"`
	// Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
	HwRetries *int `pulumi:"hwRetries"`
	// Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
	Installation *string `pulumi:"installation"`
	// If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
	KeepaliveFrames *string `pulumi:"keepaliveFrames"`
	// Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
	LoadBalancingGroup *string `pulumi:"loadBalancingGroup"`
	// Maximum number of associated clients.
	MaxStaCount *int `pulumi:"maxStaCount"`
	// Set operational mode. Only **ap** currently supported.
	Mode *string `pulumi:"mode"`
	// When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
	MulticastHelper *string `pulumi:"multicastHelper"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name *string `pulumi:"name"`
	// Rates inline settings.
	Rates map[string]string `pulumi:"rates"`
	// Which antennas to use for receive.
	RxChains []int `pulumi:"rxChains"`
	// Security inline settings.
	Security map[string]string `pulumi:"security"`
	// SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
	Ssid *string `pulumi:"ssid"`
	// Which antennas to use for transmit.
	TxChains []int `pulumi:"txChains"`
}

type ConfigurationState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
	___ts_ pulumi.StringPtrInput
	// Channel inline settings.
	Channel pulumi.StringMapInput
	Comment pulumi.StringPtrInput
	// Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
	Country pulumi.StringPtrInput
	// Datapath inline settings.
	Datapath pulumi.StringMapInput
	// This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
	DisconnectTimeout pulumi.StringPtrInput
	// How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
	Distance pulumi.StringPtrInput
	// Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
	FrameLifetime pulumi.StringPtrInput
	// Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
	GuardInterval pulumi.StringPtrInput
	// This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
	HideSsid pulumi.BoolPtrInput
	// Frame protection support property. [See docs](<https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)>).
	HwProtectionMode pulumi.StringPtrInput
	// Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
	HwRetries pulumi.IntPtrInput
	// Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
	Installation pulumi.StringPtrInput
	// If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
	KeepaliveFrames pulumi.StringPtrInput
	// Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
	LoadBalancingGroup pulumi.StringPtrInput
	// Maximum number of associated clients.
	MaxStaCount pulumi.IntPtrInput
	// Set operational mode. Only **ap** currently supported.
	Mode pulumi.StringPtrInput
	// When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
	MulticastHelper pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringPtrInput
	// Rates inline settings.
	Rates pulumi.StringMapInput
	// Which antennas to use for receive.
	RxChains pulumi.IntArrayInput
	// Security inline settings.
	Security pulumi.StringMapInput
	// SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
	Ssid pulumi.StringPtrInput
	// Which antennas to use for transmit.
	TxChains pulumi.IntArrayInput
}

func (ConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationState)(nil)).Elem()
}

type configurationArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
	___ts_ *string `pulumi:"___ts_"`
	// Channel inline settings.
	Channel map[string]string `pulumi:"channel"`
	Comment *string           `pulumi:"comment"`
	// Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
	Country *string `pulumi:"country"`
	// Datapath inline settings.
	Datapath map[string]string `pulumi:"datapath"`
	// This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
	DisconnectTimeout *string `pulumi:"disconnectTimeout"`
	// How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
	Distance *string `pulumi:"distance"`
	// Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
	FrameLifetime *string `pulumi:"frameLifetime"`
	// Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
	GuardInterval *string `pulumi:"guardInterval"`
	// This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
	HideSsid *bool `pulumi:"hideSsid"`
	// Frame protection support property. [See docs](<https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)>).
	HwProtectionMode *string `pulumi:"hwProtectionMode"`
	// Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
	HwRetries *int `pulumi:"hwRetries"`
	// Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
	Installation *string `pulumi:"installation"`
	// If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
	KeepaliveFrames *string `pulumi:"keepaliveFrames"`
	// Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
	LoadBalancingGroup *string `pulumi:"loadBalancingGroup"`
	// Maximum number of associated clients.
	MaxStaCount *int `pulumi:"maxStaCount"`
	// Set operational mode. Only **ap** currently supported.
	Mode *string `pulumi:"mode"`
	// When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
	MulticastHelper *string `pulumi:"multicastHelper"`
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name *string `pulumi:"name"`
	// Rates inline settings.
	Rates map[string]string `pulumi:"rates"`
	// Which antennas to use for receive.
	RxChains []int `pulumi:"rxChains"`
	// Security inline settings.
	Security map[string]string `pulumi:"security"`
	// SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
	Ssid *string `pulumi:"ssid"`
	// Which antennas to use for transmit.
	TxChains []int `pulumi:"txChains"`
}

// The set of arguments for constructing a Configuration resource.
type ConfigurationArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
	___ts_ pulumi.StringPtrInput
	// Channel inline settings.
	Channel pulumi.StringMapInput
	Comment pulumi.StringPtrInput
	// Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
	Country pulumi.StringPtrInput
	// Datapath inline settings.
	Datapath pulumi.StringMapInput
	// This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
	DisconnectTimeout pulumi.StringPtrInput
	// How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
	Distance pulumi.StringPtrInput
	// Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
	FrameLifetime pulumi.StringPtrInput
	// Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
	GuardInterval pulumi.StringPtrInput
	// This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
	HideSsid pulumi.BoolPtrInput
	// Frame protection support property. [See docs](<https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)>).
	HwProtectionMode pulumi.StringPtrInput
	// Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
	HwRetries pulumi.IntPtrInput
	// Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
	Installation pulumi.StringPtrInput
	// If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
	KeepaliveFrames pulumi.StringPtrInput
	// Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
	LoadBalancingGroup pulumi.StringPtrInput
	// Maximum number of associated clients.
	MaxStaCount pulumi.IntPtrInput
	// Set operational mode. Only **ap** currently supported.
	Mode pulumi.StringPtrInput
	// When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
	MulticastHelper pulumi.StringPtrInput
	// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
	// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
	// integrity for that resource!
	Name pulumi.StringPtrInput
	// Rates inline settings.
	Rates pulumi.StringMapInput
	// Which antennas to use for receive.
	RxChains pulumi.IntArrayInput
	// Security inline settings.
	Security pulumi.StringMapInput
	// SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
	Ssid pulumi.StringPtrInput
	// Which antennas to use for transmit.
	TxChains pulumi.IntArrayInput
}

func (ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationArgs)(nil)).Elem()
}

type ConfigurationInput interface {
	pulumi.Input

	ToConfigurationOutput() ConfigurationOutput
	ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput
}

func (*Configuration) ElementType() reflect.Type {
	return reflect.TypeOf((**Configuration)(nil)).Elem()
}

func (i *Configuration) ToConfigurationOutput() ConfigurationOutput {
	return i.ToConfigurationOutputWithContext(context.Background())
}

func (i *Configuration) ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationOutput)
}

// ConfigurationArrayInput is an input type that accepts ConfigurationArray and ConfigurationArrayOutput values.
// You can construct a concrete instance of `ConfigurationArrayInput` via:
//
//	ConfigurationArray{ ConfigurationArgs{...} }
type ConfigurationArrayInput interface {
	pulumi.Input

	ToConfigurationArrayOutput() ConfigurationArrayOutput
	ToConfigurationArrayOutputWithContext(context.Context) ConfigurationArrayOutput
}

type ConfigurationArray []ConfigurationInput

func (ConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Configuration)(nil)).Elem()
}

func (i ConfigurationArray) ToConfigurationArrayOutput() ConfigurationArrayOutput {
	return i.ToConfigurationArrayOutputWithContext(context.Background())
}

func (i ConfigurationArray) ToConfigurationArrayOutputWithContext(ctx context.Context) ConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationArrayOutput)
}

// ConfigurationMapInput is an input type that accepts ConfigurationMap and ConfigurationMapOutput values.
// You can construct a concrete instance of `ConfigurationMapInput` via:
//
//	ConfigurationMap{ "key": ConfigurationArgs{...} }
type ConfigurationMapInput interface {
	pulumi.Input

	ToConfigurationMapOutput() ConfigurationMapOutput
	ToConfigurationMapOutputWithContext(context.Context) ConfigurationMapOutput
}

type ConfigurationMap map[string]ConfigurationInput

func (ConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Configuration)(nil)).Elem()
}

func (i ConfigurationMap) ToConfigurationMapOutput() ConfigurationMapOutput {
	return i.ToConfigurationMapOutputWithContext(context.Background())
}

func (i ConfigurationMap) ToConfigurationMapOutputWithContext(ctx context.Context) ConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationMapOutput)
}

type ConfigurationOutput struct{ *pulumi.OutputState }

func (ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Configuration)(nil)).Elem()
}

func (o ConfigurationOutput) ToConfigurationOutput() ConfigurationOutput {
	return o
}

func (o ConfigurationOutput) ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ConfigurationOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ConfigurationOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
func (o ConfigurationOutput) ___ts_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.___ts_ }).(pulumi.StringPtrOutput)
}

// Channel inline settings.
func (o ConfigurationOutput) Channel() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringMapOutput { return v.Channel }).(pulumi.StringMapOutput)
}

func (o ConfigurationOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
func (o ConfigurationOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.Country }).(pulumi.StringPtrOutput)
}

// Datapath inline settings.
func (o ConfigurationOutput) Datapath() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringMapOutput { return v.Datapath }).(pulumi.StringMapOutput)
}

// This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
func (o ConfigurationOutput) DisconnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.DisconnectTimeout }).(pulumi.StringPtrOutput)
}

// How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
func (o ConfigurationOutput) Distance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.Distance }).(pulumi.StringPtrOutput)
}

// Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
func (o ConfigurationOutput) FrameLifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.FrameLifetime }).(pulumi.StringPtrOutput)
}

// Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
func (o ConfigurationOutput) GuardInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.GuardInterval }).(pulumi.StringPtrOutput)
}

// This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
func (o ConfigurationOutput) HideSsid() pulumi.BoolOutput {
	return o.ApplyT(func(v *Configuration) pulumi.BoolOutput { return v.HideSsid }).(pulumi.BoolOutput)
}

// Frame protection support property. [See docs](<https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)>).
func (o ConfigurationOutput) HwProtectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.HwProtectionMode }).(pulumi.StringPtrOutput)
}

// Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
func (o ConfigurationOutput) HwRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.IntPtrOutput { return v.HwRetries }).(pulumi.IntPtrOutput)
}

// Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
func (o ConfigurationOutput) Installation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.Installation }).(pulumi.StringPtrOutput)
}

// If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
func (o ConfigurationOutput) KeepaliveFrames() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.KeepaliveFrames }).(pulumi.StringPtrOutput)
}

// Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
func (o ConfigurationOutput) LoadBalancingGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.LoadBalancingGroup }).(pulumi.StringPtrOutput)
}

// Maximum number of associated clients.
func (o ConfigurationOutput) MaxStaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.IntPtrOutput { return v.MaxStaCount }).(pulumi.IntPtrOutput)
}

// Set operational mode. Only **ap** currently supported.
func (o ConfigurationOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
func (o ConfigurationOutput) MulticastHelper() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.MulticastHelper }).(pulumi.StringPtrOutput)
}

// Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
// resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
// integrity for that resource!
func (o ConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Rates inline settings.
func (o ConfigurationOutput) Rates() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringMapOutput { return v.Rates }).(pulumi.StringMapOutput)
}

// Which antennas to use for receive.
func (o ConfigurationOutput) RxChains() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Configuration) pulumi.IntArrayOutput { return v.RxChains }).(pulumi.IntArrayOutput)
}

// Security inline settings.
func (o ConfigurationOutput) Security() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringMapOutput { return v.Security }).(pulumi.StringMapOutput)
}

// SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
func (o ConfigurationOutput) Ssid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.Ssid }).(pulumi.StringPtrOutput)
}

// Which antennas to use for transmit.
func (o ConfigurationOutput) TxChains() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Configuration) pulumi.IntArrayOutput { return v.TxChains }).(pulumi.IntArrayOutput)
}

type ConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Configuration)(nil)).Elem()
}

func (o ConfigurationArrayOutput) ToConfigurationArrayOutput() ConfigurationArrayOutput {
	return o
}

func (o ConfigurationArrayOutput) ToConfigurationArrayOutputWithContext(ctx context.Context) ConfigurationArrayOutput {
	return o
}

func (o ConfigurationArrayOutput) Index(i pulumi.IntInput) ConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Configuration {
		return vs[0].([]*Configuration)[vs[1].(int)]
	}).(ConfigurationOutput)
}

type ConfigurationMapOutput struct{ *pulumi.OutputState }

func (ConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Configuration)(nil)).Elem()
}

func (o ConfigurationMapOutput) ToConfigurationMapOutput() ConfigurationMapOutput {
	return o
}

func (o ConfigurationMapOutput) ToConfigurationMapOutputWithContext(ctx context.Context) ConfigurationMapOutput {
	return o
}

func (o ConfigurationMapOutput) MapIndex(k pulumi.StringInput) ConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Configuration {
		return vs[0].(map[string]*Configuration)[vs[1].(string)]
	}).(ConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationInput)(nil)).Elem(), &Configuration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationArrayInput)(nil)).Elem(), ConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationMapInput)(nil)).Elem(), ConfigurationMap{})
	pulumi.RegisterOutputType(ConfigurationOutput{})
	pulumi.RegisterOutputType(ConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationMapOutput{})
}
