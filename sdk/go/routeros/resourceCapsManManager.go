// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routeros

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := routeros.NewResourceCapsManManager(ctx, "testManager", &routeros.ResourceCapsManManagerArgs{
//				Enabled:       pulumi.Bool(true),
//				UpgradePolicy: pulumi.String("require-same-version"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import routeros:index/resourceCapsManManager:ResourceCapsManManager test_manager .
//
// ```
type ResourceCapsManManager struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Device CA certificate.
	CaCertificate pulumi.StringPtrOutput `pulumi:"caCertificate"`
	// Device certificate.
	Certificate pulumi.StringPtrOutput `pulumi:"certificate"`
	// Disable or enable CAPsMAN functionality.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
	PackagePath pulumi.StringPtrOutput `pulumi:"packagePath"`
	// Require all connecting CAPs to have a valid certificate.
	RequirePeerCertificate pulumi.BoolPtrOutput `pulumi:"requirePeerCertificate"`
	// Upgrade policy options.
	UpgradePolicy pulumi.StringPtrOutput `pulumi:"upgradePolicy"`
}

// NewResourceCapsManManager registers a new resource with the given unique name, arguments, and options.
func NewResourceCapsManManager(ctx *pulumi.Context,
	name string, args *ResourceCapsManManagerArgs, opts ...pulumi.ResourceOption) (*ResourceCapsManManager, error) {
	if args == nil {
		args = &ResourceCapsManManagerArgs{}
	}

	var resource ResourceCapsManManager
	err := ctx.RegisterResource("routeros:index/resourceCapsManManager:ResourceCapsManManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceCapsManManager gets an existing ResourceCapsManManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceCapsManManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceCapsManManagerState, opts ...pulumi.ResourceOption) (*ResourceCapsManManager, error) {
	var resource ResourceCapsManManager
	err := ctx.ReadResource("routeros:index/resourceCapsManManager:ResourceCapsManManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceCapsManManager resources.
type resourceCapsManManagerState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Device CA certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// Device certificate.
	Certificate *string `pulumi:"certificate"`
	// Disable or enable CAPsMAN functionality.
	Enabled *bool `pulumi:"enabled"`
	// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
	PackagePath *string `pulumi:"packagePath"`
	// Require all connecting CAPs to have a valid certificate.
	RequirePeerCertificate *bool `pulumi:"requirePeerCertificate"`
	// Upgrade policy options.
	UpgradePolicy *string `pulumi:"upgradePolicy"`
}

type ResourceCapsManManagerState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Device CA certificate.
	CaCertificate pulumi.StringPtrInput
	// Device certificate.
	Certificate pulumi.StringPtrInput
	// Disable or enable CAPsMAN functionality.
	Enabled pulumi.BoolPtrInput
	// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
	PackagePath pulumi.StringPtrInput
	// Require all connecting CAPs to have a valid certificate.
	RequirePeerCertificate pulumi.BoolPtrInput
	// Upgrade policy options.
	UpgradePolicy pulumi.StringPtrInput
}

func (ResourceCapsManManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceCapsManManagerState)(nil)).Elem()
}

type resourceCapsManManagerArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Device CA certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// Device certificate.
	Certificate *string `pulumi:"certificate"`
	// Disable or enable CAPsMAN functionality.
	Enabled *bool `pulumi:"enabled"`
	// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
	PackagePath *string `pulumi:"packagePath"`
	// Require all connecting CAPs to have a valid certificate.
	RequirePeerCertificate *bool `pulumi:"requirePeerCertificate"`
	// Upgrade policy options.
	UpgradePolicy *string `pulumi:"upgradePolicy"`
}

// The set of arguments for constructing a ResourceCapsManManager resource.
type ResourceCapsManManagerArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Device CA certificate.
	CaCertificate pulumi.StringPtrInput
	// Device certificate.
	Certificate pulumi.StringPtrInput
	// Disable or enable CAPsMAN functionality.
	Enabled pulumi.BoolPtrInput
	// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
	PackagePath pulumi.StringPtrInput
	// Require all connecting CAPs to have a valid certificate.
	RequirePeerCertificate pulumi.BoolPtrInput
	// Upgrade policy options.
	UpgradePolicy pulumi.StringPtrInput
}

func (ResourceCapsManManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceCapsManManagerArgs)(nil)).Elem()
}

type ResourceCapsManManagerInput interface {
	pulumi.Input

	ToResourceCapsManManagerOutput() ResourceCapsManManagerOutput
	ToResourceCapsManManagerOutputWithContext(ctx context.Context) ResourceCapsManManagerOutput
}

func (*ResourceCapsManManager) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCapsManManager)(nil)).Elem()
}

func (i *ResourceCapsManManager) ToResourceCapsManManagerOutput() ResourceCapsManManagerOutput {
	return i.ToResourceCapsManManagerOutputWithContext(context.Background())
}

func (i *ResourceCapsManManager) ToResourceCapsManManagerOutputWithContext(ctx context.Context) ResourceCapsManManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCapsManManagerOutput)
}

// ResourceCapsManManagerArrayInput is an input type that accepts ResourceCapsManManagerArray and ResourceCapsManManagerArrayOutput values.
// You can construct a concrete instance of `ResourceCapsManManagerArrayInput` via:
//
//	ResourceCapsManManagerArray{ ResourceCapsManManagerArgs{...} }
type ResourceCapsManManagerArrayInput interface {
	pulumi.Input

	ToResourceCapsManManagerArrayOutput() ResourceCapsManManagerArrayOutput
	ToResourceCapsManManagerArrayOutputWithContext(context.Context) ResourceCapsManManagerArrayOutput
}

type ResourceCapsManManagerArray []ResourceCapsManManagerInput

func (ResourceCapsManManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceCapsManManager)(nil)).Elem()
}

func (i ResourceCapsManManagerArray) ToResourceCapsManManagerArrayOutput() ResourceCapsManManagerArrayOutput {
	return i.ToResourceCapsManManagerArrayOutputWithContext(context.Background())
}

func (i ResourceCapsManManagerArray) ToResourceCapsManManagerArrayOutputWithContext(ctx context.Context) ResourceCapsManManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCapsManManagerArrayOutput)
}

// ResourceCapsManManagerMapInput is an input type that accepts ResourceCapsManManagerMap and ResourceCapsManManagerMapOutput values.
// You can construct a concrete instance of `ResourceCapsManManagerMapInput` via:
//
//	ResourceCapsManManagerMap{ "key": ResourceCapsManManagerArgs{...} }
type ResourceCapsManManagerMapInput interface {
	pulumi.Input

	ToResourceCapsManManagerMapOutput() ResourceCapsManManagerMapOutput
	ToResourceCapsManManagerMapOutputWithContext(context.Context) ResourceCapsManManagerMapOutput
}

type ResourceCapsManManagerMap map[string]ResourceCapsManManagerInput

func (ResourceCapsManManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceCapsManManager)(nil)).Elem()
}

func (i ResourceCapsManManagerMap) ToResourceCapsManManagerMapOutput() ResourceCapsManManagerMapOutput {
	return i.ToResourceCapsManManagerMapOutputWithContext(context.Background())
}

func (i ResourceCapsManManagerMap) ToResourceCapsManManagerMapOutputWithContext(ctx context.Context) ResourceCapsManManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCapsManManagerMapOutput)
}

type ResourceCapsManManagerOutput struct{ *pulumi.OutputState }

func (ResourceCapsManManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCapsManManager)(nil)).Elem()
}

func (o ResourceCapsManManagerOutput) ToResourceCapsManManagerOutput() ResourceCapsManManagerOutput {
	return o
}

func (o ResourceCapsManManagerOutput) ToResourceCapsManManagerOutputWithContext(ctx context.Context) ResourceCapsManManagerOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ResourceCapsManManagerOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCapsManManager) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ResourceCapsManManagerOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCapsManManager) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Device CA certificate.
func (o ResourceCapsManManagerOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCapsManManager) pulumi.StringPtrOutput { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// Device certificate.
func (o ResourceCapsManManagerOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCapsManManager) pulumi.StringPtrOutput { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Disable or enable CAPsMAN functionality.
func (o ResourceCapsManManagerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceCapsManManager) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
func (o ResourceCapsManManagerOutput) PackagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCapsManManager) pulumi.StringPtrOutput { return v.PackagePath }).(pulumi.StringPtrOutput)
}

// Require all connecting CAPs to have a valid certificate.
func (o ResourceCapsManManagerOutput) RequirePeerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceCapsManManager) pulumi.BoolPtrOutput { return v.RequirePeerCertificate }).(pulumi.BoolPtrOutput)
}

// Upgrade policy options.
func (o ResourceCapsManManagerOutput) UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCapsManManager) pulumi.StringPtrOutput { return v.UpgradePolicy }).(pulumi.StringPtrOutput)
}

type ResourceCapsManManagerArrayOutput struct{ *pulumi.OutputState }

func (ResourceCapsManManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceCapsManManager)(nil)).Elem()
}

func (o ResourceCapsManManagerArrayOutput) ToResourceCapsManManagerArrayOutput() ResourceCapsManManagerArrayOutput {
	return o
}

func (o ResourceCapsManManagerArrayOutput) ToResourceCapsManManagerArrayOutputWithContext(ctx context.Context) ResourceCapsManManagerArrayOutput {
	return o
}

func (o ResourceCapsManManagerArrayOutput) Index(i pulumi.IntInput) ResourceCapsManManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceCapsManManager {
		return vs[0].([]*ResourceCapsManManager)[vs[1].(int)]
	}).(ResourceCapsManManagerOutput)
}

type ResourceCapsManManagerMapOutput struct{ *pulumi.OutputState }

func (ResourceCapsManManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceCapsManManager)(nil)).Elem()
}

func (o ResourceCapsManManagerMapOutput) ToResourceCapsManManagerMapOutput() ResourceCapsManManagerMapOutput {
	return o
}

func (o ResourceCapsManManagerMapOutput) ToResourceCapsManManagerMapOutputWithContext(ctx context.Context) ResourceCapsManManagerMapOutput {
	return o
}

func (o ResourceCapsManManagerMapOutput) MapIndex(k pulumi.StringInput) ResourceCapsManManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceCapsManManager {
		return vs[0].(map[string]*ResourceCapsManManager)[vs[1].(string)]
	}).(ResourceCapsManManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCapsManManagerInput)(nil)).Elem(), &ResourceCapsManManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCapsManManagerArrayInput)(nil)).Elem(), ResourceCapsManManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCapsManManagerMapInput)(nil)).Elem(), ResourceCapsManManagerMap{})
	pulumi.RegisterOutputType(ResourceCapsManManagerOutput{})
	pulumi.RegisterOutputType(ResourceCapsManManagerArrayOutput{})
	pulumi.RegisterOutputType(ResourceCapsManManagerMapOutput{})
}
