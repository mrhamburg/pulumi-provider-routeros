// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ip

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Ip"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ip.NewDhcpIpClient(ctx, "client", &Ip.DhcpIpClientArgs{
//				Interface: pulumi.String("bridge"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/dhcp-client get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:Ip/dhcpIpClient:DhcpIpClient client "*0"
//
// ```
type DhcpIpClient struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Whether to install default route in routing table received from DHCP server.
	AddDefaultRoute pulumi.StringOutput `pulumi:"addDefaultRoute"`
	// IP address and netmask, which is assigned to DHCP Client from the Server.
	Address pulumi.StringOutput    `pulumi:"address"`
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Distance of default route. Applicable if add-default-route is set to yes.
	DefaultRouteDistance pulumi.IntPtrOutput `pulumi:"defaultRouteDistance"`
	// Options that are sent to the DHCP server.
	DhcpOptions pulumi.StringPtrOutput `pulumi:"dhcpOptions"`
	// The IP address of the DHCP server.
	DhcpServer pulumi.StringOutput  `pulumi:"dhcpServer"`
	Disabled   pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// A time when the lease expires (specified by the DHCP server).
	ExpiresAfter pulumi.StringOutput `pulumi:"expiresAfter"`
	// The IP address of the gateway which is assigned by DHCP server.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Name of the interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	Invalid   pulumi.BoolOutput   `pulumi:"invalid"`
	// The IP address of the first DNS resolver, that was assigned by the DHCP server.
	PrimaryDns pulumi.StringOutput `pulumi:"primaryDns"`
	// The IP address of the primary NTP server, assigned by the DHCP server.
	PrimaryNtp pulumi.StringOutput `pulumi:"primaryNtp"`
	// The IP address of the second DNS resolver, assigned by the DHCP server.
	SecondaryDns pulumi.StringOutput `pulumi:"secondaryDns"`
	// The IP address of the secondary NTP server, assigned by the DHCP server.
	SecondaryNtp pulumi.StringOutput `pulumi:"secondaryNtp"`
	Status       pulumi.StringOutput `pulumi:"status"`
	// Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
	UsePeerDns pulumi.BoolPtrOutput `pulumi:"usePeerDns"`
	// Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
	UsePeerNtp pulumi.BoolPtrOutput `pulumi:"usePeerNtp"`
}

// NewDhcpIpClient registers a new resource with the given unique name, arguments, and options.
func NewDhcpIpClient(ctx *pulumi.Context,
	name string, args *DhcpIpClientArgs, opts ...pulumi.ResourceOption) (*DhcpIpClient, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	var resource DhcpIpClient
	err := ctx.RegisterResource("routeros:Ip/dhcpIpClient:DhcpIpClient", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDhcpIpClient gets an existing DhcpIpClient resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDhcpIpClient(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DhcpIpClientState, opts ...pulumi.ResourceOption) (*DhcpIpClient, error) {
	var resource DhcpIpClient
	err := ctx.ReadResource("routeros:Ip/dhcpIpClient:DhcpIpClient", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DhcpIpClient resources.
type dhcpIpClientState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Whether to install default route in routing table received from DHCP server.
	AddDefaultRoute *string `pulumi:"addDefaultRoute"`
	// IP address and netmask, which is assigned to DHCP Client from the Server.
	Address *string `pulumi:"address"`
	Comment *string `pulumi:"comment"`
	// Distance of default route. Applicable if add-default-route is set to yes.
	DefaultRouteDistance *int `pulumi:"defaultRouteDistance"`
	// Options that are sent to the DHCP server.
	DhcpOptions *string `pulumi:"dhcpOptions"`
	// The IP address of the DHCP server.
	DhcpServer *string `pulumi:"dhcpServer"`
	Disabled   *bool   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// A time when the lease expires (specified by the DHCP server).
	ExpiresAfter *string `pulumi:"expiresAfter"`
	// The IP address of the gateway which is assigned by DHCP server.
	Gateway *string `pulumi:"gateway"`
	// Name of the interface.
	Interface *string `pulumi:"interface"`
	Invalid   *bool   `pulumi:"invalid"`
	// The IP address of the first DNS resolver, that was assigned by the DHCP server.
	PrimaryDns *string `pulumi:"primaryDns"`
	// The IP address of the primary NTP server, assigned by the DHCP server.
	PrimaryNtp *string `pulumi:"primaryNtp"`
	// The IP address of the second DNS resolver, assigned by the DHCP server.
	SecondaryDns *string `pulumi:"secondaryDns"`
	// The IP address of the secondary NTP server, assigned by the DHCP server.
	SecondaryNtp *string `pulumi:"secondaryNtp"`
	Status       *string `pulumi:"status"`
	// Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
	UsePeerDns *bool `pulumi:"usePeerDns"`
	// Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
	UsePeerNtp *bool `pulumi:"usePeerNtp"`
}

type DhcpIpClientState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Whether to install default route in routing table received from DHCP server.
	AddDefaultRoute pulumi.StringPtrInput
	// IP address and netmask, which is assigned to DHCP Client from the Server.
	Address pulumi.StringPtrInput
	Comment pulumi.StringPtrInput
	// Distance of default route. Applicable if add-default-route is set to yes.
	DefaultRouteDistance pulumi.IntPtrInput
	// Options that are sent to the DHCP server.
	DhcpOptions pulumi.StringPtrInput
	// The IP address of the DHCP server.
	DhcpServer pulumi.StringPtrInput
	Disabled   pulumi.BoolPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// A time when the lease expires (specified by the DHCP server).
	ExpiresAfter pulumi.StringPtrInput
	// The IP address of the gateway which is assigned by DHCP server.
	Gateway pulumi.StringPtrInput
	// Name of the interface.
	Interface pulumi.StringPtrInput
	Invalid   pulumi.BoolPtrInput
	// The IP address of the first DNS resolver, that was assigned by the DHCP server.
	PrimaryDns pulumi.StringPtrInput
	// The IP address of the primary NTP server, assigned by the DHCP server.
	PrimaryNtp pulumi.StringPtrInput
	// The IP address of the second DNS resolver, assigned by the DHCP server.
	SecondaryDns pulumi.StringPtrInput
	// The IP address of the secondary NTP server, assigned by the DHCP server.
	SecondaryNtp pulumi.StringPtrInput
	Status       pulumi.StringPtrInput
	// Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
	UsePeerDns pulumi.BoolPtrInput
	// Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
	UsePeerNtp pulumi.BoolPtrInput
}

func (DhcpIpClientState) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpIpClientState)(nil)).Elem()
}

type dhcpIpClientArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Whether to install default route in routing table received from DHCP server.
	AddDefaultRoute *string `pulumi:"addDefaultRoute"`
	Comment         *string `pulumi:"comment"`
	// Distance of default route. Applicable if add-default-route is set to yes.
	DefaultRouteDistance *int `pulumi:"defaultRouteDistance"`
	// Options that are sent to the DHCP server.
	DhcpOptions *string `pulumi:"dhcpOptions"`
	Disabled    *bool   `pulumi:"disabled"`
	// Name of the interface.
	Interface string `pulumi:"interface"`
	// Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
	UsePeerDns *bool `pulumi:"usePeerDns"`
	// Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
	UsePeerNtp *bool `pulumi:"usePeerNtp"`
}

// The set of arguments for constructing a DhcpIpClient resource.
type DhcpIpClientArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Whether to install default route in routing table received from DHCP server.
	AddDefaultRoute pulumi.StringPtrInput
	Comment         pulumi.StringPtrInput
	// Distance of default route. Applicable if add-default-route is set to yes.
	DefaultRouteDistance pulumi.IntPtrInput
	// Options that are sent to the DHCP server.
	DhcpOptions pulumi.StringPtrInput
	Disabled    pulumi.BoolPtrInput
	// Name of the interface.
	Interface pulumi.StringInput
	// Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
	UsePeerDns pulumi.BoolPtrInput
	// Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
	UsePeerNtp pulumi.BoolPtrInput
}

func (DhcpIpClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpIpClientArgs)(nil)).Elem()
}

type DhcpIpClientInput interface {
	pulumi.Input

	ToDhcpIpClientOutput() DhcpIpClientOutput
	ToDhcpIpClientOutputWithContext(ctx context.Context) DhcpIpClientOutput
}

func (*DhcpIpClient) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpIpClient)(nil)).Elem()
}

func (i *DhcpIpClient) ToDhcpIpClientOutput() DhcpIpClientOutput {
	return i.ToDhcpIpClientOutputWithContext(context.Background())
}

func (i *DhcpIpClient) ToDhcpIpClientOutputWithContext(ctx context.Context) DhcpIpClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpIpClientOutput)
}

// DhcpIpClientArrayInput is an input type that accepts DhcpIpClientArray and DhcpIpClientArrayOutput values.
// You can construct a concrete instance of `DhcpIpClientArrayInput` via:
//
//	DhcpIpClientArray{ DhcpIpClientArgs{...} }
type DhcpIpClientArrayInput interface {
	pulumi.Input

	ToDhcpIpClientArrayOutput() DhcpIpClientArrayOutput
	ToDhcpIpClientArrayOutputWithContext(context.Context) DhcpIpClientArrayOutput
}

type DhcpIpClientArray []DhcpIpClientInput

func (DhcpIpClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpIpClient)(nil)).Elem()
}

func (i DhcpIpClientArray) ToDhcpIpClientArrayOutput() DhcpIpClientArrayOutput {
	return i.ToDhcpIpClientArrayOutputWithContext(context.Background())
}

func (i DhcpIpClientArray) ToDhcpIpClientArrayOutputWithContext(ctx context.Context) DhcpIpClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpIpClientArrayOutput)
}

// DhcpIpClientMapInput is an input type that accepts DhcpIpClientMap and DhcpIpClientMapOutput values.
// You can construct a concrete instance of `DhcpIpClientMapInput` via:
//
//	DhcpIpClientMap{ "key": DhcpIpClientArgs{...} }
type DhcpIpClientMapInput interface {
	pulumi.Input

	ToDhcpIpClientMapOutput() DhcpIpClientMapOutput
	ToDhcpIpClientMapOutputWithContext(context.Context) DhcpIpClientMapOutput
}

type DhcpIpClientMap map[string]DhcpIpClientInput

func (DhcpIpClientMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpIpClient)(nil)).Elem()
}

func (i DhcpIpClientMap) ToDhcpIpClientMapOutput() DhcpIpClientMapOutput {
	return i.ToDhcpIpClientMapOutputWithContext(context.Background())
}

func (i DhcpIpClientMap) ToDhcpIpClientMapOutputWithContext(ctx context.Context) DhcpIpClientMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpIpClientMapOutput)
}

type DhcpIpClientOutput struct{ *pulumi.OutputState }

func (DhcpIpClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpIpClient)(nil)).Elem()
}

func (o DhcpIpClientOutput) ToDhcpIpClientOutput() DhcpIpClientOutput {
	return o
}

func (o DhcpIpClientOutput) ToDhcpIpClientOutputWithContext(ctx context.Context) DhcpIpClientOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o DhcpIpClientOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o DhcpIpClientOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Whether to install default route in routing table received from DHCP server.
func (o DhcpIpClientOutput) AddDefaultRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.AddDefaultRoute }).(pulumi.StringOutput)
}

// IP address and netmask, which is assigned to DHCP Client from the Server.
func (o DhcpIpClientOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

func (o DhcpIpClientOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Distance of default route. Applicable if add-default-route is set to yes.
func (o DhcpIpClientOutput) DefaultRouteDistance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.IntPtrOutput { return v.DefaultRouteDistance }).(pulumi.IntPtrOutput)
}

// Options that are sent to the DHCP server.
func (o DhcpIpClientOutput) DhcpOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringPtrOutput { return v.DhcpOptions }).(pulumi.StringPtrOutput)
}

// The IP address of the DHCP server.
func (o DhcpIpClientOutput) DhcpServer() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.DhcpServer }).(pulumi.StringOutput)
}

func (o DhcpIpClientOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o DhcpIpClientOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// A time when the lease expires (specified by the DHCP server).
func (o DhcpIpClientOutput) ExpiresAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.ExpiresAfter }).(pulumi.StringOutput)
}

// The IP address of the gateway which is assigned by DHCP server.
func (o DhcpIpClientOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Name of the interface.
func (o DhcpIpClientOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o DhcpIpClientOutput) Invalid() pulumi.BoolOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.BoolOutput { return v.Invalid }).(pulumi.BoolOutput)
}

// The IP address of the first DNS resolver, that was assigned by the DHCP server.
func (o DhcpIpClientOutput) PrimaryDns() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.PrimaryDns }).(pulumi.StringOutput)
}

// The IP address of the primary NTP server, assigned by the DHCP server.
func (o DhcpIpClientOutput) PrimaryNtp() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.PrimaryNtp }).(pulumi.StringOutput)
}

// The IP address of the second DNS resolver, assigned by the DHCP server.
func (o DhcpIpClientOutput) SecondaryDns() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.SecondaryDns }).(pulumi.StringOutput)
}

// The IP address of the secondary NTP server, assigned by the DHCP server.
func (o DhcpIpClientOutput) SecondaryNtp() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.SecondaryNtp }).(pulumi.StringOutput)
}

func (o DhcpIpClientOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
func (o DhcpIpClientOutput) UsePeerDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.BoolPtrOutput { return v.UsePeerDns }).(pulumi.BoolPtrOutput)
}

// Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
func (o DhcpIpClientOutput) UsePeerNtp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DhcpIpClient) pulumi.BoolPtrOutput { return v.UsePeerNtp }).(pulumi.BoolPtrOutput)
}

type DhcpIpClientArrayOutput struct{ *pulumi.OutputState }

func (DhcpIpClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpIpClient)(nil)).Elem()
}

func (o DhcpIpClientArrayOutput) ToDhcpIpClientArrayOutput() DhcpIpClientArrayOutput {
	return o
}

func (o DhcpIpClientArrayOutput) ToDhcpIpClientArrayOutputWithContext(ctx context.Context) DhcpIpClientArrayOutput {
	return o
}

func (o DhcpIpClientArrayOutput) Index(i pulumi.IntInput) DhcpIpClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DhcpIpClient {
		return vs[0].([]*DhcpIpClient)[vs[1].(int)]
	}).(DhcpIpClientOutput)
}

type DhcpIpClientMapOutput struct{ *pulumi.OutputState }

func (DhcpIpClientMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpIpClient)(nil)).Elem()
}

func (o DhcpIpClientMapOutput) ToDhcpIpClientMapOutput() DhcpIpClientMapOutput {
	return o
}

func (o DhcpIpClientMapOutput) ToDhcpIpClientMapOutputWithContext(ctx context.Context) DhcpIpClientMapOutput {
	return o
}

func (o DhcpIpClientMapOutput) MapIndex(k pulumi.StringInput) DhcpIpClientOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DhcpIpClient {
		return vs[0].(map[string]*DhcpIpClient)[vs[1].(string)]
	}).(DhcpIpClientOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpIpClientInput)(nil)).Elem(), &DhcpIpClient{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpIpClientArrayInput)(nil)).Elem(), DhcpIpClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpIpClientMapInput)(nil)).Elem(), DhcpIpClientMap{})
	pulumi.RegisterOutputType(DhcpIpClientOutput{})
	pulumi.RegisterOutputType(DhcpIpClientArrayOutput{})
	pulumi.RegisterOutputType(DhcpIpClientMapOutput{})
}
