// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ip

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Ip.DhcpServerNetwork (Resource)
//
// ***
//
// #### This is an alias for backwards compatibility between plugin versions.
// Please see documentation for Ip.DhcpIpServerNetwork
type DhcpServerNetwork struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// The network DHCP server(s) will lease addresses from.
	Address pulumi.StringOutput `pulumi:"address"`
	// Boot filename.
	BootFileName pulumi.StringPtrOutput `pulumi:"bootFileName"`
	// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
	CapsManager pulumi.StringPtrOutput `pulumi:"capsManager"`
	Comment     pulumi.StringPtrOutput `pulumi:"comment"`
	// Add additional DHCP options from the option list.
	DhcpOption pulumi.StringPtrOutput `pulumi:"dhcpOption"`
	// Add an additional set of DHCP options.
	DhcpOptionSet pulumi.StringPtrOutput `pulumi:"dhcpOptionSet"`
	// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server
	// in DNS-server is set.
	DnsNone pulumi.BoolPtrOutput `pulumi:"dnsNone"`
	// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used
	// by the DHCP client as primary and secondary DNS servers.
	DnsServer pulumi.StringPtrOutput `pulumi:"dnsServer"`
	// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// The default gateway to be used by DHCP Client.
	Gateway pulumi.StringPtrOutput `pulumi:"gateway"`
	// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
	Netmask pulumi.IntPtrOutput `pulumi:"netmask"`
	// The IP address of the next server to use in bootstrap.
	NextServer pulumi.StringPtrOutput `pulumi:"nextServer"`
	// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used
	// by the DHCP client as primary and secondary NTP servers
	NtpServer pulumi.StringPtrOutput `pulumi:"ntpServer"`
	// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to
	// be used by the DHCP client as primary and secondary WINS servers
	WinsServer pulumi.StringPtrOutput `pulumi:"winsServer"`
}

// NewDhcpServerNetwork registers a new resource with the given unique name, arguments, and options.
func NewDhcpServerNetwork(ctx *pulumi.Context,
	name string, args *DhcpServerNetworkArgs, opts ...pulumi.ResourceOption) (*DhcpServerNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	var resource DhcpServerNetwork
	err := ctx.RegisterResource("routeros:Ip/dhcpServerNetwork:DhcpServerNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDhcpServerNetwork gets an existing DhcpServerNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDhcpServerNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DhcpServerNetworkState, opts ...pulumi.ResourceOption) (*DhcpServerNetwork, error) {
	var resource DhcpServerNetwork
	err := ctx.ReadResource("routeros:Ip/dhcpServerNetwork:DhcpServerNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DhcpServerNetwork resources.
type dhcpServerNetworkState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The network DHCP server(s) will lease addresses from.
	Address *string `pulumi:"address"`
	// Boot filename.
	BootFileName *string `pulumi:"bootFileName"`
	// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
	CapsManager *string `pulumi:"capsManager"`
	Comment     *string `pulumi:"comment"`
	// Add additional DHCP options from the option list.
	DhcpOption *string `pulumi:"dhcpOption"`
	// Add an additional set of DHCP options.
	DhcpOptionSet *string `pulumi:"dhcpOptionSet"`
	// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server
	// in DNS-server is set.
	DnsNone *bool `pulumi:"dnsNone"`
	// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used
	// by the DHCP client as primary and secondary DNS servers.
	DnsServer *string `pulumi:"dnsServer"`
	// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
	Domain *string `pulumi:"domain"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic *bool `pulumi:"dynamic"`
	// The default gateway to be used by DHCP Client.
	Gateway *string `pulumi:"gateway"`
	// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
	Netmask *int `pulumi:"netmask"`
	// The IP address of the next server to use in bootstrap.
	NextServer *string `pulumi:"nextServer"`
	// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used
	// by the DHCP client as primary and secondary NTP servers
	NtpServer *string `pulumi:"ntpServer"`
	// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to
	// be used by the DHCP client as primary and secondary WINS servers
	WinsServer *string `pulumi:"winsServer"`
}

type DhcpServerNetworkState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The network DHCP server(s) will lease addresses from.
	Address pulumi.StringPtrInput
	// Boot filename.
	BootFileName pulumi.StringPtrInput
	// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
	CapsManager pulumi.StringPtrInput
	Comment     pulumi.StringPtrInput
	// Add additional DHCP options from the option list.
	DhcpOption pulumi.StringPtrInput
	// Add an additional set of DHCP options.
	DhcpOptionSet pulumi.StringPtrInput
	// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server
	// in DNS-server is set.
	DnsNone pulumi.BoolPtrInput
	// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used
	// by the DHCP client as primary and secondary DNS servers.
	DnsServer pulumi.StringPtrInput
	// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
	Domain pulumi.StringPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic pulumi.BoolPtrInput
	// The default gateway to be used by DHCP Client.
	Gateway pulumi.StringPtrInput
	// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
	Netmask pulumi.IntPtrInput
	// The IP address of the next server to use in bootstrap.
	NextServer pulumi.StringPtrInput
	// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used
	// by the DHCP client as primary and secondary NTP servers
	NtpServer pulumi.StringPtrInput
	// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to
	// be used by the DHCP client as primary and secondary WINS servers
	WinsServer pulumi.StringPtrInput
}

func (DhcpServerNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpServerNetworkState)(nil)).Elem()
}

type dhcpServerNetworkArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The network DHCP server(s) will lease addresses from.
	Address string `pulumi:"address"`
	// Boot filename.
	BootFileName *string `pulumi:"bootFileName"`
	// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
	CapsManager *string `pulumi:"capsManager"`
	Comment     *string `pulumi:"comment"`
	// Add additional DHCP options from the option list.
	DhcpOption *string `pulumi:"dhcpOption"`
	// Add an additional set of DHCP options.
	DhcpOptionSet *string `pulumi:"dhcpOptionSet"`
	// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server
	// in DNS-server is set.
	DnsNone *bool `pulumi:"dnsNone"`
	// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used
	// by the DHCP client as primary and secondary DNS servers.
	DnsServer *string `pulumi:"dnsServer"`
	// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
	Domain *string `pulumi:"domain"`
	// The default gateway to be used by DHCP Client.
	Gateway *string `pulumi:"gateway"`
	// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
	Netmask *int `pulumi:"netmask"`
	// The IP address of the next server to use in bootstrap.
	NextServer *string `pulumi:"nextServer"`
	// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used
	// by the DHCP client as primary and secondary NTP servers
	NtpServer *string `pulumi:"ntpServer"`
	// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to
	// be used by the DHCP client as primary and secondary WINS servers
	WinsServer *string `pulumi:"winsServer"`
}

// The set of arguments for constructing a DhcpServerNetwork resource.
type DhcpServerNetworkArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The network DHCP server(s) will lease addresses from.
	Address pulumi.StringInput
	// Boot filename.
	BootFileName pulumi.StringPtrInput
	// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
	CapsManager pulumi.StringPtrInput
	Comment     pulumi.StringPtrInput
	// Add additional DHCP options from the option list.
	DhcpOption pulumi.StringPtrInput
	// Add an additional set of DHCP options.
	DhcpOptionSet pulumi.StringPtrInput
	// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server
	// in DNS-server is set.
	DnsNone pulumi.BoolPtrInput
	// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used
	// by the DHCP client as primary and secondary DNS servers.
	DnsServer pulumi.StringPtrInput
	// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
	Domain pulumi.StringPtrInput
	// The default gateway to be used by DHCP Client.
	Gateway pulumi.StringPtrInput
	// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
	Netmask pulumi.IntPtrInput
	// The IP address of the next server to use in bootstrap.
	NextServer pulumi.StringPtrInput
	// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used
	// by the DHCP client as primary and secondary NTP servers
	NtpServer pulumi.StringPtrInput
	// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to
	// be used by the DHCP client as primary and secondary WINS servers
	WinsServer pulumi.StringPtrInput
}

func (DhcpServerNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpServerNetworkArgs)(nil)).Elem()
}

type DhcpServerNetworkInput interface {
	pulumi.Input

	ToDhcpServerNetworkOutput() DhcpServerNetworkOutput
	ToDhcpServerNetworkOutputWithContext(ctx context.Context) DhcpServerNetworkOutput
}

func (*DhcpServerNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpServerNetwork)(nil)).Elem()
}

func (i *DhcpServerNetwork) ToDhcpServerNetworkOutput() DhcpServerNetworkOutput {
	return i.ToDhcpServerNetworkOutputWithContext(context.Background())
}

func (i *DhcpServerNetwork) ToDhcpServerNetworkOutputWithContext(ctx context.Context) DhcpServerNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpServerNetworkOutput)
}

// DhcpServerNetworkArrayInput is an input type that accepts DhcpServerNetworkArray and DhcpServerNetworkArrayOutput values.
// You can construct a concrete instance of `DhcpServerNetworkArrayInput` via:
//
//	DhcpServerNetworkArray{ DhcpServerNetworkArgs{...} }
type DhcpServerNetworkArrayInput interface {
	pulumi.Input

	ToDhcpServerNetworkArrayOutput() DhcpServerNetworkArrayOutput
	ToDhcpServerNetworkArrayOutputWithContext(context.Context) DhcpServerNetworkArrayOutput
}

type DhcpServerNetworkArray []DhcpServerNetworkInput

func (DhcpServerNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpServerNetwork)(nil)).Elem()
}

func (i DhcpServerNetworkArray) ToDhcpServerNetworkArrayOutput() DhcpServerNetworkArrayOutput {
	return i.ToDhcpServerNetworkArrayOutputWithContext(context.Background())
}

func (i DhcpServerNetworkArray) ToDhcpServerNetworkArrayOutputWithContext(ctx context.Context) DhcpServerNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpServerNetworkArrayOutput)
}

// DhcpServerNetworkMapInput is an input type that accepts DhcpServerNetworkMap and DhcpServerNetworkMapOutput values.
// You can construct a concrete instance of `DhcpServerNetworkMapInput` via:
//
//	DhcpServerNetworkMap{ "key": DhcpServerNetworkArgs{...} }
type DhcpServerNetworkMapInput interface {
	pulumi.Input

	ToDhcpServerNetworkMapOutput() DhcpServerNetworkMapOutput
	ToDhcpServerNetworkMapOutputWithContext(context.Context) DhcpServerNetworkMapOutput
}

type DhcpServerNetworkMap map[string]DhcpServerNetworkInput

func (DhcpServerNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpServerNetwork)(nil)).Elem()
}

func (i DhcpServerNetworkMap) ToDhcpServerNetworkMapOutput() DhcpServerNetworkMapOutput {
	return i.ToDhcpServerNetworkMapOutputWithContext(context.Background())
}

func (i DhcpServerNetworkMap) ToDhcpServerNetworkMapOutputWithContext(ctx context.Context) DhcpServerNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpServerNetworkMapOutput)
}

type DhcpServerNetworkOutput struct{ *pulumi.OutputState }

func (DhcpServerNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DhcpServerNetwork)(nil)).Elem()
}

func (o DhcpServerNetworkOutput) ToDhcpServerNetworkOutput() DhcpServerNetworkOutput {
	return o
}

func (o DhcpServerNetworkOutput) ToDhcpServerNetworkOutputWithContext(ctx context.Context) DhcpServerNetworkOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o DhcpServerNetworkOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o DhcpServerNetworkOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// The network DHCP server(s) will lease addresses from.
func (o DhcpServerNetworkOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Boot filename.
func (o DhcpServerNetworkOutput) BootFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.BootFileName }).(pulumi.StringPtrOutput)
}

// A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
func (o DhcpServerNetworkOutput) CapsManager() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.CapsManager }).(pulumi.StringPtrOutput)
}

func (o DhcpServerNetworkOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Add additional DHCP options from the option list.
func (o DhcpServerNetworkOutput) DhcpOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.DhcpOption }).(pulumi.StringPtrOutput)
}

// Add an additional set of DHCP options.
func (o DhcpServerNetworkOutput) DhcpOptionSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.DhcpOptionSet }).(pulumi.StringPtrOutput)
}

// If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server
// in DNS-server is set.
func (o DhcpServerNetworkOutput) DnsNone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.BoolPtrOutput { return v.DnsNone }).(pulumi.BoolPtrOutput)
}

// the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used
// by the DHCP client as primary and secondary DNS servers.
func (o DhcpServerNetworkOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.DnsServer }).(pulumi.StringPtrOutput)
}

// The DHCP client will use this as the 'DNS domain' setting for the network adapter.
func (o DhcpServerNetworkOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
// modified.
func (o DhcpServerNetworkOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// The default gateway to be used by DHCP Client.
func (o DhcpServerNetworkOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.Gateway }).(pulumi.StringPtrOutput)
}

// The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
func (o DhcpServerNetworkOutput) Netmask() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.IntPtrOutput { return v.Netmask }).(pulumi.IntPtrOutput)
}

// The IP address of the next server to use in bootstrap.
func (o DhcpServerNetworkOutput) NextServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.NextServer }).(pulumi.StringPtrOutput)
}

// The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used
// by the DHCP client as primary and secondary NTP servers
func (o DhcpServerNetworkOutput) NtpServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.NtpServer }).(pulumi.StringPtrOutput)
}

// The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to
// be used by the DHCP client as primary and secondary WINS servers
func (o DhcpServerNetworkOutput) WinsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DhcpServerNetwork) pulumi.StringPtrOutput { return v.WinsServer }).(pulumi.StringPtrOutput)
}

type DhcpServerNetworkArrayOutput struct{ *pulumi.OutputState }

func (DhcpServerNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DhcpServerNetwork)(nil)).Elem()
}

func (o DhcpServerNetworkArrayOutput) ToDhcpServerNetworkArrayOutput() DhcpServerNetworkArrayOutput {
	return o
}

func (o DhcpServerNetworkArrayOutput) ToDhcpServerNetworkArrayOutputWithContext(ctx context.Context) DhcpServerNetworkArrayOutput {
	return o
}

func (o DhcpServerNetworkArrayOutput) Index(i pulumi.IntInput) DhcpServerNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DhcpServerNetwork {
		return vs[0].([]*DhcpServerNetwork)[vs[1].(int)]
	}).(DhcpServerNetworkOutput)
}

type DhcpServerNetworkMapOutput struct{ *pulumi.OutputState }

func (DhcpServerNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DhcpServerNetwork)(nil)).Elem()
}

func (o DhcpServerNetworkMapOutput) ToDhcpServerNetworkMapOutput() DhcpServerNetworkMapOutput {
	return o
}

func (o DhcpServerNetworkMapOutput) ToDhcpServerNetworkMapOutputWithContext(ctx context.Context) DhcpServerNetworkMapOutput {
	return o
}

func (o DhcpServerNetworkMapOutput) MapIndex(k pulumi.StringInput) DhcpServerNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DhcpServerNetwork {
		return vs[0].(map[string]*DhcpServerNetwork)[vs[1].(string)]
	}).(DhcpServerNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpServerNetworkInput)(nil)).Elem(), &DhcpServerNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpServerNetworkArrayInput)(nil)).Elem(), DhcpServerNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpServerNetworkMapInput)(nil)).Elem(), DhcpServerNetworkMap{})
	pulumi.RegisterOutputType(DhcpServerNetworkOutput{})
	pulumi.RegisterOutputType(DhcpServerNetworkArrayOutput{})
	pulumi.RegisterOutputType(DhcpServerNetworkMapOutput{})
}
