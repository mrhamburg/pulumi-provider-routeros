// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ip

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Ip.IpDnsRecord (Resource)
//
// Creates a DNS record on the MikroTik device.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Ip"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ip.NewIpDnsRecord(ctx, "nameRecord", &Ip.IpDnsRecordArgs{
//				Address: pulumi.String("192.168.88.1"),
//				Type:    pulumi.String("A"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ip.NewIpDnsRecord(ctx, "regexpRecord", &Ip.IpDnsRecordArgs{
//				Address: pulumi.String("192.168.88.1"),
//				Regexp:  pulumi.String(".*pool.ntp.org"),
//				Type:    pulumi.String("A"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ip.NewDnsRecord(ctx, "aaaaRecord", &Ip.DnsRecordArgs{
//				Address: pulumi.String("ff00::1"),
//				Type:    pulumi.String("AAAA"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ip.NewDnsRecord(ctx, "cnameRecord", &Ip.DnsRecordArgs{
//				Cname: pulumi.String("ipv4.lan"),
//				Type:  pulumi.String("CNAME"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ip.NewDnsRecord(ctx, "fwdRecord", &Ip.DnsRecordArgs{
//				ForwardTo: pulumi.String("127.0.0.1"),
//				Type:      pulumi.String("FWD"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ip.NewDnsRecord(ctx, "mxRecord", &Ip.DnsRecordArgs{
//				MxExchange:   pulumi.String("127.0.0.1"),
//				MxPreference: pulumi.Int(10),
//				Type:         pulumi.String("MX"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ip.NewDnsRecord(ctx, "nsRecord", &Ip.DnsRecordArgs{
//				Ns:   pulumi.String("127.0.0.1"),
//				Type: pulumi.String("NS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ip.NewDnsRecord(ctx, "nxdomainRecord", &Ip.DnsRecordArgs{
//				Type: pulumi.String("NXDOMAIN"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ip.NewDnsRecord(ctx, "srvRecord", &Ip.DnsRecordArgs{
//				SrvPort:     pulumi.Int(8080),
//				SrvPriority: pulumi.Int(10),
//				SrvTarget:   pulumi.String("127.0.0.1"),
//				SrvWeight:   pulumi.String("100"),
//				Type:        pulumi.String("SRV"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ip.NewDnsRecord(ctx, "txtRecord", &Ip.DnsRecordArgs{
//				Text: pulumi.String("dW6MrI3nBy3eJgYWH3QAg1Cwk_TvjFESOuKo+mp6nm1"),
//				Type: pulumi.String("TXT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/dns/static get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:Ip/ipDnsRecord:IpDnsRecord name_record "*0"
//
// ```
type IpDnsRecord struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// The A record to be returend from the DNS hostname.
	Address pulumi.StringPtrOutput `pulumi:"address"`
	// Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
	AddressList pulumi.StringPtrOutput `pulumi:"addressList"`
	// Alias name for a domain name.
	Cname    pulumi.StringPtrOutput `pulumi:"cname"`
	Comment  pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// The IP address of a domain name server to which a particular DNS request must be forwarded.
	ForwardTo pulumi.StringPtrOutput `pulumi:"forwardTo"`
	// Whether the record will match requests for subdomains.
	MatchSubdomain pulumi.BoolPtrOutput `pulumi:"matchSubdomain"`
	// The domain name of the MX server.
	MxExchange pulumi.StringPtrOutput `pulumi:"mxExchange"`
	// Preference of the particular MX record.
	MxPreference pulumi.IntOutput `pulumi:"mxPreference"`
	// The name of the DNS hostname to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the authoritative domain name server for the particular record.
	Ns pulumi.StringPtrOutput `pulumi:"ns"`
	// DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
	Regexp pulumi.StringPtrOutput `pulumi:"regexp"`
	// The TCP or UDP port on which the service is to be found.
	SrvPort pulumi.IntOutput `pulumi:"srvPort"`
	// Priority of the particular SRV record.
	SrvPriority pulumi.IntOutput `pulumi:"srvPriority"`
	// The canonical hostname of the machine providing the service ends in a dot.
	SrvTarget pulumi.StringPtrOutput `pulumi:"srvTarget"`
	// Weight of the particular SRC record.
	SrvWeight pulumi.StringOutput `pulumi:"srvWeight"`
	// Textual information about the domain name.
	Text pulumi.StringPtrOutput `pulumi:"text"`
	// The ttl of the DNS record.
	Ttl pulumi.StringOutput `pulumi:"ttl"`
	// Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIpDnsRecord registers a new resource with the given unique name, arguments, and options.
func NewIpDnsRecord(ctx *pulumi.Context,
	name string, args *IpDnsRecordArgs, opts ...pulumi.ResourceOption) (*IpDnsRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource IpDnsRecord
	err := ctx.RegisterResource("routeros:Ip/ipDnsRecord:IpDnsRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpDnsRecord gets an existing IpDnsRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpDnsRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpDnsRecordState, opts ...pulumi.ResourceOption) (*IpDnsRecord, error) {
	var resource IpDnsRecord
	err := ctx.ReadResource("routeros:Ip/ipDnsRecord:IpDnsRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpDnsRecord resources.
type ipDnsRecordState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The A record to be returend from the DNS hostname.
	Address *string `pulumi:"address"`
	// Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
	AddressList *string `pulumi:"addressList"`
	// Alias name for a domain name.
	Cname    *string `pulumi:"cname"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// The IP address of a domain name server to which a particular DNS request must be forwarded.
	ForwardTo *string `pulumi:"forwardTo"`
	// Whether the record will match requests for subdomains.
	MatchSubdomain *bool `pulumi:"matchSubdomain"`
	// The domain name of the MX server.
	MxExchange *string `pulumi:"mxExchange"`
	// Preference of the particular MX record.
	MxPreference *int `pulumi:"mxPreference"`
	// The name of the DNS hostname to be created.
	Name *string `pulumi:"name"`
	// Name of the authoritative domain name server for the particular record.
	Ns *string `pulumi:"ns"`
	// DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
	Regexp *string `pulumi:"regexp"`
	// The TCP or UDP port on which the service is to be found.
	SrvPort *int `pulumi:"srvPort"`
	// Priority of the particular SRV record.
	SrvPriority *int `pulumi:"srvPriority"`
	// The canonical hostname of the machine providing the service ends in a dot.
	SrvTarget *string `pulumi:"srvTarget"`
	// Weight of the particular SRC record.
	SrvWeight *string `pulumi:"srvWeight"`
	// Textual information about the domain name.
	Text *string `pulumi:"text"`
	// The ttl of the DNS record.
	Ttl *string `pulumi:"ttl"`
	// Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
	Type *string `pulumi:"type"`
}

type IpDnsRecordState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The A record to be returend from the DNS hostname.
	Address pulumi.StringPtrInput
	// Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
	AddressList pulumi.StringPtrInput
	// Alias name for a domain name.
	Cname    pulumi.StringPtrInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// The IP address of a domain name server to which a particular DNS request must be forwarded.
	ForwardTo pulumi.StringPtrInput
	// Whether the record will match requests for subdomains.
	MatchSubdomain pulumi.BoolPtrInput
	// The domain name of the MX server.
	MxExchange pulumi.StringPtrInput
	// Preference of the particular MX record.
	MxPreference pulumi.IntPtrInput
	// The name of the DNS hostname to be created.
	Name pulumi.StringPtrInput
	// Name of the authoritative domain name server for the particular record.
	Ns pulumi.StringPtrInput
	// DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
	Regexp pulumi.StringPtrInput
	// The TCP or UDP port on which the service is to be found.
	SrvPort pulumi.IntPtrInput
	// Priority of the particular SRV record.
	SrvPriority pulumi.IntPtrInput
	// The canonical hostname of the machine providing the service ends in a dot.
	SrvTarget pulumi.StringPtrInput
	// Weight of the particular SRC record.
	SrvWeight pulumi.StringPtrInput
	// Textual information about the domain name.
	Text pulumi.StringPtrInput
	// The ttl of the DNS record.
	Ttl pulumi.StringPtrInput
	// Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
	Type pulumi.StringPtrInput
}

func (IpDnsRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipDnsRecordState)(nil)).Elem()
}

type ipDnsRecordArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// The A record to be returend from the DNS hostname.
	Address *string `pulumi:"address"`
	// Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
	AddressList *string `pulumi:"addressList"`
	// Alias name for a domain name.
	Cname    *string `pulumi:"cname"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// The IP address of a domain name server to which a particular DNS request must be forwarded.
	ForwardTo *string `pulumi:"forwardTo"`
	// Whether the record will match requests for subdomains.
	MatchSubdomain *bool `pulumi:"matchSubdomain"`
	// The domain name of the MX server.
	MxExchange *string `pulumi:"mxExchange"`
	// Preference of the particular MX record.
	MxPreference *int `pulumi:"mxPreference"`
	// The name of the DNS hostname to be created.
	Name *string `pulumi:"name"`
	// Name of the authoritative domain name server for the particular record.
	Ns *string `pulumi:"ns"`
	// DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
	Regexp *string `pulumi:"regexp"`
	// The TCP or UDP port on which the service is to be found.
	SrvPort *int `pulumi:"srvPort"`
	// Priority of the particular SRV record.
	SrvPriority *int `pulumi:"srvPriority"`
	// The canonical hostname of the machine providing the service ends in a dot.
	SrvTarget *string `pulumi:"srvTarget"`
	// Weight of the particular SRC record.
	SrvWeight *string `pulumi:"srvWeight"`
	// Textual information about the domain name.
	Text *string `pulumi:"text"`
	// The ttl of the DNS record.
	Ttl *string `pulumi:"ttl"`
	// Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a IpDnsRecord resource.
type IpDnsRecordArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// The A record to be returend from the DNS hostname.
	Address pulumi.StringPtrInput
	// Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
	AddressList pulumi.StringPtrInput
	// Alias name for a domain name.
	Cname    pulumi.StringPtrInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// The IP address of a domain name server to which a particular DNS request must be forwarded.
	ForwardTo pulumi.StringPtrInput
	// Whether the record will match requests for subdomains.
	MatchSubdomain pulumi.BoolPtrInput
	// The domain name of the MX server.
	MxExchange pulumi.StringPtrInput
	// Preference of the particular MX record.
	MxPreference pulumi.IntPtrInput
	// The name of the DNS hostname to be created.
	Name pulumi.StringPtrInput
	// Name of the authoritative domain name server for the particular record.
	Ns pulumi.StringPtrInput
	// DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
	Regexp pulumi.StringPtrInput
	// The TCP or UDP port on which the service is to be found.
	SrvPort pulumi.IntPtrInput
	// Priority of the particular SRV record.
	SrvPriority pulumi.IntPtrInput
	// The canonical hostname of the machine providing the service ends in a dot.
	SrvTarget pulumi.StringPtrInput
	// Weight of the particular SRC record.
	SrvWeight pulumi.StringPtrInput
	// Textual information about the domain name.
	Text pulumi.StringPtrInput
	// The ttl of the DNS record.
	Ttl pulumi.StringPtrInput
	// Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
	Type pulumi.StringInput
}

func (IpDnsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipDnsRecordArgs)(nil)).Elem()
}

type IpDnsRecordInput interface {
	pulumi.Input

	ToIpDnsRecordOutput() IpDnsRecordOutput
	ToIpDnsRecordOutputWithContext(ctx context.Context) IpDnsRecordOutput
}

func (*IpDnsRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**IpDnsRecord)(nil)).Elem()
}

func (i *IpDnsRecord) ToIpDnsRecordOutput() IpDnsRecordOutput {
	return i.ToIpDnsRecordOutputWithContext(context.Background())
}

func (i *IpDnsRecord) ToIpDnsRecordOutputWithContext(ctx context.Context) IpDnsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpDnsRecordOutput)
}

// IpDnsRecordArrayInput is an input type that accepts IpDnsRecordArray and IpDnsRecordArrayOutput values.
// You can construct a concrete instance of `IpDnsRecordArrayInput` via:
//
//	IpDnsRecordArray{ IpDnsRecordArgs{...} }
type IpDnsRecordArrayInput interface {
	pulumi.Input

	ToIpDnsRecordArrayOutput() IpDnsRecordArrayOutput
	ToIpDnsRecordArrayOutputWithContext(context.Context) IpDnsRecordArrayOutput
}

type IpDnsRecordArray []IpDnsRecordInput

func (IpDnsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpDnsRecord)(nil)).Elem()
}

func (i IpDnsRecordArray) ToIpDnsRecordArrayOutput() IpDnsRecordArrayOutput {
	return i.ToIpDnsRecordArrayOutputWithContext(context.Background())
}

func (i IpDnsRecordArray) ToIpDnsRecordArrayOutputWithContext(ctx context.Context) IpDnsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpDnsRecordArrayOutput)
}

// IpDnsRecordMapInput is an input type that accepts IpDnsRecordMap and IpDnsRecordMapOutput values.
// You can construct a concrete instance of `IpDnsRecordMapInput` via:
//
//	IpDnsRecordMap{ "key": IpDnsRecordArgs{...} }
type IpDnsRecordMapInput interface {
	pulumi.Input

	ToIpDnsRecordMapOutput() IpDnsRecordMapOutput
	ToIpDnsRecordMapOutputWithContext(context.Context) IpDnsRecordMapOutput
}

type IpDnsRecordMap map[string]IpDnsRecordInput

func (IpDnsRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpDnsRecord)(nil)).Elem()
}

func (i IpDnsRecordMap) ToIpDnsRecordMapOutput() IpDnsRecordMapOutput {
	return i.ToIpDnsRecordMapOutputWithContext(context.Background())
}

func (i IpDnsRecordMap) ToIpDnsRecordMapOutputWithContext(ctx context.Context) IpDnsRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpDnsRecordMapOutput)
}

type IpDnsRecordOutput struct{ *pulumi.OutputState }

func (IpDnsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpDnsRecord)(nil)).Elem()
}

func (o IpDnsRecordOutput) ToIpDnsRecordOutput() IpDnsRecordOutput {
	return o
}

func (o IpDnsRecordOutput) ToIpDnsRecordOutputWithContext(ctx context.Context) IpDnsRecordOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o IpDnsRecordOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o IpDnsRecordOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// The A record to be returend from the DNS hostname.
func (o IpDnsRecordOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.Address }).(pulumi.StringPtrOutput)
}

// Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
func (o IpDnsRecordOutput) AddressList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.AddressList }).(pulumi.StringPtrOutput)
}

// Alias name for a domain name.
func (o IpDnsRecordOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.Cname }).(pulumi.StringPtrOutput)
}

func (o IpDnsRecordOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o IpDnsRecordOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o IpDnsRecordOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// The IP address of a domain name server to which a particular DNS request must be forwarded.
func (o IpDnsRecordOutput) ForwardTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.ForwardTo }).(pulumi.StringPtrOutput)
}

// Whether the record will match requests for subdomains.
func (o IpDnsRecordOutput) MatchSubdomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.BoolPtrOutput { return v.MatchSubdomain }).(pulumi.BoolPtrOutput)
}

// The domain name of the MX server.
func (o IpDnsRecordOutput) MxExchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.MxExchange }).(pulumi.StringPtrOutput)
}

// Preference of the particular MX record.
func (o IpDnsRecordOutput) MxPreference() pulumi.IntOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.IntOutput { return v.MxPreference }).(pulumi.IntOutput)
}

// The name of the DNS hostname to be created.
func (o IpDnsRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the authoritative domain name server for the particular record.
func (o IpDnsRecordOutput) Ns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.Ns }).(pulumi.StringPtrOutput)
}

// DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
func (o IpDnsRecordOutput) Regexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.Regexp }).(pulumi.StringPtrOutput)
}

// The TCP or UDP port on which the service is to be found.
func (o IpDnsRecordOutput) SrvPort() pulumi.IntOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.IntOutput { return v.SrvPort }).(pulumi.IntOutput)
}

// Priority of the particular SRV record.
func (o IpDnsRecordOutput) SrvPriority() pulumi.IntOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.IntOutput { return v.SrvPriority }).(pulumi.IntOutput)
}

// The canonical hostname of the machine providing the service ends in a dot.
func (o IpDnsRecordOutput) SrvTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.SrvTarget }).(pulumi.StringPtrOutput)
}

// Weight of the particular SRC record.
func (o IpDnsRecordOutput) SrvWeight() pulumi.StringOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringOutput { return v.SrvWeight }).(pulumi.StringOutput)
}

// Textual information about the domain name.
func (o IpDnsRecordOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringPtrOutput { return v.Text }).(pulumi.StringPtrOutput)
}

// The ttl of the DNS record.
func (o IpDnsRecordOutput) Ttl() pulumi.StringOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringOutput { return v.Ttl }).(pulumi.StringOutput)
}

// Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
func (o IpDnsRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IpDnsRecord) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type IpDnsRecordArrayOutput struct{ *pulumi.OutputState }

func (IpDnsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpDnsRecord)(nil)).Elem()
}

func (o IpDnsRecordArrayOutput) ToIpDnsRecordArrayOutput() IpDnsRecordArrayOutput {
	return o
}

func (o IpDnsRecordArrayOutput) ToIpDnsRecordArrayOutputWithContext(ctx context.Context) IpDnsRecordArrayOutput {
	return o
}

func (o IpDnsRecordArrayOutput) Index(i pulumi.IntInput) IpDnsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpDnsRecord {
		return vs[0].([]*IpDnsRecord)[vs[1].(int)]
	}).(IpDnsRecordOutput)
}

type IpDnsRecordMapOutput struct{ *pulumi.OutputState }

func (IpDnsRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpDnsRecord)(nil)).Elem()
}

func (o IpDnsRecordMapOutput) ToIpDnsRecordMapOutput() IpDnsRecordMapOutput {
	return o
}

func (o IpDnsRecordMapOutput) ToIpDnsRecordMapOutputWithContext(ctx context.Context) IpDnsRecordMapOutput {
	return o
}

func (o IpDnsRecordMapOutput) MapIndex(k pulumi.StringInput) IpDnsRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpDnsRecord {
		return vs[0].(map[string]*IpDnsRecord)[vs[1].(string)]
	}).(IpDnsRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpDnsRecordInput)(nil)).Elem(), &IpDnsRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpDnsRecordArrayInput)(nil)).Elem(), IpDnsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpDnsRecordMapInput)(nil)).Elem(), IpDnsRecordMap{})
	pulumi.RegisterOutputType(IpDnsRecordOutput{})
	pulumi.RegisterOutputType(IpDnsRecordArrayOutput{})
	pulumi.RegisterOutputType(IpDnsRecordMapOutput{})
}
