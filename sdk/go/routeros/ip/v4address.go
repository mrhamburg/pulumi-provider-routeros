// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ip

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Ip"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ip.NewV4Address(ctx, "address", &Ip.V4AddressArgs{
//				Address:   pulumi.String("10.0.0.1"),
//				Interface: pulumi.String("bridge"),
//				Network:   pulumi.String("10.0.0.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/address get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:Ip/v4Address:V4Address address "*0"
//
// ```
type V4Address struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Name of the actual interface the logical one is bound to.
	ActualInterface pulumi.StringOutput `pulumi:"actualInterface"`
	// IP address.
	Address  pulumi.StringOutput    `pulumi:"address"`
	Comment  pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// Name of the interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	Invalid   pulumi.BoolOutput   `pulumi:"invalid"`
	// IP address for the network. For point-to-point links it should be the address of the remote end. Starting from v5RC6 this parameter is configurable only for addresses with /32 netmask (point to point links)
	Network pulumi.StringOutput `pulumi:"network"`
}

// NewV4Address registers a new resource with the given unique name, arguments, and options.
func NewV4Address(ctx *pulumi.Context,
	name string, args *V4AddressArgs, opts ...pulumi.ResourceOption) (*V4Address, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	var resource V4Address
	err := ctx.RegisterResource("routeros:Ip/v4Address:V4Address", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV4Address gets an existing V4Address resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV4Address(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V4AddressState, opts ...pulumi.ResourceOption) (*V4Address, error) {
	var resource V4Address
	err := ctx.ReadResource("routeros:Ip/v4Address:V4Address", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V4Address resources.
type v4addressState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Name of the actual interface the logical one is bound to.
	ActualInterface *string `pulumi:"actualInterface"`
	// IP address.
	Address  *string `pulumi:"address"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// Name of the interface.
	Interface *string `pulumi:"interface"`
	Invalid   *bool   `pulumi:"invalid"`
	// IP address for the network. For point-to-point links it should be the address of the remote end. Starting from v5RC6 this parameter is configurable only for addresses with /32 netmask (point to point links)
	Network *string `pulumi:"network"`
}

type V4AddressState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Name of the actual interface the logical one is bound to.
	ActualInterface pulumi.StringPtrInput
	// IP address.
	Address  pulumi.StringPtrInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// Name of the interface.
	Interface pulumi.StringPtrInput
	Invalid   pulumi.BoolPtrInput
	// IP address for the network. For point-to-point links it should be the address of the remote end. Starting from v5RC6 this parameter is configurable only for addresses with /32 netmask (point to point links)
	Network pulumi.StringPtrInput
}

func (V4AddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*v4addressState)(nil)).Elem()
}

type v4addressArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// IP address.
	Address  string  `pulumi:"address"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// Name of the interface.
	Interface string `pulumi:"interface"`
	// IP address for the network. For point-to-point links it should be the address of the remote end. Starting from v5RC6 this parameter is configurable only for addresses with /32 netmask (point to point links)
	Network *string `pulumi:"network"`
}

// The set of arguments for constructing a V4Address resource.
type V4AddressArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// IP address.
	Address  pulumi.StringInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Name of the interface.
	Interface pulumi.StringInput
	// IP address for the network. For point-to-point links it should be the address of the remote end. Starting from v5RC6 this parameter is configurable only for addresses with /32 netmask (point to point links)
	Network pulumi.StringPtrInput
}

func (V4AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*v4addressArgs)(nil)).Elem()
}

type V4AddressInput interface {
	pulumi.Input

	ToV4AddressOutput() V4AddressOutput
	ToV4AddressOutputWithContext(ctx context.Context) V4AddressOutput
}

func (*V4Address) ElementType() reflect.Type {
	return reflect.TypeOf((**V4Address)(nil)).Elem()
}

func (i *V4Address) ToV4AddressOutput() V4AddressOutput {
	return i.ToV4AddressOutputWithContext(context.Background())
}

func (i *V4Address) ToV4AddressOutputWithContext(ctx context.Context) V4AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V4AddressOutput)
}

// V4AddressArrayInput is an input type that accepts V4AddressArray and V4AddressArrayOutput values.
// You can construct a concrete instance of `V4AddressArrayInput` via:
//
//	V4AddressArray{ V4AddressArgs{...} }
type V4AddressArrayInput interface {
	pulumi.Input

	ToV4AddressArrayOutput() V4AddressArrayOutput
	ToV4AddressArrayOutputWithContext(context.Context) V4AddressArrayOutput
}

type V4AddressArray []V4AddressInput

func (V4AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V4Address)(nil)).Elem()
}

func (i V4AddressArray) ToV4AddressArrayOutput() V4AddressArrayOutput {
	return i.ToV4AddressArrayOutputWithContext(context.Background())
}

func (i V4AddressArray) ToV4AddressArrayOutputWithContext(ctx context.Context) V4AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V4AddressArrayOutput)
}

// V4AddressMapInput is an input type that accepts V4AddressMap and V4AddressMapOutput values.
// You can construct a concrete instance of `V4AddressMapInput` via:
//
//	V4AddressMap{ "key": V4AddressArgs{...} }
type V4AddressMapInput interface {
	pulumi.Input

	ToV4AddressMapOutput() V4AddressMapOutput
	ToV4AddressMapOutputWithContext(context.Context) V4AddressMapOutput
}

type V4AddressMap map[string]V4AddressInput

func (V4AddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V4Address)(nil)).Elem()
}

func (i V4AddressMap) ToV4AddressMapOutput() V4AddressMapOutput {
	return i.ToV4AddressMapOutputWithContext(context.Background())
}

func (i V4AddressMap) ToV4AddressMapOutputWithContext(ctx context.Context) V4AddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V4AddressMapOutput)
}

type V4AddressOutput struct{ *pulumi.OutputState }

func (V4AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V4Address)(nil)).Elem()
}

func (o V4AddressOutput) ToV4AddressOutput() V4AddressOutput {
	return o
}

func (o V4AddressOutput) ToV4AddressOutputWithContext(ctx context.Context) V4AddressOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o V4AddressOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *V4Address) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o V4AddressOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V4Address) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Name of the actual interface the logical one is bound to.
func (o V4AddressOutput) ActualInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *V4Address) pulumi.StringOutput { return v.ActualInterface }).(pulumi.StringOutput)
}

// IP address.
func (o V4AddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *V4Address) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

func (o V4AddressOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V4Address) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o V4AddressOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *V4Address) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o V4AddressOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *V4Address) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// Name of the interface.
func (o V4AddressOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *V4Address) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

func (o V4AddressOutput) Invalid() pulumi.BoolOutput {
	return o.ApplyT(func(v *V4Address) pulumi.BoolOutput { return v.Invalid }).(pulumi.BoolOutput)
}

// IP address for the network. For point-to-point links it should be the address of the remote end. Starting from v5RC6 this parameter is configurable only for addresses with /32 netmask (point to point links)
func (o V4AddressOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *V4Address) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

type V4AddressArrayOutput struct{ *pulumi.OutputState }

func (V4AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V4Address)(nil)).Elem()
}

func (o V4AddressArrayOutput) ToV4AddressArrayOutput() V4AddressArrayOutput {
	return o
}

func (o V4AddressArrayOutput) ToV4AddressArrayOutputWithContext(ctx context.Context) V4AddressArrayOutput {
	return o
}

func (o V4AddressArrayOutput) Index(i pulumi.IntInput) V4AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V4Address {
		return vs[0].([]*V4Address)[vs[1].(int)]
	}).(V4AddressOutput)
}

type V4AddressMapOutput struct{ *pulumi.OutputState }

func (V4AddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V4Address)(nil)).Elem()
}

func (o V4AddressMapOutput) ToV4AddressMapOutput() V4AddressMapOutput {
	return o
}

func (o V4AddressMapOutput) ToV4AddressMapOutputWithContext(ctx context.Context) V4AddressMapOutput {
	return o
}

func (o V4AddressMapOutput) MapIndex(k pulumi.StringInput) V4AddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V4Address {
		return vs[0].(map[string]*V4Address)[vs[1].(string)]
	}).(V4AddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V4AddressInput)(nil)).Elem(), &V4Address{})
	pulumi.RegisterInputType(reflect.TypeOf((*V4AddressArrayInput)(nil)).Elem(), V4AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V4AddressMapInput)(nil)).Elem(), V4AddressMap{})
	pulumi.RegisterOutputType(V4AddressOutput{})
	pulumi.RegisterOutputType(V4AddressArrayOutput{})
	pulumi.RegisterOutputType(V4AddressMapOutput{})
}
