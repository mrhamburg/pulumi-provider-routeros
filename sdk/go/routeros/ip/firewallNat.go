// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ip

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Ip.FirewallNat (Resource)
//
// ***
//
// #### This is an alias for backwards compatibility between plugin versions.
// Please see documentation for Ip.IpFirewallNat
type FirewallNat struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Action to take if a packet is matched by the rule
	Action pulumi.StringOutput `pulumi:"action"`
	// Name of the address list to be used. Applicable if action is add-dst-to-address-list or add-src-to-address-list.
	AddressList pulumi.StringPtrOutput `pulumi:"addressList"`
	// Time interval after which the address will be removed from the address list specified by address-list parameter. Used in
	// conjunction with add-dst-to-address-list or add-src-to-address-list actions.
	AddressListTimeout pulumi.StringPtrOutput `pulumi:"addressListTimeout"`
	// The total amount of bytes matched by the rule.
	Bytes pulumi.IntOutput `pulumi:"bytes"`
	// Specifies to which chain rule will be added. If the input does not match the name of an already defined chain, a new
	// chain will be created.
	Chain   pulumi.StringOutput    `pulumi:"chain"`
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Matches packets only if a given amount of bytes has been transfered through the particular connection.
	ConnectionBytes pulumi.StringPtrOutput `pulumi:"connectionBytes"`
	// Matches connections per address or address block after given value is reached. Should be used together with
	// connection-state=new and/or with tcp-flags=syn because matcher is very resource intensive.
	ConnectionLimit pulumi.StringPtrOutput `pulumi:"connectionLimit"`
	// Matches packets marked via mangle facility with particular connection mark. If no-mark is set, rule will match any
	// unmarked connection.
	ConnectionMark pulumi.StringPtrOutput `pulumi:"connectionMark"`
	// Connection Rate is a firewall matcher that allow to capture traffic based on present speed of the connection
	// (0..4294967295).
	ConnectionRate pulumi.StringPtrOutput `pulumi:"connectionRate"`
	// Matches packets from related connections based on information from their connection tracking helpers.
	ConnectionType pulumi.StringPtrOutput `pulumi:"connectionType"`
	// Match packets that contain specified text.
	Content  pulumi.StringPtrOutput `pulumi:"content"`
	Disabled pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Matches DSCP IP header field.
	Dscp pulumi.IntPtrOutput `pulumi:"dscp"`
	// Matches packets which destination is equal to specified IP or falls into specified IP range.
	DstAddress pulumi.StringPtrOutput `pulumi:"dstAddress"`
	// Matches destination address of a packet against user-defined address list.
	DstAddressList pulumi.StringPtrOutput `pulumi:"dstAddressList"`
	// Matches destination address type.
	DstAddressType pulumi.StringPtrOutput `pulumi:"dstAddressType"`
	// Matches packets until a given rate is exceeded.
	DstLimit pulumi.StringPtrOutput `pulumi:"dstLimit"`
	// List of destination port numbers or port number ranges.
	DstPort pulumi.StringPtrOutput `pulumi:"dstPort"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// Matches fragmented packets. First (starting) fragment does not count. If connection tracking is enabled there will be no
	// fragments as system automatically assembles every packet
	Fragment pulumi.BoolPtrOutput `pulumi:"fragment"`
	// Matches packets received from HotSpot clients against various HotSpot matchers.
	Hotspot pulumi.StringPtrOutput `pulumi:"hotspot"`
	// Matches ICMP type: code fields.
	IcmpOptions pulumi.StringPtrOutput `pulumi:"icmpOptions"`
	// Actual interface the packet has entered the router if the incoming interface is a bridge. Works only if use-ip-firewall
	// is enabled in bridge settings.
	InBridgePort pulumi.StringPtrOutput `pulumi:"inBridgePort"`
	// Set of interfaces defined in interface list. Works the same as in-bridge-port.
	InBridgePortList pulumi.StringPtrOutput `pulumi:"inBridgePortList"`
	// Interface the packet has entered the router.
	InInterface pulumi.StringPtrOutput `pulumi:"inInterface"`
	// Set of interfaces defined in interface list. Works the same as in-interface.
	InInterfaceList pulumi.StringPtrOutput `pulumi:"inInterfaceList"`
	// Matches the priority of an ingress packet. Priority may be derived from VLAN, WMM, DSCP, or MPLS EXP bit.
	IngressPriority pulumi.IntPtrOutput `pulumi:"ingressPriority"`
	Invalid         pulumi.BoolOutput   `pulumi:"invalid"`
	// Matches the policy used by IPsec. Value is written in the following format: direction, policy.
	IpsecPolicy pulumi.StringPtrOutput `pulumi:"ipsecPolicy"`
	// Matches IPv4 header options.
	Ipv4Options pulumi.StringPtrOutput `pulumi:"ipv4Options"`
	// Name of the target chain to jump to. Applicable only if action=jump.
	JumpTarget pulumi.StringPtrOutput `pulumi:"jumpTarget"`
	// Layer7 filter name.
	Layer7Protocol pulumi.StringPtrOutput `pulumi:"layer7Protocol"`
	// Matches packets up to a limited rate (packet rate or bit rate). A rule using this matcher will match until this limit is
	// reached. Parameters are written in the following format: rate[/time],burst:mode.
	Limit pulumi.StringPtrOutput `pulumi:"limit"`
	// Add a message to the system log.
	Log pulumi.BoolPtrOutput `pulumi:"log"`
	// Adds specified text at the beginning of every log message. Applicable if action=log or log=yes configured.
	LogPrefix pulumi.StringPtrOutput `pulumi:"logPrefix"`
	// Matches every nth packet: nth=2,1 rule will match every first packet of 2, hence, 50% of all the traffic that is matched
	// by the rule
	Nth pulumi.StringPtrOutput `pulumi:"nth"`
	// Actual interface the packet is leaving the router if the outgoing interface is a bridge. Works only if use-ip-firewall
	// is enabled in bridge settings.
	OutBridgePort pulumi.StringPtrOutput `pulumi:"outBridgePort"`
	// Set of interfaces defined in interface list. Works the same as out-bridge-port.
	OutBridgePortList pulumi.StringPtrOutput `pulumi:"outBridgePortList"`
	// Interface the packet is leaving the router.
	OutInterface pulumi.StringPtrOutput `pulumi:"outInterface"`
	// Set of interfaces defined in interface list. Works the same as out-interface.
	OutInterfaceList pulumi.StringPtrOutput `pulumi:"outInterfaceList"`
	// Matches packets marked via mangle facility with particular packet mark. If no-mark is set, the rule will match any
	// unmarked packet.
	PacketMark pulumi.StringPtrOutput `pulumi:"packetMark"`
	// Matches packets of specified size or size range in bytes.
	PacketSize pulumi.StringPtrOutput `pulumi:"packetSize"`
	// The total amount of packets matched by the rule.
	Packets pulumi.IntOutput `pulumi:"packets"`
	// PCC matcher allows dividing traffic into equal streams with the ability to keep packets with a specific set of options
	// in one particular stream.
	PerConnectionClassifier pulumi.StringPtrOutput `pulumi:"perConnectionClassifier"`
	// Before which position the rule will be inserted. > Please check the effect of this option, as it does not work as you
	// think! > Best way to use in conjunction with a data source. See [example](../data-sources/firewall.md#example-usage).
	PlaceBefore pulumi.StringPtrOutput `pulumi:"placeBefore"`
	// Matches if any (source or destination) port matches the specified list of ports or port ranges. Applicable only if
	// protocol is TCP or UDP
	Port pulumi.StringPtrOutput `pulumi:"port"`
	// Matches the packet's priority after a new priority has been set. Priority may be derived from VLAN, WMM, DSCP, MPLS EXP
	// bit, or from the priority that has been set using the set-priority action.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Matches particular IP protocol specified by protocol name or number.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// Attempts to detect TCP and UDP scans. Parameters are in the following format WeightThreshold, DelayThreshold,
	// LowPortWeight, HighPortWeight.
	Psd pulumi.StringPtrOutput `pulumi:"psd"`
	// Matches packets randomly with a given probability.
	Random pulumi.IntPtrOutput `pulumi:"random"`
	// Matches packets marked by mangle facility with particular routing mark.
	RoutingMark pulumi.StringPtrOutput `pulumi:"routingMark"`
	// Specifies whether to take into account or not destination IP address when selecting a new source IP address. Applicable
	// if action=same
	SameNotByDst pulumi.BoolPtrOutput `pulumi:"sameNotByDst"`
	// Matches packets which source is equal to specified IP or falls into a specified IP range.
	SrcAddress pulumi.StringPtrOutput `pulumi:"srcAddress"`
	// Matches source address of a packet against user-defined address list.
	SrcAddressList pulumi.StringPtrOutput `pulumi:"srcAddressList"`
	// Matches source address type.
	SrcAddressType pulumi.StringPtrOutput `pulumi:"srcAddressType"`
	// Matches source MAC address of the packet.
	SrcMacAddress pulumi.StringPtrOutput `pulumi:"srcMacAddress"`
	// List of source ports and ranges of source ports. Applicable only if a protocol is TCP or UDP.
	SrcPort pulumi.StringPtrOutput `pulumi:"srcPort"`
	// Matches TCP MSS value of an IP packet.
	TcpMss pulumi.StringPtrOutput `pulumi:"tcpMss"`
	// Allows to create a filter based on the packets' arrival time and date or, for locally generated packets, departure time
	// and date.
	Time pulumi.StringPtrOutput `pulumi:"time"`
	// Replace original address with specified one. Applicable if action is dst-nat, netmap, same, src-nat.
	ToAddresses pulumi.StringPtrOutput `pulumi:"toAddresses"`
	// Replace the original port with the specified one. Applicable if action is dst-nat, redirect, masquerade, netmap, same,
	// src-nat.
	ToPorts pulumi.StringPtrOutput `pulumi:"toPorts"`
	// Matches packets TTL value.
	Ttl pulumi.StringPtrOutput `pulumi:"ttl"`
}

// NewFirewallNat registers a new resource with the given unique name, arguments, and options.
func NewFirewallNat(ctx *pulumi.Context,
	name string, args *FirewallNatArgs, opts ...pulumi.ResourceOption) (*FirewallNat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Chain == nil {
		return nil, errors.New("invalid value for required argument 'Chain'")
	}
	var resource FirewallNat
	err := ctx.RegisterResource("routeros:Ip/firewallNat:FirewallNat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallNat gets an existing FirewallNat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallNat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallNatState, opts ...pulumi.ResourceOption) (*FirewallNat, error) {
	var resource FirewallNat
	err := ctx.ReadResource("routeros:Ip/firewallNat:FirewallNat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallNat resources.
type firewallNatState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Action to take if a packet is matched by the rule
	Action *string `pulumi:"action"`
	// Name of the address list to be used. Applicable if action is add-dst-to-address-list or add-src-to-address-list.
	AddressList *string `pulumi:"addressList"`
	// Time interval after which the address will be removed from the address list specified by address-list parameter. Used in
	// conjunction with add-dst-to-address-list or add-src-to-address-list actions.
	AddressListTimeout *string `pulumi:"addressListTimeout"`
	// The total amount of bytes matched by the rule.
	Bytes *int `pulumi:"bytes"`
	// Specifies to which chain rule will be added. If the input does not match the name of an already defined chain, a new
	// chain will be created.
	Chain   *string `pulumi:"chain"`
	Comment *string `pulumi:"comment"`
	// Matches packets only if a given amount of bytes has been transfered through the particular connection.
	ConnectionBytes *string `pulumi:"connectionBytes"`
	// Matches connections per address or address block after given value is reached. Should be used together with
	// connection-state=new and/or with tcp-flags=syn because matcher is very resource intensive.
	ConnectionLimit *string `pulumi:"connectionLimit"`
	// Matches packets marked via mangle facility with particular connection mark. If no-mark is set, rule will match any
	// unmarked connection.
	ConnectionMark *string `pulumi:"connectionMark"`
	// Connection Rate is a firewall matcher that allow to capture traffic based on present speed of the connection
	// (0..4294967295).
	ConnectionRate *string `pulumi:"connectionRate"`
	// Matches packets from related connections based on information from their connection tracking helpers.
	ConnectionType *string `pulumi:"connectionType"`
	// Match packets that contain specified text.
	Content  *string `pulumi:"content"`
	Disabled *bool   `pulumi:"disabled"`
	// Matches DSCP IP header field.
	Dscp *int `pulumi:"dscp"`
	// Matches packets which destination is equal to specified IP or falls into specified IP range.
	DstAddress *string `pulumi:"dstAddress"`
	// Matches destination address of a packet against user-defined address list.
	DstAddressList *string `pulumi:"dstAddressList"`
	// Matches destination address type.
	DstAddressType *string `pulumi:"dstAddressType"`
	// Matches packets until a given rate is exceeded.
	DstLimit *string `pulumi:"dstLimit"`
	// List of destination port numbers or port number ranges.
	DstPort *string `pulumi:"dstPort"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic *bool `pulumi:"dynamic"`
	// Matches fragmented packets. First (starting) fragment does not count. If connection tracking is enabled there will be no
	// fragments as system automatically assembles every packet
	Fragment *bool `pulumi:"fragment"`
	// Matches packets received from HotSpot clients against various HotSpot matchers.
	Hotspot *string `pulumi:"hotspot"`
	// Matches ICMP type: code fields.
	IcmpOptions *string `pulumi:"icmpOptions"`
	// Actual interface the packet has entered the router if the incoming interface is a bridge. Works only if use-ip-firewall
	// is enabled in bridge settings.
	InBridgePort *string `pulumi:"inBridgePort"`
	// Set of interfaces defined in interface list. Works the same as in-bridge-port.
	InBridgePortList *string `pulumi:"inBridgePortList"`
	// Interface the packet has entered the router.
	InInterface *string `pulumi:"inInterface"`
	// Set of interfaces defined in interface list. Works the same as in-interface.
	InInterfaceList *string `pulumi:"inInterfaceList"`
	// Matches the priority of an ingress packet. Priority may be derived from VLAN, WMM, DSCP, or MPLS EXP bit.
	IngressPriority *int  `pulumi:"ingressPriority"`
	Invalid         *bool `pulumi:"invalid"`
	// Matches the policy used by IPsec. Value is written in the following format: direction, policy.
	IpsecPolicy *string `pulumi:"ipsecPolicy"`
	// Matches IPv4 header options.
	Ipv4Options *string `pulumi:"ipv4Options"`
	// Name of the target chain to jump to. Applicable only if action=jump.
	JumpTarget *string `pulumi:"jumpTarget"`
	// Layer7 filter name.
	Layer7Protocol *string `pulumi:"layer7Protocol"`
	// Matches packets up to a limited rate (packet rate or bit rate). A rule using this matcher will match until this limit is
	// reached. Parameters are written in the following format: rate[/time],burst:mode.
	Limit *string `pulumi:"limit"`
	// Add a message to the system log.
	Log *bool `pulumi:"log"`
	// Adds specified text at the beginning of every log message. Applicable if action=log or log=yes configured.
	LogPrefix *string `pulumi:"logPrefix"`
	// Matches every nth packet: nth=2,1 rule will match every first packet of 2, hence, 50% of all the traffic that is matched
	// by the rule
	Nth *string `pulumi:"nth"`
	// Actual interface the packet is leaving the router if the outgoing interface is a bridge. Works only if use-ip-firewall
	// is enabled in bridge settings.
	OutBridgePort *string `pulumi:"outBridgePort"`
	// Set of interfaces defined in interface list. Works the same as out-bridge-port.
	OutBridgePortList *string `pulumi:"outBridgePortList"`
	// Interface the packet is leaving the router.
	OutInterface *string `pulumi:"outInterface"`
	// Set of interfaces defined in interface list. Works the same as out-interface.
	OutInterfaceList *string `pulumi:"outInterfaceList"`
	// Matches packets marked via mangle facility with particular packet mark. If no-mark is set, the rule will match any
	// unmarked packet.
	PacketMark *string `pulumi:"packetMark"`
	// Matches packets of specified size or size range in bytes.
	PacketSize *string `pulumi:"packetSize"`
	// The total amount of packets matched by the rule.
	Packets *int `pulumi:"packets"`
	// PCC matcher allows dividing traffic into equal streams with the ability to keep packets with a specific set of options
	// in one particular stream.
	PerConnectionClassifier *string `pulumi:"perConnectionClassifier"`
	// Before which position the rule will be inserted. > Please check the effect of this option, as it does not work as you
	// think! > Best way to use in conjunction with a data source. See [example](../data-sources/firewall.md#example-usage).
	PlaceBefore *string `pulumi:"placeBefore"`
	// Matches if any (source or destination) port matches the specified list of ports or port ranges. Applicable only if
	// protocol is TCP or UDP
	Port *string `pulumi:"port"`
	// Matches the packet's priority after a new priority has been set. Priority may be derived from VLAN, WMM, DSCP, MPLS EXP
	// bit, or from the priority that has been set using the set-priority action.
	Priority *int `pulumi:"priority"`
	// Matches particular IP protocol specified by protocol name or number.
	Protocol *string `pulumi:"protocol"`
	// Attempts to detect TCP and UDP scans. Parameters are in the following format WeightThreshold, DelayThreshold,
	// LowPortWeight, HighPortWeight.
	Psd *string `pulumi:"psd"`
	// Matches packets randomly with a given probability.
	Random *int `pulumi:"random"`
	// Matches packets marked by mangle facility with particular routing mark.
	RoutingMark *string `pulumi:"routingMark"`
	// Specifies whether to take into account or not destination IP address when selecting a new source IP address. Applicable
	// if action=same
	SameNotByDst *bool `pulumi:"sameNotByDst"`
	// Matches packets which source is equal to specified IP or falls into a specified IP range.
	SrcAddress *string `pulumi:"srcAddress"`
	// Matches source address of a packet against user-defined address list.
	SrcAddressList *string `pulumi:"srcAddressList"`
	// Matches source address type.
	SrcAddressType *string `pulumi:"srcAddressType"`
	// Matches source MAC address of the packet.
	SrcMacAddress *string `pulumi:"srcMacAddress"`
	// List of source ports and ranges of source ports. Applicable only if a protocol is TCP or UDP.
	SrcPort *string `pulumi:"srcPort"`
	// Matches TCP MSS value of an IP packet.
	TcpMss *string `pulumi:"tcpMss"`
	// Allows to create a filter based on the packets' arrival time and date or, for locally generated packets, departure time
	// and date.
	Time *string `pulumi:"time"`
	// Replace original address with specified one. Applicable if action is dst-nat, netmap, same, src-nat.
	ToAddresses *string `pulumi:"toAddresses"`
	// Replace the original port with the specified one. Applicable if action is dst-nat, redirect, masquerade, netmap, same,
	// src-nat.
	ToPorts *string `pulumi:"toPorts"`
	// Matches packets TTL value.
	Ttl *string `pulumi:"ttl"`
}

type FirewallNatState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Action to take if a packet is matched by the rule
	Action pulumi.StringPtrInput
	// Name of the address list to be used. Applicable if action is add-dst-to-address-list or add-src-to-address-list.
	AddressList pulumi.StringPtrInput
	// Time interval after which the address will be removed from the address list specified by address-list parameter. Used in
	// conjunction with add-dst-to-address-list or add-src-to-address-list actions.
	AddressListTimeout pulumi.StringPtrInput
	// The total amount of bytes matched by the rule.
	Bytes pulumi.IntPtrInput
	// Specifies to which chain rule will be added. If the input does not match the name of an already defined chain, a new
	// chain will be created.
	Chain   pulumi.StringPtrInput
	Comment pulumi.StringPtrInput
	// Matches packets only if a given amount of bytes has been transfered through the particular connection.
	ConnectionBytes pulumi.StringPtrInput
	// Matches connections per address or address block after given value is reached. Should be used together with
	// connection-state=new and/or with tcp-flags=syn because matcher is very resource intensive.
	ConnectionLimit pulumi.StringPtrInput
	// Matches packets marked via mangle facility with particular connection mark. If no-mark is set, rule will match any
	// unmarked connection.
	ConnectionMark pulumi.StringPtrInput
	// Connection Rate is a firewall matcher that allow to capture traffic based on present speed of the connection
	// (0..4294967295).
	ConnectionRate pulumi.StringPtrInput
	// Matches packets from related connections based on information from their connection tracking helpers.
	ConnectionType pulumi.StringPtrInput
	// Match packets that contain specified text.
	Content  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Matches DSCP IP header field.
	Dscp pulumi.IntPtrInput
	// Matches packets which destination is equal to specified IP or falls into specified IP range.
	DstAddress pulumi.StringPtrInput
	// Matches destination address of a packet against user-defined address list.
	DstAddressList pulumi.StringPtrInput
	// Matches destination address type.
	DstAddressType pulumi.StringPtrInput
	// Matches packets until a given rate is exceeded.
	DstLimit pulumi.StringPtrInput
	// List of destination port numbers or port number ranges.
	DstPort pulumi.StringPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
	// modified.
	Dynamic pulumi.BoolPtrInput
	// Matches fragmented packets. First (starting) fragment does not count. If connection tracking is enabled there will be no
	// fragments as system automatically assembles every packet
	Fragment pulumi.BoolPtrInput
	// Matches packets received from HotSpot clients against various HotSpot matchers.
	Hotspot pulumi.StringPtrInput
	// Matches ICMP type: code fields.
	IcmpOptions pulumi.StringPtrInput
	// Actual interface the packet has entered the router if the incoming interface is a bridge. Works only if use-ip-firewall
	// is enabled in bridge settings.
	InBridgePort pulumi.StringPtrInput
	// Set of interfaces defined in interface list. Works the same as in-bridge-port.
	InBridgePortList pulumi.StringPtrInput
	// Interface the packet has entered the router.
	InInterface pulumi.StringPtrInput
	// Set of interfaces defined in interface list. Works the same as in-interface.
	InInterfaceList pulumi.StringPtrInput
	// Matches the priority of an ingress packet. Priority may be derived from VLAN, WMM, DSCP, or MPLS EXP bit.
	IngressPriority pulumi.IntPtrInput
	Invalid         pulumi.BoolPtrInput
	// Matches the policy used by IPsec. Value is written in the following format: direction, policy.
	IpsecPolicy pulumi.StringPtrInput
	// Matches IPv4 header options.
	Ipv4Options pulumi.StringPtrInput
	// Name of the target chain to jump to. Applicable only if action=jump.
	JumpTarget pulumi.StringPtrInput
	// Layer7 filter name.
	Layer7Protocol pulumi.StringPtrInput
	// Matches packets up to a limited rate (packet rate or bit rate). A rule using this matcher will match until this limit is
	// reached. Parameters are written in the following format: rate[/time],burst:mode.
	Limit pulumi.StringPtrInput
	// Add a message to the system log.
	Log pulumi.BoolPtrInput
	// Adds specified text at the beginning of every log message. Applicable if action=log or log=yes configured.
	LogPrefix pulumi.StringPtrInput
	// Matches every nth packet: nth=2,1 rule will match every first packet of 2, hence, 50% of all the traffic that is matched
	// by the rule
	Nth pulumi.StringPtrInput
	// Actual interface the packet is leaving the router if the outgoing interface is a bridge. Works only if use-ip-firewall
	// is enabled in bridge settings.
	OutBridgePort pulumi.StringPtrInput
	// Set of interfaces defined in interface list. Works the same as out-bridge-port.
	OutBridgePortList pulumi.StringPtrInput
	// Interface the packet is leaving the router.
	OutInterface pulumi.StringPtrInput
	// Set of interfaces defined in interface list. Works the same as out-interface.
	OutInterfaceList pulumi.StringPtrInput
	// Matches packets marked via mangle facility with particular packet mark. If no-mark is set, the rule will match any
	// unmarked packet.
	PacketMark pulumi.StringPtrInput
	// Matches packets of specified size or size range in bytes.
	PacketSize pulumi.StringPtrInput
	// The total amount of packets matched by the rule.
	Packets pulumi.IntPtrInput
	// PCC matcher allows dividing traffic into equal streams with the ability to keep packets with a specific set of options
	// in one particular stream.
	PerConnectionClassifier pulumi.StringPtrInput
	// Before which position the rule will be inserted. > Please check the effect of this option, as it does not work as you
	// think! > Best way to use in conjunction with a data source. See [example](../data-sources/firewall.md#example-usage).
	PlaceBefore pulumi.StringPtrInput
	// Matches if any (source or destination) port matches the specified list of ports or port ranges. Applicable only if
	// protocol is TCP or UDP
	Port pulumi.StringPtrInput
	// Matches the packet's priority after a new priority has been set. Priority may be derived from VLAN, WMM, DSCP, MPLS EXP
	// bit, or from the priority that has been set using the set-priority action.
	Priority pulumi.IntPtrInput
	// Matches particular IP protocol specified by protocol name or number.
	Protocol pulumi.StringPtrInput
	// Attempts to detect TCP and UDP scans. Parameters are in the following format WeightThreshold, DelayThreshold,
	// LowPortWeight, HighPortWeight.
	Psd pulumi.StringPtrInput
	// Matches packets randomly with a given probability.
	Random pulumi.IntPtrInput
	// Matches packets marked by mangle facility with particular routing mark.
	RoutingMark pulumi.StringPtrInput
	// Specifies whether to take into account or not destination IP address when selecting a new source IP address. Applicable
	// if action=same
	SameNotByDst pulumi.BoolPtrInput
	// Matches packets which source is equal to specified IP or falls into a specified IP range.
	SrcAddress pulumi.StringPtrInput
	// Matches source address of a packet against user-defined address list.
	SrcAddressList pulumi.StringPtrInput
	// Matches source address type.
	SrcAddressType pulumi.StringPtrInput
	// Matches source MAC address of the packet.
	SrcMacAddress pulumi.StringPtrInput
	// List of source ports and ranges of source ports. Applicable only if a protocol is TCP or UDP.
	SrcPort pulumi.StringPtrInput
	// Matches TCP MSS value of an IP packet.
	TcpMss pulumi.StringPtrInput
	// Allows to create a filter based on the packets' arrival time and date or, for locally generated packets, departure time
	// and date.
	Time pulumi.StringPtrInput
	// Replace original address with specified one. Applicable if action is dst-nat, netmap, same, src-nat.
	ToAddresses pulumi.StringPtrInput
	// Replace the original port with the specified one. Applicable if action is dst-nat, redirect, masquerade, netmap, same,
	// src-nat.
	ToPorts pulumi.StringPtrInput
	// Matches packets TTL value.
	Ttl pulumi.StringPtrInput
}

func (FirewallNatState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallNatState)(nil)).Elem()
}

type firewallNatArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Action to take if a packet is matched by the rule
	Action string `pulumi:"action"`
	// Name of the address list to be used. Applicable if action is add-dst-to-address-list or add-src-to-address-list.
	AddressList *string `pulumi:"addressList"`
	// Time interval after which the address will be removed from the address list specified by address-list parameter. Used in
	// conjunction with add-dst-to-address-list or add-src-to-address-list actions.
	AddressListTimeout *string `pulumi:"addressListTimeout"`
	// Specifies to which chain rule will be added. If the input does not match the name of an already defined chain, a new
	// chain will be created.
	Chain   string  `pulumi:"chain"`
	Comment *string `pulumi:"comment"`
	// Matches packets only if a given amount of bytes has been transfered through the particular connection.
	ConnectionBytes *string `pulumi:"connectionBytes"`
	// Matches connections per address or address block after given value is reached. Should be used together with
	// connection-state=new and/or with tcp-flags=syn because matcher is very resource intensive.
	ConnectionLimit *string `pulumi:"connectionLimit"`
	// Matches packets marked via mangle facility with particular connection mark. If no-mark is set, rule will match any
	// unmarked connection.
	ConnectionMark *string `pulumi:"connectionMark"`
	// Connection Rate is a firewall matcher that allow to capture traffic based on present speed of the connection
	// (0..4294967295).
	ConnectionRate *string `pulumi:"connectionRate"`
	// Matches packets from related connections based on information from their connection tracking helpers.
	ConnectionType *string `pulumi:"connectionType"`
	// Match packets that contain specified text.
	Content  *string `pulumi:"content"`
	Disabled *bool   `pulumi:"disabled"`
	// Matches DSCP IP header field.
	Dscp *int `pulumi:"dscp"`
	// Matches packets which destination is equal to specified IP or falls into specified IP range.
	DstAddress *string `pulumi:"dstAddress"`
	// Matches destination address of a packet against user-defined address list.
	DstAddressList *string `pulumi:"dstAddressList"`
	// Matches destination address type.
	DstAddressType *string `pulumi:"dstAddressType"`
	// Matches packets until a given rate is exceeded.
	DstLimit *string `pulumi:"dstLimit"`
	// List of destination port numbers or port number ranges.
	DstPort *string `pulumi:"dstPort"`
	// Matches fragmented packets. First (starting) fragment does not count. If connection tracking is enabled there will be no
	// fragments as system automatically assembles every packet
	Fragment *bool `pulumi:"fragment"`
	// Matches packets received from HotSpot clients against various HotSpot matchers.
	Hotspot *string `pulumi:"hotspot"`
	// Matches ICMP type: code fields.
	IcmpOptions *string `pulumi:"icmpOptions"`
	// Actual interface the packet has entered the router if the incoming interface is a bridge. Works only if use-ip-firewall
	// is enabled in bridge settings.
	InBridgePort *string `pulumi:"inBridgePort"`
	// Set of interfaces defined in interface list. Works the same as in-bridge-port.
	InBridgePortList *string `pulumi:"inBridgePortList"`
	// Interface the packet has entered the router.
	InInterface *string `pulumi:"inInterface"`
	// Set of interfaces defined in interface list. Works the same as in-interface.
	InInterfaceList *string `pulumi:"inInterfaceList"`
	// Matches the priority of an ingress packet. Priority may be derived from VLAN, WMM, DSCP, or MPLS EXP bit.
	IngressPriority *int `pulumi:"ingressPriority"`
	// Matches the policy used by IPsec. Value is written in the following format: direction, policy.
	IpsecPolicy *string `pulumi:"ipsecPolicy"`
	// Matches IPv4 header options.
	Ipv4Options *string `pulumi:"ipv4Options"`
	// Name of the target chain to jump to. Applicable only if action=jump.
	JumpTarget *string `pulumi:"jumpTarget"`
	// Layer7 filter name.
	Layer7Protocol *string `pulumi:"layer7Protocol"`
	// Matches packets up to a limited rate (packet rate or bit rate). A rule using this matcher will match until this limit is
	// reached. Parameters are written in the following format: rate[/time],burst:mode.
	Limit *string `pulumi:"limit"`
	// Add a message to the system log.
	Log *bool `pulumi:"log"`
	// Adds specified text at the beginning of every log message. Applicable if action=log or log=yes configured.
	LogPrefix *string `pulumi:"logPrefix"`
	// Matches every nth packet: nth=2,1 rule will match every first packet of 2, hence, 50% of all the traffic that is matched
	// by the rule
	Nth *string `pulumi:"nth"`
	// Actual interface the packet is leaving the router if the outgoing interface is a bridge. Works only if use-ip-firewall
	// is enabled in bridge settings.
	OutBridgePort *string `pulumi:"outBridgePort"`
	// Set of interfaces defined in interface list. Works the same as out-bridge-port.
	OutBridgePortList *string `pulumi:"outBridgePortList"`
	// Interface the packet is leaving the router.
	OutInterface *string `pulumi:"outInterface"`
	// Set of interfaces defined in interface list. Works the same as out-interface.
	OutInterfaceList *string `pulumi:"outInterfaceList"`
	// Matches packets marked via mangle facility with particular packet mark. If no-mark is set, the rule will match any
	// unmarked packet.
	PacketMark *string `pulumi:"packetMark"`
	// Matches packets of specified size or size range in bytes.
	PacketSize *string `pulumi:"packetSize"`
	// PCC matcher allows dividing traffic into equal streams with the ability to keep packets with a specific set of options
	// in one particular stream.
	PerConnectionClassifier *string `pulumi:"perConnectionClassifier"`
	// Before which position the rule will be inserted. > Please check the effect of this option, as it does not work as you
	// think! > Best way to use in conjunction with a data source. See [example](../data-sources/firewall.md#example-usage).
	PlaceBefore *string `pulumi:"placeBefore"`
	// Matches if any (source or destination) port matches the specified list of ports or port ranges. Applicable only if
	// protocol is TCP or UDP
	Port *string `pulumi:"port"`
	// Matches the packet's priority after a new priority has been set. Priority may be derived from VLAN, WMM, DSCP, MPLS EXP
	// bit, or from the priority that has been set using the set-priority action.
	Priority *int `pulumi:"priority"`
	// Matches particular IP protocol specified by protocol name or number.
	Protocol *string `pulumi:"protocol"`
	// Attempts to detect TCP and UDP scans. Parameters are in the following format WeightThreshold, DelayThreshold,
	// LowPortWeight, HighPortWeight.
	Psd *string `pulumi:"psd"`
	// Matches packets randomly with a given probability.
	Random *int `pulumi:"random"`
	// Matches packets marked by mangle facility with particular routing mark.
	RoutingMark *string `pulumi:"routingMark"`
	// Specifies whether to take into account or not destination IP address when selecting a new source IP address. Applicable
	// if action=same
	SameNotByDst *bool `pulumi:"sameNotByDst"`
	// Matches packets which source is equal to specified IP or falls into a specified IP range.
	SrcAddress *string `pulumi:"srcAddress"`
	// Matches source address of a packet against user-defined address list.
	SrcAddressList *string `pulumi:"srcAddressList"`
	// Matches source address type.
	SrcAddressType *string `pulumi:"srcAddressType"`
	// Matches source MAC address of the packet.
	SrcMacAddress *string `pulumi:"srcMacAddress"`
	// List of source ports and ranges of source ports. Applicable only if a protocol is TCP or UDP.
	SrcPort *string `pulumi:"srcPort"`
	// Matches TCP MSS value of an IP packet.
	TcpMss *string `pulumi:"tcpMss"`
	// Allows to create a filter based on the packets' arrival time and date or, for locally generated packets, departure time
	// and date.
	Time *string `pulumi:"time"`
	// Replace original address with specified one. Applicable if action is dst-nat, netmap, same, src-nat.
	ToAddresses *string `pulumi:"toAddresses"`
	// Replace the original port with the specified one. Applicable if action is dst-nat, redirect, masquerade, netmap, same,
	// src-nat.
	ToPorts *string `pulumi:"toPorts"`
	// Matches packets TTL value.
	Ttl *string `pulumi:"ttl"`
}

// The set of arguments for constructing a FirewallNat resource.
type FirewallNatArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Action to take if a packet is matched by the rule
	Action pulumi.StringInput
	// Name of the address list to be used. Applicable if action is add-dst-to-address-list or add-src-to-address-list.
	AddressList pulumi.StringPtrInput
	// Time interval after which the address will be removed from the address list specified by address-list parameter. Used in
	// conjunction with add-dst-to-address-list or add-src-to-address-list actions.
	AddressListTimeout pulumi.StringPtrInput
	// Specifies to which chain rule will be added. If the input does not match the name of an already defined chain, a new
	// chain will be created.
	Chain   pulumi.StringInput
	Comment pulumi.StringPtrInput
	// Matches packets only if a given amount of bytes has been transfered through the particular connection.
	ConnectionBytes pulumi.StringPtrInput
	// Matches connections per address or address block after given value is reached. Should be used together with
	// connection-state=new and/or with tcp-flags=syn because matcher is very resource intensive.
	ConnectionLimit pulumi.StringPtrInput
	// Matches packets marked via mangle facility with particular connection mark. If no-mark is set, rule will match any
	// unmarked connection.
	ConnectionMark pulumi.StringPtrInput
	// Connection Rate is a firewall matcher that allow to capture traffic based on present speed of the connection
	// (0..4294967295).
	ConnectionRate pulumi.StringPtrInput
	// Matches packets from related connections based on information from their connection tracking helpers.
	ConnectionType pulumi.StringPtrInput
	// Match packets that contain specified text.
	Content  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Matches DSCP IP header field.
	Dscp pulumi.IntPtrInput
	// Matches packets which destination is equal to specified IP or falls into specified IP range.
	DstAddress pulumi.StringPtrInput
	// Matches destination address of a packet against user-defined address list.
	DstAddressList pulumi.StringPtrInput
	// Matches destination address type.
	DstAddressType pulumi.StringPtrInput
	// Matches packets until a given rate is exceeded.
	DstLimit pulumi.StringPtrInput
	// List of destination port numbers or port number ranges.
	DstPort pulumi.StringPtrInput
	// Matches fragmented packets. First (starting) fragment does not count. If connection tracking is enabled there will be no
	// fragments as system automatically assembles every packet
	Fragment pulumi.BoolPtrInput
	// Matches packets received from HotSpot clients against various HotSpot matchers.
	Hotspot pulumi.StringPtrInput
	// Matches ICMP type: code fields.
	IcmpOptions pulumi.StringPtrInput
	// Actual interface the packet has entered the router if the incoming interface is a bridge. Works only if use-ip-firewall
	// is enabled in bridge settings.
	InBridgePort pulumi.StringPtrInput
	// Set of interfaces defined in interface list. Works the same as in-bridge-port.
	InBridgePortList pulumi.StringPtrInput
	// Interface the packet has entered the router.
	InInterface pulumi.StringPtrInput
	// Set of interfaces defined in interface list. Works the same as in-interface.
	InInterfaceList pulumi.StringPtrInput
	// Matches the priority of an ingress packet. Priority may be derived from VLAN, WMM, DSCP, or MPLS EXP bit.
	IngressPriority pulumi.IntPtrInput
	// Matches the policy used by IPsec. Value is written in the following format: direction, policy.
	IpsecPolicy pulumi.StringPtrInput
	// Matches IPv4 header options.
	Ipv4Options pulumi.StringPtrInput
	// Name of the target chain to jump to. Applicable only if action=jump.
	JumpTarget pulumi.StringPtrInput
	// Layer7 filter name.
	Layer7Protocol pulumi.StringPtrInput
	// Matches packets up to a limited rate (packet rate or bit rate). A rule using this matcher will match until this limit is
	// reached. Parameters are written in the following format: rate[/time],burst:mode.
	Limit pulumi.StringPtrInput
	// Add a message to the system log.
	Log pulumi.BoolPtrInput
	// Adds specified text at the beginning of every log message. Applicable if action=log or log=yes configured.
	LogPrefix pulumi.StringPtrInput
	// Matches every nth packet: nth=2,1 rule will match every first packet of 2, hence, 50% of all the traffic that is matched
	// by the rule
	Nth pulumi.StringPtrInput
	// Actual interface the packet is leaving the router if the outgoing interface is a bridge. Works only if use-ip-firewall
	// is enabled in bridge settings.
	OutBridgePort pulumi.StringPtrInput
	// Set of interfaces defined in interface list. Works the same as out-bridge-port.
	OutBridgePortList pulumi.StringPtrInput
	// Interface the packet is leaving the router.
	OutInterface pulumi.StringPtrInput
	// Set of interfaces defined in interface list. Works the same as out-interface.
	OutInterfaceList pulumi.StringPtrInput
	// Matches packets marked via mangle facility with particular packet mark. If no-mark is set, the rule will match any
	// unmarked packet.
	PacketMark pulumi.StringPtrInput
	// Matches packets of specified size or size range in bytes.
	PacketSize pulumi.StringPtrInput
	// PCC matcher allows dividing traffic into equal streams with the ability to keep packets with a specific set of options
	// in one particular stream.
	PerConnectionClassifier pulumi.StringPtrInput
	// Before which position the rule will be inserted. > Please check the effect of this option, as it does not work as you
	// think! > Best way to use in conjunction with a data source. See [example](../data-sources/firewall.md#example-usage).
	PlaceBefore pulumi.StringPtrInput
	// Matches if any (source or destination) port matches the specified list of ports or port ranges. Applicable only if
	// protocol is TCP or UDP
	Port pulumi.StringPtrInput
	// Matches the packet's priority after a new priority has been set. Priority may be derived from VLAN, WMM, DSCP, MPLS EXP
	// bit, or from the priority that has been set using the set-priority action.
	Priority pulumi.IntPtrInput
	// Matches particular IP protocol specified by protocol name or number.
	Protocol pulumi.StringPtrInput
	// Attempts to detect TCP and UDP scans. Parameters are in the following format WeightThreshold, DelayThreshold,
	// LowPortWeight, HighPortWeight.
	Psd pulumi.StringPtrInput
	// Matches packets randomly with a given probability.
	Random pulumi.IntPtrInput
	// Matches packets marked by mangle facility with particular routing mark.
	RoutingMark pulumi.StringPtrInput
	// Specifies whether to take into account or not destination IP address when selecting a new source IP address. Applicable
	// if action=same
	SameNotByDst pulumi.BoolPtrInput
	// Matches packets which source is equal to specified IP or falls into a specified IP range.
	SrcAddress pulumi.StringPtrInput
	// Matches source address of a packet against user-defined address list.
	SrcAddressList pulumi.StringPtrInput
	// Matches source address type.
	SrcAddressType pulumi.StringPtrInput
	// Matches source MAC address of the packet.
	SrcMacAddress pulumi.StringPtrInput
	// List of source ports and ranges of source ports. Applicable only if a protocol is TCP or UDP.
	SrcPort pulumi.StringPtrInput
	// Matches TCP MSS value of an IP packet.
	TcpMss pulumi.StringPtrInput
	// Allows to create a filter based on the packets' arrival time and date or, for locally generated packets, departure time
	// and date.
	Time pulumi.StringPtrInput
	// Replace original address with specified one. Applicable if action is dst-nat, netmap, same, src-nat.
	ToAddresses pulumi.StringPtrInput
	// Replace the original port with the specified one. Applicable if action is dst-nat, redirect, masquerade, netmap, same,
	// src-nat.
	ToPorts pulumi.StringPtrInput
	// Matches packets TTL value.
	Ttl pulumi.StringPtrInput
}

func (FirewallNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallNatArgs)(nil)).Elem()
}

type FirewallNatInput interface {
	pulumi.Input

	ToFirewallNatOutput() FirewallNatOutput
	ToFirewallNatOutputWithContext(ctx context.Context) FirewallNatOutput
}

func (*FirewallNat) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallNat)(nil)).Elem()
}

func (i *FirewallNat) ToFirewallNatOutput() FirewallNatOutput {
	return i.ToFirewallNatOutputWithContext(context.Background())
}

func (i *FirewallNat) ToFirewallNatOutputWithContext(ctx context.Context) FirewallNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallNatOutput)
}

// FirewallNatArrayInput is an input type that accepts FirewallNatArray and FirewallNatArrayOutput values.
// You can construct a concrete instance of `FirewallNatArrayInput` via:
//
//	FirewallNatArray{ FirewallNatArgs{...} }
type FirewallNatArrayInput interface {
	pulumi.Input

	ToFirewallNatArrayOutput() FirewallNatArrayOutput
	ToFirewallNatArrayOutputWithContext(context.Context) FirewallNatArrayOutput
}

type FirewallNatArray []FirewallNatInput

func (FirewallNatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallNat)(nil)).Elem()
}

func (i FirewallNatArray) ToFirewallNatArrayOutput() FirewallNatArrayOutput {
	return i.ToFirewallNatArrayOutputWithContext(context.Background())
}

func (i FirewallNatArray) ToFirewallNatArrayOutputWithContext(ctx context.Context) FirewallNatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallNatArrayOutput)
}

// FirewallNatMapInput is an input type that accepts FirewallNatMap and FirewallNatMapOutput values.
// You can construct a concrete instance of `FirewallNatMapInput` via:
//
//	FirewallNatMap{ "key": FirewallNatArgs{...} }
type FirewallNatMapInput interface {
	pulumi.Input

	ToFirewallNatMapOutput() FirewallNatMapOutput
	ToFirewallNatMapOutputWithContext(context.Context) FirewallNatMapOutput
}

type FirewallNatMap map[string]FirewallNatInput

func (FirewallNatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallNat)(nil)).Elem()
}

func (i FirewallNatMap) ToFirewallNatMapOutput() FirewallNatMapOutput {
	return i.ToFirewallNatMapOutputWithContext(context.Background())
}

func (i FirewallNatMap) ToFirewallNatMapOutputWithContext(ctx context.Context) FirewallNatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallNatMapOutput)
}

type FirewallNatOutput struct{ *pulumi.OutputState }

func (FirewallNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallNat)(nil)).Elem()
}

func (o FirewallNatOutput) ToFirewallNatOutput() FirewallNatOutput {
	return o
}

func (o FirewallNatOutput) ToFirewallNatOutputWithContext(ctx context.Context) FirewallNatOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o FirewallNatOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o FirewallNatOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Action to take if a packet is matched by the rule
func (o FirewallNatOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Name of the address list to be used. Applicable if action is add-dst-to-address-list or add-src-to-address-list.
func (o FirewallNatOutput) AddressList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.AddressList }).(pulumi.StringPtrOutput)
}

// Time interval after which the address will be removed from the address list specified by address-list parameter. Used in
// conjunction with add-dst-to-address-list or add-src-to-address-list actions.
func (o FirewallNatOutput) AddressListTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.AddressListTimeout }).(pulumi.StringPtrOutput)
}

// The total amount of bytes matched by the rule.
func (o FirewallNatOutput) Bytes() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.IntOutput { return v.Bytes }).(pulumi.IntOutput)
}

// Specifies to which chain rule will be added. If the input does not match the name of an already defined chain, a new
// chain will be created.
func (o FirewallNatOutput) Chain() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringOutput { return v.Chain }).(pulumi.StringOutput)
}

func (o FirewallNatOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Matches packets only if a given amount of bytes has been transfered through the particular connection.
func (o FirewallNatOutput) ConnectionBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.ConnectionBytes }).(pulumi.StringPtrOutput)
}

// Matches connections per address or address block after given value is reached. Should be used together with
// connection-state=new and/or with tcp-flags=syn because matcher is very resource intensive.
func (o FirewallNatOutput) ConnectionLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.ConnectionLimit }).(pulumi.StringPtrOutput)
}

// Matches packets marked via mangle facility with particular connection mark. If no-mark is set, rule will match any
// unmarked connection.
func (o FirewallNatOutput) ConnectionMark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.ConnectionMark }).(pulumi.StringPtrOutput)
}

// Connection Rate is a firewall matcher that allow to capture traffic based on present speed of the connection
// (0..4294967295).
func (o FirewallNatOutput) ConnectionRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.ConnectionRate }).(pulumi.StringPtrOutput)
}

// Matches packets from related connections based on information from their connection tracking helpers.
func (o FirewallNatOutput) ConnectionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.ConnectionType }).(pulumi.StringPtrOutput)
}

// Match packets that contain specified text.
func (o FirewallNatOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

func (o FirewallNatOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Matches DSCP IP header field.
func (o FirewallNatOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.IntPtrOutput { return v.Dscp }).(pulumi.IntPtrOutput)
}

// Matches packets which destination is equal to specified IP or falls into specified IP range.
func (o FirewallNatOutput) DstAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.DstAddress }).(pulumi.StringPtrOutput)
}

// Matches destination address of a packet against user-defined address list.
func (o FirewallNatOutput) DstAddressList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.DstAddressList }).(pulumi.StringPtrOutput)
}

// Matches destination address type.
func (o FirewallNatOutput) DstAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.DstAddressType }).(pulumi.StringPtrOutput)
}

// Matches packets until a given rate is exceeded.
func (o FirewallNatOutput) DstLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.DstLimit }).(pulumi.StringPtrOutput)
}

// List of destination port numbers or port number ranges.
func (o FirewallNatOutput) DstPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.DstPort }).(pulumi.StringPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly
// modified.
func (o FirewallNatOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// Matches fragmented packets. First (starting) fragment does not count. If connection tracking is enabled there will be no
// fragments as system automatically assembles every packet
func (o FirewallNatOutput) Fragment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.BoolPtrOutput { return v.Fragment }).(pulumi.BoolPtrOutput)
}

// Matches packets received from HotSpot clients against various HotSpot matchers.
func (o FirewallNatOutput) Hotspot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Hotspot }).(pulumi.StringPtrOutput)
}

// Matches ICMP type: code fields.
func (o FirewallNatOutput) IcmpOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.IcmpOptions }).(pulumi.StringPtrOutput)
}

// Actual interface the packet has entered the router if the incoming interface is a bridge. Works only if use-ip-firewall
// is enabled in bridge settings.
func (o FirewallNatOutput) InBridgePort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.InBridgePort }).(pulumi.StringPtrOutput)
}

// Set of interfaces defined in interface list. Works the same as in-bridge-port.
func (o FirewallNatOutput) InBridgePortList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.InBridgePortList }).(pulumi.StringPtrOutput)
}

// Interface the packet has entered the router.
func (o FirewallNatOutput) InInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.InInterface }).(pulumi.StringPtrOutput)
}

// Set of interfaces defined in interface list. Works the same as in-interface.
func (o FirewallNatOutput) InInterfaceList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.InInterfaceList }).(pulumi.StringPtrOutput)
}

// Matches the priority of an ingress packet. Priority may be derived from VLAN, WMM, DSCP, or MPLS EXP bit.
func (o FirewallNatOutput) IngressPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.IntPtrOutput { return v.IngressPriority }).(pulumi.IntPtrOutput)
}

func (o FirewallNatOutput) Invalid() pulumi.BoolOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.BoolOutput { return v.Invalid }).(pulumi.BoolOutput)
}

// Matches the policy used by IPsec. Value is written in the following format: direction, policy.
func (o FirewallNatOutput) IpsecPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.IpsecPolicy }).(pulumi.StringPtrOutput)
}

// Matches IPv4 header options.
func (o FirewallNatOutput) Ipv4Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Ipv4Options }).(pulumi.StringPtrOutput)
}

// Name of the target chain to jump to. Applicable only if action=jump.
func (o FirewallNatOutput) JumpTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.JumpTarget }).(pulumi.StringPtrOutput)
}

// Layer7 filter name.
func (o FirewallNatOutput) Layer7Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Layer7Protocol }).(pulumi.StringPtrOutput)
}

// Matches packets up to a limited rate (packet rate or bit rate). A rule using this matcher will match until this limit is
// reached. Parameters are written in the following format: rate[/time],burst:mode.
func (o FirewallNatOutput) Limit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Limit }).(pulumi.StringPtrOutput)
}

// Add a message to the system log.
func (o FirewallNatOutput) Log() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.BoolPtrOutput { return v.Log }).(pulumi.BoolPtrOutput)
}

// Adds specified text at the beginning of every log message. Applicable if action=log or log=yes configured.
func (o FirewallNatOutput) LogPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.LogPrefix }).(pulumi.StringPtrOutput)
}

// Matches every nth packet: nth=2,1 rule will match every first packet of 2, hence, 50% of all the traffic that is matched
// by the rule
func (o FirewallNatOutput) Nth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Nth }).(pulumi.StringPtrOutput)
}

// Actual interface the packet is leaving the router if the outgoing interface is a bridge. Works only if use-ip-firewall
// is enabled in bridge settings.
func (o FirewallNatOutput) OutBridgePort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.OutBridgePort }).(pulumi.StringPtrOutput)
}

// Set of interfaces defined in interface list. Works the same as out-bridge-port.
func (o FirewallNatOutput) OutBridgePortList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.OutBridgePortList }).(pulumi.StringPtrOutput)
}

// Interface the packet is leaving the router.
func (o FirewallNatOutput) OutInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.OutInterface }).(pulumi.StringPtrOutput)
}

// Set of interfaces defined in interface list. Works the same as out-interface.
func (o FirewallNatOutput) OutInterfaceList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.OutInterfaceList }).(pulumi.StringPtrOutput)
}

// Matches packets marked via mangle facility with particular packet mark. If no-mark is set, the rule will match any
// unmarked packet.
func (o FirewallNatOutput) PacketMark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.PacketMark }).(pulumi.StringPtrOutput)
}

// Matches packets of specified size or size range in bytes.
func (o FirewallNatOutput) PacketSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.PacketSize }).(pulumi.StringPtrOutput)
}

// The total amount of packets matched by the rule.
func (o FirewallNatOutput) Packets() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.IntOutput { return v.Packets }).(pulumi.IntOutput)
}

// PCC matcher allows dividing traffic into equal streams with the ability to keep packets with a specific set of options
// in one particular stream.
func (o FirewallNatOutput) PerConnectionClassifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.PerConnectionClassifier }).(pulumi.StringPtrOutput)
}

// Before which position the rule will be inserted. > Please check the effect of this option, as it does not work as you
// think! > Best way to use in conjunction with a data source. See [example](../data-sources/firewall.md#example-usage).
func (o FirewallNatOutput) PlaceBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.PlaceBefore }).(pulumi.StringPtrOutput)
}

// Matches if any (source or destination) port matches the specified list of ports or port ranges. Applicable only if
// protocol is TCP or UDP
func (o FirewallNatOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Port }).(pulumi.StringPtrOutput)
}

// Matches the packet's priority after a new priority has been set. Priority may be derived from VLAN, WMM, DSCP, MPLS EXP
// bit, or from the priority that has been set using the set-priority action.
func (o FirewallNatOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

// Matches particular IP protocol specified by protocol name or number.
func (o FirewallNatOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Attempts to detect TCP and UDP scans. Parameters are in the following format WeightThreshold, DelayThreshold,
// LowPortWeight, HighPortWeight.
func (o FirewallNatOutput) Psd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Psd }).(pulumi.StringPtrOutput)
}

// Matches packets randomly with a given probability.
func (o FirewallNatOutput) Random() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.IntPtrOutput { return v.Random }).(pulumi.IntPtrOutput)
}

// Matches packets marked by mangle facility with particular routing mark.
func (o FirewallNatOutput) RoutingMark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.RoutingMark }).(pulumi.StringPtrOutput)
}

// Specifies whether to take into account or not destination IP address when selecting a new source IP address. Applicable
// if action=same
func (o FirewallNatOutput) SameNotByDst() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.BoolPtrOutput { return v.SameNotByDst }).(pulumi.BoolPtrOutput)
}

// Matches packets which source is equal to specified IP or falls into a specified IP range.
func (o FirewallNatOutput) SrcAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.SrcAddress }).(pulumi.StringPtrOutput)
}

// Matches source address of a packet against user-defined address list.
func (o FirewallNatOutput) SrcAddressList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.SrcAddressList }).(pulumi.StringPtrOutput)
}

// Matches source address type.
func (o FirewallNatOutput) SrcAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.SrcAddressType }).(pulumi.StringPtrOutput)
}

// Matches source MAC address of the packet.
func (o FirewallNatOutput) SrcMacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.SrcMacAddress }).(pulumi.StringPtrOutput)
}

// List of source ports and ranges of source ports. Applicable only if a protocol is TCP or UDP.
func (o FirewallNatOutput) SrcPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.SrcPort }).(pulumi.StringPtrOutput)
}

// Matches TCP MSS value of an IP packet.
func (o FirewallNatOutput) TcpMss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.TcpMss }).(pulumi.StringPtrOutput)
}

// Allows to create a filter based on the packets' arrival time and date or, for locally generated packets, departure time
// and date.
func (o FirewallNatOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Time }).(pulumi.StringPtrOutput)
}

// Replace original address with specified one. Applicable if action is dst-nat, netmap, same, src-nat.
func (o FirewallNatOutput) ToAddresses() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.ToAddresses }).(pulumi.StringPtrOutput)
}

// Replace the original port with the specified one. Applicable if action is dst-nat, redirect, masquerade, netmap, same,
// src-nat.
func (o FirewallNatOutput) ToPorts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.ToPorts }).(pulumi.StringPtrOutput)
}

// Matches packets TTL value.
func (o FirewallNatOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallNat) pulumi.StringPtrOutput { return v.Ttl }).(pulumi.StringPtrOutput)
}

type FirewallNatArrayOutput struct{ *pulumi.OutputState }

func (FirewallNatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallNat)(nil)).Elem()
}

func (o FirewallNatArrayOutput) ToFirewallNatArrayOutput() FirewallNatArrayOutput {
	return o
}

func (o FirewallNatArrayOutput) ToFirewallNatArrayOutputWithContext(ctx context.Context) FirewallNatArrayOutput {
	return o
}

func (o FirewallNatArrayOutput) Index(i pulumi.IntInput) FirewallNatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallNat {
		return vs[0].([]*FirewallNat)[vs[1].(int)]
	}).(FirewallNatOutput)
}

type FirewallNatMapOutput struct{ *pulumi.OutputState }

func (FirewallNatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallNat)(nil)).Elem()
}

func (o FirewallNatMapOutput) ToFirewallNatMapOutput() FirewallNatMapOutput {
	return o
}

func (o FirewallNatMapOutput) ToFirewallNatMapOutputWithContext(ctx context.Context) FirewallNatMapOutput {
	return o
}

func (o FirewallNatMapOutput) MapIndex(k pulumi.StringInput) FirewallNatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallNat {
		return vs[0].(map[string]*FirewallNat)[vs[1].(string)]
	}).(FirewallNatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallNatInput)(nil)).Elem(), &FirewallNat{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallNatArrayInput)(nil)).Elem(), FirewallNatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallNatMapInput)(nil)).Elem(), FirewallNatMap{})
	pulumi.RegisterOutputType(FirewallNatOutput{})
	pulumi.RegisterOutputType(FirewallNatArrayOutput{})
	pulumi.RegisterOutputType(FirewallNatMapOutput{})
}
