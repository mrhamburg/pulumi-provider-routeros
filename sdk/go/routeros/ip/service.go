// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ip

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Ip"
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/System"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tlsService := map[string]interface{}{
//				"api-ssl": 8729,
//				"www-ssl": 443,
//			}
//			disableService := map[string]interface{}{
//				"api":    8728,
//				"ftp":    21,
//				"telnet": 23,
//				"www":    80,
//			}
//			enableService := map[string]interface{}{
//				"ssh":    22,
//				"winbox": 8291,
//			}
//			tlsCert, err := System.NewCertificate(ctx, "tlsCert", &System.CertificateArgs{
//				CommonName: pulumi.String("Mikrotik Router"),
//				DaysValid:  pulumi.Int(3650),
//				KeyUsages: pulumi.StringArray{
//					pulumi.String("key-cert-sign"),
//					pulumi.String("crl-sign"),
//					pulumi.String("digital-signature"),
//					pulumi.String("key-agreement"),
//					pulumi.String("tls-server"),
//				},
//				KeySize: pulumi.String("prime256v1"),
//				Signs: system.CertificateSignArray{
//					nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			var tls []*Ip.Service
//			for key0, val0 := range tlsService {
//				__res, err := Ip.NewService(ctx, fmt.Sprintf("tls-%v", key0), &Ip.ServiceArgs{
//					Numbers:     pulumi.String(key0),
//					Port:        pulumi.Float64(val0),
//					Certificate: tlsCert.Name,
//					TlsVersion:  pulumi.String("only-1.2"),
//					Disabled:    pulumi.Bool(false),
//				})
//				if err != nil {
//					return err
//				}
//				tls = append(tls, __res)
//			}
//			var disabled []*Ip.Service
//			for key0, val0 := range disableService {
//				__res, err := Ip.NewService(ctx, fmt.Sprintf("disabled-%v", key0), &Ip.ServiceArgs{
//					Numbers:  pulumi.String(key0),
//					Port:     pulumi.Float64(val0),
//					Disabled: pulumi.Bool(true),
//				})
//				if err != nil {
//					return err
//				}
//				disabled = append(disabled, __res)
//			}
//			var enabled []*Ip.Service
//			for key0, val0 := range enableService {
//				__res, err := Ip.NewService(ctx, fmt.Sprintf("enabled-%v", key0), &Ip.ServiceArgs{
//					Numbers:  pulumi.String(key0),
//					Port:     pulumi.Float64(val0),
//					Disabled: pulumi.Bool(false),
//				})
//				if err != nil {
//					return err
//				}
//				enabled = append(enabled, __res)
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import with the name of the ip service in case of the example use www-ssl
//
// ```sh
//
//	$ pulumi import routeros:Ip/service:Service www_ssl www-ssl
//
// ```
type Service struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// List of IP/IPv6 prefixes from which the service is accessible.
	Address pulumi.StringPtrOutput `pulumi:"address"`
	// The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
	Certificate pulumi.StringPtrOutput `pulumi:"certificate"`
	Disabled    pulumi.BoolPtrOutput   `pulumi:"disabled"`
	Invalid     pulumi.BoolOutput      `pulumi:"invalid"`
	// Service name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
	Numbers pulumi.StringOutput `pulumi:"numbers"`
	// The port particular service listens on.
	Port pulumi.IntOutput `pulumi:"port"`
	// Specifies which TLS versions to allow by a particular service.
	TlsVersion pulumi.StringPtrOutput `pulumi:"tlsVersion"`
	// Specify which VRF instance to use by a particular service.
	Vrf pulumi.StringPtrOutput `pulumi:"vrf"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Numbers == nil {
		return nil, errors.New("invalid value for required argument 'Numbers'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	var resource Service
	err := ctx.RegisterResource("routeros:Ip/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("routeros:Ip/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// List of IP/IPv6 prefixes from which the service is accessible.
	Address *string `pulumi:"address"`
	// The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
	Certificate *string `pulumi:"certificate"`
	Disabled    *bool   `pulumi:"disabled"`
	Invalid     *bool   `pulumi:"invalid"`
	// Service name.
	Name *string `pulumi:"name"`
	// The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
	Numbers *string `pulumi:"numbers"`
	// The port particular service listens on.
	Port *int `pulumi:"port"`
	// Specifies which TLS versions to allow by a particular service.
	TlsVersion *string `pulumi:"tlsVersion"`
	// Specify which VRF instance to use by a particular service.
	Vrf *string `pulumi:"vrf"`
}

type ServiceState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// List of IP/IPv6 prefixes from which the service is accessible.
	Address pulumi.StringPtrInput
	// The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
	Certificate pulumi.StringPtrInput
	Disabled    pulumi.BoolPtrInput
	Invalid     pulumi.BoolPtrInput
	// Service name.
	Name pulumi.StringPtrInput
	// The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
	Numbers pulumi.StringPtrInput
	// The port particular service listens on.
	Port pulumi.IntPtrInput
	// Specifies which TLS versions to allow by a particular service.
	TlsVersion pulumi.StringPtrInput
	// Specify which VRF instance to use by a particular service.
	Vrf pulumi.StringPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// List of IP/IPv6 prefixes from which the service is accessible.
	Address *string `pulumi:"address"`
	// The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
	Certificate *string `pulumi:"certificate"`
	Disabled    *bool   `pulumi:"disabled"`
	// The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
	Numbers string `pulumi:"numbers"`
	// The port particular service listens on.
	Port int `pulumi:"port"`
	// Specifies which TLS versions to allow by a particular service.
	TlsVersion *string `pulumi:"tlsVersion"`
	// Specify which VRF instance to use by a particular service.
	Vrf *string `pulumi:"vrf"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// List of IP/IPv6 prefixes from which the service is accessible.
	Address pulumi.StringPtrInput
	// The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
	Certificate pulumi.StringPtrInput
	Disabled    pulumi.BoolPtrInput
	// The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
	Numbers pulumi.StringInput
	// The port particular service listens on.
	Port pulumi.IntInput
	// Specifies which TLS versions to allow by a particular service.
	TlsVersion pulumi.StringPtrInput
	// Specify which VRF instance to use by a particular service.
	Vrf pulumi.StringPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ServiceOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ServiceOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// List of IP/IPv6 prefixes from which the service is accessible.
func (o ServiceOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Address }).(pulumi.StringPtrOutput)
}

// The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
func (o ServiceOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Certificate }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o ServiceOutput) Invalid() pulumi.BoolOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolOutput { return v.Invalid }).(pulumi.BoolOutput)
}

// Service name.
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
func (o ServiceOutput) Numbers() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Numbers }).(pulumi.StringOutput)
}

// The port particular service listens on.
func (o ServiceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Service) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Specifies which TLS versions to allow by a particular service.
func (o ServiceOutput) TlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.TlsVersion }).(pulumi.StringPtrOutput)
}

// Specify which VRF instance to use by a particular service.
func (o ServiceOutput) Vrf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Vrf }).(pulumi.StringPtrOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
