// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routeros

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := routeros.NewResourceIPv6Route(ctx, "aRoute", &routeros.ResourceIPv6RouteArgs{
//				DstAddress: pulumi.String("::/0"),
//				Gateway:    pulumi.String("2001:DB8:1000::1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ipv6/route get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:index/resourceIPv6Route:ResourceIPv6Route a_route "*0"
//
// ```
type ResourceIPv6Route struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
	Active pulumi.BoolOutput `pulumi:"active"`
	// It's a blackhole route.
	Blackhole pulumi.BoolPtrOutput   `pulumi:"blackhole"`
	Comment   pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled  pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance pulumi.IntPtrOutput `pulumi:"distance"`
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress pulumi.StringOutput `pulumi:"dstAddress"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
	Ecmp pulumi.BoolOutput `pulumi:"ecmp"`
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
	HwOffloaded pulumi.BoolOutput `pulumi:"hwOffloaded"`
	// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
	ImmediateGw pulumi.StringOutput `pulumi:"immediateGw"`
	Inactive    pulumi.BoolOutput   `pulumi:"inactive"`
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc pulumi.StringPtrOutput `pulumi:"prefSrc"`
	// Routing table this route belongs to.
	RoutingTable pulumi.StringPtrOutput `pulumi:"routingTable"`
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope             pulumi.IntPtrOutput `pulumi:"scope"`
	Static            pulumi.BoolOutput   `pulumi:"static"`
	SuppressHwOffload pulumi.BoolOutput   `pulumi:"suppressHwOffload"`
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope pulumi.IntPtrOutput `pulumi:"targetScope"`
	// VRF interface name.
	VrfInterface pulumi.StringOutput `pulumi:"vrfInterface"`
}

// NewResourceIPv6Route registers a new resource with the given unique name, arguments, and options.
func NewResourceIPv6Route(ctx *pulumi.Context,
	name string, args *ResourceIPv6RouteArgs, opts ...pulumi.ResourceOption) (*ResourceIPv6Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DstAddress == nil {
		return nil, errors.New("invalid value for required argument 'DstAddress'")
	}
	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	var resource ResourceIPv6Route
	err := ctx.RegisterResource("routeros:index/resourceIPv6Route:ResourceIPv6Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceIPv6Route gets an existing ResourceIPv6Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceIPv6Route(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceIPv6RouteState, opts ...pulumi.ResourceOption) (*ResourceIPv6Route, error) {
	var resource ResourceIPv6Route
	err := ctx.ReadResource("routeros:index/resourceIPv6Route:ResourceIPv6Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceIPv6Route resources.
type resourceIPv6RouteState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
	Active *bool `pulumi:"active"`
	// It's a blackhole route.
	Blackhole *bool   `pulumi:"blackhole"`
	Comment   *string `pulumi:"comment"`
	Disabled  *bool   `pulumi:"disabled"`
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance *int `pulumi:"distance"`
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress *string `pulumi:"dstAddress"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
	Ecmp *bool `pulumi:"ecmp"`
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway *string `pulumi:"gateway"`
	// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
	HwOffloaded *bool `pulumi:"hwOffloaded"`
	// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
	ImmediateGw *string `pulumi:"immediateGw"`
	Inactive    *bool   `pulumi:"inactive"`
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc *string `pulumi:"prefSrc"`
	// Routing table this route belongs to.
	RoutingTable *string `pulumi:"routingTable"`
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope             *int  `pulumi:"scope"`
	Static            *bool `pulumi:"static"`
	SuppressHwOffload *bool `pulumi:"suppressHwOffload"`
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope *int `pulumi:"targetScope"`
	// VRF interface name.
	VrfInterface *string `pulumi:"vrfInterface"`
}

type ResourceIPv6RouteState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
	Active pulumi.BoolPtrInput
	// It's a blackhole route.
	Blackhole pulumi.BoolPtrInput
	Comment   pulumi.StringPtrInput
	Disabled  pulumi.BoolPtrInput
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance pulumi.IntPtrInput
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress pulumi.StringPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
	Ecmp pulumi.BoolPtrInput
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway pulumi.StringPtrInput
	// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
	HwOffloaded pulumi.BoolPtrInput
	// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
	ImmediateGw pulumi.StringPtrInput
	Inactive    pulumi.BoolPtrInput
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc pulumi.StringPtrInput
	// Routing table this route belongs to.
	RoutingTable pulumi.StringPtrInput
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope             pulumi.IntPtrInput
	Static            pulumi.BoolPtrInput
	SuppressHwOffload pulumi.BoolPtrInput
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope pulumi.IntPtrInput
	// VRF interface name.
	VrfInterface pulumi.StringPtrInput
}

func (ResourceIPv6RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceIPv6RouteState)(nil)).Elem()
}

type resourceIPv6RouteArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// It's a blackhole route.
	Blackhole *bool   `pulumi:"blackhole"`
	Comment   *string `pulumi:"comment"`
	Disabled  *bool   `pulumi:"disabled"`
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance *int `pulumi:"distance"`
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress string `pulumi:"dstAddress"`
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway string `pulumi:"gateway"`
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc *string `pulumi:"prefSrc"`
	// Routing table this route belongs to.
	RoutingTable *string `pulumi:"routingTable"`
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope *int `pulumi:"scope"`
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope *int `pulumi:"targetScope"`
	// VRF interface name.
	VrfInterface *string `pulumi:"vrfInterface"`
}

// The set of arguments for constructing a ResourceIPv6Route resource.
type ResourceIPv6RouteArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// It's a blackhole route.
	Blackhole pulumi.BoolPtrInput
	Comment   pulumi.StringPtrInput
	Disabled  pulumi.BoolPtrInput
	// Value used in route selection. Routes with smaller distance value are given preference.
	Distance pulumi.IntPtrInput
	// IP prefix of route, specifies destination addresses that this route can be used for.
	DstAddress pulumi.StringInput
	// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
	Gateway pulumi.StringInput
	// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
	PrefSrc pulumi.StringPtrInput
	// Routing table this route belongs to.
	RoutingTable pulumi.StringPtrInput
	// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
	Scope pulumi.IntPtrInput
	// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
	TargetScope pulumi.IntPtrInput
	// VRF interface name.
	VrfInterface pulumi.StringPtrInput
}

func (ResourceIPv6RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceIPv6RouteArgs)(nil)).Elem()
}

type ResourceIPv6RouteInput interface {
	pulumi.Input

	ToResourceIPv6RouteOutput() ResourceIPv6RouteOutput
	ToResourceIPv6RouteOutputWithContext(ctx context.Context) ResourceIPv6RouteOutput
}

func (*ResourceIPv6Route) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIPv6Route)(nil)).Elem()
}

func (i *ResourceIPv6Route) ToResourceIPv6RouteOutput() ResourceIPv6RouteOutput {
	return i.ToResourceIPv6RouteOutputWithContext(context.Background())
}

func (i *ResourceIPv6Route) ToResourceIPv6RouteOutputWithContext(ctx context.Context) ResourceIPv6RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIPv6RouteOutput)
}

// ResourceIPv6RouteArrayInput is an input type that accepts ResourceIPv6RouteArray and ResourceIPv6RouteArrayOutput values.
// You can construct a concrete instance of `ResourceIPv6RouteArrayInput` via:
//
//	ResourceIPv6RouteArray{ ResourceIPv6RouteArgs{...} }
type ResourceIPv6RouteArrayInput interface {
	pulumi.Input

	ToResourceIPv6RouteArrayOutput() ResourceIPv6RouteArrayOutput
	ToResourceIPv6RouteArrayOutputWithContext(context.Context) ResourceIPv6RouteArrayOutput
}

type ResourceIPv6RouteArray []ResourceIPv6RouteInput

func (ResourceIPv6RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceIPv6Route)(nil)).Elem()
}

func (i ResourceIPv6RouteArray) ToResourceIPv6RouteArrayOutput() ResourceIPv6RouteArrayOutput {
	return i.ToResourceIPv6RouteArrayOutputWithContext(context.Background())
}

func (i ResourceIPv6RouteArray) ToResourceIPv6RouteArrayOutputWithContext(ctx context.Context) ResourceIPv6RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIPv6RouteArrayOutput)
}

// ResourceIPv6RouteMapInput is an input type that accepts ResourceIPv6RouteMap and ResourceIPv6RouteMapOutput values.
// You can construct a concrete instance of `ResourceIPv6RouteMapInput` via:
//
//	ResourceIPv6RouteMap{ "key": ResourceIPv6RouteArgs{...} }
type ResourceIPv6RouteMapInput interface {
	pulumi.Input

	ToResourceIPv6RouteMapOutput() ResourceIPv6RouteMapOutput
	ToResourceIPv6RouteMapOutputWithContext(context.Context) ResourceIPv6RouteMapOutput
}

type ResourceIPv6RouteMap map[string]ResourceIPv6RouteInput

func (ResourceIPv6RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceIPv6Route)(nil)).Elem()
}

func (i ResourceIPv6RouteMap) ToResourceIPv6RouteMapOutput() ResourceIPv6RouteMapOutput {
	return i.ToResourceIPv6RouteMapOutputWithContext(context.Background())
}

func (i ResourceIPv6RouteMap) ToResourceIPv6RouteMapOutputWithContext(ctx context.Context) ResourceIPv6RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIPv6RouteMapOutput)
}

type ResourceIPv6RouteOutput struct{ *pulumi.OutputState }

func (ResourceIPv6RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIPv6Route)(nil)).Elem()
}

func (o ResourceIPv6RouteOutput) ToResourceIPv6RouteOutput() ResourceIPv6RouteOutput {
	return o
}

func (o ResourceIPv6RouteOutput) ToResourceIPv6RouteOutputWithContext(ctx context.Context) ResourceIPv6RouteOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ResourceIPv6RouteOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ResourceIPv6RouteOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
func (o ResourceIPv6RouteOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// It's a blackhole route.
func (o ResourceIPv6RouteOutput) Blackhole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.BoolPtrOutput { return v.Blackhole }).(pulumi.BoolPtrOutput)
}

func (o ResourceIPv6RouteOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o ResourceIPv6RouteOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Value used in route selection. Routes with smaller distance value are given preference.
func (o ResourceIPv6RouteOutput) Distance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.IntPtrOutput { return v.Distance }).(pulumi.IntPtrOutput)
}

// IP prefix of route, specifies destination addresses that this route can be used for.
func (o ResourceIPv6RouteOutput) DstAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.StringOutput { return v.DstAddress }).(pulumi.StringOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o ResourceIPv6RouteOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
func (o ResourceIPv6RouteOutput) Ecmp() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.BoolOutput { return v.Ecmp }).(pulumi.BoolOutput)
}

// Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
func (o ResourceIPv6RouteOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Indicates whether the route is eligible to be hardware offloaded on supported hardware.
func (o ResourceIPv6RouteOutput) HwOffloaded() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.BoolOutput { return v.HwOffloaded }).(pulumi.BoolOutput)
}

// Shows actual (resolved) gateway and interface that will be used for packet forwarding.
func (o ResourceIPv6RouteOutput) ImmediateGw() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.StringOutput { return v.ImmediateGw }).(pulumi.StringOutput)
}

func (o ResourceIPv6RouteOutput) Inactive() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.BoolOutput { return v.Inactive }).(pulumi.BoolOutput)
}

// Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
func (o ResourceIPv6RouteOutput) PrefSrc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.StringPtrOutput { return v.PrefSrc }).(pulumi.StringPtrOutput)
}

// Routing table this route belongs to.
func (o ResourceIPv6RouteOutput) RoutingTable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.StringPtrOutput { return v.RoutingTable }).(pulumi.StringPtrOutput)
}

// Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
func (o ResourceIPv6RouteOutput) Scope() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.IntPtrOutput { return v.Scope }).(pulumi.IntPtrOutput)
}

func (o ResourceIPv6RouteOutput) Static() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.BoolOutput { return v.Static }).(pulumi.BoolOutput)
}

func (o ResourceIPv6RouteOutput) SuppressHwOffload() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.BoolOutput { return v.SuppressHwOffload }).(pulumi.BoolOutput)
}

// Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
func (o ResourceIPv6RouteOutput) TargetScope() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.IntPtrOutput { return v.TargetScope }).(pulumi.IntPtrOutput)
}

// VRF interface name.
func (o ResourceIPv6RouteOutput) VrfInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceIPv6Route) pulumi.StringOutput { return v.VrfInterface }).(pulumi.StringOutput)
}

type ResourceIPv6RouteArrayOutput struct{ *pulumi.OutputState }

func (ResourceIPv6RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceIPv6Route)(nil)).Elem()
}

func (o ResourceIPv6RouteArrayOutput) ToResourceIPv6RouteArrayOutput() ResourceIPv6RouteArrayOutput {
	return o
}

func (o ResourceIPv6RouteArrayOutput) ToResourceIPv6RouteArrayOutputWithContext(ctx context.Context) ResourceIPv6RouteArrayOutput {
	return o
}

func (o ResourceIPv6RouteArrayOutput) Index(i pulumi.IntInput) ResourceIPv6RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceIPv6Route {
		return vs[0].([]*ResourceIPv6Route)[vs[1].(int)]
	}).(ResourceIPv6RouteOutput)
}

type ResourceIPv6RouteMapOutput struct{ *pulumi.OutputState }

func (ResourceIPv6RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceIPv6Route)(nil)).Elem()
}

func (o ResourceIPv6RouteMapOutput) ToResourceIPv6RouteMapOutput() ResourceIPv6RouteMapOutput {
	return o
}

func (o ResourceIPv6RouteMapOutput) ToResourceIPv6RouteMapOutputWithContext(ctx context.Context) ResourceIPv6RouteMapOutput {
	return o
}

func (o ResourceIPv6RouteMapOutput) MapIndex(k pulumi.StringInput) ResourceIPv6RouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceIPv6Route {
		return vs[0].(map[string]*ResourceIPv6Route)[vs[1].(string)]
	}).(ResourceIPv6RouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceIPv6RouteInput)(nil)).Elem(), &ResourceIPv6Route{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceIPv6RouteArrayInput)(nil)).Elem(), ResourceIPv6RouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceIPv6RouteMapInput)(nil)).Elem(), ResourceIPv6RouteMap{})
	pulumi.RegisterOutputType(ResourceIPv6RouteOutput{})
	pulumi.RegisterOutputType(ResourceIPv6RouteArrayOutput{})
	pulumi.RegisterOutputType(ResourceIPv6RouteMapOutput{})
}
