// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routing

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Routing"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Routing.NewRouting(ctx, "testTable", &Routing.RoutingArgs{
//				Fib: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/routing/table get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:Routing/routing:Routing test_table "*0"
//
// ```
type Routing struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	Comment  pulumi.StringPtrOutput `pulumi:"comment"`
	Disabled pulumi.BoolPtrOutput   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolOutput `pulumi:"dynamic"`
	// fib parameter should be specified if the routing table is intended to push routes to the FIB.
	Fib     pulumi.BoolPtrOutput `pulumi:"fib"`
	Invalid pulumi.BoolOutput    `pulumi:"invalid"`
	// Routing table name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRouting registers a new resource with the given unique name, arguments, and options.
func NewRouting(ctx *pulumi.Context,
	name string, args *RoutingArgs, opts ...pulumi.ResourceOption) (*Routing, error) {
	if args == nil {
		args = &RoutingArgs{}
	}

	var resource Routing
	err := ctx.RegisterResource("routeros:Routing/routing:Routing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouting gets an existing Routing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutingState, opts ...pulumi.ResourceOption) (*Routing, error) {
	var resource Routing
	err := ctx.ReadResource("routeros:Routing/routing:Routing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Routing resources.
type routingState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic *bool `pulumi:"dynamic"`
	// fib parameter should be specified if the routing table is intended to push routes to the FIB.
	Fib     *bool `pulumi:"fib"`
	Invalid *bool `pulumi:"invalid"`
	// Routing table name.
	Name *string `pulumi:"name"`
}

type RoutingState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
	Dynamic pulumi.BoolPtrInput
	// fib parameter should be specified if the routing table is intended to push routes to the FIB.
	Fib     pulumi.BoolPtrInput
	Invalid pulumi.BoolPtrInput
	// Routing table name.
	Name pulumi.StringPtrInput
}

func (RoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*routingState)(nil)).Elem()
}

type routingArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	Comment  *string `pulumi:"comment"`
	Disabled *bool   `pulumi:"disabled"`
	// fib parameter should be specified if the routing table is intended to push routes to the FIB.
	Fib *bool `pulumi:"fib"`
	// Routing table name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Routing resource.
type RoutingArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	Comment  pulumi.StringPtrInput
	Disabled pulumi.BoolPtrInput
	// fib parameter should be specified if the routing table is intended to push routes to the FIB.
	Fib pulumi.BoolPtrInput
	// Routing table name.
	Name pulumi.StringPtrInput
}

func (RoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routingArgs)(nil)).Elem()
}

type RoutingInput interface {
	pulumi.Input

	ToRoutingOutput() RoutingOutput
	ToRoutingOutputWithContext(ctx context.Context) RoutingOutput
}

func (*Routing) ElementType() reflect.Type {
	return reflect.TypeOf((**Routing)(nil)).Elem()
}

func (i *Routing) ToRoutingOutput() RoutingOutput {
	return i.ToRoutingOutputWithContext(context.Background())
}

func (i *Routing) ToRoutingOutputWithContext(ctx context.Context) RoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingOutput)
}

// RoutingArrayInput is an input type that accepts RoutingArray and RoutingArrayOutput values.
// You can construct a concrete instance of `RoutingArrayInput` via:
//
//	RoutingArray{ RoutingArgs{...} }
type RoutingArrayInput interface {
	pulumi.Input

	ToRoutingArrayOutput() RoutingArrayOutput
	ToRoutingArrayOutputWithContext(context.Context) RoutingArrayOutput
}

type RoutingArray []RoutingInput

func (RoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Routing)(nil)).Elem()
}

func (i RoutingArray) ToRoutingArrayOutput() RoutingArrayOutput {
	return i.ToRoutingArrayOutputWithContext(context.Background())
}

func (i RoutingArray) ToRoutingArrayOutputWithContext(ctx context.Context) RoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingArrayOutput)
}

// RoutingMapInput is an input type that accepts RoutingMap and RoutingMapOutput values.
// You can construct a concrete instance of `RoutingMapInput` via:
//
//	RoutingMap{ "key": RoutingArgs{...} }
type RoutingMapInput interface {
	pulumi.Input

	ToRoutingMapOutput() RoutingMapOutput
	ToRoutingMapOutputWithContext(context.Context) RoutingMapOutput
}

type RoutingMap map[string]RoutingInput

func (RoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Routing)(nil)).Elem()
}

func (i RoutingMap) ToRoutingMapOutput() RoutingMapOutput {
	return i.ToRoutingMapOutputWithContext(context.Background())
}

func (i RoutingMap) ToRoutingMapOutputWithContext(ctx context.Context) RoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingMapOutput)
}

type RoutingOutput struct{ *pulumi.OutputState }

func (RoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Routing)(nil)).Elem()
}

func (o RoutingOutput) ToRoutingOutput() RoutingOutput {
	return o
}

func (o RoutingOutput) ToRoutingOutputWithContext(ctx context.Context) RoutingOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o RoutingOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Routing) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o RoutingOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routing) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

func (o RoutingOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Routing) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o RoutingOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Routing) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
func (o RoutingOutput) Dynamic() pulumi.BoolOutput {
	return o.ApplyT(func(v *Routing) pulumi.BoolOutput { return v.Dynamic }).(pulumi.BoolOutput)
}

// fib parameter should be specified if the routing table is intended to push routes to the FIB.
func (o RoutingOutput) Fib() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Routing) pulumi.BoolPtrOutput { return v.Fib }).(pulumi.BoolPtrOutput)
}

func (o RoutingOutput) Invalid() pulumi.BoolOutput {
	return o.ApplyT(func(v *Routing) pulumi.BoolOutput { return v.Invalid }).(pulumi.BoolOutput)
}

// Routing table name.
func (o RoutingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Routing) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RoutingArrayOutput struct{ *pulumi.OutputState }

func (RoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Routing)(nil)).Elem()
}

func (o RoutingArrayOutput) ToRoutingArrayOutput() RoutingArrayOutput {
	return o
}

func (o RoutingArrayOutput) ToRoutingArrayOutputWithContext(ctx context.Context) RoutingArrayOutput {
	return o
}

func (o RoutingArrayOutput) Index(i pulumi.IntInput) RoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Routing {
		return vs[0].([]*Routing)[vs[1].(int)]
	}).(RoutingOutput)
}

type RoutingMapOutput struct{ *pulumi.OutputState }

func (RoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Routing)(nil)).Elem()
}

func (o RoutingMapOutput) ToRoutingMapOutput() RoutingMapOutput {
	return o
}

func (o RoutingMapOutput) ToRoutingMapOutputWithContext(ctx context.Context) RoutingMapOutput {
	return o
}

func (o RoutingMapOutput) MapIndex(k pulumi.StringInput) RoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Routing {
		return vs[0].(map[string]*Routing)[vs[1].(string)]
	}).(RoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingInput)(nil)).Elem(), &Routing{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingArrayInput)(nil)).Elem(), RoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingMapInput)(nil)).Elem(), RoutingMap{})
	pulumi.RegisterOutputType(RoutingOutput{})
	pulumi.RegisterOutputType(RoutingArrayOutput{})
	pulumi.RegisterOutputType(RoutingMapOutput{})
}
