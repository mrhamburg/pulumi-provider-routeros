// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ppp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Ppp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ppp.NewProfile(ctx, "test", &Ppp.ProfileArgs{
//				LocalAddress:  pulumi.String("192.168.77.1"),
//				RemoteAddress: pulumi.String("ovpn-pool"),
//				UseUpnp:       pulumi.String("no"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ppp/profile get [print show-ids]]
//
// ```sh
//
//	$ pulumi import routeros:Ppp/profile:Profile test *6
//
// ```
type Profile struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Address list name to which ppp assigned (on server) or received (on client) address will be added.
	AddressList pulumi.StringPtrOutput `pulumi:"addressList"`
	// Name of the bridge interface to which ppp interface will be added as a slave port. Both  tunnel endpoints (server and client) must be in bridge in order to make  this work, see more details on the BCP bridging manual.
	Bridge pulumi.StringPtrOutput `pulumi:"bridge"`
	// Used  split-horizon value for the dynamically created bridge port. Can be  used to prevent bridging loops and isolate traffic. Set the same value  for a group of ports, to prevent them from sending data to ports with  the same horizon value.
	BridgeHorizon pulumi.IntPtrOutput `pulumi:"bridgeHorizon"`
	// Changes MAC learning behavior on the dynamically created bridge port: yes - enables MAC learning no - disables MAC learning default - derive this value from the interface default profile; same as yes if this is the interface default profile.
	BridgeLearning pulumi.StringPtrOutput `pulumi:"bridgeLearning"`
	// Used  path cost for the dynamically created bridge port, used by STP/RSTP to  determine the best path, used by MSTP to determine the best path between  regions. This property has no effect when a bridge protocol-mode is set to none.
	BridgePathCost pulumi.IntPtrOutput `pulumi:"bridgePathCost"`
	// Used  priority for the dynamically created bridge port, used by STP/RSTP to  determine the root port, used by MSTP to determine root port between  regions. This property has no effect when a bridge protocol-mode is set  to none.
	BridgePortPriority pulumi.IntPtrOutput `pulumi:"bridgePortPriority"`
	// Modifies connection MSS settings (applies only for IPv4): yes - adjust connection MSS value no - do not adjust connection MSS value default - derive this value from the interface default profile; same as no if this is the interface default profile.
	ChangeTcpMss pulumi.StringPtrOutput `pulumi:"changeTcpMss"`
	Comment      pulumi.StringPtrOutput `pulumi:"comment"`
	// Default profile sign.
	Default pulumi.StringOutput `pulumi:"default"`
	// Name of the IPv6 pool which will be used by dynamically created DHCPv6-PD server when client connects. [Read more >>](https://wiki.mikrotik.com/wiki/Manual:IPv6_PD_over_PPP)
	Dhcpv6PdPool pulumi.StringPtrOutput `pulumi:"dhcpv6PdPool"`
	// IP address of the DNS server that is supplied to ppp clients.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// Specifies  the amount of time after which the link will be terminated if there are  no activity present. Timeout is not set by default.
	IdleTimeout pulumi.StringPtrOutput `pulumi:"idleTimeout"`
	// Firewall  chain name for incoming packets. Specified chain gets control for each  packet coming from the client. The ppp chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the examples section.
	IncomingFilter pulumi.StringPtrOutput `pulumi:"incomingFilter"`
	// Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
	InsertQueueBefore pulumi.StringPtrOutput `pulumi:"insertQueueBefore"`
	// Interface list name.
	InterfaceList pulumi.StringPtrOutput `pulumi:"interfaceList"`
	// Tunnel address or name of the pool from which address is assigned to ppp interface locally.
	LocalAddress pulumi.StringPtrOutput `pulumi:"localAddress"`
	// PPP profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Execute script on user logging off. See on-up for more details.
	OnDown pulumi.StringPtrOutput `pulumi:"onDown"`
	// Execute script on user login-event. These are available variables that are accessible for the event script: *user *local-address *remote-address *caller-id *called-id *interface.
	OnUp pulumi.StringPtrOutput `pulumi:"onUp"`
	// Defines whether a user is allowed to have more than one ppp session at a time yes - a user is not allowed to have more than one ppp session at a time no - the user is allowed to have more than one ppp session at a time default - derive this value from the interface default profile; same as no if this is the interface default profile.
	OnlyOne pulumi.StringPtrOutput `pulumi:"onlyOne"`
	// Firewall  chain name for outgoing packets. The specified chain gets control for  each packet going to the client. The PPP chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the Examples section.
	OutgoingFilter pulumi.StringPtrOutput `pulumi:"outgoingFilter"`
	// Name of parent simple queue.
	ParentQueue pulumi.StringPtrOutput `pulumi:"parentQueue"`
	// Queue types.
	QueueType pulumi.StringPtrOutput `pulumi:"queueType"`
	// Rate limitation in form of rx-rate[/tx-rate]  [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold]  [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so 'rx' is client upload, and  'tx' is client download). All rates are measured in bits per second,  unless followed by optional 'k' suffix (kilobits per second) or 'M'  suffix (megabits per second). If tx-rate is not specified, rx-rate  serves as tx-rate too. The same applies for tx-burst-rate,  tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and  tx-burst-threshold are not specified (but burst-rate is specified),  rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time  and tx-burst-time are not specified, 1s is used as default. Priority  takes values 1..8, where 1 implies the highest priority, but 8 - the  lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and  tx-rate values are used. The rx-rate-min and tx-rate-min values can not  exceed rx-rate and tx-rate values.
	RateLimit pulumi.StringPtrOutput `pulumi:"rateLimit"`
	// Tunnel address or name of the pool from which address is assigned to remote ppp interface.
	RemoteAddress pulumi.StringPtrOutput `pulumi:"remoteAddress"`
	// Assign prefix from IPv6 pool to the client and install corresponding IPv6 route.
	RemoteIpv6PrefixPool pulumi.StringPtrOutput `pulumi:"remoteIpv6PrefixPool"`
	// Maximum time the connection can stay up. By default no time limit is set.
	SessionTimeout pulumi.StringPtrOutput `pulumi:"sessionTimeout"`
	// Specifies whether to use data compression or not. yes - enable data compression no - disable data compression default - derive this value from the interface default profile; same as no if this is the interface default profile This setting does not affect OVPN tunnels.
	UseCompression pulumi.StringPtrOutput `pulumi:"useCompression"`
	// Specifies whether to use data encryption or not. yes - enable data encryption no - disable data encryption default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires encryption This setting does not work on OVPN and SSTP tunnels.
	UseEncryption pulumi.StringPtrOutput `pulumi:"useEncryption"`
	// Specifies whether to allow IPv6. By default is enabled if IPv6 package is installed. yes - enable IPv6 support no - disable IPv6 support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires IPv6 support.
	UseIpv6 pulumi.StringPtrOutput `pulumi:"useIpv6"`
	// Specifies whether to allow MPLS over PPP. yes - enable MPLS support no - disable MPLS support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires MPLS support
	UseMpls pulumi.StringPtrOutput `pulumi:"useMpls"`
	// Specifies whether to allow UPnP.
	UseUpnp pulumi.StringPtrOutput `pulumi:"useUpnp"`
	// IP address of the WINS server to supply to Windows clients.
	WinsServers pulumi.StringArrayOutput `pulumi:"winsServers"`
}

// NewProfile registers a new resource with the given unique name, arguments, and options.
func NewProfile(ctx *pulumi.Context,
	name string, args *ProfileArgs, opts ...pulumi.ResourceOption) (*Profile, error) {
	if args == nil {
		args = &ProfileArgs{}
	}

	var resource Profile
	err := ctx.RegisterResource("routeros:Ppp/profile:Profile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfile gets an existing Profile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileState, opts ...pulumi.ResourceOption) (*Profile, error) {
	var resource Profile
	err := ctx.ReadResource("routeros:Ppp/profile:Profile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Profile resources.
type profileState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Address list name to which ppp assigned (on server) or received (on client) address will be added.
	AddressList *string `pulumi:"addressList"`
	// Name of the bridge interface to which ppp interface will be added as a slave port. Both  tunnel endpoints (server and client) must be in bridge in order to make  this work, see more details on the BCP bridging manual.
	Bridge *string `pulumi:"bridge"`
	// Used  split-horizon value for the dynamically created bridge port. Can be  used to prevent bridging loops and isolate traffic. Set the same value  for a group of ports, to prevent them from sending data to ports with  the same horizon value.
	BridgeHorizon *int `pulumi:"bridgeHorizon"`
	// Changes MAC learning behavior on the dynamically created bridge port: yes - enables MAC learning no - disables MAC learning default - derive this value from the interface default profile; same as yes if this is the interface default profile.
	BridgeLearning *string `pulumi:"bridgeLearning"`
	// Used  path cost for the dynamically created bridge port, used by STP/RSTP to  determine the best path, used by MSTP to determine the best path between  regions. This property has no effect when a bridge protocol-mode is set to none.
	BridgePathCost *int `pulumi:"bridgePathCost"`
	// Used  priority for the dynamically created bridge port, used by STP/RSTP to  determine the root port, used by MSTP to determine root port between  regions. This property has no effect when a bridge protocol-mode is set  to none.
	BridgePortPriority *int `pulumi:"bridgePortPriority"`
	// Modifies connection MSS settings (applies only for IPv4): yes - adjust connection MSS value no - do not adjust connection MSS value default - derive this value from the interface default profile; same as no if this is the interface default profile.
	ChangeTcpMss *string `pulumi:"changeTcpMss"`
	Comment      *string `pulumi:"comment"`
	// Default profile sign.
	Default *string `pulumi:"default"`
	// Name of the IPv6 pool which will be used by dynamically created DHCPv6-PD server when client connects. [Read more >>](https://wiki.mikrotik.com/wiki/Manual:IPv6_PD_over_PPP)
	Dhcpv6PdPool *string `pulumi:"dhcpv6PdPool"`
	// IP address of the DNS server that is supplied to ppp clients.
	DnsServers []string `pulumi:"dnsServers"`
	// Specifies  the amount of time after which the link will be terminated if there are  no activity present. Timeout is not set by default.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// Firewall  chain name for incoming packets. Specified chain gets control for each  packet coming from the client. The ppp chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the examples section.
	IncomingFilter *string `pulumi:"incomingFilter"`
	// Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
	InsertQueueBefore *string `pulumi:"insertQueueBefore"`
	// Interface list name.
	InterfaceList *string `pulumi:"interfaceList"`
	// Tunnel address or name of the pool from which address is assigned to ppp interface locally.
	LocalAddress *string `pulumi:"localAddress"`
	// PPP profile name.
	Name *string `pulumi:"name"`
	// Execute script on user logging off. See on-up for more details.
	OnDown *string `pulumi:"onDown"`
	// Execute script on user login-event. These are available variables that are accessible for the event script: *user *local-address *remote-address *caller-id *called-id *interface.
	OnUp *string `pulumi:"onUp"`
	// Defines whether a user is allowed to have more than one ppp session at a time yes - a user is not allowed to have more than one ppp session at a time no - the user is allowed to have more than one ppp session at a time default - derive this value from the interface default profile; same as no if this is the interface default profile.
	OnlyOne *string `pulumi:"onlyOne"`
	// Firewall  chain name for outgoing packets. The specified chain gets control for  each packet going to the client. The PPP chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the Examples section.
	OutgoingFilter *string `pulumi:"outgoingFilter"`
	// Name of parent simple queue.
	ParentQueue *string `pulumi:"parentQueue"`
	// Queue types.
	QueueType *string `pulumi:"queueType"`
	// Rate limitation in form of rx-rate[/tx-rate]  [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold]  [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so 'rx' is client upload, and  'tx' is client download). All rates are measured in bits per second,  unless followed by optional 'k' suffix (kilobits per second) or 'M'  suffix (megabits per second). If tx-rate is not specified, rx-rate  serves as tx-rate too. The same applies for tx-burst-rate,  tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and  tx-burst-threshold are not specified (but burst-rate is specified),  rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time  and tx-burst-time are not specified, 1s is used as default. Priority  takes values 1..8, where 1 implies the highest priority, but 8 - the  lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and  tx-rate values are used. The rx-rate-min and tx-rate-min values can not  exceed rx-rate and tx-rate values.
	RateLimit *string `pulumi:"rateLimit"`
	// Tunnel address or name of the pool from which address is assigned to remote ppp interface.
	RemoteAddress *string `pulumi:"remoteAddress"`
	// Assign prefix from IPv6 pool to the client and install corresponding IPv6 route.
	RemoteIpv6PrefixPool *string `pulumi:"remoteIpv6PrefixPool"`
	// Maximum time the connection can stay up. By default no time limit is set.
	SessionTimeout *string `pulumi:"sessionTimeout"`
	// Specifies whether to use data compression or not. yes - enable data compression no - disable data compression default - derive this value from the interface default profile; same as no if this is the interface default profile This setting does not affect OVPN tunnels.
	UseCompression *string `pulumi:"useCompression"`
	// Specifies whether to use data encryption or not. yes - enable data encryption no - disable data encryption default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires encryption This setting does not work on OVPN and SSTP tunnels.
	UseEncryption *string `pulumi:"useEncryption"`
	// Specifies whether to allow IPv6. By default is enabled if IPv6 package is installed. yes - enable IPv6 support no - disable IPv6 support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires IPv6 support.
	UseIpv6 *string `pulumi:"useIpv6"`
	// Specifies whether to allow MPLS over PPP. yes - enable MPLS support no - disable MPLS support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires MPLS support
	UseMpls *string `pulumi:"useMpls"`
	// Specifies whether to allow UPnP.
	UseUpnp *string `pulumi:"useUpnp"`
	// IP address of the WINS server to supply to Windows clients.
	WinsServers []string `pulumi:"winsServers"`
}

type ProfileState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Address list name to which ppp assigned (on server) or received (on client) address will be added.
	AddressList pulumi.StringPtrInput
	// Name of the bridge interface to which ppp interface will be added as a slave port. Both  tunnel endpoints (server and client) must be in bridge in order to make  this work, see more details on the BCP bridging manual.
	Bridge pulumi.StringPtrInput
	// Used  split-horizon value for the dynamically created bridge port. Can be  used to prevent bridging loops and isolate traffic. Set the same value  for a group of ports, to prevent them from sending data to ports with  the same horizon value.
	BridgeHorizon pulumi.IntPtrInput
	// Changes MAC learning behavior on the dynamically created bridge port: yes - enables MAC learning no - disables MAC learning default - derive this value from the interface default profile; same as yes if this is the interface default profile.
	BridgeLearning pulumi.StringPtrInput
	// Used  path cost for the dynamically created bridge port, used by STP/RSTP to  determine the best path, used by MSTP to determine the best path between  regions. This property has no effect when a bridge protocol-mode is set to none.
	BridgePathCost pulumi.IntPtrInput
	// Used  priority for the dynamically created bridge port, used by STP/RSTP to  determine the root port, used by MSTP to determine root port between  regions. This property has no effect when a bridge protocol-mode is set  to none.
	BridgePortPriority pulumi.IntPtrInput
	// Modifies connection MSS settings (applies only for IPv4): yes - adjust connection MSS value no - do not adjust connection MSS value default - derive this value from the interface default profile; same as no if this is the interface default profile.
	ChangeTcpMss pulumi.StringPtrInput
	Comment      pulumi.StringPtrInput
	// Default profile sign.
	Default pulumi.StringPtrInput
	// Name of the IPv6 pool which will be used by dynamically created DHCPv6-PD server when client connects. [Read more >>](https://wiki.mikrotik.com/wiki/Manual:IPv6_PD_over_PPP)
	Dhcpv6PdPool pulumi.StringPtrInput
	// IP address of the DNS server that is supplied to ppp clients.
	DnsServers pulumi.StringArrayInput
	// Specifies  the amount of time after which the link will be terminated if there are  no activity present. Timeout is not set by default.
	IdleTimeout pulumi.StringPtrInput
	// Firewall  chain name for incoming packets. Specified chain gets control for each  packet coming from the client. The ppp chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the examples section.
	IncomingFilter pulumi.StringPtrInput
	// Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
	InsertQueueBefore pulumi.StringPtrInput
	// Interface list name.
	InterfaceList pulumi.StringPtrInput
	// Tunnel address or name of the pool from which address is assigned to ppp interface locally.
	LocalAddress pulumi.StringPtrInput
	// PPP profile name.
	Name pulumi.StringPtrInput
	// Execute script on user logging off. See on-up for more details.
	OnDown pulumi.StringPtrInput
	// Execute script on user login-event. These are available variables that are accessible for the event script: *user *local-address *remote-address *caller-id *called-id *interface.
	OnUp pulumi.StringPtrInput
	// Defines whether a user is allowed to have more than one ppp session at a time yes - a user is not allowed to have more than one ppp session at a time no - the user is allowed to have more than one ppp session at a time default - derive this value from the interface default profile; same as no if this is the interface default profile.
	OnlyOne pulumi.StringPtrInput
	// Firewall  chain name for outgoing packets. The specified chain gets control for  each packet going to the client. The PPP chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the Examples section.
	OutgoingFilter pulumi.StringPtrInput
	// Name of parent simple queue.
	ParentQueue pulumi.StringPtrInput
	// Queue types.
	QueueType pulumi.StringPtrInput
	// Rate limitation in form of rx-rate[/tx-rate]  [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold]  [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so 'rx' is client upload, and  'tx' is client download). All rates are measured in bits per second,  unless followed by optional 'k' suffix (kilobits per second) or 'M'  suffix (megabits per second). If tx-rate is not specified, rx-rate  serves as tx-rate too. The same applies for tx-burst-rate,  tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and  tx-burst-threshold are not specified (but burst-rate is specified),  rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time  and tx-burst-time are not specified, 1s is used as default. Priority  takes values 1..8, where 1 implies the highest priority, but 8 - the  lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and  tx-rate values are used. The rx-rate-min and tx-rate-min values can not  exceed rx-rate and tx-rate values.
	RateLimit pulumi.StringPtrInput
	// Tunnel address or name of the pool from which address is assigned to remote ppp interface.
	RemoteAddress pulumi.StringPtrInput
	// Assign prefix from IPv6 pool to the client and install corresponding IPv6 route.
	RemoteIpv6PrefixPool pulumi.StringPtrInput
	// Maximum time the connection can stay up. By default no time limit is set.
	SessionTimeout pulumi.StringPtrInput
	// Specifies whether to use data compression or not. yes - enable data compression no - disable data compression default - derive this value from the interface default profile; same as no if this is the interface default profile This setting does not affect OVPN tunnels.
	UseCompression pulumi.StringPtrInput
	// Specifies whether to use data encryption or not. yes - enable data encryption no - disable data encryption default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires encryption This setting does not work on OVPN and SSTP tunnels.
	UseEncryption pulumi.StringPtrInput
	// Specifies whether to allow IPv6. By default is enabled if IPv6 package is installed. yes - enable IPv6 support no - disable IPv6 support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires IPv6 support.
	UseIpv6 pulumi.StringPtrInput
	// Specifies whether to allow MPLS over PPP. yes - enable MPLS support no - disable MPLS support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires MPLS support
	UseMpls pulumi.StringPtrInput
	// Specifies whether to allow UPnP.
	UseUpnp pulumi.StringPtrInput
	// IP address of the WINS server to supply to Windows clients.
	WinsServers pulumi.StringArrayInput
}

func (ProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileState)(nil)).Elem()
}

type profileArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Address list name to which ppp assigned (on server) or received (on client) address will be added.
	AddressList *string `pulumi:"addressList"`
	// Name of the bridge interface to which ppp interface will be added as a slave port. Both  tunnel endpoints (server and client) must be in bridge in order to make  this work, see more details on the BCP bridging manual.
	Bridge *string `pulumi:"bridge"`
	// Used  split-horizon value for the dynamically created bridge port. Can be  used to prevent bridging loops and isolate traffic. Set the same value  for a group of ports, to prevent them from sending data to ports with  the same horizon value.
	BridgeHorizon *int `pulumi:"bridgeHorizon"`
	// Changes MAC learning behavior on the dynamically created bridge port: yes - enables MAC learning no - disables MAC learning default - derive this value from the interface default profile; same as yes if this is the interface default profile.
	BridgeLearning *string `pulumi:"bridgeLearning"`
	// Used  path cost for the dynamically created bridge port, used by STP/RSTP to  determine the best path, used by MSTP to determine the best path between  regions. This property has no effect when a bridge protocol-mode is set to none.
	BridgePathCost *int `pulumi:"bridgePathCost"`
	// Used  priority for the dynamically created bridge port, used by STP/RSTP to  determine the root port, used by MSTP to determine root port between  regions. This property has no effect when a bridge protocol-mode is set  to none.
	BridgePortPriority *int `pulumi:"bridgePortPriority"`
	// Modifies connection MSS settings (applies only for IPv4): yes - adjust connection MSS value no - do not adjust connection MSS value default - derive this value from the interface default profile; same as no if this is the interface default profile.
	ChangeTcpMss *string `pulumi:"changeTcpMss"`
	Comment      *string `pulumi:"comment"`
	// Name of the IPv6 pool which will be used by dynamically created DHCPv6-PD server when client connects. [Read more >>](https://wiki.mikrotik.com/wiki/Manual:IPv6_PD_over_PPP)
	Dhcpv6PdPool *string `pulumi:"dhcpv6PdPool"`
	// IP address of the DNS server that is supplied to ppp clients.
	DnsServers []string `pulumi:"dnsServers"`
	// Specifies  the amount of time after which the link will be terminated if there are  no activity present. Timeout is not set by default.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// Firewall  chain name for incoming packets. Specified chain gets control for each  packet coming from the client. The ppp chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the examples section.
	IncomingFilter *string `pulumi:"incomingFilter"`
	// Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
	InsertQueueBefore *string `pulumi:"insertQueueBefore"`
	// Interface list name.
	InterfaceList *string `pulumi:"interfaceList"`
	// Tunnel address or name of the pool from which address is assigned to ppp interface locally.
	LocalAddress *string `pulumi:"localAddress"`
	// PPP profile name.
	Name *string `pulumi:"name"`
	// Execute script on user logging off. See on-up for more details.
	OnDown *string `pulumi:"onDown"`
	// Execute script on user login-event. These are available variables that are accessible for the event script: *user *local-address *remote-address *caller-id *called-id *interface.
	OnUp *string `pulumi:"onUp"`
	// Defines whether a user is allowed to have more than one ppp session at a time yes - a user is not allowed to have more than one ppp session at a time no - the user is allowed to have more than one ppp session at a time default - derive this value from the interface default profile; same as no if this is the interface default profile.
	OnlyOne *string `pulumi:"onlyOne"`
	// Firewall  chain name for outgoing packets. The specified chain gets control for  each packet going to the client. The PPP chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the Examples section.
	OutgoingFilter *string `pulumi:"outgoingFilter"`
	// Name of parent simple queue.
	ParentQueue *string `pulumi:"parentQueue"`
	// Queue types.
	QueueType *string `pulumi:"queueType"`
	// Rate limitation in form of rx-rate[/tx-rate]  [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold]  [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so 'rx' is client upload, and  'tx' is client download). All rates are measured in bits per second,  unless followed by optional 'k' suffix (kilobits per second) or 'M'  suffix (megabits per second). If tx-rate is not specified, rx-rate  serves as tx-rate too. The same applies for tx-burst-rate,  tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and  tx-burst-threshold are not specified (but burst-rate is specified),  rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time  and tx-burst-time are not specified, 1s is used as default. Priority  takes values 1..8, where 1 implies the highest priority, but 8 - the  lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and  tx-rate values are used. The rx-rate-min and tx-rate-min values can not  exceed rx-rate and tx-rate values.
	RateLimit *string `pulumi:"rateLimit"`
	// Tunnel address or name of the pool from which address is assigned to remote ppp interface.
	RemoteAddress *string `pulumi:"remoteAddress"`
	// Assign prefix from IPv6 pool to the client and install corresponding IPv6 route.
	RemoteIpv6PrefixPool *string `pulumi:"remoteIpv6PrefixPool"`
	// Maximum time the connection can stay up. By default no time limit is set.
	SessionTimeout *string `pulumi:"sessionTimeout"`
	// Specifies whether to use data compression or not. yes - enable data compression no - disable data compression default - derive this value from the interface default profile; same as no if this is the interface default profile This setting does not affect OVPN tunnels.
	UseCompression *string `pulumi:"useCompression"`
	// Specifies whether to use data encryption or not. yes - enable data encryption no - disable data encryption default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires encryption This setting does not work on OVPN and SSTP tunnels.
	UseEncryption *string `pulumi:"useEncryption"`
	// Specifies whether to allow IPv6. By default is enabled if IPv6 package is installed. yes - enable IPv6 support no - disable IPv6 support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires IPv6 support.
	UseIpv6 *string `pulumi:"useIpv6"`
	// Specifies whether to allow MPLS over PPP. yes - enable MPLS support no - disable MPLS support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires MPLS support
	UseMpls *string `pulumi:"useMpls"`
	// Specifies whether to allow UPnP.
	UseUpnp *string `pulumi:"useUpnp"`
	// IP address of the WINS server to supply to Windows clients.
	WinsServers []string `pulumi:"winsServers"`
}

// The set of arguments for constructing a Profile resource.
type ProfileArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Address list name to which ppp assigned (on server) or received (on client) address will be added.
	AddressList pulumi.StringPtrInput
	// Name of the bridge interface to which ppp interface will be added as a slave port. Both  tunnel endpoints (server and client) must be in bridge in order to make  this work, see more details on the BCP bridging manual.
	Bridge pulumi.StringPtrInput
	// Used  split-horizon value for the dynamically created bridge port. Can be  used to prevent bridging loops and isolate traffic. Set the same value  for a group of ports, to prevent them from sending data to ports with  the same horizon value.
	BridgeHorizon pulumi.IntPtrInput
	// Changes MAC learning behavior on the dynamically created bridge port: yes - enables MAC learning no - disables MAC learning default - derive this value from the interface default profile; same as yes if this is the interface default profile.
	BridgeLearning pulumi.StringPtrInput
	// Used  path cost for the dynamically created bridge port, used by STP/RSTP to  determine the best path, used by MSTP to determine the best path between  regions. This property has no effect when a bridge protocol-mode is set to none.
	BridgePathCost pulumi.IntPtrInput
	// Used  priority for the dynamically created bridge port, used by STP/RSTP to  determine the root port, used by MSTP to determine root port between  regions. This property has no effect when a bridge protocol-mode is set  to none.
	BridgePortPriority pulumi.IntPtrInput
	// Modifies connection MSS settings (applies only for IPv4): yes - adjust connection MSS value no - do not adjust connection MSS value default - derive this value from the interface default profile; same as no if this is the interface default profile.
	ChangeTcpMss pulumi.StringPtrInput
	Comment      pulumi.StringPtrInput
	// Name of the IPv6 pool which will be used by dynamically created DHCPv6-PD server when client connects. [Read more >>](https://wiki.mikrotik.com/wiki/Manual:IPv6_PD_over_PPP)
	Dhcpv6PdPool pulumi.StringPtrInput
	// IP address of the DNS server that is supplied to ppp clients.
	DnsServers pulumi.StringArrayInput
	// Specifies  the amount of time after which the link will be terminated if there are  no activity present. Timeout is not set by default.
	IdleTimeout pulumi.StringPtrInput
	// Firewall  chain name for incoming packets. Specified chain gets control for each  packet coming from the client. The ppp chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the examples section.
	IncomingFilter pulumi.StringPtrInput
	// Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
	InsertQueueBefore pulumi.StringPtrInput
	// Interface list name.
	InterfaceList pulumi.StringPtrInput
	// Tunnel address or name of the pool from which address is assigned to ppp interface locally.
	LocalAddress pulumi.StringPtrInput
	// PPP profile name.
	Name pulumi.StringPtrInput
	// Execute script on user logging off. See on-up for more details.
	OnDown pulumi.StringPtrInput
	// Execute script on user login-event. These are available variables that are accessible for the event script: *user *local-address *remote-address *caller-id *called-id *interface.
	OnUp pulumi.StringPtrInput
	// Defines whether a user is allowed to have more than one ppp session at a time yes - a user is not allowed to have more than one ppp session at a time no - the user is allowed to have more than one ppp session at a time default - derive this value from the interface default profile; same as no if this is the interface default profile.
	OnlyOne pulumi.StringPtrInput
	// Firewall  chain name for outgoing packets. The specified chain gets control for  each packet going to the client. The PPP chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the Examples section.
	OutgoingFilter pulumi.StringPtrInput
	// Name of parent simple queue.
	ParentQueue pulumi.StringPtrInput
	// Queue types.
	QueueType pulumi.StringPtrInput
	// Rate limitation in form of rx-rate[/tx-rate]  [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold]  [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so 'rx' is client upload, and  'tx' is client download). All rates are measured in bits per second,  unless followed by optional 'k' suffix (kilobits per second) or 'M'  suffix (megabits per second). If tx-rate is not specified, rx-rate  serves as tx-rate too. The same applies for tx-burst-rate,  tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and  tx-burst-threshold are not specified (but burst-rate is specified),  rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time  and tx-burst-time are not specified, 1s is used as default. Priority  takes values 1..8, where 1 implies the highest priority, but 8 - the  lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and  tx-rate values are used. The rx-rate-min and tx-rate-min values can not  exceed rx-rate and tx-rate values.
	RateLimit pulumi.StringPtrInput
	// Tunnel address or name of the pool from which address is assigned to remote ppp interface.
	RemoteAddress pulumi.StringPtrInput
	// Assign prefix from IPv6 pool to the client and install corresponding IPv6 route.
	RemoteIpv6PrefixPool pulumi.StringPtrInput
	// Maximum time the connection can stay up. By default no time limit is set.
	SessionTimeout pulumi.StringPtrInput
	// Specifies whether to use data compression or not. yes - enable data compression no - disable data compression default - derive this value from the interface default profile; same as no if this is the interface default profile This setting does not affect OVPN tunnels.
	UseCompression pulumi.StringPtrInput
	// Specifies whether to use data encryption or not. yes - enable data encryption no - disable data encryption default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires encryption This setting does not work on OVPN and SSTP tunnels.
	UseEncryption pulumi.StringPtrInput
	// Specifies whether to allow IPv6. By default is enabled if IPv6 package is installed. yes - enable IPv6 support no - disable IPv6 support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires IPv6 support.
	UseIpv6 pulumi.StringPtrInput
	// Specifies whether to allow MPLS over PPP. yes - enable MPLS support no - disable MPLS support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires MPLS support
	UseMpls pulumi.StringPtrInput
	// Specifies whether to allow UPnP.
	UseUpnp pulumi.StringPtrInput
	// IP address of the WINS server to supply to Windows clients.
	WinsServers pulumi.StringArrayInput
}

func (ProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileArgs)(nil)).Elem()
}

type ProfileInput interface {
	pulumi.Input

	ToProfileOutput() ProfileOutput
	ToProfileOutputWithContext(ctx context.Context) ProfileOutput
}

func (*Profile) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (i *Profile) ToProfileOutput() ProfileOutput {
	return i.ToProfileOutputWithContext(context.Background())
}

func (i *Profile) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileOutput)
}

// ProfileArrayInput is an input type that accepts ProfileArray and ProfileArrayOutput values.
// You can construct a concrete instance of `ProfileArrayInput` via:
//
//	ProfileArray{ ProfileArgs{...} }
type ProfileArrayInput interface {
	pulumi.Input

	ToProfileArrayOutput() ProfileArrayOutput
	ToProfileArrayOutputWithContext(context.Context) ProfileArrayOutput
}

type ProfileArray []ProfileInput

func (ProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (i ProfileArray) ToProfileArrayOutput() ProfileArrayOutput {
	return i.ToProfileArrayOutputWithContext(context.Background())
}

func (i ProfileArray) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileArrayOutput)
}

// ProfileMapInput is an input type that accepts ProfileMap and ProfileMapOutput values.
// You can construct a concrete instance of `ProfileMapInput` via:
//
//	ProfileMap{ "key": ProfileArgs{...} }
type ProfileMapInput interface {
	pulumi.Input

	ToProfileMapOutput() ProfileMapOutput
	ToProfileMapOutputWithContext(context.Context) ProfileMapOutput
}

type ProfileMap map[string]ProfileInput

func (ProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (i ProfileMap) ToProfileMapOutput() ProfileMapOutput {
	return i.ToProfileMapOutputWithContext(context.Background())
}

func (i ProfileMap) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileMapOutput)
}

type ProfileOutput struct{ *pulumi.OutputState }

func (ProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Profile)(nil)).Elem()
}

func (o ProfileOutput) ToProfileOutput() ProfileOutput {
	return o
}

func (o ProfileOutput) ToProfileOutputWithContext(ctx context.Context) ProfileOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ProfileOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ProfileOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Address list name to which ppp assigned (on server) or received (on client) address will be added.
func (o ProfileOutput) AddressList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.AddressList }).(pulumi.StringPtrOutput)
}

// Name of the bridge interface to which ppp interface will be added as a slave port. Both  tunnel endpoints (server and client) must be in bridge in order to make  this work, see more details on the BCP bridging manual.
func (o ProfileOutput) Bridge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Bridge }).(pulumi.StringPtrOutput)
}

// Used  split-horizon value for the dynamically created bridge port. Can be  used to prevent bridging loops and isolate traffic. Set the same value  for a group of ports, to prevent them from sending data to ports with  the same horizon value.
func (o ProfileOutput) BridgeHorizon() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.BridgeHorizon }).(pulumi.IntPtrOutput)
}

// Changes MAC learning behavior on the dynamically created bridge port: yes - enables MAC learning no - disables MAC learning default - derive this value from the interface default profile; same as yes if this is the interface default profile.
func (o ProfileOutput) BridgeLearning() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.BridgeLearning }).(pulumi.StringPtrOutput)
}

// Used  path cost for the dynamically created bridge port, used by STP/RSTP to  determine the best path, used by MSTP to determine the best path between  regions. This property has no effect when a bridge protocol-mode is set to none.
func (o ProfileOutput) BridgePathCost() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.BridgePathCost }).(pulumi.IntPtrOutput)
}

// Used  priority for the dynamically created bridge port, used by STP/RSTP to  determine the root port, used by MSTP to determine root port between  regions. This property has no effect when a bridge protocol-mode is set  to none.
func (o ProfileOutput) BridgePortPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.IntPtrOutput { return v.BridgePortPriority }).(pulumi.IntPtrOutput)
}

// Modifies connection MSS settings (applies only for IPv4): yes - adjust connection MSS value no - do not adjust connection MSS value default - derive this value from the interface default profile; same as no if this is the interface default profile.
func (o ProfileOutput) ChangeTcpMss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.ChangeTcpMss }).(pulumi.StringPtrOutput)
}

func (o ProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Default profile sign.
func (o ProfileOutput) Default() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Default }).(pulumi.StringOutput)
}

// Name of the IPv6 pool which will be used by dynamically created DHCPv6-PD server when client connects. [Read more >>](https://wiki.mikrotik.com/wiki/Manual:IPv6_PD_over_PPP)
func (o ProfileOutput) Dhcpv6PdPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.Dhcpv6PdPool }).(pulumi.StringPtrOutput)
}

// IP address of the DNS server that is supplied to ppp clients.
func (o ProfileOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// Specifies  the amount of time after which the link will be terminated if there are  no activity present. Timeout is not set by default.
func (o ProfileOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// Firewall  chain name for incoming packets. Specified chain gets control for each  packet coming from the client. The ppp chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the examples section.
func (o ProfileOutput) IncomingFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.IncomingFilter }).(pulumi.StringPtrOutput)
}

// Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
func (o ProfileOutput) InsertQueueBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.InsertQueueBefore }).(pulumi.StringPtrOutput)
}

// Interface list name.
func (o ProfileOutput) InterfaceList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.InterfaceList }).(pulumi.StringPtrOutput)
}

// Tunnel address or name of the pool from which address is assigned to ppp interface locally.
func (o ProfileOutput) LocalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.LocalAddress }).(pulumi.StringPtrOutput)
}

// PPP profile name.
func (o ProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Execute script on user logging off. See on-up for more details.
func (o ProfileOutput) OnDown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.OnDown }).(pulumi.StringPtrOutput)
}

// Execute script on user login-event. These are available variables that are accessible for the event script: *user *local-address *remote-address *caller-id *called-id *interface.
func (o ProfileOutput) OnUp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.OnUp }).(pulumi.StringPtrOutput)
}

// Defines whether a user is allowed to have more than one ppp session at a time yes - a user is not allowed to have more than one ppp session at a time no - the user is allowed to have more than one ppp session at a time default - derive this value from the interface default profile; same as no if this is the interface default profile.
func (o ProfileOutput) OnlyOne() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.OnlyOne }).(pulumi.StringPtrOutput)
}

// Firewall  chain name for outgoing packets. The specified chain gets control for  each packet going to the client. The PPP chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the Examples section.
func (o ProfileOutput) OutgoingFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.OutgoingFilter }).(pulumi.StringPtrOutput)
}

// Name of parent simple queue.
func (o ProfileOutput) ParentQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.ParentQueue }).(pulumi.StringPtrOutput)
}

// Queue types.
func (o ProfileOutput) QueueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.QueueType }).(pulumi.StringPtrOutput)
}

// Rate limitation in form of rx-rate[/tx-rate]  [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold]  [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so 'rx' is client upload, and  'tx' is client download). All rates are measured in bits per second,  unless followed by optional 'k' suffix (kilobits per second) or 'M'  suffix (megabits per second). If tx-rate is not specified, rx-rate  serves as tx-rate too. The same applies for tx-burst-rate,  tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and  tx-burst-threshold are not specified (but burst-rate is specified),  rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time  and tx-burst-time are not specified, 1s is used as default. Priority  takes values 1..8, where 1 implies the highest priority, but 8 - the  lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and  tx-rate values are used. The rx-rate-min and tx-rate-min values can not  exceed rx-rate and tx-rate values.
func (o ProfileOutput) RateLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.RateLimit }).(pulumi.StringPtrOutput)
}

// Tunnel address or name of the pool from which address is assigned to remote ppp interface.
func (o ProfileOutput) RemoteAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.RemoteAddress }).(pulumi.StringPtrOutput)
}

// Assign prefix from IPv6 pool to the client and install corresponding IPv6 route.
func (o ProfileOutput) RemoteIpv6PrefixPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.RemoteIpv6PrefixPool }).(pulumi.StringPtrOutput)
}

// Maximum time the connection can stay up. By default no time limit is set.
func (o ProfileOutput) SessionTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.SessionTimeout }).(pulumi.StringPtrOutput)
}

// Specifies whether to use data compression or not. yes - enable data compression no - disable data compression default - derive this value from the interface default profile; same as no if this is the interface default profile This setting does not affect OVPN tunnels.
func (o ProfileOutput) UseCompression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.UseCompression }).(pulumi.StringPtrOutput)
}

// Specifies whether to use data encryption or not. yes - enable data encryption no - disable data encryption default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires encryption This setting does not work on OVPN and SSTP tunnels.
func (o ProfileOutput) UseEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.UseEncryption }).(pulumi.StringPtrOutput)
}

// Specifies whether to allow IPv6. By default is enabled if IPv6 package is installed. yes - enable IPv6 support no - disable IPv6 support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires IPv6 support.
func (o ProfileOutput) UseIpv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.UseIpv6 }).(pulumi.StringPtrOutput)
}

// Specifies whether to allow MPLS over PPP. yes - enable MPLS support no - disable MPLS support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires MPLS support
func (o ProfileOutput) UseMpls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.UseMpls }).(pulumi.StringPtrOutput)
}

// Specifies whether to allow UPnP.
func (o ProfileOutput) UseUpnp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringPtrOutput { return v.UseUpnp }).(pulumi.StringPtrOutput)
}

// IP address of the WINS server to supply to Windows clients.
func (o ProfileOutput) WinsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Profile) pulumi.StringArrayOutput { return v.WinsServers }).(pulumi.StringArrayOutput)
}

type ProfileArrayOutput struct{ *pulumi.OutputState }

func (ProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Profile)(nil)).Elem()
}

func (o ProfileArrayOutput) ToProfileArrayOutput() ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) ToProfileArrayOutputWithContext(ctx context.Context) ProfileArrayOutput {
	return o
}

func (o ProfileArrayOutput) Index(i pulumi.IntInput) ProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].([]*Profile)[vs[1].(int)]
	}).(ProfileOutput)
}

type ProfileMapOutput struct{ *pulumi.OutputState }

func (ProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Profile)(nil)).Elem()
}

func (o ProfileMapOutput) ToProfileMapOutput() ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) ToProfileMapOutputWithContext(ctx context.Context) ProfileMapOutput {
	return o
}

func (o ProfileMapOutput) MapIndex(k pulumi.StringInput) ProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Profile {
		return vs[0].(map[string]*Profile)[vs[1].(string)]
	}).(ProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileInput)(nil)).Elem(), &Profile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileArrayInput)(nil)).Elem(), ProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileMapInput)(nil)).Elem(), ProfileMap{})
	pulumi.RegisterOutputType(ProfileOutput{})
	pulumi.RegisterOutputType(ProfileArrayOutput{})
	pulumi.RegisterOutputType(ProfileMapOutput{})
}
