// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openvpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # OpenVpn.Server (Resource)
//
// ##### *<span style="color:red">This resource requires a minimum version of RouterOS 7.8!</span>*
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Iface"
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Ip"
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/OpenVpn"
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/Ppp"
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros/System"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ip.NewPool(ctx, "ovpn-pool", &Ip.PoolArgs{
//				Ranges: pulumi.StringArray{
//					pulumi.String("192.168.77.2-192.168.77.254"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ovpnCa, err := System.NewCertificate(ctx, "ovpnCa", &System.CertificateArgs{
//				CommonName: pulumi.String("OpenVPN Root CA"),
//				KeySize:    pulumi.String("prime256v1"),
//				KeyUsages: pulumi.StringArray{
//					pulumi.String("key-cert-sign"),
//					pulumi.String("crl-sign"),
//				},
//				Trusted: pulumi.Bool(true),
//				Signs: system.CertificateSignArray{
//					nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ovpnServerCrt, err := System.NewCertificate(ctx, "ovpnServerCrt", &System.CertificateArgs{
//				CommonName: pulumi.String("Mikrotik OpenVPN"),
//				KeySize:    pulumi.String("prime256v1"),
//				KeyUsages: pulumi.StringArray{
//					pulumi.String("digital-signature"),
//					pulumi.String("key-encipherment"),
//					pulumi.String("tls-server"),
//				},
//				Signs: system.CertificateSignArray{
//					&system.CertificateSignArgs{
//						Ca: ovpnCa.Name,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			testProfile, err := Ppp.NewProfile(ctx, "testProfile", &Ppp.ProfileArgs{
//				LocalAddress:  pulumi.String("192.168.77.1"),
//				RemoteAddress: pulumi.String("ovpn-pool"),
//				UseUpnp:       pulumi.String("no"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Ppp.NewSecret(ctx, "testSecret", &Ppp.SecretArgs{
//				Password: pulumi.String("123"),
//				Profile:  testProfile.Name,
//			})
//			if err != nil {
//				return err
//			}
//			server, err := OpenVpn.NewServer(ctx, "server", &OpenVpn.ServerArgs{
//				Enabled:        pulumi.Bool(true),
//				Certificate:    ovpnServerCrt.Name,
//				Auth:           pulumi.String("sha256,sha512"),
//				TlsVersion:     pulumi.String("only-1.2"),
//				DefaultProfile: testProfile.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Iface.NewOpenVpnServer(ctx, "user1", &Iface.OpenVpnServerArgs{
//				User: pulumi.String("user1"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				server,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import routeros:OpenVpn/server:Server server .
//
// ```
type Server struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Authentication methods that the server will accept.
	Auth pulumi.StringPtrOutput `pulumi:"auth"`
	// Name of the certificate that the OVPN server will use.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Allowed ciphers.
	Cipher pulumi.StringPtrOutput `pulumi:"cipher"`
	// Default profile to use.
	DefaultProfile pulumi.StringPtrOutput `pulumi:"defaultProfile"`
	// Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
	EnableTunIpv6 pulumi.BoolPtrOutput `pulumi:"enableTunIpv6"`
	// Defines whether the OVPN server is enabled or not.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
	Ipv6PrefixLen pulumi.IntPtrOutput `pulumi:"ipv6PrefixLen"`
	// Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
	KeepaliveTimeout pulumi.StringPtrOutput `pulumi:"keepaliveTimeout"`
	// Automatically generated MAC address of the server.
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
	MaxMtu pulumi.IntPtrOutput `pulumi:"maxMtu"`
	// Layer3 or layer2 tunnel mode (alternatively tun, tap)
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// Subnet mask to be applied to the client.
	Netmask pulumi.IntPtrOutput `pulumi:"netmask"`
	// Port to run the server on.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// indicates the protocol to use when connecting with the remote endpoint.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// Specifies what kind of routes the OVPN client must add to the routing table. def1 – Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
	RedirectGateway pulumi.StringPtrOutput `pulumi:"redirectGateway"`
	// Renegotiate data channel key after n seconds (default=3600).
	RenegSec pulumi.IntPtrOutput `pulumi:"renegSec"`
	// If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
	RequireClientCertificate pulumi.BoolPtrOutput `pulumi:"requireClientCertificate"`
	// Specifies which TLS versions to allow.
	TlsVersion pulumi.StringPtrOutput `pulumi:"tlsVersion"`
	// IPv6 prefix address which will be used when generating the OVPN interface on the server side.
	TunServerIpv6 pulumi.StringPtrOutput `pulumi:"tunServerIpv6"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	var resource Server
	err := ctx.RegisterResource("routeros:OpenVpn/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("routeros:OpenVpn/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Authentication methods that the server will accept.
	Auth *string `pulumi:"auth"`
	// Name of the certificate that the OVPN server will use.
	Certificate *string `pulumi:"certificate"`
	// Allowed ciphers.
	Cipher *string `pulumi:"cipher"`
	// Default profile to use.
	DefaultProfile *string `pulumi:"defaultProfile"`
	// Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
	EnableTunIpv6 *bool `pulumi:"enableTunIpv6"`
	// Defines whether the OVPN server is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
	Ipv6PrefixLen *int `pulumi:"ipv6PrefixLen"`
	// Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
	KeepaliveTimeout *string `pulumi:"keepaliveTimeout"`
	// Automatically generated MAC address of the server.
	MacAddress *string `pulumi:"macAddress"`
	// Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
	MaxMtu *int `pulumi:"maxMtu"`
	// Layer3 or layer2 tunnel mode (alternatively tun, tap)
	Mode *string `pulumi:"mode"`
	// Subnet mask to be applied to the client.
	Netmask *int `pulumi:"netmask"`
	// Port to run the server on.
	Port *int `pulumi:"port"`
	// indicates the protocol to use when connecting with the remote endpoint.
	Protocol *string `pulumi:"protocol"`
	// Specifies what kind of routes the OVPN client must add to the routing table. def1 – Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
	RedirectGateway *string `pulumi:"redirectGateway"`
	// Renegotiate data channel key after n seconds (default=3600).
	RenegSec *int `pulumi:"renegSec"`
	// If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
	RequireClientCertificate *bool `pulumi:"requireClientCertificate"`
	// Specifies which TLS versions to allow.
	TlsVersion *string `pulumi:"tlsVersion"`
	// IPv6 prefix address which will be used when generating the OVPN interface on the server side.
	TunServerIpv6 *string `pulumi:"tunServerIpv6"`
}

type ServerState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Authentication methods that the server will accept.
	Auth pulumi.StringPtrInput
	// Name of the certificate that the OVPN server will use.
	Certificate pulumi.StringPtrInput
	// Allowed ciphers.
	Cipher pulumi.StringPtrInput
	// Default profile to use.
	DefaultProfile pulumi.StringPtrInput
	// Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
	EnableTunIpv6 pulumi.BoolPtrInput
	// Defines whether the OVPN server is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
	Ipv6PrefixLen pulumi.IntPtrInput
	// Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
	KeepaliveTimeout pulumi.StringPtrInput
	// Automatically generated MAC address of the server.
	MacAddress pulumi.StringPtrInput
	// Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
	MaxMtu pulumi.IntPtrInput
	// Layer3 or layer2 tunnel mode (alternatively tun, tap)
	Mode pulumi.StringPtrInput
	// Subnet mask to be applied to the client.
	Netmask pulumi.IntPtrInput
	// Port to run the server on.
	Port pulumi.IntPtrInput
	// indicates the protocol to use when connecting with the remote endpoint.
	Protocol pulumi.StringPtrInput
	// Specifies what kind of routes the OVPN client must add to the routing table. def1 – Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
	RedirectGateway pulumi.StringPtrInput
	// Renegotiate data channel key after n seconds (default=3600).
	RenegSec pulumi.IntPtrInput
	// If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
	RequireClientCertificate pulumi.BoolPtrInput
	// Specifies which TLS versions to allow.
	TlsVersion pulumi.StringPtrInput
	// IPv6 prefix address which will be used when generating the OVPN interface on the server side.
	TunServerIpv6 pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Authentication methods that the server will accept.
	Auth *string `pulumi:"auth"`
	// Name of the certificate that the OVPN server will use.
	Certificate string `pulumi:"certificate"`
	// Allowed ciphers.
	Cipher *string `pulumi:"cipher"`
	// Default profile to use.
	DefaultProfile *string `pulumi:"defaultProfile"`
	// Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
	EnableTunIpv6 *bool `pulumi:"enableTunIpv6"`
	// Defines whether the OVPN server is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
	Ipv6PrefixLen *int `pulumi:"ipv6PrefixLen"`
	// Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
	KeepaliveTimeout *string `pulumi:"keepaliveTimeout"`
	// Automatically generated MAC address of the server.
	MacAddress *string `pulumi:"macAddress"`
	// Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
	MaxMtu *int `pulumi:"maxMtu"`
	// Layer3 or layer2 tunnel mode (alternatively tun, tap)
	Mode *string `pulumi:"mode"`
	// Subnet mask to be applied to the client.
	Netmask *int `pulumi:"netmask"`
	// Port to run the server on.
	Port *int `pulumi:"port"`
	// indicates the protocol to use when connecting with the remote endpoint.
	Protocol *string `pulumi:"protocol"`
	// Specifies what kind of routes the OVPN client must add to the routing table. def1 – Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
	RedirectGateway *string `pulumi:"redirectGateway"`
	// Renegotiate data channel key after n seconds (default=3600).
	RenegSec *int `pulumi:"renegSec"`
	// If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
	RequireClientCertificate *bool `pulumi:"requireClientCertificate"`
	// Specifies which TLS versions to allow.
	TlsVersion *string `pulumi:"tlsVersion"`
	// IPv6 prefix address which will be used when generating the OVPN interface on the server side.
	TunServerIpv6 *string `pulumi:"tunServerIpv6"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Authentication methods that the server will accept.
	Auth pulumi.StringPtrInput
	// Name of the certificate that the OVPN server will use.
	Certificate pulumi.StringInput
	// Allowed ciphers.
	Cipher pulumi.StringPtrInput
	// Default profile to use.
	DefaultProfile pulumi.StringPtrInput
	// Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
	EnableTunIpv6 pulumi.BoolPtrInput
	// Defines whether the OVPN server is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
	Ipv6PrefixLen pulumi.IntPtrInput
	// Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
	KeepaliveTimeout pulumi.StringPtrInput
	// Automatically generated MAC address of the server.
	MacAddress pulumi.StringPtrInput
	// Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
	MaxMtu pulumi.IntPtrInput
	// Layer3 or layer2 tunnel mode (alternatively tun, tap)
	Mode pulumi.StringPtrInput
	// Subnet mask to be applied to the client.
	Netmask pulumi.IntPtrInput
	// Port to run the server on.
	Port pulumi.IntPtrInput
	// indicates the protocol to use when connecting with the remote endpoint.
	Protocol pulumi.StringPtrInput
	// Specifies what kind of routes the OVPN client must add to the routing table. def1 – Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
	RedirectGateway pulumi.StringPtrInput
	// Renegotiate data channel key after n seconds (default=3600).
	RenegSec pulumi.IntPtrInput
	// If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
	RequireClientCertificate pulumi.BoolPtrInput
	// Specifies which TLS versions to allow.
	TlsVersion pulumi.StringPtrInput
	// IPv6 prefix address which will be used when generating the OVPN interface on the server side.
	TunServerIpv6 pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ServerOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ServerOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Authentication methods that the server will accept.
func (o ServerOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Auth }).(pulumi.StringPtrOutput)
}

// Name of the certificate that the OVPN server will use.
func (o ServerOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Allowed ciphers.
func (o ServerOutput) Cipher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Cipher }).(pulumi.StringPtrOutput)
}

// Default profile to use.
func (o ServerOutput) DefaultProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.DefaultProfile }).(pulumi.StringPtrOutput)
}

// Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
func (o ServerOutput) EnableTunIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.EnableTunIpv6 }).(pulumi.BoolPtrOutput)
}

// Defines whether the OVPN server is enabled or not.
func (o ServerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
func (o ServerOutput) Ipv6PrefixLen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.IntPtrOutput { return v.Ipv6PrefixLen }).(pulumi.IntPtrOutput)
}

// Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
func (o ServerOutput) KeepaliveTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.KeepaliveTimeout }).(pulumi.StringPtrOutput)
}

// Automatically generated MAC address of the server.
func (o ServerOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
func (o ServerOutput) MaxMtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.IntPtrOutput { return v.MaxMtu }).(pulumi.IntPtrOutput)
}

// Layer3 or layer2 tunnel mode (alternatively tun, tap)
func (o ServerOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// Subnet mask to be applied to the client.
func (o ServerOutput) Netmask() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.IntPtrOutput { return v.Netmask }).(pulumi.IntPtrOutput)
}

// Port to run the server on.
func (o ServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// indicates the protocol to use when connecting with the remote endpoint.
func (o ServerOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Specifies what kind of routes the OVPN client must add to the routing table. def1 – Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
func (o ServerOutput) RedirectGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.RedirectGateway }).(pulumi.StringPtrOutput)
}

// Renegotiate data channel key after n seconds (default=3600).
func (o ServerOutput) RenegSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.IntPtrOutput { return v.RenegSec }).(pulumi.IntPtrOutput)
}

// If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
func (o ServerOutput) RequireClientCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.RequireClientCertificate }).(pulumi.BoolPtrOutput)
}

// Specifies which TLS versions to allow.
func (o ServerOutput) TlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.TlsVersion }).(pulumi.StringPtrOutput)
}

// IPv6 prefix address which will be used when generating the OVPN interface on the server side.
func (o ServerOutput) TunServerIpv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.TunServerIpv6 }).(pulumi.StringPtrOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
