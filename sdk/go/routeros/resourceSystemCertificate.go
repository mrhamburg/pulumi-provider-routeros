// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routeros

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-routeros/sdk/go/routeros"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			rootCa, err := routeros.NewResourceSystemCertificate(ctx, "rootCa", &routeros.ResourceSystemCertificateArgs{
//				CommonName: pulumi.String("RootCA"),
//				KeyUsages: pulumi.StringArray{
//					pulumi.String("key-cert-sign"),
//					pulumi.String("crl-sign"),
//				},
//				Trusted: pulumi.Bool(true),
//				Signs: routeros.ResourceSystemCertificateSignArray{
//					nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = routeros.NewResourceSystemCertificate(ctx, "serverCrt", &routeros.ResourceSystemCertificateArgs{
//				CommonName: pulumi.String("server.crt"),
//				KeyUsages: pulumi.StringArray{
//					pulumi.String("digital-signature"),
//					pulumi.String("key-encipherment"),
//					pulumi.String("tls-server"),
//				},
//				Signs: routeros.ResourceSystemCertificateSignArray{
//					&routeros.ResourceSystemCertificateSignArgs{
//						Ca: rootCa.Name,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = routeros.NewResourceSystemCertificate(ctx, "clientCrt", &routeros.ResourceSystemCertificateArgs{
//				CommonName: pulumi.String("client.crt"),
//				KeySize:    pulumi.String("prime256v1"),
//				KeyUsages: pulumi.StringArray{
//					pulumi.String("digital-signature"),
//					pulumi.String("key-agreement"),
//					pulumi.String("tls-client"),
//				},
//				Signs: routeros.ResourceSystemCertificateSignArray{
//					&routeros.ResourceSystemCertificateSignArgs{
//						Ca: rootCa.Name,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = routeros.NewResourceSystemCertificate(ctx, "unsignedCrt", &routeros.ResourceSystemCertificateArgs{
//				CommonName:     pulumi.String("unsigned.crt"),
//				KeySize:        pulumi.String("1024"),
//				SubjectAltName: pulumi.String("DNS:router.lan,DNS:myrouter.lan,IP:192.168.88.1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// #The ID can be found via API or the terminal #The command for the terminal is -> :put [/certificate get [print show-ids]] #If you plan to manipulate the certificate requiring signing, you need to correctly fill in the sign{} section. #Changes in the sign{} section will not cause changes in the certificate. It's not a bug, it's a feature!
//
// ```sh
//
//	$ pulumi import routeros:index/resourceSystemCertificate:ResourceSystemCertificate client *9D
//
// ```
type ResourceSystemCertificate struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
	___skip_ pulumi.StringPtrOutput `pulumi:"___skip_"`
	// Authority Key Identifier.
	Akid          pulumi.StringOutput `pulumi:"akid"`
	Authority     pulumi.StringOutput `pulumi:"authority"`
	Ca            pulumi.StringOutput `pulumi:"ca"`
	CaCrlHost     pulumi.StringOutput `pulumi:"caCrlHost"`
	CaFingerprint pulumi.StringOutput `pulumi:"caFingerprint"`
	// Common Name (e.g. server FQDN or YOUR name).
	CommonName pulumi.StringOutput    `pulumi:"commonName"`
	CopyFrom   pulumi.StringPtrOutput `pulumi:"copyFrom"`
	// Country Name (2 letter code).
	Country pulumi.StringPtrOutput `pulumi:"country"`
	Crl     pulumi.StringOutput    `pulumi:"crl"`
	// Certificate lifetime.
	DaysValid       pulumi.IntOutput  `pulumi:"daysValid"`
	DigestAlgorithm pulumi.BoolOutput `pulumi:"digestAlgorithm"`
	Dsa             pulumi.BoolOutput `pulumi:"dsa"`
	// Set to true if certificate is expired.
	Expired      pulumi.BoolOutput   `pulumi:"expired"`
	ExpiresAfter pulumi.StringOutput `pulumi:"expiresAfter"`
	Fingerprint  pulumi.StringOutput `pulumi:"fingerprint"`
	// The date after which certificate wil be invalid.
	InvalidAfter pulumi.StringOutput `pulumi:"invalidAfter"`
	// The date before which certificate is invalid.
	InvalidBefore pulumi.StringOutput `pulumi:"invalidBefore"`
	Issued        pulumi.StringOutput `pulumi:"issued"`
	Issuer        pulumi.StringOutput `pulumi:"issuer"`
	KeySize       pulumi.StringOutput `pulumi:"keySize"`
	KeyType       pulumi.StringOutput `pulumi:"keyType"`
	// Detailed key usage descriptions can be found in RFC 5280.
	KeyUsages pulumi.StringArrayOutput `pulumi:"keyUsages"`
	// Locality Name (eg, city).
	Locality pulumi.StringPtrOutput `pulumi:"locality"`
	// Name of the certificate. Name can be edited.
	Name pulumi.StringOutput `pulumi:"name"`
	// Organizational Unit Name (eg, section)
	Organization   pulumi.StringPtrOutput                   `pulumi:"organization"`
	PrivateKey     pulumi.BoolOutput                        `pulumi:"privateKey"`
	ReqFingerprint pulumi.StringOutput                      `pulumi:"reqFingerprint"`
	Revoked        pulumi.StringOutput                      `pulumi:"revoked"`
	ScepUrl        pulumi.StringOutput                      `pulumi:"scepUrl"`
	SerialNumber   pulumi.StringOutput                      `pulumi:"serialNumber"`
	Signs          ResourceSystemCertificateSignArrayOutput `pulumi:"signs"`
	// Subject Key Identifier.
	Skid         pulumi.StringOutput `pulumi:"skid"`
	SmartCardKey pulumi.StringOutput `pulumi:"smartCardKey"`
	// State or Province Name (full name).
	State pulumi.StringPtrOutput `pulumi:"state"`
	// Shows current status of scep client.
	Status pulumi.StringOutput `pulumi:"status"`
	// SANs (subject alternative names).
	SubjectAltName pulumi.StringPtrOutput `pulumi:"subjectAltName"`
	// If set to yes certificate is included 'in trusted certificate chain'.
	Trusted pulumi.BoolPtrOutput `pulumi:"trusted"`
	// Organizational Unit Name (eg, section).
	Unit pulumi.StringPtrOutput `pulumi:"unit"`
}

// NewResourceSystemCertificate registers a new resource with the given unique name, arguments, and options.
func NewResourceSystemCertificate(ctx *pulumi.Context,
	name string, args *ResourceSystemCertificateArgs, opts ...pulumi.ResourceOption) (*ResourceSystemCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommonName == nil {
		return nil, errors.New("invalid value for required argument 'CommonName'")
	}
	var resource ResourceSystemCertificate
	err := ctx.RegisterResource("routeros:index/resourceSystemCertificate:ResourceSystemCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceSystemCertificate gets an existing ResourceSystemCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceSystemCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceSystemCertificateState, opts ...pulumi.ResourceOption) (*ResourceSystemCertificate, error) {
	var resource ResourceSystemCertificate
	err := ctx.ReadResource("routeros:index/resourceSystemCertificate:ResourceSystemCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceSystemCertificate resources.
type resourceSystemCertificateState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
	___skip_ *string `pulumi:"___skip_"`
	// Authority Key Identifier.
	Akid          *string `pulumi:"akid"`
	Authority     *string `pulumi:"authority"`
	Ca            *string `pulumi:"ca"`
	CaCrlHost     *string `pulumi:"caCrlHost"`
	CaFingerprint *string `pulumi:"caFingerprint"`
	// Common Name (e.g. server FQDN or YOUR name).
	CommonName *string `pulumi:"commonName"`
	CopyFrom   *string `pulumi:"copyFrom"`
	// Country Name (2 letter code).
	Country *string `pulumi:"country"`
	Crl     *string `pulumi:"crl"`
	// Certificate lifetime.
	DaysValid       *int  `pulumi:"daysValid"`
	DigestAlgorithm *bool `pulumi:"digestAlgorithm"`
	Dsa             *bool `pulumi:"dsa"`
	// Set to true if certificate is expired.
	Expired      *bool   `pulumi:"expired"`
	ExpiresAfter *string `pulumi:"expiresAfter"`
	Fingerprint  *string `pulumi:"fingerprint"`
	// The date after which certificate wil be invalid.
	InvalidAfter *string `pulumi:"invalidAfter"`
	// The date before which certificate is invalid.
	InvalidBefore *string `pulumi:"invalidBefore"`
	Issued        *string `pulumi:"issued"`
	Issuer        *string `pulumi:"issuer"`
	KeySize       *string `pulumi:"keySize"`
	KeyType       *string `pulumi:"keyType"`
	// Detailed key usage descriptions can be found in RFC 5280.
	KeyUsages []string `pulumi:"keyUsages"`
	// Locality Name (eg, city).
	Locality *string `pulumi:"locality"`
	// Name of the certificate. Name can be edited.
	Name *string `pulumi:"name"`
	// Organizational Unit Name (eg, section)
	Organization   *string                         `pulumi:"organization"`
	PrivateKey     *bool                           `pulumi:"privateKey"`
	ReqFingerprint *string                         `pulumi:"reqFingerprint"`
	Revoked        *string                         `pulumi:"revoked"`
	ScepUrl        *string                         `pulumi:"scepUrl"`
	SerialNumber   *string                         `pulumi:"serialNumber"`
	Signs          []ResourceSystemCertificateSign `pulumi:"signs"`
	// Subject Key Identifier.
	Skid         *string `pulumi:"skid"`
	SmartCardKey *string `pulumi:"smartCardKey"`
	// State or Province Name (full name).
	State *string `pulumi:"state"`
	// Shows current status of scep client.
	Status *string `pulumi:"status"`
	// SANs (subject alternative names).
	SubjectAltName *string `pulumi:"subjectAltName"`
	// If set to yes certificate is included 'in trusted certificate chain'.
	Trusted *bool `pulumi:"trusted"`
	// Organizational Unit Name (eg, section).
	Unit *string `pulumi:"unit"`
}

type ResourceSystemCertificateState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
	___skip_ pulumi.StringPtrInput
	// Authority Key Identifier.
	Akid          pulumi.StringPtrInput
	Authority     pulumi.StringPtrInput
	Ca            pulumi.StringPtrInput
	CaCrlHost     pulumi.StringPtrInput
	CaFingerprint pulumi.StringPtrInput
	// Common Name (e.g. server FQDN or YOUR name).
	CommonName pulumi.StringPtrInput
	CopyFrom   pulumi.StringPtrInput
	// Country Name (2 letter code).
	Country pulumi.StringPtrInput
	Crl     pulumi.StringPtrInput
	// Certificate lifetime.
	DaysValid       pulumi.IntPtrInput
	DigestAlgorithm pulumi.BoolPtrInput
	Dsa             pulumi.BoolPtrInput
	// Set to true if certificate is expired.
	Expired      pulumi.BoolPtrInput
	ExpiresAfter pulumi.StringPtrInput
	Fingerprint  pulumi.StringPtrInput
	// The date after which certificate wil be invalid.
	InvalidAfter pulumi.StringPtrInput
	// The date before which certificate is invalid.
	InvalidBefore pulumi.StringPtrInput
	Issued        pulumi.StringPtrInput
	Issuer        pulumi.StringPtrInput
	KeySize       pulumi.StringPtrInput
	KeyType       pulumi.StringPtrInput
	// Detailed key usage descriptions can be found in RFC 5280.
	KeyUsages pulumi.StringArrayInput
	// Locality Name (eg, city).
	Locality pulumi.StringPtrInput
	// Name of the certificate. Name can be edited.
	Name pulumi.StringPtrInput
	// Organizational Unit Name (eg, section)
	Organization   pulumi.StringPtrInput
	PrivateKey     pulumi.BoolPtrInput
	ReqFingerprint pulumi.StringPtrInput
	Revoked        pulumi.StringPtrInput
	ScepUrl        pulumi.StringPtrInput
	SerialNumber   pulumi.StringPtrInput
	Signs          ResourceSystemCertificateSignArrayInput
	// Subject Key Identifier.
	Skid         pulumi.StringPtrInput
	SmartCardKey pulumi.StringPtrInput
	// State or Province Name (full name).
	State pulumi.StringPtrInput
	// Shows current status of scep client.
	Status pulumi.StringPtrInput
	// SANs (subject alternative names).
	SubjectAltName pulumi.StringPtrInput
	// If set to yes certificate is included 'in trusted certificate chain'.
	Trusted pulumi.BoolPtrInput
	// Organizational Unit Name (eg, section).
	Unit pulumi.StringPtrInput
}

func (ResourceSystemCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSystemCertificateState)(nil)).Elem()
}

type resourceSystemCertificateArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
	___skip_ *string `pulumi:"___skip_"`
	// Common Name (e.g. server FQDN or YOUR name).
	CommonName string  `pulumi:"commonName"`
	CopyFrom   *string `pulumi:"copyFrom"`
	// Country Name (2 letter code).
	Country *string `pulumi:"country"`
	// Certificate lifetime.
	DaysValid *int    `pulumi:"daysValid"`
	KeySize   *string `pulumi:"keySize"`
	// Detailed key usage descriptions can be found in RFC 5280.
	KeyUsages []string `pulumi:"keyUsages"`
	// Locality Name (eg, city).
	Locality *string `pulumi:"locality"`
	// Name of the certificate. Name can be edited.
	Name *string `pulumi:"name"`
	// Organizational Unit Name (eg, section)
	Organization *string                         `pulumi:"organization"`
	Signs        []ResourceSystemCertificateSign `pulumi:"signs"`
	// State or Province Name (full name).
	State *string `pulumi:"state"`
	// SANs (subject alternative names).
	SubjectAltName *string `pulumi:"subjectAltName"`
	// If set to yes certificate is included 'in trusted certificate chain'.
	Trusted *bool `pulumi:"trusted"`
	// Organizational Unit Name (eg, section).
	Unit *string `pulumi:"unit"`
}

// The set of arguments for constructing a ResourceSystemCertificate resource.
type ResourceSystemCertificateArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
	___skip_ pulumi.StringPtrInput
	// Common Name (e.g. server FQDN or YOUR name).
	CommonName pulumi.StringInput
	CopyFrom   pulumi.StringPtrInput
	// Country Name (2 letter code).
	Country pulumi.StringPtrInput
	// Certificate lifetime.
	DaysValid pulumi.IntPtrInput
	KeySize   pulumi.StringPtrInput
	// Detailed key usage descriptions can be found in RFC 5280.
	KeyUsages pulumi.StringArrayInput
	// Locality Name (eg, city).
	Locality pulumi.StringPtrInput
	// Name of the certificate. Name can be edited.
	Name pulumi.StringPtrInput
	// Organizational Unit Name (eg, section)
	Organization pulumi.StringPtrInput
	Signs        ResourceSystemCertificateSignArrayInput
	// State or Province Name (full name).
	State pulumi.StringPtrInput
	// SANs (subject alternative names).
	SubjectAltName pulumi.StringPtrInput
	// If set to yes certificate is included 'in trusted certificate chain'.
	Trusted pulumi.BoolPtrInput
	// Organizational Unit Name (eg, section).
	Unit pulumi.StringPtrInput
}

func (ResourceSystemCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceSystemCertificateArgs)(nil)).Elem()
}

type ResourceSystemCertificateInput interface {
	pulumi.Input

	ToResourceSystemCertificateOutput() ResourceSystemCertificateOutput
	ToResourceSystemCertificateOutputWithContext(ctx context.Context) ResourceSystemCertificateOutput
}

func (*ResourceSystemCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSystemCertificate)(nil)).Elem()
}

func (i *ResourceSystemCertificate) ToResourceSystemCertificateOutput() ResourceSystemCertificateOutput {
	return i.ToResourceSystemCertificateOutputWithContext(context.Background())
}

func (i *ResourceSystemCertificate) ToResourceSystemCertificateOutputWithContext(ctx context.Context) ResourceSystemCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSystemCertificateOutput)
}

// ResourceSystemCertificateArrayInput is an input type that accepts ResourceSystemCertificateArray and ResourceSystemCertificateArrayOutput values.
// You can construct a concrete instance of `ResourceSystemCertificateArrayInput` via:
//
//	ResourceSystemCertificateArray{ ResourceSystemCertificateArgs{...} }
type ResourceSystemCertificateArrayInput interface {
	pulumi.Input

	ToResourceSystemCertificateArrayOutput() ResourceSystemCertificateArrayOutput
	ToResourceSystemCertificateArrayOutputWithContext(context.Context) ResourceSystemCertificateArrayOutput
}

type ResourceSystemCertificateArray []ResourceSystemCertificateInput

func (ResourceSystemCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSystemCertificate)(nil)).Elem()
}

func (i ResourceSystemCertificateArray) ToResourceSystemCertificateArrayOutput() ResourceSystemCertificateArrayOutput {
	return i.ToResourceSystemCertificateArrayOutputWithContext(context.Background())
}

func (i ResourceSystemCertificateArray) ToResourceSystemCertificateArrayOutputWithContext(ctx context.Context) ResourceSystemCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSystemCertificateArrayOutput)
}

// ResourceSystemCertificateMapInput is an input type that accepts ResourceSystemCertificateMap and ResourceSystemCertificateMapOutput values.
// You can construct a concrete instance of `ResourceSystemCertificateMapInput` via:
//
//	ResourceSystemCertificateMap{ "key": ResourceSystemCertificateArgs{...} }
type ResourceSystemCertificateMapInput interface {
	pulumi.Input

	ToResourceSystemCertificateMapOutput() ResourceSystemCertificateMapOutput
	ToResourceSystemCertificateMapOutputWithContext(context.Context) ResourceSystemCertificateMapOutput
}

type ResourceSystemCertificateMap map[string]ResourceSystemCertificateInput

func (ResourceSystemCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSystemCertificate)(nil)).Elem()
}

func (i ResourceSystemCertificateMap) ToResourceSystemCertificateMapOutput() ResourceSystemCertificateMapOutput {
	return i.ToResourceSystemCertificateMapOutputWithContext(context.Background())
}

func (i ResourceSystemCertificateMap) ToResourceSystemCertificateMapOutputWithContext(ctx context.Context) ResourceSystemCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSystemCertificateMapOutput)
}

type ResourceSystemCertificateOutput struct{ *pulumi.OutputState }

func (ResourceSystemCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSystemCertificate)(nil)).Elem()
}

func (o ResourceSystemCertificateOutput) ToResourceSystemCertificateOutput() ResourceSystemCertificateOutput {
	return o
}

func (o ResourceSystemCertificateOutput) ToResourceSystemCertificateOutputWithContext(ctx context.Context) ResourceSystemCertificateOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ResourceSystemCertificateOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ResourceSystemCertificateOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
func (o ResourceSystemCertificateOutput) ___skip_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringPtrOutput { return v.___skip_ }).(pulumi.StringPtrOutput)
}

// Authority Key Identifier.
func (o ResourceSystemCertificateOutput) Akid() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Akid }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) Authority() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Authority }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) Ca() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Ca }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) CaCrlHost() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.CaCrlHost }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) CaFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.CaFingerprint }).(pulumi.StringOutput)
}

// Common Name (e.g. server FQDN or YOUR name).
func (o ResourceSystemCertificateOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.CommonName }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) CopyFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringPtrOutput { return v.CopyFrom }).(pulumi.StringPtrOutput)
}

// Country Name (2 letter code).
func (o ResourceSystemCertificateOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringPtrOutput { return v.Country }).(pulumi.StringPtrOutput)
}

func (o ResourceSystemCertificateOutput) Crl() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Crl }).(pulumi.StringOutput)
}

// Certificate lifetime.
func (o ResourceSystemCertificateOutput) DaysValid() pulumi.IntOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.IntOutput { return v.DaysValid }).(pulumi.IntOutput)
}

func (o ResourceSystemCertificateOutput) DigestAlgorithm() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.BoolOutput { return v.DigestAlgorithm }).(pulumi.BoolOutput)
}

func (o ResourceSystemCertificateOutput) Dsa() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.BoolOutput { return v.Dsa }).(pulumi.BoolOutput)
}

// Set to true if certificate is expired.
func (o ResourceSystemCertificateOutput) Expired() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.BoolOutput { return v.Expired }).(pulumi.BoolOutput)
}

func (o ResourceSystemCertificateOutput) ExpiresAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.ExpiresAfter }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// The date after which certificate wil be invalid.
func (o ResourceSystemCertificateOutput) InvalidAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.InvalidAfter }).(pulumi.StringOutput)
}

// The date before which certificate is invalid.
func (o ResourceSystemCertificateOutput) InvalidBefore() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.InvalidBefore }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) Issued() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Issued }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) KeySize() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.KeySize }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

// Detailed key usage descriptions can be found in RFC 5280.
func (o ResourceSystemCertificateOutput) KeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringArrayOutput { return v.KeyUsages }).(pulumi.StringArrayOutput)
}

// Locality Name (eg, city).
func (o ResourceSystemCertificateOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringPtrOutput { return v.Locality }).(pulumi.StringPtrOutput)
}

// Name of the certificate. Name can be edited.
func (o ResourceSystemCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organizational Unit Name (eg, section)
func (o ResourceSystemCertificateOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringPtrOutput { return v.Organization }).(pulumi.StringPtrOutput)
}

func (o ResourceSystemCertificateOutput) PrivateKey() pulumi.BoolOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.BoolOutput { return v.PrivateKey }).(pulumi.BoolOutput)
}

func (o ResourceSystemCertificateOutput) ReqFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.ReqFingerprint }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) Revoked() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Revoked }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) ScepUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.ScepUrl }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.SerialNumber }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) Signs() ResourceSystemCertificateSignArrayOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) ResourceSystemCertificateSignArrayOutput { return v.Signs }).(ResourceSystemCertificateSignArrayOutput)
}

// Subject Key Identifier.
func (o ResourceSystemCertificateOutput) Skid() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Skid }).(pulumi.StringOutput)
}

func (o ResourceSystemCertificateOutput) SmartCardKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.SmartCardKey }).(pulumi.StringOutput)
}

// State or Province Name (full name).
func (o ResourceSystemCertificateOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// Shows current status of scep client.
func (o ResourceSystemCertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// SANs (subject alternative names).
func (o ResourceSystemCertificateOutput) SubjectAltName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringPtrOutput { return v.SubjectAltName }).(pulumi.StringPtrOutput)
}

// If set to yes certificate is included 'in trusted certificate chain'.
func (o ResourceSystemCertificateOutput) Trusted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.BoolPtrOutput { return v.Trusted }).(pulumi.BoolPtrOutput)
}

// Organizational Unit Name (eg, section).
func (o ResourceSystemCertificateOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSystemCertificate) pulumi.StringPtrOutput { return v.Unit }).(pulumi.StringPtrOutput)
}

type ResourceSystemCertificateArrayOutput struct{ *pulumi.OutputState }

func (ResourceSystemCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceSystemCertificate)(nil)).Elem()
}

func (o ResourceSystemCertificateArrayOutput) ToResourceSystemCertificateArrayOutput() ResourceSystemCertificateArrayOutput {
	return o
}

func (o ResourceSystemCertificateArrayOutput) ToResourceSystemCertificateArrayOutputWithContext(ctx context.Context) ResourceSystemCertificateArrayOutput {
	return o
}

func (o ResourceSystemCertificateArrayOutput) Index(i pulumi.IntInput) ResourceSystemCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceSystemCertificate {
		return vs[0].([]*ResourceSystemCertificate)[vs[1].(int)]
	}).(ResourceSystemCertificateOutput)
}

type ResourceSystemCertificateMapOutput struct{ *pulumi.OutputState }

func (ResourceSystemCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceSystemCertificate)(nil)).Elem()
}

func (o ResourceSystemCertificateMapOutput) ToResourceSystemCertificateMapOutput() ResourceSystemCertificateMapOutput {
	return o
}

func (o ResourceSystemCertificateMapOutput) ToResourceSystemCertificateMapOutputWithContext(ctx context.Context) ResourceSystemCertificateMapOutput {
	return o
}

func (o ResourceSystemCertificateMapOutput) MapIndex(k pulumi.StringInput) ResourceSystemCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceSystemCertificate {
		return vs[0].(map[string]*ResourceSystemCertificate)[vs[1].(string)]
	}).(ResourceSystemCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSystemCertificateInput)(nil)).Elem(), &ResourceSystemCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSystemCertificateArrayInput)(nil)).Elem(), ResourceSystemCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSystemCertificateMapInput)(nil)).Elem(), ResourceSystemCertificateMap{})
	pulumi.RegisterOutputType(ResourceSystemCertificateOutput{})
	pulumi.RegisterOutputType(ResourceSystemCertificateArrayOutput{})
	pulumi.RegisterOutputType(ResourceSystemCertificateMapOutput{})
}
