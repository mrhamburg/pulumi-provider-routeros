// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routeros

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "routeros:index/resourceCapsManAaa:ResourceCapsManAaa":
		r = &ResourceCapsManAaa{}
	case "routeros:index/resourceCapsManChannel:ResourceCapsManChannel":
		r = &ResourceCapsManChannel{}
	case "routeros:index/resourceCapsManConfiguration:ResourceCapsManConfiguration":
		r = &ResourceCapsManConfiguration{}
	case "routeros:index/resourceCapsManDatapath:ResourceCapsManDatapath":
		r = &ResourceCapsManDatapath{}
	case "routeros:index/resourceCapsManManager:ResourceCapsManManager":
		r = &ResourceCapsManManager{}
	case "routeros:index/resourceCapsManManagerInterface:ResourceCapsManManagerInterface":
		r = &ResourceCapsManManagerInterface{}
	case "routeros:index/resourceCapsManProvisioning:ResourceCapsManProvisioning":
		r = &ResourceCapsManProvisioning{}
	case "routeros:index/resourceCapsManRates:ResourceCapsManRates":
		r = &ResourceCapsManRates{}
	case "routeros:index/resourceCapsManSecurity:ResourceCapsManSecurity":
		r = &ResourceCapsManSecurity{}
	case "routeros:index/resourceDhcpClient:ResourceDhcpClient":
		r = &ResourceDhcpClient{}
	case "routeros:index/resourceDhcpServer:ResourceDhcpServer":
		r = &ResourceDhcpServer{}
	case "routeros:index/resourceDhcpServerLease:ResourceDhcpServerLease":
		r = &ResourceDhcpServerLease{}
	case "routeros:index/resourceDhcpServerNetwork:ResourceDhcpServerNetwork":
		r = &ResourceDhcpServerNetwork{}
	case "routeros:index/resourceDns:ResourceDns":
		r = &ResourceDns{}
	case "routeros:index/resourceDnsRecord:ResourceDnsRecord":
		r = &ResourceDnsRecord{}
	case "routeros:index/resourceIPAddress:ResourceIPAddress":
		r = &ResourceIPAddress{}
	case "routeros:index/resourceIPFirewallAddrList:ResourceIPFirewallAddrList":
		r = &ResourceIPFirewallAddrList{}
	case "routeros:index/resourceIPFirewallFilter:ResourceIPFirewallFilter":
		r = &ResourceIPFirewallFilter{}
	case "routeros:index/resourceIPFirewallMangle:ResourceIPFirewallMangle":
		r = &ResourceIPFirewallMangle{}
	case "routeros:index/resourceIPFirewallNat:ResourceIPFirewallNat":
		r = &ResourceIPFirewallNat{}
	case "routeros:index/resourceIPPool:ResourceIPPool":
		r = &ResourceIPPool{}
	case "routeros:index/resourceIPRoute:ResourceIPRoute":
		r = &ResourceIPRoute{}
	case "routeros:index/resourceIPv6Address:ResourceIPv6Address":
		r = &ResourceIPv6Address{}
	case "routeros:index/resourceIPv6FirewallFilter:ResourceIPv6FirewallFilter":
		r = &ResourceIPv6FirewallFilter{}
	case "routeros:index/resourceIPv6Route:ResourceIPv6Route":
		r = &ResourceIPv6Route{}
	case "routeros:index/resourceInterfaceBridge:ResourceInterfaceBridge":
		r = &ResourceInterfaceBridge{}
	case "routeros:index/resourceInterfaceBridgePort:ResourceInterfaceBridgePort":
		r = &ResourceInterfaceBridgePort{}
	case "routeros:index/resourceInterfaceBridgeVlan:ResourceInterfaceBridgeVlan":
		r = &ResourceInterfaceBridgeVlan{}
	case "routeros:index/resourceInterfaceGre:ResourceInterfaceGre":
		r = &ResourceInterfaceGre{}
	case "routeros:index/resourceInterfaceList:ResourceInterfaceList":
		r = &ResourceInterfaceList{}
	case "routeros:index/resourceInterfaceListMember:ResourceInterfaceListMember":
		r = &ResourceInterfaceListMember{}
	case "routeros:index/resourceInterfaceOpenVPNServer:ResourceInterfaceOpenVPNServer":
		r = &ResourceInterfaceOpenVPNServer{}
	case "routeros:index/resourceInterfaceVlan:ResourceInterfaceVlan":
		r = &ResourceInterfaceVlan{}
	case "routeros:index/resourceInterfaceVrrp:ResourceInterfaceVrrp":
		r = &ResourceInterfaceVrrp{}
	case "routeros:index/resourceInterfaceWireguard:ResourceInterfaceWireguard":
		r = &ResourceInterfaceWireguard{}
	case "routeros:index/resourceInterfaceWireguardPeer:ResourceInterfaceWireguardPeer":
		r = &ResourceInterfaceWireguardPeer{}
	case "routeros:index/resourceIpService:ResourceIpService":
		r = &ResourceIpService{}
	case "routeros:index/resourceOpenVPNServer:ResourceOpenVPNServer":
		r = &ResourceOpenVPNServer{}
	case "routeros:index/resourcePPPProfile:ResourcePPPProfile":
		r = &ResourcePPPProfile{}
	case "routeros:index/resourcePPPSecret:ResourcePPPSecret":
		r = &ResourcePPPSecret{}
	case "routeros:index/resourceRoutingTable:ResourceRoutingTable":
		r = &ResourceRoutingTable{}
	case "routeros:index/resourceSystemCertificate:ResourceSystemCertificate":
		r = &ResourceSystemCertificate{}
	case "routeros:index/resourceSystemIdentity:ResourceSystemIdentity":
		r = &ResourceSystemIdentity{}
	case "routeros:index/resourceSystemScheduler:ResourceSystemScheduler":
		r = &ResourceSystemScheduler{}
	case "routeros:index/resourceUser:ResourceUser":
		r = &ResourceUser{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:routeros" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, _ := PkgVersion()
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceCapsManAaa",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceCapsManChannel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceCapsManConfiguration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceCapsManDatapath",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceCapsManManager",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceCapsManManagerInterface",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceCapsManProvisioning",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceCapsManRates",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceCapsManSecurity",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceDhcpClient",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceDhcpServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceDhcpServerLease",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceDhcpServerNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceDns",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceDnsRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIPAddress",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIPFirewallAddrList",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIPFirewallFilter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIPFirewallMangle",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIPFirewallNat",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIPPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIPRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIPv6Address",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIPv6FirewallFilter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIPv6Route",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceBridge",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceBridgePort",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceBridgeVlan",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceGre",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceList",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceListMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceOpenVPNServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceVlan",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceVrrp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceWireguard",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceInterfaceWireguardPeer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceIpService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceOpenVPNServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourcePPPProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourcePPPSecret",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceRoutingTable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceSystemCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceSystemIdentity",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceSystemScheduler",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"routeros",
		"index/resourceUser",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"routeros",
		&pkg{version},
	)
}
