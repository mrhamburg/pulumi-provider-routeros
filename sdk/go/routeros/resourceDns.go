// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package routeros

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # ResourceDns (Resource)
//
// A MikroTik router with DNS feature enabled can be set as a DNS server for any DNS-compliant client.
//
// ## Import
//
// #The DNS Settings can not be imported.
//
// #Terraform will ignore the current settings and will overwrite the current settings with the settings defined in Terraform.
type ResourceDns struct {
	pulumi.CustomResourceState

	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrOutput `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrOutput `pulumi:"___path_"`
	// Specifies whether to allow network requests.
	AllowRemoteRequests pulumi.BoolPtrOutput `pulumi:"allowRemoteRequests"`
	// Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
	// time. Shorter TTL received from DNS servers are respected. *Default: 1w*
	CacheMaxTtl pulumi.StringOutput `pulumi:"cacheMaxTtl"`
	// Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
	CacheSize pulumi.IntOutput `pulumi:"cacheSize"`
	// Shows the currently used cache size in KiB.
	CacheUsed pulumi.IntOutput `pulumi:"cacheUsed"`
	// Specifies how many DoH concurrent queries are allowed.
	DohMaxConcurrentQueries pulumi.IntOutput `pulumi:"dohMaxConcurrentQueries"`
	// Specifies how many concurrent connections to the DoH server are allowed.
	DohMaxServerConnections pulumi.IntOutput `pulumi:"dohMaxServerConnections"`
	// Specifies how long to wait for query response from the DoH server.
	DohTimeout pulumi.StringOutput `pulumi:"dohTimeout"`
	// List of dynamically added DNS server from different services, for example, DHCP.
	DynamicServers pulumi.StringOutput `pulumi:"dynamicServers"`
	// Specifies how much concurrent queries are allowed. *Default: 100*
	MaxConcurrentQueries pulumi.IntOutput `pulumi:"maxConcurrentQueries"`
	// Specifies how much concurrent TCP sessions are allowed. *Default: 20*
	MaxConcurrentTcpSessions pulumi.IntOutput `pulumi:"maxConcurrentTcpSessions"`
	// Maximum size of allowed UDP packet. *Default: 4096*
	MaxUdpPacketSize pulumi.IntOutput `pulumi:"maxUdpPacketSize"`
	// Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
	QueryServerTimeout pulumi.StringOutput `pulumi:"queryServerTimeout"`
	// Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
	// query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
	QueryTotalTimeout pulumi.StringOutput `pulumi:"queryTotalTimeout"`
	// List of DNS server IPv4/IPv6 addresses.
	Servers pulumi.StringPtrOutput `pulumi:"servers"`
	// DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
	// fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
	// on the device.
	UseDohServer pulumi.StringPtrOutput `pulumi:"useDohServer"`
	// DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
	VerifyDohCert pulumi.BoolPtrOutput `pulumi:"verifyDohCert"`
}

// NewResourceDns registers a new resource with the given unique name, arguments, and options.
func NewResourceDns(ctx *pulumi.Context,
	name string, args *ResourceDnsArgs, opts ...pulumi.ResourceOption) (*ResourceDns, error) {
	if args == nil {
		args = &ResourceDnsArgs{}
	}

	var resource ResourceDns
	err := ctx.RegisterResource("routeros:index/resourceDns:ResourceDns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceDns gets an existing ResourceDns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceDns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceDnsState, opts ...pulumi.ResourceOption) (*ResourceDns, error) {
	var resource ResourceDns
	err := ctx.ReadResource("routeros:index/resourceDns:ResourceDns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceDns resources.
type resourceDnsState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Specifies whether to allow network requests.
	AllowRemoteRequests *bool `pulumi:"allowRemoteRequests"`
	// Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
	// time. Shorter TTL received from DNS servers are respected. *Default: 1w*
	CacheMaxTtl *string `pulumi:"cacheMaxTtl"`
	// Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
	CacheSize *int `pulumi:"cacheSize"`
	// Shows the currently used cache size in KiB.
	CacheUsed *int `pulumi:"cacheUsed"`
	// Specifies how many DoH concurrent queries are allowed.
	DohMaxConcurrentQueries *int `pulumi:"dohMaxConcurrentQueries"`
	// Specifies how many concurrent connections to the DoH server are allowed.
	DohMaxServerConnections *int `pulumi:"dohMaxServerConnections"`
	// Specifies how long to wait for query response from the DoH server.
	DohTimeout *string `pulumi:"dohTimeout"`
	// List of dynamically added DNS server from different services, for example, DHCP.
	DynamicServers *string `pulumi:"dynamicServers"`
	// Specifies how much concurrent queries are allowed. *Default: 100*
	MaxConcurrentQueries *int `pulumi:"maxConcurrentQueries"`
	// Specifies how much concurrent TCP sessions are allowed. *Default: 20*
	MaxConcurrentTcpSessions *int `pulumi:"maxConcurrentTcpSessions"`
	// Maximum size of allowed UDP packet. *Default: 4096*
	MaxUdpPacketSize *int `pulumi:"maxUdpPacketSize"`
	// Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
	QueryServerTimeout *string `pulumi:"queryServerTimeout"`
	// Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
	// query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
	QueryTotalTimeout *string `pulumi:"queryTotalTimeout"`
	// List of DNS server IPv4/IPv6 addresses.
	Servers *string `pulumi:"servers"`
	// DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
	// fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
	// on the device.
	UseDohServer *string `pulumi:"useDohServer"`
	// DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
	VerifyDohCert *bool `pulumi:"verifyDohCert"`
}

type ResourceDnsState struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Specifies whether to allow network requests.
	AllowRemoteRequests pulumi.BoolPtrInput
	// Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
	// time. Shorter TTL received from DNS servers are respected. *Default: 1w*
	CacheMaxTtl pulumi.StringPtrInput
	// Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
	CacheSize pulumi.IntPtrInput
	// Shows the currently used cache size in KiB.
	CacheUsed pulumi.IntPtrInput
	// Specifies how many DoH concurrent queries are allowed.
	DohMaxConcurrentQueries pulumi.IntPtrInput
	// Specifies how many concurrent connections to the DoH server are allowed.
	DohMaxServerConnections pulumi.IntPtrInput
	// Specifies how long to wait for query response from the DoH server.
	DohTimeout pulumi.StringPtrInput
	// List of dynamically added DNS server from different services, for example, DHCP.
	DynamicServers pulumi.StringPtrInput
	// Specifies how much concurrent queries are allowed. *Default: 100*
	MaxConcurrentQueries pulumi.IntPtrInput
	// Specifies how much concurrent TCP sessions are allowed. *Default: 20*
	MaxConcurrentTcpSessions pulumi.IntPtrInput
	// Maximum size of allowed UDP packet. *Default: 4096*
	MaxUdpPacketSize pulumi.IntPtrInput
	// Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
	QueryServerTimeout pulumi.StringPtrInput
	// Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
	// query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
	QueryTotalTimeout pulumi.StringPtrInput
	// List of DNS server IPv4/IPv6 addresses.
	Servers pulumi.StringPtrInput
	// DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
	// fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
	// on the device.
	UseDohServer pulumi.StringPtrInput
	// DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
	VerifyDohCert pulumi.BoolPtrInput
}

func (ResourceDnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDnsState)(nil)).Elem()
}

type resourceDnsArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ *int `pulumi:"___id_"`
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ *string `pulumi:"___path_"`
	// Specifies whether to allow network requests.
	AllowRemoteRequests *bool `pulumi:"allowRemoteRequests"`
	// Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
	// time. Shorter TTL received from DNS servers are respected. *Default: 1w*
	CacheMaxTtl *string `pulumi:"cacheMaxTtl"`
	// Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
	CacheSize *int `pulumi:"cacheSize"`
	// Specifies how many DoH concurrent queries are allowed.
	DohMaxConcurrentQueries *int `pulumi:"dohMaxConcurrentQueries"`
	// Specifies how many concurrent connections to the DoH server are allowed.
	DohMaxServerConnections *int `pulumi:"dohMaxServerConnections"`
	// Specifies how long to wait for query response from the DoH server.
	DohTimeout *string `pulumi:"dohTimeout"`
	// Specifies how much concurrent queries are allowed. *Default: 100*
	MaxConcurrentQueries *int `pulumi:"maxConcurrentQueries"`
	// Specifies how much concurrent TCP sessions are allowed. *Default: 20*
	MaxConcurrentTcpSessions *int `pulumi:"maxConcurrentTcpSessions"`
	// Maximum size of allowed UDP packet. *Default: 4096*
	MaxUdpPacketSize *int `pulumi:"maxUdpPacketSize"`
	// Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
	QueryServerTimeout *string `pulumi:"queryServerTimeout"`
	// Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
	// query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
	QueryTotalTimeout *string `pulumi:"queryTotalTimeout"`
	// List of DNS server IPv4/IPv6 addresses.
	Servers *string `pulumi:"servers"`
	// DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
	// fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
	// on the device.
	UseDohServer *string `pulumi:"useDohServer"`
	// DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
	VerifyDohCert *bool `pulumi:"verifyDohCert"`
}

// The set of arguments for constructing a ResourceDns resource.
type ResourceDnsArgs struct {
	// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
	___id_ pulumi.IntPtrInput
	// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
	___path_ pulumi.StringPtrInput
	// Specifies whether to allow network requests.
	AllowRemoteRequests pulumi.BoolPtrInput
	// Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
	// time. Shorter TTL received from DNS servers are respected. *Default: 1w*
	CacheMaxTtl pulumi.StringPtrInput
	// Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
	CacheSize pulumi.IntPtrInput
	// Specifies how many DoH concurrent queries are allowed.
	DohMaxConcurrentQueries pulumi.IntPtrInput
	// Specifies how many concurrent connections to the DoH server are allowed.
	DohMaxServerConnections pulumi.IntPtrInput
	// Specifies how long to wait for query response from the DoH server.
	DohTimeout pulumi.StringPtrInput
	// Specifies how much concurrent queries are allowed. *Default: 100*
	MaxConcurrentQueries pulumi.IntPtrInput
	// Specifies how much concurrent TCP sessions are allowed. *Default: 20*
	MaxConcurrentTcpSessions pulumi.IntPtrInput
	// Maximum size of allowed UDP packet. *Default: 4096*
	MaxUdpPacketSize pulumi.IntPtrInput
	// Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
	QueryServerTimeout pulumi.StringPtrInput
	// Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
	// query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
	QueryTotalTimeout pulumi.StringPtrInput
	// List of DNS server IPv4/IPv6 addresses.
	Servers pulumi.StringPtrInput
	// DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
	// fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
	// on the device.
	UseDohServer pulumi.StringPtrInput
	// DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
	VerifyDohCert pulumi.BoolPtrInput
}

func (ResourceDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceDnsArgs)(nil)).Elem()
}

type ResourceDnsInput interface {
	pulumi.Input

	ToResourceDnsOutput() ResourceDnsOutput
	ToResourceDnsOutputWithContext(ctx context.Context) ResourceDnsOutput
}

func (*ResourceDns) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDns)(nil)).Elem()
}

func (i *ResourceDns) ToResourceDnsOutput() ResourceDnsOutput {
	return i.ToResourceDnsOutputWithContext(context.Background())
}

func (i *ResourceDns) ToResourceDnsOutputWithContext(ctx context.Context) ResourceDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDnsOutput)
}

// ResourceDnsArrayInput is an input type that accepts ResourceDnsArray and ResourceDnsArrayOutput values.
// You can construct a concrete instance of `ResourceDnsArrayInput` via:
//
//	ResourceDnsArray{ ResourceDnsArgs{...} }
type ResourceDnsArrayInput interface {
	pulumi.Input

	ToResourceDnsArrayOutput() ResourceDnsArrayOutput
	ToResourceDnsArrayOutputWithContext(context.Context) ResourceDnsArrayOutput
}

type ResourceDnsArray []ResourceDnsInput

func (ResourceDnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceDns)(nil)).Elem()
}

func (i ResourceDnsArray) ToResourceDnsArrayOutput() ResourceDnsArrayOutput {
	return i.ToResourceDnsArrayOutputWithContext(context.Background())
}

func (i ResourceDnsArray) ToResourceDnsArrayOutputWithContext(ctx context.Context) ResourceDnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDnsArrayOutput)
}

// ResourceDnsMapInput is an input type that accepts ResourceDnsMap and ResourceDnsMapOutput values.
// You can construct a concrete instance of `ResourceDnsMapInput` via:
//
//	ResourceDnsMap{ "key": ResourceDnsArgs{...} }
type ResourceDnsMapInput interface {
	pulumi.Input

	ToResourceDnsMapOutput() ResourceDnsMapOutput
	ToResourceDnsMapOutputWithContext(context.Context) ResourceDnsMapOutput
}

type ResourceDnsMap map[string]ResourceDnsInput

func (ResourceDnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceDns)(nil)).Elem()
}

func (i ResourceDnsMap) ToResourceDnsMapOutput() ResourceDnsMapOutput {
	return i.ToResourceDnsMapOutputWithContext(context.Background())
}

func (i ResourceDnsMap) ToResourceDnsMapOutputWithContext(ctx context.Context) ResourceDnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDnsMapOutput)
}

type ResourceDnsOutput struct{ *pulumi.OutputState }

func (ResourceDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDns)(nil)).Elem()
}

func (o ResourceDnsOutput) ToResourceDnsOutput() ResourceDnsOutput {
	return o
}

func (o ResourceDnsOutput) ToResourceDnsOutputWithContext(ctx context.Context) ResourceDnsOutput {
	return o
}

// <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
func (o ResourceDnsOutput) ___id_() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.IntPtrOutput { return v.___id_ }).(pulumi.IntPtrOutput)
}

// <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
func (o ResourceDnsOutput) ___path_() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.StringPtrOutput { return v.___path_ }).(pulumi.StringPtrOutput)
}

// Specifies whether to allow network requests.
func (o ResourceDnsOutput) AllowRemoteRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.BoolPtrOutput { return v.AllowRemoteRequests }).(pulumi.BoolPtrOutput)
}

// Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
// time. Shorter TTL received from DNS servers are respected. *Default: 1w*
func (o ResourceDnsOutput) CacheMaxTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.StringOutput { return v.CacheMaxTtl }).(pulumi.StringOutput)
}

// Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
func (o ResourceDnsOutput) CacheSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.IntOutput { return v.CacheSize }).(pulumi.IntOutput)
}

// Shows the currently used cache size in KiB.
func (o ResourceDnsOutput) CacheUsed() pulumi.IntOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.IntOutput { return v.CacheUsed }).(pulumi.IntOutput)
}

// Specifies how many DoH concurrent queries are allowed.
func (o ResourceDnsOutput) DohMaxConcurrentQueries() pulumi.IntOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.IntOutput { return v.DohMaxConcurrentQueries }).(pulumi.IntOutput)
}

// Specifies how many concurrent connections to the DoH server are allowed.
func (o ResourceDnsOutput) DohMaxServerConnections() pulumi.IntOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.IntOutput { return v.DohMaxServerConnections }).(pulumi.IntOutput)
}

// Specifies how long to wait for query response from the DoH server.
func (o ResourceDnsOutput) DohTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.StringOutput { return v.DohTimeout }).(pulumi.StringOutput)
}

// List of dynamically added DNS server from different services, for example, DHCP.
func (o ResourceDnsOutput) DynamicServers() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.StringOutput { return v.DynamicServers }).(pulumi.StringOutput)
}

// Specifies how much concurrent queries are allowed. *Default: 100*
func (o ResourceDnsOutput) MaxConcurrentQueries() pulumi.IntOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.IntOutput { return v.MaxConcurrentQueries }).(pulumi.IntOutput)
}

// Specifies how much concurrent TCP sessions are allowed. *Default: 20*
func (o ResourceDnsOutput) MaxConcurrentTcpSessions() pulumi.IntOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.IntOutput { return v.MaxConcurrentTcpSessions }).(pulumi.IntOutput)
}

// Maximum size of allowed UDP packet. *Default: 4096*
func (o ResourceDnsOutput) MaxUdpPacketSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.IntOutput { return v.MaxUdpPacketSize }).(pulumi.IntOutput)
}

// Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
func (o ResourceDnsOutput) QueryServerTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.StringOutput { return v.QueryServerTimeout }).(pulumi.StringOutput)
}

// Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
// query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
func (o ResourceDnsOutput) QueryTotalTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.StringOutput { return v.QueryTotalTimeout }).(pulumi.StringOutput)
}

// List of DNS server IPv4/IPv6 addresses.
func (o ResourceDnsOutput) Servers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.StringPtrOutput { return v.Servers }).(pulumi.StringPtrOutput)
}

// DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
// fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
// on the device.
func (o ResourceDnsOutput) UseDohServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.StringPtrOutput { return v.UseDohServer }).(pulumi.StringPtrOutput)
}

// DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
func (o ResourceDnsOutput) VerifyDohCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceDns) pulumi.BoolPtrOutput { return v.VerifyDohCert }).(pulumi.BoolPtrOutput)
}

type ResourceDnsArrayOutput struct{ *pulumi.OutputState }

func (ResourceDnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceDns)(nil)).Elem()
}

func (o ResourceDnsArrayOutput) ToResourceDnsArrayOutput() ResourceDnsArrayOutput {
	return o
}

func (o ResourceDnsArrayOutput) ToResourceDnsArrayOutputWithContext(ctx context.Context) ResourceDnsArrayOutput {
	return o
}

func (o ResourceDnsArrayOutput) Index(i pulumi.IntInput) ResourceDnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceDns {
		return vs[0].([]*ResourceDns)[vs[1].(int)]
	}).(ResourceDnsOutput)
}

type ResourceDnsMapOutput struct{ *pulumi.OutputState }

func (ResourceDnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceDns)(nil)).Elem()
}

func (o ResourceDnsMapOutput) ToResourceDnsMapOutput() ResourceDnsMapOutput {
	return o
}

func (o ResourceDnsMapOutput) ToResourceDnsMapOutputWithContext(ctx context.Context) ResourceDnsMapOutput {
	return o
}

func (o ResourceDnsMapOutput) MapIndex(k pulumi.StringInput) ResourceDnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceDns {
		return vs[0].(map[string]*ResourceDns)[vs[1].(string)]
	}).(ResourceDnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDnsInput)(nil)).Elem(), &ResourceDns{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDnsArrayInput)(nil)).Elem(), ResourceDnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDnsMapInput)(nil)).Elem(), ResourceDnsMap{})
	pulumi.RegisterOutputType(ResourceDnsOutput{})
	pulumi.RegisterOutputType(ResourceDnsArrayOutput{})
	pulumi.RegisterOutputType(ResourceDnsMapOutput{})
}
