// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as routeros from "@pulumi/routeros";
 *
 * const aRoute = new routeros.ipv6.Route("aRoute", {
 *     dstAddress: "::/0",
 *     gateway: "2001:DB8:1000::1",
 * });
 * ```
 *
 * ## Import
 *
 * #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ipv6/route get [print show-ids]]
 *
 * ```sh
 *  $ pulumi import routeros:Ipv6/route:Route a_route "*0"
 * ```
 */
export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:Ipv6/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
     */
    public /*out*/ readonly active!: pulumi.Output<boolean>;
    /**
     * It's a blackhole route.
     */
    public readonly blackhole!: pulumi.Output<boolean | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Value used in route selection. Routes with smaller distance value are given preference.
     */
    public readonly distance!: pulumi.Output<number | undefined>;
    /**
     * IP prefix of route, specifies destination addresses that this route can be used for.
     */
    public readonly dstAddress!: pulumi.Output<string>;
    /**
     * Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
     */
    public /*out*/ readonly dynamic!: pulumi.Output<boolean>;
    /**
     * A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
     */
    public /*out*/ readonly ecmp!: pulumi.Output<boolean>;
    /**
     * Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * Indicates whether the route is eligible to be hardware offloaded on supported hardware.
     */
    public /*out*/ readonly hwOffloaded!: pulumi.Output<boolean>;
    /**
     * Shows actual (resolved) gateway and interface that will be used for packet forwarding.
     */
    public /*out*/ readonly immediateGw!: pulumi.Output<string>;
    public /*out*/ readonly inactive!: pulumi.Output<boolean>;
    /**
     * Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
     */
    public readonly prefSrc!: pulumi.Output<string | undefined>;
    /**
     * Routing table this route belongs to.
     */
    public readonly routingTable!: pulumi.Output<string | undefined>;
    /**
     * Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
     */
    public readonly scope!: pulumi.Output<number | undefined>;
    public /*out*/ readonly static!: pulumi.Output<boolean>;
    public /*out*/ readonly suppressHwOffload!: pulumi.Output<boolean>;
    /**
     * Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
     */
    public readonly targetScope!: pulumi.Output<number | undefined>;
    /**
     * VRF interface name.
     */
    public readonly vrfInterface!: pulumi.Output<string>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["blackhole"] = state ? state.blackhole : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["dstAddress"] = state ? state.dstAddress : undefined;
            resourceInputs["dynamic"] = state ? state.dynamic : undefined;
            resourceInputs["ecmp"] = state ? state.ecmp : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["hwOffloaded"] = state ? state.hwOffloaded : undefined;
            resourceInputs["immediateGw"] = state ? state.immediateGw : undefined;
            resourceInputs["inactive"] = state ? state.inactive : undefined;
            resourceInputs["prefSrc"] = state ? state.prefSrc : undefined;
            resourceInputs["routingTable"] = state ? state.routingTable : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["static"] = state ? state.static : undefined;
            resourceInputs["suppressHwOffload"] = state ? state.suppressHwOffload : undefined;
            resourceInputs["targetScope"] = state ? state.targetScope : undefined;
            resourceInputs["vrfInterface"] = state ? state.vrfInterface : undefined;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if ((!args || args.dstAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstAddress'");
            }
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["blackhole"] = args ? args.blackhole : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["dstAddress"] = args ? args.dstAddress : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["prefSrc"] = args ? args.prefSrc : undefined;
            resourceInputs["routingTable"] = args ? args.routingTable : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["targetScope"] = args ? args.targetScope : undefined;
            resourceInputs["vrfInterface"] = args ? args.vrfInterface : undefined;
            resourceInputs["active"] = undefined /*out*/;
            resourceInputs["dynamic"] = undefined /*out*/;
            resourceInputs["ecmp"] = undefined /*out*/;
            resourceInputs["hwOffloaded"] = undefined /*out*/;
            resourceInputs["immediateGw"] = undefined /*out*/;
            resourceInputs["inactive"] = undefined /*out*/;
            resourceInputs["static"] = undefined /*out*/;
            resourceInputs["suppressHwOffload"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
     */
    active?: pulumi.Input<boolean>;
    /**
     * It's a blackhole route.
     */
    blackhole?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Value used in route selection. Routes with smaller distance value are given preference.
     */
    distance?: pulumi.Input<number>;
    /**
     * IP prefix of route, specifies destination addresses that this route can be used for.
     */
    dstAddress?: pulumi.Input<string>;
    /**
     * Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
     */
    dynamic?: pulumi.Input<boolean>;
    /**
     * A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
     */
    ecmp?: pulumi.Input<boolean>;
    /**
     * Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
     */
    gateway?: pulumi.Input<string>;
    /**
     * Indicates whether the route is eligible to be hardware offloaded on supported hardware.
     */
    hwOffloaded?: pulumi.Input<boolean>;
    /**
     * Shows actual (resolved) gateway and interface that will be used for packet forwarding.
     */
    immediateGw?: pulumi.Input<string>;
    inactive?: pulumi.Input<boolean>;
    /**
     * Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
     */
    prefSrc?: pulumi.Input<string>;
    /**
     * Routing table this route belongs to.
     */
    routingTable?: pulumi.Input<string>;
    /**
     * Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
     */
    scope?: pulumi.Input<number>;
    static?: pulumi.Input<boolean>;
    suppressHwOffload?: pulumi.Input<boolean>;
    /**
     * Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
     */
    targetScope?: pulumi.Input<number>;
    /**
     * VRF interface name.
     */
    vrfInterface?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * It's a blackhole route.
     */
    blackhole?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Value used in route selection. Routes with smaller distance value are given preference.
     */
    distance?: pulumi.Input<number>;
    /**
     * IP prefix of route, specifies destination addresses that this route can be used for.
     */
    dstAddress: pulumi.Input<string>;
    /**
     * Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
     */
    gateway: pulumi.Input<string>;
    /**
     * Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
     */
    prefSrc?: pulumi.Input<string>;
    /**
     * Routing table this route belongs to.
     */
    routingTable?: pulumi.Input<string>;
    /**
     * Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
     */
    scope?: pulumi.Input<number>;
    /**
     * Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
     */
    targetScope?: pulumi.Input<number>;
    /**
     * VRF interface name.
     */
    vrfInterface?: pulumi.Input<string>;
}
