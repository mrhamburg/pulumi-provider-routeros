// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AaaArgs, AaaState } from "./aaa";
export type Aaa = import("./aaa").Aaa;
export const Aaa: typeof import("./aaa").Aaa = null as any;
utilities.lazyLoad(exports, ["Aaa"], () => require("./aaa"));

export { ChannelArgs, ChannelState } from "./channel";
export type Channel = import("./channel").Channel;
export const Channel: typeof import("./channel").Channel = null as any;
utilities.lazyLoad(exports, ["Channel"], () => require("./channel"));

export { ConfigurationArgs, ConfigurationState } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { DatapathArgs, DatapathState } from "./datapath";
export type Datapath = import("./datapath").Datapath;
export const Datapath: typeof import("./datapath").Datapath = null as any;
utilities.lazyLoad(exports, ["Datapath"], () => require("./datapath"));

export { ManagerArgs, ManagerState } from "./manager";
export type Manager = import("./manager").Manager;
export const Manager: typeof import("./manager").Manager = null as any;
utilities.lazyLoad(exports, ["Manager"], () => require("./manager"));

export { ManagerInterfaceArgs, ManagerInterfaceState } from "./managerInterface";
export type ManagerInterface = import("./managerInterface").ManagerInterface;
export const ManagerInterface: typeof import("./managerInterface").ManagerInterface = null as any;
utilities.lazyLoad(exports, ["ManagerInterface"], () => require("./managerInterface"));

export { ProvisioningArgs, ProvisioningState } from "./provisioning";
export type Provisioning = import("./provisioning").Provisioning;
export const Provisioning: typeof import("./provisioning").Provisioning = null as any;
utilities.lazyLoad(exports, ["Provisioning"], () => require("./provisioning"));

export { RatesArgs, RatesState } from "./rates";
export type Rates = import("./rates").Rates;
export const Rates: typeof import("./rates").Rates = null as any;
utilities.lazyLoad(exports, ["Rates"], () => require("./rates"));

export { SecurityArgs, SecurityState } from "./security";
export type Security = import("./security").Security;
export const Security: typeof import("./security").Security = null as any;
utilities.lazyLoad(exports, ["Security"], () => require("./security"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "routeros:CapsMan/aaa:Aaa":
                return new Aaa(name, <any>undefined, { urn })
            case "routeros:CapsMan/channel:Channel":
                return new Channel(name, <any>undefined, { urn })
            case "routeros:CapsMan/configuration:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "routeros:CapsMan/datapath:Datapath":
                return new Datapath(name, <any>undefined, { urn })
            case "routeros:CapsMan/manager:Manager":
                return new Manager(name, <any>undefined, { urn })
            case "routeros:CapsMan/managerInterface:ManagerInterface":
                return new ManagerInterface(name, <any>undefined, { urn })
            case "routeros:CapsMan/provisioning:Provisioning":
                return new Provisioning(name, <any>undefined, { urn })
            case "routeros:CapsMan/rates:Rates":
                return new Rates(name, <any>undefined, { urn })
            case "routeros:CapsMan/security:Security":
                return new Security(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("routeros", "CapsMan/aaa", _module)
pulumi.runtime.registerResourceModule("routeros", "CapsMan/channel", _module)
pulumi.runtime.registerResourceModule("routeros", "CapsMan/configuration", _module)
pulumi.runtime.registerResourceModule("routeros", "CapsMan/datapath", _module)
pulumi.runtime.registerResourceModule("routeros", "CapsMan/manager", _module)
pulumi.runtime.registerResourceModule("routeros", "CapsMan/managerInterface", _module)
pulumi.runtime.registerResourceModule("routeros", "CapsMan/provisioning", _module)
pulumi.runtime.registerResourceModule("routeros", "CapsMan/rates", _module)
pulumi.runtime.registerResourceModule("routeros", "CapsMan/security", _module)
