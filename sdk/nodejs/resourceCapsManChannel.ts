// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as routeros from "@pulumi/routeros";
 *
 * const testChannel = new routeros.ResourceCapsManChannel("testChannel", {
 *     band: "2ghz-b/g/n",
 *     comment: "test_channel",
 *     controlChannelWidth: "10mhz",
 *     extensionChannel: "eCee",
 *     frequency: 2412,
 *     reselectInterval: "1h",
 *     saveSelected: true,
 *     secondaryFrequency: "disabled",
 *     skipDfsChannels: true,
 *     txPower: 20,
 * });
 * ```
 *
 * ## Import
 *
 * Import with the name of the CAPsMAN channel configuration in case of the example use test-channel-config
 *
 * ```sh
 *  $ pulumi import routeros:index/resourceCapsManChannel:ResourceCapsManChannel test_channel test-channel-config
 * ```
 */
export class ResourceCapsManChannel extends pulumi.CustomResource {
    /**
     * Get an existing ResourceCapsManChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceCapsManChannelState, opts?: pulumi.CustomResourceOptions): ResourceCapsManChannel {
        return new ResourceCapsManChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/resourceCapsManChannel:ResourceCapsManChannel';

    /**
     * Returns true if the given object is an instance of ResourceCapsManChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceCapsManChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceCapsManChannel.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Define operational radio frequency band and mode taken from hardware capability of wireless card.
     */
    public readonly band!: pulumi.Output<string | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Control channel width.
     */
    public readonly controlChannelWidth!: pulumi.Output<string | undefined>;
    /**
     * Extension channel configuration. (E.g. Ce = extension channel is above Control channel, eC = extension channel is below Control channel)
     */
    public readonly extensionChannel!: pulumi.Output<string | undefined>;
    /**
     * Channel frequency value in MHz on which AP will operate. If left blank, CAPsMAN will automatically determine the best frequency that is least occupied.
     */
    public readonly frequency!: pulumi.Output<number>;
    /**
     * Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
     * resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
     * integrity for that resource!
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The interval after which the least occupied frequency is chosen, can be defined as a random interval, ex. as '30m..60m'. Works only if channel.frequency is left blank.
     */
    public readonly reselectInterval!: pulumi.Output<string | undefined>;
    /**
     * If channel frequency is chosen automatically and channel.reselect-interval is used, then saves the last picked frequency.
     */
    public readonly saveSelected!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the second frequency that will be used for 80+80MHz configuration. Set it to Disabled in order to disable 80+80MHz capability.
     */
    public readonly secondaryFrequency!: pulumi.Output<string | undefined>;
    /**
     * If channel.frequency is left blank, the selection will skip DFS channels.
     */
    public readonly skipDfsChannels!: pulumi.Output<boolean | undefined>;
    /**
     * TX  Power for CAP interface (for the whole interface not for individual  chains) in dBm. It is not possible to set higher than allowed by country  regulations or interface. By default max allowed by country or  interface is used.
     */
    public readonly txPower!: pulumi.Output<number | undefined>;
    /**
     * Channel Width in MHz.
     */
    public readonly width!: pulumi.Output<string | undefined>;

    /**
     * Create a ResourceCapsManChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResourceCapsManChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceCapsManChannelArgs | ResourceCapsManChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceCapsManChannelState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["band"] = state ? state.band : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["controlChannelWidth"] = state ? state.controlChannelWidth : undefined;
            resourceInputs["extensionChannel"] = state ? state.extensionChannel : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reselectInterval"] = state ? state.reselectInterval : undefined;
            resourceInputs["saveSelected"] = state ? state.saveSelected : undefined;
            resourceInputs["secondaryFrequency"] = state ? state.secondaryFrequency : undefined;
            resourceInputs["skipDfsChannels"] = state ? state.skipDfsChannels : undefined;
            resourceInputs["txPower"] = state ? state.txPower : undefined;
            resourceInputs["width"] = state ? state.width : undefined;
        } else {
            const args = argsOrState as ResourceCapsManChannelArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["band"] = args ? args.band : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["controlChannelWidth"] = args ? args.controlChannelWidth : undefined;
            resourceInputs["extensionChannel"] = args ? args.extensionChannel : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reselectInterval"] = args ? args.reselectInterval : undefined;
            resourceInputs["saveSelected"] = args ? args.saveSelected : undefined;
            resourceInputs["secondaryFrequency"] = args ? args.secondaryFrequency : undefined;
            resourceInputs["skipDfsChannels"] = args ? args.skipDfsChannels : undefined;
            resourceInputs["txPower"] = args ? args.txPower : undefined;
            resourceInputs["width"] = args ? args.width : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceCapsManChannel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceCapsManChannel resources.
 */
export interface ResourceCapsManChannelState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Define operational radio frequency band and mode taken from hardware capability of wireless card.
     */
    band?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * Control channel width.
     */
    controlChannelWidth?: pulumi.Input<string>;
    /**
     * Extension channel configuration. (E.g. Ce = extension channel is above Control channel, eC = extension channel is below Control channel)
     */
    extensionChannel?: pulumi.Input<string>;
    /**
     * Channel frequency value in MHz on which AP will operate. If left blank, CAPsMAN will automatically determine the best frequency that is least occupied.
     */
    frequency?: pulumi.Input<number>;
    /**
     * Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
     * resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
     * integrity for that resource!
     */
    name?: pulumi.Input<string>;
    /**
     * The interval after which the least occupied frequency is chosen, can be defined as a random interval, ex. as '30m..60m'. Works only if channel.frequency is left blank.
     */
    reselectInterval?: pulumi.Input<string>;
    /**
     * If channel frequency is chosen automatically and channel.reselect-interval is used, then saves the last picked frequency.
     */
    saveSelected?: pulumi.Input<boolean>;
    /**
     * Specifies the second frequency that will be used for 80+80MHz configuration. Set it to Disabled in order to disable 80+80MHz capability.
     */
    secondaryFrequency?: pulumi.Input<string>;
    /**
     * If channel.frequency is left blank, the selection will skip DFS channels.
     */
    skipDfsChannels?: pulumi.Input<boolean>;
    /**
     * TX  Power for CAP interface (for the whole interface not for individual  chains) in dBm. It is not possible to set higher than allowed by country  regulations or interface. By default max allowed by country or  interface is used.
     */
    txPower?: pulumi.Input<number>;
    /**
     * Channel Width in MHz.
     */
    width?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceCapsManChannel resource.
 */
export interface ResourceCapsManChannelArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Define operational radio frequency band and mode taken from hardware capability of wireless card.
     */
    band?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * Control channel width.
     */
    controlChannelWidth?: pulumi.Input<string>;
    /**
     * Extension channel configuration. (E.g. Ce = extension channel is above Control channel, eC = extension channel is below Control channel)
     */
    extensionChannel?: pulumi.Input<string>;
    /**
     * Channel frequency value in MHz on which AP will operate. If left blank, CAPsMAN will automatically determine the best frequency that is least occupied.
     */
    frequency?: pulumi.Input<number>;
    /**
     * Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
     * resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
     * integrity for that resource!
     */
    name?: pulumi.Input<string>;
    /**
     * The interval after which the least occupied frequency is chosen, can be defined as a random interval, ex. as '30m..60m'. Works only if channel.frequency is left blank.
     */
    reselectInterval?: pulumi.Input<string>;
    /**
     * If channel frequency is chosen automatically and channel.reselect-interval is used, then saves the last picked frequency.
     */
    saveSelected?: pulumi.Input<boolean>;
    /**
     * Specifies the second frequency that will be used for 80+80MHz configuration. Set it to Disabled in order to disable 80+80MHz capability.
     */
    secondaryFrequency?: pulumi.Input<string>;
    /**
     * If channel.frequency is left blank, the selection will skip DFS channels.
     */
    skipDfsChannels?: pulumi.Input<boolean>;
    /**
     * TX  Power for CAP interface (for the whole interface not for individual  chains) in dBm. It is not possible to set higher than allowed by country  regulations or interface. By default max allowed by country or  interface is used.
     */
    txPower?: pulumi.Input<number>;
    /**
     * Channel Width in MHz.
     */
    width?: pulumi.Input<string>;
}
