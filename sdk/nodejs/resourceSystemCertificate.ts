// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as routeros from "@pulumi/routeros";
 *
 * const rootCa = new routeros.ResourceSystemCertificate("rootCa", {
 *     commonName: "RootCA",
 *     keyUsages: [
 *         "key-cert-sign",
 *         "crl-sign",
 *     ],
 *     trusted: true,
 *     signs: [{}],
 * });
 * // digitalSignature: Used for entity and data origin authentication with integrity.
 * // keyEncipherment:  Used to encrypt symmetric key, which is then transferred to target.
 * // keyAgreement:     Enables use of key agreement to establish symmetric key with target. 
 * const serverCrt = new routeros.ResourceSystemCertificate("serverCrt", {
 *     commonName: "server.crt",
 *     keyUsages: [
 *         "digital-signature",
 *         "key-encipherment",
 *         "tls-server",
 *     ],
 *     signs: [{
 *         ca: rootCa.name,
 *     }],
 * });
 * const clientCrt = new routeros.ResourceSystemCertificate("clientCrt", {
 *     commonName: "client.crt",
 *     keySize: "prime256v1",
 *     keyUsages: [
 *         "digital-signature",
 *         "key-agreement",
 *         "tls-client",
 *     ],
 *     signs: [{
 *         ca: rootCa.name,
 *     }],
 * });
 * const unsignedCrt = new routeros.ResourceSystemCertificate("unsignedCrt", {
 *     commonName: "unsigned.crt",
 *     keySize: "1024",
 *     subjectAltName: "DNS:router.lan,DNS:myrouter.lan,IP:192.168.88.1",
 * });
 * ```
 *
 * ## Import
 *
 * #The ID can be found via API or the terminal #The command for the terminal is -> :put [/certificate get [print show-ids]] #If you plan to manipulate the certificate requiring signing, you need to correctly fill in the sign{} section. #Changes in the sign{} section will not cause changes in the certificate. It's not a bug, it's a feature!
 *
 * ```sh
 *  $ pulumi import routeros:index/resourceSystemCertificate:ResourceSystemCertificate client *9D
 * ```
 */
export class ResourceSystemCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ResourceSystemCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceSystemCertificateState, opts?: pulumi.CustomResourceOptions): ResourceSystemCertificate {
        return new ResourceSystemCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/resourceSystemCertificate:ResourceSystemCertificate';

    /**
     * Returns true if the given object is an instance of ResourceSystemCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceSystemCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceSystemCertificate.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___skip_!: pulumi.Output<string | undefined>;
    /**
     * Authority Key Identifier.
     */
    public /*out*/ readonly akid!: pulumi.Output<string>;
    public /*out*/ readonly authority!: pulumi.Output<string>;
    public /*out*/ readonly ca!: pulumi.Output<string>;
    public /*out*/ readonly caCrlHost!: pulumi.Output<string>;
    public /*out*/ readonly caFingerprint!: pulumi.Output<string>;
    /**
     * Common Name (e.g. server FQDN or YOUR name).
     */
    public readonly commonName!: pulumi.Output<string>;
    public readonly copyFrom!: pulumi.Output<string | undefined>;
    /**
     * Country Name (2 letter code).
     */
    public readonly country!: pulumi.Output<string | undefined>;
    public /*out*/ readonly crl!: pulumi.Output<string>;
    /**
     * Certificate lifetime.
     */
    public readonly daysValid!: pulumi.Output<number>;
    public /*out*/ readonly digestAlgorithm!: pulumi.Output<boolean>;
    public /*out*/ readonly dsa!: pulumi.Output<boolean>;
    /**
     * Set to true if certificate is expired.
     */
    public /*out*/ readonly expired!: pulumi.Output<boolean>;
    public /*out*/ readonly expiresAfter!: pulumi.Output<string>;
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * The date after which certificate wil be invalid.
     */
    public /*out*/ readonly invalidAfter!: pulumi.Output<string>;
    /**
     * The date before which certificate is invalid.
     */
    public /*out*/ readonly invalidBefore!: pulumi.Output<string>;
    public /*out*/ readonly issued!: pulumi.Output<string>;
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    public readonly keySize!: pulumi.Output<string>;
    public /*out*/ readonly keyType!: pulumi.Output<string>;
    /**
     * Detailed key usage descriptions can be found in RFC 5280.
     */
    public readonly keyUsages!: pulumi.Output<string[]>;
    /**
     * Locality Name (eg, city).
     */
    public readonly locality!: pulumi.Output<string | undefined>;
    /**
     * Name of the certificate. Name can be edited.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Organizational Unit Name (eg, section)
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateKey!: pulumi.Output<boolean>;
    public /*out*/ readonly reqFingerprint!: pulumi.Output<string>;
    public /*out*/ readonly revoked!: pulumi.Output<string>;
    public /*out*/ readonly scepUrl!: pulumi.Output<string>;
    public /*out*/ readonly serialNumber!: pulumi.Output<string>;
    public readonly signs!: pulumi.Output<outputs.ResourceSystemCertificateSign[] | undefined>;
    /**
     * Subject Key Identifier.
     */
    public /*out*/ readonly skid!: pulumi.Output<string>;
    public /*out*/ readonly smartCardKey!: pulumi.Output<string>;
    /**
     * State or Province Name (full name).
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * Shows current status of scep client.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * SANs (subject alternative names).
     */
    public readonly subjectAltName!: pulumi.Output<string | undefined>;
    /**
     * If set to yes certificate is included 'in trusted certificate chain'.
     */
    public readonly trusted!: pulumi.Output<boolean | undefined>;
    /**
     * Organizational Unit Name (eg, section).
     */
    public readonly unit!: pulumi.Output<string | undefined>;

    /**
     * Create a ResourceSystemCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceSystemCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceSystemCertificateArgs | ResourceSystemCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceSystemCertificateState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["___skip_"] = state ? state.___skip_ : undefined;
            resourceInputs["akid"] = state ? state.akid : undefined;
            resourceInputs["authority"] = state ? state.authority : undefined;
            resourceInputs["ca"] = state ? state.ca : undefined;
            resourceInputs["caCrlHost"] = state ? state.caCrlHost : undefined;
            resourceInputs["caFingerprint"] = state ? state.caFingerprint : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["copyFrom"] = state ? state.copyFrom : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["crl"] = state ? state.crl : undefined;
            resourceInputs["daysValid"] = state ? state.daysValid : undefined;
            resourceInputs["digestAlgorithm"] = state ? state.digestAlgorithm : undefined;
            resourceInputs["dsa"] = state ? state.dsa : undefined;
            resourceInputs["expired"] = state ? state.expired : undefined;
            resourceInputs["expiresAfter"] = state ? state.expiresAfter : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["invalidAfter"] = state ? state.invalidAfter : undefined;
            resourceInputs["invalidBefore"] = state ? state.invalidBefore : undefined;
            resourceInputs["issued"] = state ? state.issued : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["keyUsages"] = state ? state.keyUsages : undefined;
            resourceInputs["locality"] = state ? state.locality : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["reqFingerprint"] = state ? state.reqFingerprint : undefined;
            resourceInputs["revoked"] = state ? state.revoked : undefined;
            resourceInputs["scepUrl"] = state ? state.scepUrl : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["signs"] = state ? state.signs : undefined;
            resourceInputs["skid"] = state ? state.skid : undefined;
            resourceInputs["smartCardKey"] = state ? state.smartCardKey : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectAltName"] = state ? state.subjectAltName : undefined;
            resourceInputs["trusted"] = state ? state.trusted : undefined;
            resourceInputs["unit"] = state ? state.unit : undefined;
        } else {
            const args = argsOrState as ResourceSystemCertificateArgs | undefined;
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["___skip_"] = args ? args.___skip_ : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["copyFrom"] = args ? args.copyFrom : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["daysValid"] = args ? args.daysValid : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["keyUsages"] = args ? args.keyUsages : undefined;
            resourceInputs["locality"] = args ? args.locality : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["signs"] = args ? args.signs : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["subjectAltName"] = args ? args.subjectAltName : undefined;
            resourceInputs["trusted"] = args ? args.trusted : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["akid"] = undefined /*out*/;
            resourceInputs["authority"] = undefined /*out*/;
            resourceInputs["ca"] = undefined /*out*/;
            resourceInputs["caCrlHost"] = undefined /*out*/;
            resourceInputs["caFingerprint"] = undefined /*out*/;
            resourceInputs["crl"] = undefined /*out*/;
            resourceInputs["digestAlgorithm"] = undefined /*out*/;
            resourceInputs["dsa"] = undefined /*out*/;
            resourceInputs["expired"] = undefined /*out*/;
            resourceInputs["expiresAfter"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["invalidAfter"] = undefined /*out*/;
            resourceInputs["invalidBefore"] = undefined /*out*/;
            resourceInputs["issued"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["keyType"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["reqFingerprint"] = undefined /*out*/;
            resourceInputs["revoked"] = undefined /*out*/;
            resourceInputs["scepUrl"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["skid"] = undefined /*out*/;
            resourceInputs["smartCardKey"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceSystemCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceSystemCertificate resources.
 */
export interface ResourceSystemCertificateState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * Authority Key Identifier.
     */
    akid?: pulumi.Input<string>;
    authority?: pulumi.Input<string>;
    ca?: pulumi.Input<string>;
    caCrlHost?: pulumi.Input<string>;
    caFingerprint?: pulumi.Input<string>;
    /**
     * Common Name (e.g. server FQDN or YOUR name).
     */
    commonName?: pulumi.Input<string>;
    copyFrom?: pulumi.Input<string>;
    /**
     * Country Name (2 letter code).
     */
    country?: pulumi.Input<string>;
    crl?: pulumi.Input<string>;
    /**
     * Certificate lifetime.
     */
    daysValid?: pulumi.Input<number>;
    digestAlgorithm?: pulumi.Input<boolean>;
    dsa?: pulumi.Input<boolean>;
    /**
     * Set to true if certificate is expired.
     */
    expired?: pulumi.Input<boolean>;
    expiresAfter?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    /**
     * The date after which certificate wil be invalid.
     */
    invalidAfter?: pulumi.Input<string>;
    /**
     * The date before which certificate is invalid.
     */
    invalidBefore?: pulumi.Input<string>;
    issued?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    keySize?: pulumi.Input<string>;
    keyType?: pulumi.Input<string>;
    /**
     * Detailed key usage descriptions can be found in RFC 5280.
     */
    keyUsages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Locality Name (eg, city).
     */
    locality?: pulumi.Input<string>;
    /**
     * Name of the certificate. Name can be edited.
     */
    name?: pulumi.Input<string>;
    /**
     * Organizational Unit Name (eg, section)
     */
    organization?: pulumi.Input<string>;
    privateKey?: pulumi.Input<boolean>;
    reqFingerprint?: pulumi.Input<string>;
    revoked?: pulumi.Input<string>;
    scepUrl?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    signs?: pulumi.Input<pulumi.Input<inputs.ResourceSystemCertificateSign>[]>;
    /**
     * Subject Key Identifier.
     */
    skid?: pulumi.Input<string>;
    smartCardKey?: pulumi.Input<string>;
    /**
     * State or Province Name (full name).
     */
    state?: pulumi.Input<string>;
    /**
     * Shows current status of scep client.
     */
    status?: pulumi.Input<string>;
    /**
     * SANs (subject alternative names).
     */
    subjectAltName?: pulumi.Input<string>;
    /**
     * If set to yes certificate is included 'in trusted certificate chain'.
     */
    trusted?: pulumi.Input<boolean>;
    /**
     * Organizational Unit Name (eg, section).
     */
    unit?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceSystemCertificate resource.
 */
export interface ResourceSystemCertificateArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * Common Name (e.g. server FQDN or YOUR name).
     */
    commonName: pulumi.Input<string>;
    copyFrom?: pulumi.Input<string>;
    /**
     * Country Name (2 letter code).
     */
    country?: pulumi.Input<string>;
    /**
     * Certificate lifetime.
     */
    daysValid?: pulumi.Input<number>;
    keySize?: pulumi.Input<string>;
    /**
     * Detailed key usage descriptions can be found in RFC 5280.
     */
    keyUsages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Locality Name (eg, city).
     */
    locality?: pulumi.Input<string>;
    /**
     * Name of the certificate. Name can be edited.
     */
    name?: pulumi.Input<string>;
    /**
     * Organizational Unit Name (eg, section)
     */
    organization?: pulumi.Input<string>;
    signs?: pulumi.Input<pulumi.Input<inputs.ResourceSystemCertificateSign>[]>;
    /**
     * State or Province Name (full name).
     */
    state?: pulumi.Input<string>;
    /**
     * SANs (subject alternative names).
     */
    subjectAltName?: pulumi.Input<string>;
    /**
     * If set to yes certificate is included 'in trusted certificate chain'.
     */
    trusted?: pulumi.Input<boolean>;
    /**
     * Organizational Unit Name (eg, section).
     */
    unit?: pulumi.Input<string>;
}
