// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the routeros package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'routeros';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }

    /**
     * Path to MikroTik's certificate authority file.
     */
    public readonly caCertificate!: pulumi.Output<string | undefined>;
    /**
     * URL of the MikroTik router, default is TLS connection to REST. * API: api[s]://host[:port] * api://router.local *
     * apis://router.local:8729 * REST: https://host * https://router.local * router.local * 127.0.0.1 export
     * ROS_HOSTURL=router.local or export MIKROTIK_HOST=router.local
     */
    public readonly hosturl!: pulumi.Output<string | undefined>;
    /**
     * Password for the MikroTik user.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Username for the MikroTik WEB/Winbox. export ROS_USERNAME=admin or export MIKROTIK_USER=admin
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["caCertificate"] = (args?.caCertificate ? pulumi.secret(args.caCertificate) : undefined) ?? utilities.getEnv("ROS_CA_CERTIFICATE");
            resourceInputs["hosturl"] = (args ? args.hosturl : undefined) ?? utilities.getEnv("ROS_HOSTURL");
            resourceInputs["insecure"] = pulumi.output((args ? args.insecure : undefined) ?? utilities.getEnvBoolean("ROS_INSECURE")).apply(JSON.stringify);
            resourceInputs["password"] = (args?.password ? pulumi.secret(args.password) : undefined) ?? utilities.getEnv("ROS_PASSWORD");
            resourceInputs["username"] = (args ? args.username : undefined) ?? utilities.getEnv("ROS_USERNAME");
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCertificate", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Path to MikroTik's certificate authority file.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * URL of the MikroTik router, default is TLS connection to REST. * API: api[s]://host[:port] * api://router.local *
     * apis://router.local:8729 * REST: https://host * https://router.local * router.local * 127.0.0.1 export
     * ROS_HOSTURL=router.local or export MIKROTIK_HOST=router.local
     */
    hosturl?: pulumi.Input<string>;
    /**
     * Whether to verify the SSL certificate or not.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * Password for the MikroTik user.
     */
    password?: pulumi.Input<string>;
    /**
     * Username for the MikroTik WEB/Winbox. export ROS_USERNAME=admin or export MIKROTIK_USER=admin
     */
    username?: pulumi.Input<string>;
}
