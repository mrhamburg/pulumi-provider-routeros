// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as routeros from "@pulumi/routeros";
 *
 * const client = new routeros.ResourceDhcpClient("client", {"interface": "bridge"});
 * ```
 *
 * ## Import
 *
 * #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/dhcp-client get [print show-ids]]
 *
 * ```sh
 *  $ pulumi import routeros:index/resourceDhcpClient:ResourceDhcpClient client "*0"
 * ```
 */
export class ResourceDhcpClient extends pulumi.CustomResource {
    /**
     * Get an existing ResourceDhcpClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceDhcpClientState, opts?: pulumi.CustomResourceOptions): ResourceDhcpClient {
        return new ResourceDhcpClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/resourceDhcpClient:ResourceDhcpClient';

    /**
     * Returns true if the given object is an instance of ResourceDhcpClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceDhcpClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceDhcpClient.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Whether to install default route in routing table received from DHCP server.
     */
    public readonly addDefaultRoute!: pulumi.Output<string>;
    /**
     * IP address and netmask, which is assigned to DHCP Client from the Server.
     */
    public /*out*/ readonly address!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Distance of default route. Applicable if add-default-route is set to yes.
     */
    public readonly defaultRouteDistance!: pulumi.Output<number | undefined>;
    /**
     * Options that are sent to the DHCP server.
     */
    public readonly dhcpOptions!: pulumi.Output<string | undefined>;
    /**
     * The IP address of the DHCP server.
     */
    public /*out*/ readonly dhcpServer!: pulumi.Output<string>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
     */
    public /*out*/ readonly dynamic!: pulumi.Output<boolean>;
    /**
     * A time when the lease expires (specified by the DHCP server).
     */
    public /*out*/ readonly expiresAfter!: pulumi.Output<string>;
    /**
     * The IP address of the gateway which is assigned by DHCP server.
     */
    public /*out*/ readonly gateway!: pulumi.Output<string>;
    /**
     * Name of the interface.
     */
    public readonly interface!: pulumi.Output<string>;
    public /*out*/ readonly invalid!: pulumi.Output<boolean>;
    /**
     * The IP address of the first DNS resolver, that was assigned by the DHCP server.
     */
    public /*out*/ readonly primaryDns!: pulumi.Output<string>;
    /**
     * The IP address of the primary NTP server, assigned by the DHCP server.
     */
    public /*out*/ readonly primaryNtp!: pulumi.Output<string>;
    /**
     * The IP address of the second DNS resolver, assigned by the DHCP server.
     */
    public /*out*/ readonly secondaryDns!: pulumi.Output<string>;
    /**
     * The IP address of the secondary NTP server, assigned by the DHCP server.
     */
    public /*out*/ readonly secondaryNtp!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
     */
    public readonly usePeerDns!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
     */
    public readonly usePeerNtp!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ResourceDhcpClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceDhcpClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceDhcpClientArgs | ResourceDhcpClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceDhcpClientState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["addDefaultRoute"] = state ? state.addDefaultRoute : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["defaultRouteDistance"] = state ? state.defaultRouteDistance : undefined;
            resourceInputs["dhcpOptions"] = state ? state.dhcpOptions : undefined;
            resourceInputs["dhcpServer"] = state ? state.dhcpServer : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dynamic"] = state ? state.dynamic : undefined;
            resourceInputs["expiresAfter"] = state ? state.expiresAfter : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["invalid"] = state ? state.invalid : undefined;
            resourceInputs["primaryDns"] = state ? state.primaryDns : undefined;
            resourceInputs["primaryNtp"] = state ? state.primaryNtp : undefined;
            resourceInputs["secondaryDns"] = state ? state.secondaryDns : undefined;
            resourceInputs["secondaryNtp"] = state ? state.secondaryNtp : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["usePeerDns"] = state ? state.usePeerDns : undefined;
            resourceInputs["usePeerNtp"] = state ? state.usePeerNtp : undefined;
        } else {
            const args = argsOrState as ResourceDhcpClientArgs | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["addDefaultRoute"] = args ? args.addDefaultRoute : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["defaultRouteDistance"] = args ? args.defaultRouteDistance : undefined;
            resourceInputs["dhcpOptions"] = args ? args.dhcpOptions : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["usePeerDns"] = args ? args.usePeerDns : undefined;
            resourceInputs["usePeerNtp"] = args ? args.usePeerNtp : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["dhcpServer"] = undefined /*out*/;
            resourceInputs["dynamic"] = undefined /*out*/;
            resourceInputs["expiresAfter"] = undefined /*out*/;
            resourceInputs["gateway"] = undefined /*out*/;
            resourceInputs["invalid"] = undefined /*out*/;
            resourceInputs["primaryDns"] = undefined /*out*/;
            resourceInputs["primaryNtp"] = undefined /*out*/;
            resourceInputs["secondaryDns"] = undefined /*out*/;
            resourceInputs["secondaryNtp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceDhcpClient.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceDhcpClient resources.
 */
export interface ResourceDhcpClientState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Whether to install default route in routing table received from DHCP server.
     */
    addDefaultRoute?: pulumi.Input<string>;
    /**
     * IP address and netmask, which is assigned to DHCP Client from the Server.
     */
    address?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * Distance of default route. Applicable if add-default-route is set to yes.
     */
    defaultRouteDistance?: pulumi.Input<number>;
    /**
     * Options that are sent to the DHCP server.
     */
    dhcpOptions?: pulumi.Input<string>;
    /**
     * The IP address of the DHCP server.
     */
    dhcpServer?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
     */
    dynamic?: pulumi.Input<boolean>;
    /**
     * A time when the lease expires (specified by the DHCP server).
     */
    expiresAfter?: pulumi.Input<string>;
    /**
     * The IP address of the gateway which is assigned by DHCP server.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Name of the interface.
     */
    interface?: pulumi.Input<string>;
    invalid?: pulumi.Input<boolean>;
    /**
     * The IP address of the first DNS resolver, that was assigned by the DHCP server.
     */
    primaryDns?: pulumi.Input<string>;
    /**
     * The IP address of the primary NTP server, assigned by the DHCP server.
     */
    primaryNtp?: pulumi.Input<string>;
    /**
     * The IP address of the second DNS resolver, assigned by the DHCP server.
     */
    secondaryDns?: pulumi.Input<string>;
    /**
     * The IP address of the secondary NTP server, assigned by the DHCP server.
     */
    secondaryNtp?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    /**
     * Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
     */
    usePeerDns?: pulumi.Input<boolean>;
    /**
     * Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
     */
    usePeerNtp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ResourceDhcpClient resource.
 */
export interface ResourceDhcpClientArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Whether to install default route in routing table received from DHCP server.
     */
    addDefaultRoute?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * Distance of default route. Applicable if add-default-route is set to yes.
     */
    defaultRouteDistance?: pulumi.Input<number>;
    /**
     * Options that are sent to the DHCP server.
     */
    dhcpOptions?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Name of the interface.
     */
    interface: pulumi.Input<string>;
    /**
     * Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
     */
    usePeerDns?: pulumi.Input<boolean>;
    /**
     * Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
     */
    usePeerNtp?: pulumi.Input<boolean>;
}
