// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DatasourceFirewallArgs, DatasourceFirewallResult, DatasourceFirewallOutputArgs } from "./datasourceFirewall";
export const datasourceFirewall: typeof import("./datasourceFirewall").datasourceFirewall = null as any;
export const datasourceFirewallOutput: typeof import("./datasourceFirewall").datasourceFirewallOutput = null as any;
utilities.lazyLoad(exports, ["datasourceFirewall","datasourceFirewallOutput"], () => require("./datasourceFirewall"));

export { DatasourceIPAddressesArgs, DatasourceIPAddressesResult, DatasourceIPAddressesOutputArgs } from "./datasourceIPAddresses";
export const datasourceIPAddresses: typeof import("./datasourceIPAddresses").datasourceIPAddresses = null as any;
export const datasourceIPAddressesOutput: typeof import("./datasourceIPAddresses").datasourceIPAddressesOutput = null as any;
utilities.lazyLoad(exports, ["datasourceIPAddresses","datasourceIPAddressesOutput"], () => require("./datasourceIPAddresses"));

export { DatasourceIPRoutesArgs, DatasourceIPRoutesResult, DatasourceIPRoutesOutputArgs } from "./datasourceIPRoutes";
export const datasourceIPRoutes: typeof import("./datasourceIPRoutes").datasourceIPRoutes = null as any;
export const datasourceIPRoutesOutput: typeof import("./datasourceIPRoutes").datasourceIPRoutesOutput = null as any;
utilities.lazyLoad(exports, ["datasourceIPRoutes","datasourceIPRoutesOutput"], () => require("./datasourceIPRoutes"));

export { DatasourceIPv6AddressesArgs, DatasourceIPv6AddressesResult, DatasourceIPv6AddressesOutputArgs } from "./datasourceIPv6Addresses";
export const datasourceIPv6Addresses: typeof import("./datasourceIPv6Addresses").datasourceIPv6Addresses = null as any;
export const datasourceIPv6AddressesOutput: typeof import("./datasourceIPv6Addresses").datasourceIPv6AddressesOutput = null as any;
utilities.lazyLoad(exports, ["datasourceIPv6Addresses","datasourceIPv6AddressesOutput"], () => require("./datasourceIPv6Addresses"));

export { DatasourceInterfacesArgs, DatasourceInterfacesResult, DatasourceInterfacesOutputArgs } from "./datasourceInterfaces";
export const datasourceInterfaces: typeof import("./datasourceInterfaces").datasourceInterfaces = null as any;
export const datasourceInterfacesOutput: typeof import("./datasourceInterfaces").datasourceInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["datasourceInterfaces","datasourceInterfacesOutput"], () => require("./datasourceInterfaces"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResourceCapsManAaaArgs, ResourceCapsManAaaState } from "./resourceCapsManAaa";
export type ResourceCapsManAaa = import("./resourceCapsManAaa").ResourceCapsManAaa;
export const ResourceCapsManAaa: typeof import("./resourceCapsManAaa").ResourceCapsManAaa = null as any;
utilities.lazyLoad(exports, ["ResourceCapsManAaa"], () => require("./resourceCapsManAaa"));

export { ResourceCapsManChannelArgs, ResourceCapsManChannelState } from "./resourceCapsManChannel";
export type ResourceCapsManChannel = import("./resourceCapsManChannel").ResourceCapsManChannel;
export const ResourceCapsManChannel: typeof import("./resourceCapsManChannel").ResourceCapsManChannel = null as any;
utilities.lazyLoad(exports, ["ResourceCapsManChannel"], () => require("./resourceCapsManChannel"));

export { ResourceCapsManConfigurationArgs, ResourceCapsManConfigurationState } from "./resourceCapsManConfiguration";
export type ResourceCapsManConfiguration = import("./resourceCapsManConfiguration").ResourceCapsManConfiguration;
export const ResourceCapsManConfiguration: typeof import("./resourceCapsManConfiguration").ResourceCapsManConfiguration = null as any;
utilities.lazyLoad(exports, ["ResourceCapsManConfiguration"], () => require("./resourceCapsManConfiguration"));

export { ResourceCapsManDatapathArgs, ResourceCapsManDatapathState } from "./resourceCapsManDatapath";
export type ResourceCapsManDatapath = import("./resourceCapsManDatapath").ResourceCapsManDatapath;
export const ResourceCapsManDatapath: typeof import("./resourceCapsManDatapath").ResourceCapsManDatapath = null as any;
utilities.lazyLoad(exports, ["ResourceCapsManDatapath"], () => require("./resourceCapsManDatapath"));

export { ResourceCapsManManagerArgs, ResourceCapsManManagerState } from "./resourceCapsManManager";
export type ResourceCapsManManager = import("./resourceCapsManManager").ResourceCapsManManager;
export const ResourceCapsManManager: typeof import("./resourceCapsManManager").ResourceCapsManManager = null as any;
utilities.lazyLoad(exports, ["ResourceCapsManManager"], () => require("./resourceCapsManManager"));

export { ResourceCapsManManagerInterfaceArgs, ResourceCapsManManagerInterfaceState } from "./resourceCapsManManagerInterface";
export type ResourceCapsManManagerInterface = import("./resourceCapsManManagerInterface").ResourceCapsManManagerInterface;
export const ResourceCapsManManagerInterface: typeof import("./resourceCapsManManagerInterface").ResourceCapsManManagerInterface = null as any;
utilities.lazyLoad(exports, ["ResourceCapsManManagerInterface"], () => require("./resourceCapsManManagerInterface"));

export { ResourceCapsManProvisioningArgs, ResourceCapsManProvisioningState } from "./resourceCapsManProvisioning";
export type ResourceCapsManProvisioning = import("./resourceCapsManProvisioning").ResourceCapsManProvisioning;
export const ResourceCapsManProvisioning: typeof import("./resourceCapsManProvisioning").ResourceCapsManProvisioning = null as any;
utilities.lazyLoad(exports, ["ResourceCapsManProvisioning"], () => require("./resourceCapsManProvisioning"));

export { ResourceCapsManRatesArgs, ResourceCapsManRatesState } from "./resourceCapsManRates";
export type ResourceCapsManRates = import("./resourceCapsManRates").ResourceCapsManRates;
export const ResourceCapsManRates: typeof import("./resourceCapsManRates").ResourceCapsManRates = null as any;
utilities.lazyLoad(exports, ["ResourceCapsManRates"], () => require("./resourceCapsManRates"));

export { ResourceCapsManSecurityArgs, ResourceCapsManSecurityState } from "./resourceCapsManSecurity";
export type ResourceCapsManSecurity = import("./resourceCapsManSecurity").ResourceCapsManSecurity;
export const ResourceCapsManSecurity: typeof import("./resourceCapsManSecurity").ResourceCapsManSecurity = null as any;
utilities.lazyLoad(exports, ["ResourceCapsManSecurity"], () => require("./resourceCapsManSecurity"));

export { ResourceDhcpClientArgs, ResourceDhcpClientState } from "./resourceDhcpClient";
export type ResourceDhcpClient = import("./resourceDhcpClient").ResourceDhcpClient;
export const ResourceDhcpClient: typeof import("./resourceDhcpClient").ResourceDhcpClient = null as any;
utilities.lazyLoad(exports, ["ResourceDhcpClient"], () => require("./resourceDhcpClient"));

export { ResourceDhcpServerArgs, ResourceDhcpServerState } from "./resourceDhcpServer";
export type ResourceDhcpServer = import("./resourceDhcpServer").ResourceDhcpServer;
export const ResourceDhcpServer: typeof import("./resourceDhcpServer").ResourceDhcpServer = null as any;
utilities.lazyLoad(exports, ["ResourceDhcpServer"], () => require("./resourceDhcpServer"));

export { ResourceDhcpServerLeaseArgs, ResourceDhcpServerLeaseState } from "./resourceDhcpServerLease";
export type ResourceDhcpServerLease = import("./resourceDhcpServerLease").ResourceDhcpServerLease;
export const ResourceDhcpServerLease: typeof import("./resourceDhcpServerLease").ResourceDhcpServerLease = null as any;
utilities.lazyLoad(exports, ["ResourceDhcpServerLease"], () => require("./resourceDhcpServerLease"));

export { ResourceDhcpServerNetworkArgs, ResourceDhcpServerNetworkState } from "./resourceDhcpServerNetwork";
export type ResourceDhcpServerNetwork = import("./resourceDhcpServerNetwork").ResourceDhcpServerNetwork;
export const ResourceDhcpServerNetwork: typeof import("./resourceDhcpServerNetwork").ResourceDhcpServerNetwork = null as any;
utilities.lazyLoad(exports, ["ResourceDhcpServerNetwork"], () => require("./resourceDhcpServerNetwork"));

export { ResourceDnsArgs, ResourceDnsState } from "./resourceDns";
export type ResourceDns = import("./resourceDns").ResourceDns;
export const ResourceDns: typeof import("./resourceDns").ResourceDns = null as any;
utilities.lazyLoad(exports, ["ResourceDns"], () => require("./resourceDns"));

export { ResourceDnsRecordArgs, ResourceDnsRecordState } from "./resourceDnsRecord";
export type ResourceDnsRecord = import("./resourceDnsRecord").ResourceDnsRecord;
export const ResourceDnsRecord: typeof import("./resourceDnsRecord").ResourceDnsRecord = null as any;
utilities.lazyLoad(exports, ["ResourceDnsRecord"], () => require("./resourceDnsRecord"));

export { ResourceIPAddressArgs, ResourceIPAddressState } from "./resourceIPAddress";
export type ResourceIPAddress = import("./resourceIPAddress").ResourceIPAddress;
export const ResourceIPAddress: typeof import("./resourceIPAddress").ResourceIPAddress = null as any;
utilities.lazyLoad(exports, ["ResourceIPAddress"], () => require("./resourceIPAddress"));

export { ResourceIPFirewallAddrListArgs, ResourceIPFirewallAddrListState } from "./resourceIPFirewallAddrList";
export type ResourceIPFirewallAddrList = import("./resourceIPFirewallAddrList").ResourceIPFirewallAddrList;
export const ResourceIPFirewallAddrList: typeof import("./resourceIPFirewallAddrList").ResourceIPFirewallAddrList = null as any;
utilities.lazyLoad(exports, ["ResourceIPFirewallAddrList"], () => require("./resourceIPFirewallAddrList"));

export { ResourceIPFirewallFilterArgs, ResourceIPFirewallFilterState } from "./resourceIPFirewallFilter";
export type ResourceIPFirewallFilter = import("./resourceIPFirewallFilter").ResourceIPFirewallFilter;
export const ResourceIPFirewallFilter: typeof import("./resourceIPFirewallFilter").ResourceIPFirewallFilter = null as any;
utilities.lazyLoad(exports, ["ResourceIPFirewallFilter"], () => require("./resourceIPFirewallFilter"));

export { ResourceIPFirewallMangleArgs, ResourceIPFirewallMangleState } from "./resourceIPFirewallMangle";
export type ResourceIPFirewallMangle = import("./resourceIPFirewallMangle").ResourceIPFirewallMangle;
export const ResourceIPFirewallMangle: typeof import("./resourceIPFirewallMangle").ResourceIPFirewallMangle = null as any;
utilities.lazyLoad(exports, ["ResourceIPFirewallMangle"], () => require("./resourceIPFirewallMangle"));

export { ResourceIPFirewallNatArgs, ResourceIPFirewallNatState } from "./resourceIPFirewallNat";
export type ResourceIPFirewallNat = import("./resourceIPFirewallNat").ResourceIPFirewallNat;
export const ResourceIPFirewallNat: typeof import("./resourceIPFirewallNat").ResourceIPFirewallNat = null as any;
utilities.lazyLoad(exports, ["ResourceIPFirewallNat"], () => require("./resourceIPFirewallNat"));

export { ResourceIPPoolArgs, ResourceIPPoolState } from "./resourceIPPool";
export type ResourceIPPool = import("./resourceIPPool").ResourceIPPool;
export const ResourceIPPool: typeof import("./resourceIPPool").ResourceIPPool = null as any;
utilities.lazyLoad(exports, ["ResourceIPPool"], () => require("./resourceIPPool"));

export { ResourceIPRouteArgs, ResourceIPRouteState } from "./resourceIPRoute";
export type ResourceIPRoute = import("./resourceIPRoute").ResourceIPRoute;
export const ResourceIPRoute: typeof import("./resourceIPRoute").ResourceIPRoute = null as any;
utilities.lazyLoad(exports, ["ResourceIPRoute"], () => require("./resourceIPRoute"));

export { ResourceIPv6AddressArgs, ResourceIPv6AddressState } from "./resourceIPv6Address";
export type ResourceIPv6Address = import("./resourceIPv6Address").ResourceIPv6Address;
export const ResourceIPv6Address: typeof import("./resourceIPv6Address").ResourceIPv6Address = null as any;
utilities.lazyLoad(exports, ["ResourceIPv6Address"], () => require("./resourceIPv6Address"));

export { ResourceIPv6FirewallFilterArgs, ResourceIPv6FirewallFilterState } from "./resourceIPv6FirewallFilter";
export type ResourceIPv6FirewallFilter = import("./resourceIPv6FirewallFilter").ResourceIPv6FirewallFilter;
export const ResourceIPv6FirewallFilter: typeof import("./resourceIPv6FirewallFilter").ResourceIPv6FirewallFilter = null as any;
utilities.lazyLoad(exports, ["ResourceIPv6FirewallFilter"], () => require("./resourceIPv6FirewallFilter"));

export { ResourceIPv6RouteArgs, ResourceIPv6RouteState } from "./resourceIPv6Route";
export type ResourceIPv6Route = import("./resourceIPv6Route").ResourceIPv6Route;
export const ResourceIPv6Route: typeof import("./resourceIPv6Route").ResourceIPv6Route = null as any;
utilities.lazyLoad(exports, ["ResourceIPv6Route"], () => require("./resourceIPv6Route"));

export { ResourceInterfaceBridgeArgs, ResourceInterfaceBridgeState } from "./resourceInterfaceBridge";
export type ResourceInterfaceBridge = import("./resourceInterfaceBridge").ResourceInterfaceBridge;
export const ResourceInterfaceBridge: typeof import("./resourceInterfaceBridge").ResourceInterfaceBridge = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceBridge"], () => require("./resourceInterfaceBridge"));

export { ResourceInterfaceBridgePortArgs, ResourceInterfaceBridgePortState } from "./resourceInterfaceBridgePort";
export type ResourceInterfaceBridgePort = import("./resourceInterfaceBridgePort").ResourceInterfaceBridgePort;
export const ResourceInterfaceBridgePort: typeof import("./resourceInterfaceBridgePort").ResourceInterfaceBridgePort = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceBridgePort"], () => require("./resourceInterfaceBridgePort"));

export { ResourceInterfaceBridgeVlanArgs, ResourceInterfaceBridgeVlanState } from "./resourceInterfaceBridgeVlan";
export type ResourceInterfaceBridgeVlan = import("./resourceInterfaceBridgeVlan").ResourceInterfaceBridgeVlan;
export const ResourceInterfaceBridgeVlan: typeof import("./resourceInterfaceBridgeVlan").ResourceInterfaceBridgeVlan = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceBridgeVlan"], () => require("./resourceInterfaceBridgeVlan"));

export { ResourceInterfaceGreArgs, ResourceInterfaceGreState } from "./resourceInterfaceGre";
export type ResourceInterfaceGre = import("./resourceInterfaceGre").ResourceInterfaceGre;
export const ResourceInterfaceGre: typeof import("./resourceInterfaceGre").ResourceInterfaceGre = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceGre"], () => require("./resourceInterfaceGre"));

export { ResourceInterfaceListArgs, ResourceInterfaceListState } from "./resourceInterfaceList";
export type ResourceInterfaceList = import("./resourceInterfaceList").ResourceInterfaceList;
export const ResourceInterfaceList: typeof import("./resourceInterfaceList").ResourceInterfaceList = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceList"], () => require("./resourceInterfaceList"));

export { ResourceInterfaceListMemberArgs, ResourceInterfaceListMemberState } from "./resourceInterfaceListMember";
export type ResourceInterfaceListMember = import("./resourceInterfaceListMember").ResourceInterfaceListMember;
export const ResourceInterfaceListMember: typeof import("./resourceInterfaceListMember").ResourceInterfaceListMember = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceListMember"], () => require("./resourceInterfaceListMember"));

export { ResourceInterfaceOpenVPNServerArgs, ResourceInterfaceOpenVPNServerState } from "./resourceInterfaceOpenVPNServer";
export type ResourceInterfaceOpenVPNServer = import("./resourceInterfaceOpenVPNServer").ResourceInterfaceOpenVPNServer;
export const ResourceInterfaceOpenVPNServer: typeof import("./resourceInterfaceOpenVPNServer").ResourceInterfaceOpenVPNServer = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceOpenVPNServer"], () => require("./resourceInterfaceOpenVPNServer"));

export { ResourceInterfaceVlanArgs, ResourceInterfaceVlanState } from "./resourceInterfaceVlan";
export type ResourceInterfaceVlan = import("./resourceInterfaceVlan").ResourceInterfaceVlan;
export const ResourceInterfaceVlan: typeof import("./resourceInterfaceVlan").ResourceInterfaceVlan = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceVlan"], () => require("./resourceInterfaceVlan"));

export { ResourceInterfaceVrrpArgs, ResourceInterfaceVrrpState } from "./resourceInterfaceVrrp";
export type ResourceInterfaceVrrp = import("./resourceInterfaceVrrp").ResourceInterfaceVrrp;
export const ResourceInterfaceVrrp: typeof import("./resourceInterfaceVrrp").ResourceInterfaceVrrp = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceVrrp"], () => require("./resourceInterfaceVrrp"));

export { ResourceInterfaceWireguardArgs, ResourceInterfaceWireguardState } from "./resourceInterfaceWireguard";
export type ResourceInterfaceWireguard = import("./resourceInterfaceWireguard").ResourceInterfaceWireguard;
export const ResourceInterfaceWireguard: typeof import("./resourceInterfaceWireguard").ResourceInterfaceWireguard = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceWireguard"], () => require("./resourceInterfaceWireguard"));

export { ResourceInterfaceWireguardPeerArgs, ResourceInterfaceWireguardPeerState } from "./resourceInterfaceWireguardPeer";
export type ResourceInterfaceWireguardPeer = import("./resourceInterfaceWireguardPeer").ResourceInterfaceWireguardPeer;
export const ResourceInterfaceWireguardPeer: typeof import("./resourceInterfaceWireguardPeer").ResourceInterfaceWireguardPeer = null as any;
utilities.lazyLoad(exports, ["ResourceInterfaceWireguardPeer"], () => require("./resourceInterfaceWireguardPeer"));

export { ResourceIpServiceArgs, ResourceIpServiceState } from "./resourceIpService";
export type ResourceIpService = import("./resourceIpService").ResourceIpService;
export const ResourceIpService: typeof import("./resourceIpService").ResourceIpService = null as any;
utilities.lazyLoad(exports, ["ResourceIpService"], () => require("./resourceIpService"));

export { ResourceOpenVPNServerArgs, ResourceOpenVPNServerState } from "./resourceOpenVPNServer";
export type ResourceOpenVPNServer = import("./resourceOpenVPNServer").ResourceOpenVPNServer;
export const ResourceOpenVPNServer: typeof import("./resourceOpenVPNServer").ResourceOpenVPNServer = null as any;
utilities.lazyLoad(exports, ["ResourceOpenVPNServer"], () => require("./resourceOpenVPNServer"));

export { ResourcePPPProfileArgs, ResourcePPPProfileState } from "./resourcePPPProfile";
export type ResourcePPPProfile = import("./resourcePPPProfile").ResourcePPPProfile;
export const ResourcePPPProfile: typeof import("./resourcePPPProfile").ResourcePPPProfile = null as any;
utilities.lazyLoad(exports, ["ResourcePPPProfile"], () => require("./resourcePPPProfile"));

export { ResourcePPPSecretArgs, ResourcePPPSecretState } from "./resourcePPPSecret";
export type ResourcePPPSecret = import("./resourcePPPSecret").ResourcePPPSecret;
export const ResourcePPPSecret: typeof import("./resourcePPPSecret").ResourcePPPSecret = null as any;
utilities.lazyLoad(exports, ["ResourcePPPSecret"], () => require("./resourcePPPSecret"));

export { ResourceRoutingTableArgs, ResourceRoutingTableState } from "./resourceRoutingTable";
export type ResourceRoutingTable = import("./resourceRoutingTable").ResourceRoutingTable;
export const ResourceRoutingTable: typeof import("./resourceRoutingTable").ResourceRoutingTable = null as any;
utilities.lazyLoad(exports, ["ResourceRoutingTable"], () => require("./resourceRoutingTable"));

export { ResourceSystemCertificateArgs, ResourceSystemCertificateState } from "./resourceSystemCertificate";
export type ResourceSystemCertificate = import("./resourceSystemCertificate").ResourceSystemCertificate;
export const ResourceSystemCertificate: typeof import("./resourceSystemCertificate").ResourceSystemCertificate = null as any;
utilities.lazyLoad(exports, ["ResourceSystemCertificate"], () => require("./resourceSystemCertificate"));

export { ResourceSystemIdentityArgs, ResourceSystemIdentityState } from "./resourceSystemIdentity";
export type ResourceSystemIdentity = import("./resourceSystemIdentity").ResourceSystemIdentity;
export const ResourceSystemIdentity: typeof import("./resourceSystemIdentity").ResourceSystemIdentity = null as any;
utilities.lazyLoad(exports, ["ResourceSystemIdentity"], () => require("./resourceSystemIdentity"));

export { ResourceSystemSchedulerArgs, ResourceSystemSchedulerState } from "./resourceSystemScheduler";
export type ResourceSystemScheduler = import("./resourceSystemScheduler").ResourceSystemScheduler;
export const ResourceSystemScheduler: typeof import("./resourceSystemScheduler").ResourceSystemScheduler = null as any;
utilities.lazyLoad(exports, ["ResourceSystemScheduler"], () => require("./resourceSystemScheduler"));

export { ResourceUserArgs, ResourceUserState } from "./resourceUser";
export type ResourceUser = import("./resourceUser").ResourceUser;
export const ResourceUser: typeof import("./resourceUser").ResourceUser = null as any;
utilities.lazyLoad(exports, ["ResourceUser"], () => require("./resourceUser"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "routeros:index/resourceCapsManAaa:ResourceCapsManAaa":
                return new ResourceCapsManAaa(name, <any>undefined, { urn })
            case "routeros:index/resourceCapsManChannel:ResourceCapsManChannel":
                return new ResourceCapsManChannel(name, <any>undefined, { urn })
            case "routeros:index/resourceCapsManConfiguration:ResourceCapsManConfiguration":
                return new ResourceCapsManConfiguration(name, <any>undefined, { urn })
            case "routeros:index/resourceCapsManDatapath:ResourceCapsManDatapath":
                return new ResourceCapsManDatapath(name, <any>undefined, { urn })
            case "routeros:index/resourceCapsManManager:ResourceCapsManManager":
                return new ResourceCapsManManager(name, <any>undefined, { urn })
            case "routeros:index/resourceCapsManManagerInterface:ResourceCapsManManagerInterface":
                return new ResourceCapsManManagerInterface(name, <any>undefined, { urn })
            case "routeros:index/resourceCapsManProvisioning:ResourceCapsManProvisioning":
                return new ResourceCapsManProvisioning(name, <any>undefined, { urn })
            case "routeros:index/resourceCapsManRates:ResourceCapsManRates":
                return new ResourceCapsManRates(name, <any>undefined, { urn })
            case "routeros:index/resourceCapsManSecurity:ResourceCapsManSecurity":
                return new ResourceCapsManSecurity(name, <any>undefined, { urn })
            case "routeros:index/resourceDhcpClient:ResourceDhcpClient":
                return new ResourceDhcpClient(name, <any>undefined, { urn })
            case "routeros:index/resourceDhcpServer:ResourceDhcpServer":
                return new ResourceDhcpServer(name, <any>undefined, { urn })
            case "routeros:index/resourceDhcpServerLease:ResourceDhcpServerLease":
                return new ResourceDhcpServerLease(name, <any>undefined, { urn })
            case "routeros:index/resourceDhcpServerNetwork:ResourceDhcpServerNetwork":
                return new ResourceDhcpServerNetwork(name, <any>undefined, { urn })
            case "routeros:index/resourceDns:ResourceDns":
                return new ResourceDns(name, <any>undefined, { urn })
            case "routeros:index/resourceDnsRecord:ResourceDnsRecord":
                return new ResourceDnsRecord(name, <any>undefined, { urn })
            case "routeros:index/resourceIPAddress:ResourceIPAddress":
                return new ResourceIPAddress(name, <any>undefined, { urn })
            case "routeros:index/resourceIPFirewallAddrList:ResourceIPFirewallAddrList":
                return new ResourceIPFirewallAddrList(name, <any>undefined, { urn })
            case "routeros:index/resourceIPFirewallFilter:ResourceIPFirewallFilter":
                return new ResourceIPFirewallFilter(name, <any>undefined, { urn })
            case "routeros:index/resourceIPFirewallMangle:ResourceIPFirewallMangle":
                return new ResourceIPFirewallMangle(name, <any>undefined, { urn })
            case "routeros:index/resourceIPFirewallNat:ResourceIPFirewallNat":
                return new ResourceIPFirewallNat(name, <any>undefined, { urn })
            case "routeros:index/resourceIPPool:ResourceIPPool":
                return new ResourceIPPool(name, <any>undefined, { urn })
            case "routeros:index/resourceIPRoute:ResourceIPRoute":
                return new ResourceIPRoute(name, <any>undefined, { urn })
            case "routeros:index/resourceIPv6Address:ResourceIPv6Address":
                return new ResourceIPv6Address(name, <any>undefined, { urn })
            case "routeros:index/resourceIPv6FirewallFilter:ResourceIPv6FirewallFilter":
                return new ResourceIPv6FirewallFilter(name, <any>undefined, { urn })
            case "routeros:index/resourceIPv6Route:ResourceIPv6Route":
                return new ResourceIPv6Route(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceBridge:ResourceInterfaceBridge":
                return new ResourceInterfaceBridge(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceBridgePort:ResourceInterfaceBridgePort":
                return new ResourceInterfaceBridgePort(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceBridgeVlan:ResourceInterfaceBridgeVlan":
                return new ResourceInterfaceBridgeVlan(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceGre:ResourceInterfaceGre":
                return new ResourceInterfaceGre(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceList:ResourceInterfaceList":
                return new ResourceInterfaceList(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceListMember:ResourceInterfaceListMember":
                return new ResourceInterfaceListMember(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceOpenVPNServer:ResourceInterfaceOpenVPNServer":
                return new ResourceInterfaceOpenVPNServer(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceVlan:ResourceInterfaceVlan":
                return new ResourceInterfaceVlan(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceVrrp:ResourceInterfaceVrrp":
                return new ResourceInterfaceVrrp(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceWireguard:ResourceInterfaceWireguard":
                return new ResourceInterfaceWireguard(name, <any>undefined, { urn })
            case "routeros:index/resourceInterfaceWireguardPeer:ResourceInterfaceWireguardPeer":
                return new ResourceInterfaceWireguardPeer(name, <any>undefined, { urn })
            case "routeros:index/resourceIpService:ResourceIpService":
                return new ResourceIpService(name, <any>undefined, { urn })
            case "routeros:index/resourceOpenVPNServer:ResourceOpenVPNServer":
                return new ResourceOpenVPNServer(name, <any>undefined, { urn })
            case "routeros:index/resourcePPPProfile:ResourcePPPProfile":
                return new ResourcePPPProfile(name, <any>undefined, { urn })
            case "routeros:index/resourcePPPSecret:ResourcePPPSecret":
                return new ResourcePPPSecret(name, <any>undefined, { urn })
            case "routeros:index/resourceRoutingTable:ResourceRoutingTable":
                return new ResourceRoutingTable(name, <any>undefined, { urn })
            case "routeros:index/resourceSystemCertificate:ResourceSystemCertificate":
                return new ResourceSystemCertificate(name, <any>undefined, { urn })
            case "routeros:index/resourceSystemIdentity:ResourceSystemIdentity":
                return new ResourceSystemIdentity(name, <any>undefined, { urn })
            case "routeros:index/resourceSystemScheduler:ResourceSystemScheduler":
                return new ResourceSystemScheduler(name, <any>undefined, { urn })
            case "routeros:index/resourceUser:ResourceUser":
                return new ResourceUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("routeros", "index/resourceCapsManAaa", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceCapsManChannel", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceCapsManConfiguration", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceCapsManDatapath", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceCapsManManager", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceCapsManManagerInterface", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceCapsManProvisioning", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceCapsManRates", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceCapsManSecurity", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceDhcpClient", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceDhcpServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceDhcpServerLease", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceDhcpServerNetwork", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceDns", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceDnsRecord", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIPAddress", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIPFirewallAddrList", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIPFirewallFilter", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIPFirewallMangle", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIPFirewallNat", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIPPool", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIPRoute", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIPv6Address", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIPv6FirewallFilter", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIPv6Route", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceBridge", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceBridgePort", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceBridgeVlan", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceGre", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceList", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceListMember", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceOpenVPNServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceVlan", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceVrrp", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceWireguard", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceInterfaceWireguardPeer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceIpService", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceOpenVPNServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourcePPPProfile", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourcePPPSecret", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceRoutingTable", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceSystemCertificate", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceSystemIdentity", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceSystemScheduler", _module)
pulumi.runtime.registerResourceModule("routeros", "index/resourceUser", _module)
pulumi.runtime.registerResourcePackage("routeros", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:routeros") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
