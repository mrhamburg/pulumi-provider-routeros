// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BridgeArgs, BridgeState } from "./bridge";
export type Bridge = import("./bridge").Bridge;
export const Bridge: typeof import("./bridge").Bridge = null as any;
utilities.lazyLoad(exports, ["Bridge"], () => require("./bridge"));

export { BridgePortArgs, BridgePortState } from "./bridgePort";
export type BridgePort = import("./bridgePort").BridgePort;
export const BridgePort: typeof import("./bridgePort").BridgePort = null as any;
utilities.lazyLoad(exports, ["BridgePort"], () => require("./bridgePort"));

export { BridgeVlanArgs, BridgeVlanState } from "./bridgeVlan";
export type BridgeVlan = import("./bridgeVlan").BridgeVlan;
export const BridgeVlan: typeof import("./bridgeVlan").BridgeVlan = null as any;
utilities.lazyLoad(exports, ["BridgeVlan"], () => require("./bridgeVlan"));

export { GetInterfacesArgs, GetInterfacesResult, GetInterfacesOutputArgs } from "./getInterfaces";
export const getInterfaces: typeof import("./getInterfaces").getInterfaces = null as any;
export const getInterfacesOutput: typeof import("./getInterfaces").getInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaces","getInterfacesOutput"], () => require("./getInterfaces"));

export { GreArgs, GreState } from "./gre";
export type Gre = import("./gre").Gre;
export const Gre: typeof import("./gre").Gre = null as any;
utilities.lazyLoad(exports, ["Gre"], () => require("./gre"));

export { InterfaceBridgeArgs, InterfaceBridgeState } from "./interfaceBridge";
export type InterfaceBridge = import("./interfaceBridge").InterfaceBridge;
export const InterfaceBridge: typeof import("./interfaceBridge").InterfaceBridge = null as any;
utilities.lazyLoad(exports, ["InterfaceBridge"], () => require("./interfaceBridge"));

export { InterfaceBridgePortArgs, InterfaceBridgePortState } from "./interfaceBridgePort";
export type InterfaceBridgePort = import("./interfaceBridgePort").InterfaceBridgePort;
export const InterfaceBridgePort: typeof import("./interfaceBridgePort").InterfaceBridgePort = null as any;
utilities.lazyLoad(exports, ["InterfaceBridgePort"], () => require("./interfaceBridgePort"));

export { InterfaceBridgeVlanArgs, InterfaceBridgeVlanState } from "./interfaceBridgeVlan";
export type InterfaceBridgeVlan = import("./interfaceBridgeVlan").InterfaceBridgeVlan;
export const InterfaceBridgeVlan: typeof import("./interfaceBridgeVlan").InterfaceBridgeVlan = null as any;
utilities.lazyLoad(exports, ["InterfaceBridgeVlan"], () => require("./interfaceBridgeVlan"));

export { InterfaceGreArgs, InterfaceGreState } from "./interfaceGre";
export type InterfaceGre = import("./interfaceGre").InterfaceGre;
export const InterfaceGre: typeof import("./interfaceGre").InterfaceGre = null as any;
utilities.lazyLoad(exports, ["InterfaceGre"], () => require("./interfaceGre"));

export { InterfaceVlanArgs, InterfaceVlanState } from "./interfaceVlan";
export type InterfaceVlan = import("./interfaceVlan").InterfaceVlan;
export const InterfaceVlan: typeof import("./interfaceVlan").InterfaceVlan = null as any;
utilities.lazyLoad(exports, ["InterfaceVlan"], () => require("./interfaceVlan"));

export { InterfaceVrrpArgs, InterfaceVrrpState } from "./interfaceVrrp";
export type InterfaceVrrp = import("./interfaceVrrp").InterfaceVrrp;
export const InterfaceVrrp: typeof import("./interfaceVrrp").InterfaceVrrp = null as any;
utilities.lazyLoad(exports, ["InterfaceVrrp"], () => require("./interfaceVrrp"));

export { InterfaceWireguardArgs, InterfaceWireguardState } from "./interfaceWireguard";
export type InterfaceWireguard = import("./interfaceWireguard").InterfaceWireguard;
export const InterfaceWireguard: typeof import("./interfaceWireguard").InterfaceWireguard = null as any;
utilities.lazyLoad(exports, ["InterfaceWireguard"], () => require("./interfaceWireguard"));

export { InterfaceWireguardPeerArgs, InterfaceWireguardPeerState } from "./interfaceWireguardPeer";
export type InterfaceWireguardPeer = import("./interfaceWireguardPeer").InterfaceWireguardPeer;
export const InterfaceWireguardPeer: typeof import("./interfaceWireguardPeer").InterfaceWireguardPeer = null as any;
utilities.lazyLoad(exports, ["InterfaceWireguardPeer"], () => require("./interfaceWireguardPeer"));

export { ListArgs, ListState } from "./list";
export type List = import("./list").List;
export const List: typeof import("./list").List = null as any;
utilities.lazyLoad(exports, ["List"], () => require("./list"));

export { ListMemberArgs, ListMemberState } from "./listMember";
export type ListMember = import("./listMember").ListMember;
export const ListMember: typeof import("./listMember").ListMember = null as any;
utilities.lazyLoad(exports, ["ListMember"], () => require("./listMember"));

export { OpenVpnServerArgs, OpenVpnServerState } from "./openVpnServer";
export type OpenVpnServer = import("./openVpnServer").OpenVpnServer;
export const OpenVpnServer: typeof import("./openVpnServer").OpenVpnServer = null as any;
utilities.lazyLoad(exports, ["OpenVpnServer"], () => require("./openVpnServer"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));

export { VrrpArgs, VrrpState } from "./vrrp";
export type Vrrp = import("./vrrp").Vrrp;
export const Vrrp: typeof import("./vrrp").Vrrp = null as any;
utilities.lazyLoad(exports, ["Vrrp"], () => require("./vrrp"));

export { WireguardArgs, WireguardState } from "./wireguard";
export type Wireguard = import("./wireguard").Wireguard;
export const Wireguard: typeof import("./wireguard").Wireguard = null as any;
utilities.lazyLoad(exports, ["Wireguard"], () => require("./wireguard"));

export { WireguardPeerArgs, WireguardPeerState } from "./wireguardPeer";
export type WireguardPeer = import("./wireguardPeer").WireguardPeer;
export const WireguardPeer: typeof import("./wireguardPeer").WireguardPeer = null as any;
utilities.lazyLoad(exports, ["WireguardPeer"], () => require("./wireguardPeer"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "routeros:Iface/bridge:Bridge":
                return new Bridge(name, <any>undefined, { urn })
            case "routeros:Iface/bridgePort:BridgePort":
                return new BridgePort(name, <any>undefined, { urn })
            case "routeros:Iface/bridgeVlan:BridgeVlan":
                return new BridgeVlan(name, <any>undefined, { urn })
            case "routeros:Iface/gre:Gre":
                return new Gre(name, <any>undefined, { urn })
            case "routeros:Iface/interfaceBridge:InterfaceBridge":
                return new InterfaceBridge(name, <any>undefined, { urn })
            case "routeros:Iface/interfaceBridgePort:InterfaceBridgePort":
                return new InterfaceBridgePort(name, <any>undefined, { urn })
            case "routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan":
                return new InterfaceBridgeVlan(name, <any>undefined, { urn })
            case "routeros:Iface/interfaceGre:InterfaceGre":
                return new InterfaceGre(name, <any>undefined, { urn })
            case "routeros:Iface/interfaceVlan:InterfaceVlan":
                return new InterfaceVlan(name, <any>undefined, { urn })
            case "routeros:Iface/interfaceVrrp:InterfaceVrrp":
                return new InterfaceVrrp(name, <any>undefined, { urn })
            case "routeros:Iface/interfaceWireguard:InterfaceWireguard":
                return new InterfaceWireguard(name, <any>undefined, { urn })
            case "routeros:Iface/interfaceWireguardPeer:InterfaceWireguardPeer":
                return new InterfaceWireguardPeer(name, <any>undefined, { urn })
            case "routeros:Iface/list:List":
                return new List(name, <any>undefined, { urn })
            case "routeros:Iface/listMember:ListMember":
                return new ListMember(name, <any>undefined, { urn })
            case "routeros:Iface/openVpnServer:OpenVpnServer":
                return new OpenVpnServer(name, <any>undefined, { urn })
            case "routeros:Iface/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            case "routeros:Iface/vrrp:Vrrp":
                return new Vrrp(name, <any>undefined, { urn })
            case "routeros:Iface/wireguard:Wireguard":
                return new Wireguard(name, <any>undefined, { urn })
            case "routeros:Iface/wireguardPeer:WireguardPeer":
                return new WireguardPeer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("routeros", "Iface/bridge", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/bridgePort", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/bridgeVlan", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/gre", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/interfaceBridge", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/interfaceBridgePort", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/interfaceBridgeVlan", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/interfaceGre", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/interfaceVlan", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/interfaceVrrp", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/interfaceWireguard", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/interfaceWireguardPeer", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/list", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/listMember", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/openVpnServer", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/vlan", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/vrrp", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/wireguard", _module)
pulumi.runtime.registerResourceModule("routeros", "Iface/wireguardPeer", _module)
