// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as routeros from "@pulumi/routeros";
 *
 * const bridgeVlan = new routeros.iface.InterfaceBridgeVlan("bridgeVlan", {
 *     bridge: "bridge",
 *     taggeds: [
 *         "bridge",
 *         "ether1",
 *     ],
 *     untaggeds: ["ether5"],
 *     vlanIds: "50",
 * });
 * ```
 *
 * ## Import
 *
 * #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/bridge/vlan get [print show-ids]]
 *
 * ```sh
 *  $ pulumi import routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan bridge_vlan "*0"
 * ```
 */
export class InterfaceBridgeVlan extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceBridgeVlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceBridgeVlanState, opts?: pulumi.CustomResourceOptions): InterfaceBridgeVlan {
        return new InterfaceBridgeVlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan';

    /**
     * Returns true if the given object is an instance of InterfaceBridgeVlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceBridgeVlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceBridgeVlan.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * The bridge interface which the respective VLAN entry is intended for.
     */
    public readonly bridge!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public /*out*/ readonly currentTaggeds!: pulumi.Output<string[]>;
    public /*out*/ readonly currentUntaggeds!: pulumi.Output<string[]>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
     */
    public /*out*/ readonly dynamic!: pulumi.Output<boolean>;
    /**
     * Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
     */
    public readonly taggeds!: pulumi.Output<string[] | undefined>;
    /**
     * Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
     */
    public readonly untaggeds!: pulumi.Output<string[] | undefined>;
    /**
     * The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
     */
    public readonly vlanIds!: pulumi.Output<string>;

    /**
     * Create a InterfaceBridgeVlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceBridgeVlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceBridgeVlanArgs | InterfaceBridgeVlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceBridgeVlanState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["bridge"] = state ? state.bridge : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["currentTaggeds"] = state ? state.currentTaggeds : undefined;
            resourceInputs["currentUntaggeds"] = state ? state.currentUntaggeds : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dynamic"] = state ? state.dynamic : undefined;
            resourceInputs["taggeds"] = state ? state.taggeds : undefined;
            resourceInputs["untaggeds"] = state ? state.untaggeds : undefined;
            resourceInputs["vlanIds"] = state ? state.vlanIds : undefined;
        } else {
            const args = argsOrState as InterfaceBridgeVlanArgs | undefined;
            if ((!args || args.bridge === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bridge'");
            }
            if ((!args || args.vlanIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanIds'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["bridge"] = args ? args.bridge : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["taggeds"] = args ? args.taggeds : undefined;
            resourceInputs["untaggeds"] = args ? args.untaggeds : undefined;
            resourceInputs["vlanIds"] = args ? args.vlanIds : undefined;
            resourceInputs["currentTaggeds"] = undefined /*out*/;
            resourceInputs["currentUntaggeds"] = undefined /*out*/;
            resourceInputs["dynamic"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceBridgeVlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InterfaceBridgeVlan resources.
 */
export interface InterfaceBridgeVlanState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * The bridge interface which the respective VLAN entry is intended for.
     */
    bridge?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    currentTaggeds?: pulumi.Input<pulumi.Input<string>[]>;
    currentUntaggeds?: pulumi.Input<pulumi.Input<string>[]>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
     */
    dynamic?: pulumi.Input<boolean>;
    /**
     * Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
     */
    taggeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
     */
    untaggeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
     */
    vlanIds?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceBridgeVlan resource.
 */
export interface InterfaceBridgeVlanArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * The bridge interface which the respective VLAN entry is intended for.
     */
    bridge: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
     */
    taggeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
     */
    untaggeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
     */
    vlanIds: pulumi.Input<string>;
}
