// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as routeros from "@pulumi/routeros";
 *
 * const bridgePort = new routeros.iface.InterfaceBridgePort("bridgePort", {
 *     bridge: "bridge",
 *     "interface": "ether5",
 *     pvid: 50,
 * });
 * ```
 *
 * ## Import
 *
 * #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/bridge/port get [print show-ids]]
 *
 * ```sh
 *  $ pulumi import routeros:Iface/interfaceBridgePort:InterfaceBridgePort bridge_port "*0"
 * ```
 */
export class InterfaceBridgePort extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceBridgePort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceBridgePortState, opts?: pulumi.CustomResourceOptions): InterfaceBridgePort {
        return new InterfaceBridgePort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:Iface/interfaceBridgePort:InterfaceBridgePort';

    /**
     * Returns true if the given object is an instance of InterfaceBridgePort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceBridgePort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceBridgePort.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when protocol-mode is set to rstp or mstp and edge is set to no.
     */
    public readonly autoIsolate!: pulumi.Output<boolean | undefined>;
    /**
     * This property has no effect when protocol-mode is set to none.
     */
    public readonly bpduGuard!: pulumi.Output<boolean | undefined>;
    public readonly bridge!: pulumi.Output<string>;
    /**
     * When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on egress ports.
     */
    public readonly broadcastFlood!: pulumi.Output<boolean | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public /*out*/ readonly debugInfo!: pulumi.Output<string>;
    /**
     * Root bridge ID (bridge priority and the bridge MAC address).
     */
    public /*out*/ readonly designatedBridge!: pulumi.Output<string>;
    /**
     * Designated cost.
     */
    public /*out*/ readonly designatedCost!: pulumi.Output<string>;
    /**
     * Designated port number.
     */
    public /*out*/ readonly designatedPortNumber!: pulumi.Output<number>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
     */
    public /*out*/ readonly dynamic!: pulumi.Output<boolean>;
    /**
     * Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other bridges attached.
     */
    public readonly edge!: pulumi.Output<string | undefined>;
    /**
     * Whether port is an edge port or not.
     */
    public /*out*/ readonly edgePort!: pulumi.Output<boolean>;
    /**
     * Whether port is set to automatically detect edge ports.
     */
    public /*out*/ readonly edgePortDiscovery!: pulumi.Output<boolean>;
    /**
     * Whether registration table is used instead of forwarding data base.
     */
    public /*out*/ readonly externalFdbStatus!: pulumi.Output<boolean>;
    /**
     * Enables IGMP Fast leave feature on the port.
     */
    public readonly fastLeave!: pulumi.Output<boolean | undefined>;
    /**
     * Shows if the port is not blocked by (R/M)STP.
     */
    public /*out*/ readonly forwarding!: pulumi.Output<boolean>;
    /**
     * Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
     */
    public readonly frameTypes!: pulumi.Output<string | undefined>;
    /**
     * Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware offloading. This value is integer '0'..'429496729' or 'none'.
     */
    public readonly horizon!: pulumi.Output<string | undefined>;
    /**
     * Enable or disable Hardware Offloading of the interface.
     */
    public readonly hw!: pulumi.Output<boolean>;
    /**
     * Hardware offloading state.
     */
    public /*out*/ readonly hwOffload!: pulumi.Output<boolean>;
    /**
     * Switch chip used by the port.
     */
    public /*out*/ readonly hwOffloadGroup!: pulumi.Output<string>;
    public /*out*/ readonly inactive!: pulumi.Output<boolean>;
    /**
     * Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This property only has effect when vlan-filtering is set to yes.
     */
    public readonly ingressFiltering!: pulumi.Output<boolean>;
    /**
     * Name of the interface.
     */
    public readonly interface!: pulumi.Output<string>;
    /**
     * Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
     */
    public readonly internalPathCost!: pulumi.Output<number | undefined>;
    /**
     * Changes MAC learning behaviour on a bridge port
     */
    public readonly learn!: pulumi.Output<string | undefined>;
    /**
     * Shows whether the port is capable of learning MAC addresses.
     */
    public /*out*/ readonly learning!: pulumi.Output<boolean>;
    /**
     * Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
     */
    public readonly multicastRouter!: pulumi.Output<string | undefined>;
    public /*out*/ readonly nextid!: pulumi.Output<string>;
    /**
     * Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between regions. This property has no effect when protocol-mode is set to none.
     */
    public readonly pathCost!: pulumi.Output<string | undefined>;
    /**
     * Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of failure. This property has no effect when protocol-mode is set to none.
     */
    public readonly pointToPoint!: pulumi.Output<string | undefined>;
    /**
     * Whether the port is connected to a bridge port using full-duplex (true) or half-duplex (false).
     */
    public /*out*/ readonly pointToPointPort!: pulumi.Output<boolean>;
    /**
     * Port number will be assigned in the order that ports got added to the bridge, but this is only true until reboot. After reboot internal numbering will be used.
     */
    public /*out*/ readonly portNumber!: pulumi.Output<number>;
    /**
     * The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between regions.
     */
    public readonly priority!: pulumi.Output<string | undefined>;
    /**
     * ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when vlan-filtering is set to yes.
     */
    public readonly pvid!: pulumi.Output<number>;
    /**
     * Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect when protocol-mode is set to mstp.
     */
    public readonly restrictedRole!: pulumi.Output<boolean | undefined>;
    /**
     * Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to propagate. This property only has effect when protocol-mode is set to mstp.
     */
    public readonly restrictedTcn!: pulumi.Output<boolean | undefined>;
    /**
     * (R/M)STP algorithm assigned role of the port
     */
    public /*out*/ readonly role!: pulumi.Output<string>;
    /**
     * The total cost of the path to the root-bridge.
     */
    public /*out*/ readonly rootPathCost!: pulumi.Output<number>;
    /**
     * Whether the port is sending RSTP or MSTP BPDU types. A port will transit to STP type when RSTP/MSTP enabled port receives a STP BPDU
     */
    public /*out*/ readonly sendingRstp!: pulumi.Output<string>;
    /**
     * Port status ('in-bridge' - port is enabled).
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
     */
    public readonly tagStacking!: pulumi.Output<boolean | undefined>;
    /**
     * When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
     */
    public readonly trusted!: pulumi.Output<boolean | undefined>;
    /**
     * When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
     */
    public readonly unknownMulticastFlood!: pulumi.Output<boolean | undefined>;
    /**
     * When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
     */
    public readonly unknownUnicastFlood!: pulumi.Output<boolean | undefined>;

    /**
     * Create a InterfaceBridgePort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceBridgePortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceBridgePortArgs | InterfaceBridgePortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceBridgePortState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["autoIsolate"] = state ? state.autoIsolate : undefined;
            resourceInputs["bpduGuard"] = state ? state.bpduGuard : undefined;
            resourceInputs["bridge"] = state ? state.bridge : undefined;
            resourceInputs["broadcastFlood"] = state ? state.broadcastFlood : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["debugInfo"] = state ? state.debugInfo : undefined;
            resourceInputs["designatedBridge"] = state ? state.designatedBridge : undefined;
            resourceInputs["designatedCost"] = state ? state.designatedCost : undefined;
            resourceInputs["designatedPortNumber"] = state ? state.designatedPortNumber : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dynamic"] = state ? state.dynamic : undefined;
            resourceInputs["edge"] = state ? state.edge : undefined;
            resourceInputs["edgePort"] = state ? state.edgePort : undefined;
            resourceInputs["edgePortDiscovery"] = state ? state.edgePortDiscovery : undefined;
            resourceInputs["externalFdbStatus"] = state ? state.externalFdbStatus : undefined;
            resourceInputs["fastLeave"] = state ? state.fastLeave : undefined;
            resourceInputs["forwarding"] = state ? state.forwarding : undefined;
            resourceInputs["frameTypes"] = state ? state.frameTypes : undefined;
            resourceInputs["horizon"] = state ? state.horizon : undefined;
            resourceInputs["hw"] = state ? state.hw : undefined;
            resourceInputs["hwOffload"] = state ? state.hwOffload : undefined;
            resourceInputs["hwOffloadGroup"] = state ? state.hwOffloadGroup : undefined;
            resourceInputs["inactive"] = state ? state.inactive : undefined;
            resourceInputs["ingressFiltering"] = state ? state.ingressFiltering : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["internalPathCost"] = state ? state.internalPathCost : undefined;
            resourceInputs["learn"] = state ? state.learn : undefined;
            resourceInputs["learning"] = state ? state.learning : undefined;
            resourceInputs["multicastRouter"] = state ? state.multicastRouter : undefined;
            resourceInputs["nextid"] = state ? state.nextid : undefined;
            resourceInputs["pathCost"] = state ? state.pathCost : undefined;
            resourceInputs["pointToPoint"] = state ? state.pointToPoint : undefined;
            resourceInputs["pointToPointPort"] = state ? state.pointToPointPort : undefined;
            resourceInputs["portNumber"] = state ? state.portNumber : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["pvid"] = state ? state.pvid : undefined;
            resourceInputs["restrictedRole"] = state ? state.restrictedRole : undefined;
            resourceInputs["restrictedTcn"] = state ? state.restrictedTcn : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["rootPathCost"] = state ? state.rootPathCost : undefined;
            resourceInputs["sendingRstp"] = state ? state.sendingRstp : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tagStacking"] = state ? state.tagStacking : undefined;
            resourceInputs["trusted"] = state ? state.trusted : undefined;
            resourceInputs["unknownMulticastFlood"] = state ? state.unknownMulticastFlood : undefined;
            resourceInputs["unknownUnicastFlood"] = state ? state.unknownUnicastFlood : undefined;
        } else {
            const args = argsOrState as InterfaceBridgePortArgs | undefined;
            if ((!args || args.bridge === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bridge'");
            }
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.pvid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pvid'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["autoIsolate"] = args ? args.autoIsolate : undefined;
            resourceInputs["bpduGuard"] = args ? args.bpduGuard : undefined;
            resourceInputs["bridge"] = args ? args.bridge : undefined;
            resourceInputs["broadcastFlood"] = args ? args.broadcastFlood : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["edge"] = args ? args.edge : undefined;
            resourceInputs["fastLeave"] = args ? args.fastLeave : undefined;
            resourceInputs["frameTypes"] = args ? args.frameTypes : undefined;
            resourceInputs["horizon"] = args ? args.horizon : undefined;
            resourceInputs["hw"] = args ? args.hw : undefined;
            resourceInputs["ingressFiltering"] = args ? args.ingressFiltering : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["internalPathCost"] = args ? args.internalPathCost : undefined;
            resourceInputs["learn"] = args ? args.learn : undefined;
            resourceInputs["multicastRouter"] = args ? args.multicastRouter : undefined;
            resourceInputs["pathCost"] = args ? args.pathCost : undefined;
            resourceInputs["pointToPoint"] = args ? args.pointToPoint : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["pvid"] = args ? args.pvid : undefined;
            resourceInputs["restrictedRole"] = args ? args.restrictedRole : undefined;
            resourceInputs["restrictedTcn"] = args ? args.restrictedTcn : undefined;
            resourceInputs["tagStacking"] = args ? args.tagStacking : undefined;
            resourceInputs["trusted"] = args ? args.trusted : undefined;
            resourceInputs["unknownMulticastFlood"] = args ? args.unknownMulticastFlood : undefined;
            resourceInputs["unknownUnicastFlood"] = args ? args.unknownUnicastFlood : undefined;
            resourceInputs["debugInfo"] = undefined /*out*/;
            resourceInputs["designatedBridge"] = undefined /*out*/;
            resourceInputs["designatedCost"] = undefined /*out*/;
            resourceInputs["designatedPortNumber"] = undefined /*out*/;
            resourceInputs["dynamic"] = undefined /*out*/;
            resourceInputs["edgePort"] = undefined /*out*/;
            resourceInputs["edgePortDiscovery"] = undefined /*out*/;
            resourceInputs["externalFdbStatus"] = undefined /*out*/;
            resourceInputs["forwarding"] = undefined /*out*/;
            resourceInputs["hwOffload"] = undefined /*out*/;
            resourceInputs["hwOffloadGroup"] = undefined /*out*/;
            resourceInputs["inactive"] = undefined /*out*/;
            resourceInputs["learning"] = undefined /*out*/;
            resourceInputs["nextid"] = undefined /*out*/;
            resourceInputs["pointToPointPort"] = undefined /*out*/;
            resourceInputs["portNumber"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["rootPathCost"] = undefined /*out*/;
            resourceInputs["sendingRstp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceBridgePort.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InterfaceBridgePort resources.
 */
export interface InterfaceBridgePortState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when protocol-mode is set to rstp or mstp and edge is set to no.
     */
    autoIsolate?: pulumi.Input<boolean>;
    /**
     * This property has no effect when protocol-mode is set to none.
     */
    bpduGuard?: pulumi.Input<boolean>;
    bridge?: pulumi.Input<string>;
    /**
     * When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on egress ports.
     */
    broadcastFlood?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    debugInfo?: pulumi.Input<string>;
    /**
     * Root bridge ID (bridge priority and the bridge MAC address).
     */
    designatedBridge?: pulumi.Input<string>;
    /**
     * Designated cost.
     */
    designatedCost?: pulumi.Input<string>;
    /**
     * Designated port number.
     */
    designatedPortNumber?: pulumi.Input<number>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
     */
    dynamic?: pulumi.Input<boolean>;
    /**
     * Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other bridges attached.
     */
    edge?: pulumi.Input<string>;
    /**
     * Whether port is an edge port or not.
     */
    edgePort?: pulumi.Input<boolean>;
    /**
     * Whether port is set to automatically detect edge ports.
     */
    edgePortDiscovery?: pulumi.Input<boolean>;
    /**
     * Whether registration table is used instead of forwarding data base.
     */
    externalFdbStatus?: pulumi.Input<boolean>;
    /**
     * Enables IGMP Fast leave feature on the port.
     */
    fastLeave?: pulumi.Input<boolean>;
    /**
     * Shows if the port is not blocked by (R/M)STP.
     */
    forwarding?: pulumi.Input<boolean>;
    /**
     * Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
     */
    frameTypes?: pulumi.Input<string>;
    /**
     * Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware offloading. This value is integer '0'..'429496729' or 'none'.
     */
    horizon?: pulumi.Input<string>;
    /**
     * Enable or disable Hardware Offloading of the interface.
     */
    hw?: pulumi.Input<boolean>;
    /**
     * Hardware offloading state.
     */
    hwOffload?: pulumi.Input<boolean>;
    /**
     * Switch chip used by the port.
     */
    hwOffloadGroup?: pulumi.Input<string>;
    inactive?: pulumi.Input<boolean>;
    /**
     * Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This property only has effect when vlan-filtering is set to yes.
     */
    ingressFiltering?: pulumi.Input<boolean>;
    /**
     * Name of the interface.
     */
    interface?: pulumi.Input<string>;
    /**
     * Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
     */
    internalPathCost?: pulumi.Input<number>;
    /**
     * Changes MAC learning behaviour on a bridge port
     */
    learn?: pulumi.Input<string>;
    /**
     * Shows whether the port is capable of learning MAC addresses.
     */
    learning?: pulumi.Input<boolean>;
    /**
     * Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
     */
    multicastRouter?: pulumi.Input<string>;
    nextid?: pulumi.Input<string>;
    /**
     * Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between regions. This property has no effect when protocol-mode is set to none.
     */
    pathCost?: pulumi.Input<string>;
    /**
     * Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of failure. This property has no effect when protocol-mode is set to none.
     */
    pointToPoint?: pulumi.Input<string>;
    /**
     * Whether the port is connected to a bridge port using full-duplex (true) or half-duplex (false).
     */
    pointToPointPort?: pulumi.Input<boolean>;
    /**
     * Port number will be assigned in the order that ports got added to the bridge, but this is only true until reboot. After reboot internal numbering will be used.
     */
    portNumber?: pulumi.Input<number>;
    /**
     * The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between regions.
     */
    priority?: pulumi.Input<string>;
    /**
     * ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when vlan-filtering is set to yes.
     */
    pvid?: pulumi.Input<number>;
    /**
     * Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect when protocol-mode is set to mstp.
     */
    restrictedRole?: pulumi.Input<boolean>;
    /**
     * Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to propagate. This property only has effect when protocol-mode is set to mstp.
     */
    restrictedTcn?: pulumi.Input<boolean>;
    /**
     * (R/M)STP algorithm assigned role of the port
     */
    role?: pulumi.Input<string>;
    /**
     * The total cost of the path to the root-bridge.
     */
    rootPathCost?: pulumi.Input<number>;
    /**
     * Whether the port is sending RSTP or MSTP BPDU types. A port will transit to STP type when RSTP/MSTP enabled port receives a STP BPDU
     */
    sendingRstp?: pulumi.Input<string>;
    /**
     * Port status ('in-bridge' - port is enabled).
     */
    status?: pulumi.Input<string>;
    /**
     * Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
     */
    tagStacking?: pulumi.Input<boolean>;
    /**
     * When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
     */
    trusted?: pulumi.Input<boolean>;
    /**
     * When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
     */
    unknownMulticastFlood?: pulumi.Input<boolean>;
    /**
     * When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
     */
    unknownUnicastFlood?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a InterfaceBridgePort resource.
 */
export interface InterfaceBridgePortArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when protocol-mode is set to rstp or mstp and edge is set to no.
     */
    autoIsolate?: pulumi.Input<boolean>;
    /**
     * This property has no effect when protocol-mode is set to none.
     */
    bpduGuard?: pulumi.Input<boolean>;
    bridge: pulumi.Input<string>;
    /**
     * When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on egress ports.
     */
    broadcastFlood?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other bridges attached.
     */
    edge?: pulumi.Input<string>;
    /**
     * Enables IGMP Fast leave feature on the port.
     */
    fastLeave?: pulumi.Input<boolean>;
    /**
     * Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
     */
    frameTypes?: pulumi.Input<string>;
    /**
     * Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware offloading. This value is integer '0'..'429496729' or 'none'.
     */
    horizon?: pulumi.Input<string>;
    /**
     * Enable or disable Hardware Offloading of the interface.
     */
    hw?: pulumi.Input<boolean>;
    /**
     * Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This property only has effect when vlan-filtering is set to yes.
     */
    ingressFiltering?: pulumi.Input<boolean>;
    /**
     * Name of the interface.
     */
    interface: pulumi.Input<string>;
    /**
     * Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
     */
    internalPathCost?: pulumi.Input<number>;
    /**
     * Changes MAC learning behaviour on a bridge port
     */
    learn?: pulumi.Input<string>;
    /**
     * Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
     */
    multicastRouter?: pulumi.Input<string>;
    /**
     * Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between regions. This property has no effect when protocol-mode is set to none.
     */
    pathCost?: pulumi.Input<string>;
    /**
     * Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of failure. This property has no effect when protocol-mode is set to none.
     */
    pointToPoint?: pulumi.Input<string>;
    /**
     * The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between regions.
     */
    priority?: pulumi.Input<string>;
    /**
     * ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when vlan-filtering is set to yes.
     */
    pvid: pulumi.Input<number>;
    /**
     * Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect when protocol-mode is set to mstp.
     */
    restrictedRole?: pulumi.Input<boolean>;
    /**
     * Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to propagate. This property only has effect when protocol-mode is set to mstp.
     */
    restrictedTcn?: pulumi.Input<boolean>;
    /**
     * Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
     */
    tagStacking?: pulumi.Input<boolean>;
    /**
     * When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
     */
    trusted?: pulumi.Input<boolean>;
    /**
     * When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
     */
    unknownMulticastFlood?: pulumi.Input<boolean>;
    /**
     * When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
     */
    unknownUnicastFlood?: pulumi.Input<boolean>;
}
