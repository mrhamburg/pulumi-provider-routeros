// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as routeros from "@pulumi/routeros";
 *
 * const tlsService = {
 *     "api-ssl": 8729,
 *     "www-ssl": 443,
 * };
 * const disableService = {
 *     api: 8728,
 *     ftp: 21,
 *     telnet: 23,
 *     www: 80,
 * };
 * const enableService = {
 *     ssh: 22,
 *     winbox: 8291,
 * };
 * const tlsCert = new routeros.system.Certificate("tlsCert", {
 *     commonName: "Mikrotik Router",
 *     daysValid: 3650,
 *     keyUsages: [
 *         "key-cert-sign",
 *         "crl-sign",
 *         "digital-signature",
 *         "key-agreement",
 *         "tls-server",
 *     ],
 *     keySize: "prime256v1",
 *     signs: [{}],
 * });
 * // terraform state rm 'routeros_ip_service.tls["www-ssl"]'
 * // terraform import 'routeros_ip_service.tls["www-ssl"]' www-ssl
 * const tls: routeros.ip.Service[] = [];
 * for (const range of Object.entries(tlsService).map(([k, v]) => ({key: k, value: v}))) {
 *     tls.push(new routeros.ip.Service(`tls-${range.key}`, {
 *         numbers: range.key,
 *         port: range.value,
 *         certificate: tlsCert.name,
 *         tlsVersion: "only-1.2",
 *         disabled: false,
 *     }));
 * }
 * const disabled: routeros.ip.Service[] = [];
 * for (const range of Object.entries(disableService).map(([k, v]) => ({key: k, value: v}))) {
 *     disabled.push(new routeros.ip.Service(`disabled-${range.key}`, {
 *         numbers: range.key,
 *         port: range.value,
 *         disabled: true,
 *     }));
 * }
 * const enabled: routeros.ip.Service[] = [];
 * for (const range of Object.entries(enableService).map(([k, v]) => ({key: k, value: v}))) {
 *     enabled.push(new routeros.ip.Service(`enabled-${range.key}`, {
 *         numbers: range.key,
 *         port: range.value,
 *         disabled: false,
 *     }));
 * }
 * ```
 *
 * ## Import
 *
 * Import with the name of the ip service in case of the example use www-ssl
 *
 * ```sh
 *  $ pulumi import routeros:Ip/service:Service www_ssl www-ssl
 * ```
 */
export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:Ip/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * List of IP/IPv6 prefixes from which the service is accessible.
     */
    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
     */
    public readonly certificate!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly invalid!: pulumi.Output<boolean>;
    /**
     * Service name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
     */
    public readonly numbers!: pulumi.Output<string>;
    /**
     * The port particular service listens on.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Specifies which TLS versions to allow by a particular service.
     */
    public readonly tlsVersion!: pulumi.Output<string | undefined>;
    /**
     * Specify which VRF instance to use by a particular service.
     */
    public readonly vrf!: pulumi.Output<string | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["invalid"] = state ? state.invalid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numbers"] = state ? state.numbers : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["tlsVersion"] = state ? state.tlsVersion : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.numbers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numbers'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["numbers"] = args ? args.numbers : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["tlsVersion"] = args ? args.tlsVersion : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["invalid"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * List of IP/IPv6 prefixes from which the service is accessible.
     */
    address?: pulumi.Input<string>;
    /**
     * The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
     */
    certificate?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    invalid?: pulumi.Input<boolean>;
    /**
     * Service name.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
     */
    numbers?: pulumi.Input<string>;
    /**
     * The port particular service listens on.
     */
    port?: pulumi.Input<number>;
    /**
     * Specifies which TLS versions to allow by a particular service.
     */
    tlsVersion?: pulumi.Input<string>;
    /**
     * Specify which VRF instance to use by a particular service.
     */
    vrf?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * List of IP/IPv6 prefixes from which the service is accessible.
     */
    address?: pulumi.Input<string>;
    /**
     * The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
     */
    certificate?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
     */
    numbers: pulumi.Input<string>;
    /**
     * The port particular service listens on.
     */
    port: pulumi.Input<number>;
    /**
     * Specifies which TLS versions to allow by a particular service.
     */
    tlsVersion?: pulumi.Input<string>;
    /**
     * Specify which VRF instance to use by a particular service.
     */
    vrf?: pulumi.Input<string>;
}
