// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DhcpClientArgs, DhcpClientState } from "./dhcpClient";
export type DhcpClient = import("./dhcpClient").DhcpClient;
export const DhcpClient: typeof import("./dhcpClient").DhcpClient = null as any;
utilities.lazyLoad(exports, ["DhcpClient"], () => require("./dhcpClient"));

export { DhcpIpClientArgs, DhcpIpClientState } from "./dhcpIpClient";
export type DhcpIpClient = import("./dhcpIpClient").DhcpIpClient;
export const DhcpIpClient: typeof import("./dhcpIpClient").DhcpIpClient = null as any;
utilities.lazyLoad(exports, ["DhcpIpClient"], () => require("./dhcpIpClient"));

export { DhcpIpServerArgs, DhcpIpServerState } from "./dhcpIpServer";
export type DhcpIpServer = import("./dhcpIpServer").DhcpIpServer;
export const DhcpIpServer: typeof import("./dhcpIpServer").DhcpIpServer = null as any;
utilities.lazyLoad(exports, ["DhcpIpServer"], () => require("./dhcpIpServer"));

export { DhcpIpServerLeaseArgs, DhcpIpServerLeaseState } from "./dhcpIpServerLease";
export type DhcpIpServerLease = import("./dhcpIpServerLease").DhcpIpServerLease;
export const DhcpIpServerLease: typeof import("./dhcpIpServerLease").DhcpIpServerLease = null as any;
utilities.lazyLoad(exports, ["DhcpIpServerLease"], () => require("./dhcpIpServerLease"));

export { DhcpIpServerNetworkArgs, DhcpIpServerNetworkState } from "./dhcpIpServerNetwork";
export type DhcpIpServerNetwork = import("./dhcpIpServerNetwork").DhcpIpServerNetwork;
export const DhcpIpServerNetwork: typeof import("./dhcpIpServerNetwork").DhcpIpServerNetwork = null as any;
utilities.lazyLoad(exports, ["DhcpIpServerNetwork"], () => require("./dhcpIpServerNetwork"));

export { DhcpServerArgs, DhcpServerState } from "./dhcpServer";
export type DhcpServer = import("./dhcpServer").DhcpServer;
export const DhcpServer: typeof import("./dhcpServer").DhcpServer = null as any;
utilities.lazyLoad(exports, ["DhcpServer"], () => require("./dhcpServer"));

export { DhcpServerLeaseArgs, DhcpServerLeaseState } from "./dhcpServerLease";
export type DhcpServerLease = import("./dhcpServerLease").DhcpServerLease;
export const DhcpServerLease: typeof import("./dhcpServerLease").DhcpServerLease = null as any;
utilities.lazyLoad(exports, ["DhcpServerLease"], () => require("./dhcpServerLease"));

export { DhcpServerNetworkArgs, DhcpServerNetworkState } from "./dhcpServerNetwork";
export type DhcpServerNetwork = import("./dhcpServerNetwork").DhcpServerNetwork;
export const DhcpServerNetwork: typeof import("./dhcpServerNetwork").DhcpServerNetwork = null as any;
utilities.lazyLoad(exports, ["DhcpServerNetwork"], () => require("./dhcpServerNetwork"));

export { DnsArgs, DnsState } from "./dns";
export type Dns = import("./dns").Dns;
export const Dns: typeof import("./dns").Dns = null as any;
utilities.lazyLoad(exports, ["Dns"], () => require("./dns"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { FirewallAddrListArgs, FirewallAddrListState } from "./firewallAddrList";
export type FirewallAddrList = import("./firewallAddrList").FirewallAddrList;
export const FirewallAddrList: typeof import("./firewallAddrList").FirewallAddrList = null as any;
utilities.lazyLoad(exports, ["FirewallAddrList"], () => require("./firewallAddrList"));

export { FirewallFilterArgs, FirewallFilterState } from "./firewallFilter";
export type FirewallFilter = import("./firewallFilter").FirewallFilter;
export const FirewallFilter: typeof import("./firewallFilter").FirewallFilter = null as any;
utilities.lazyLoad(exports, ["FirewallFilter"], () => require("./firewallFilter"));

export { FirewallMangleArgs, FirewallMangleState } from "./firewallMangle";
export type FirewallMangle = import("./firewallMangle").FirewallMangle;
export const FirewallMangle: typeof import("./firewallMangle").FirewallMangle = null as any;
utilities.lazyLoad(exports, ["FirewallMangle"], () => require("./firewallMangle"));

export { FirewallNatArgs, FirewallNatState } from "./firewallNat";
export type FirewallNat = import("./firewallNat").FirewallNat;
export const FirewallNat: typeof import("./firewallNat").FirewallNat = null as any;
utilities.lazyLoad(exports, ["FirewallNat"], () => require("./firewallNat"));

export { GetAddressesArgs, GetAddressesResult, GetAddressesOutputArgs } from "./getAddresses";
export const getAddresses: typeof import("./getAddresses").getAddresses = null as any;
export const getAddressesOutput: typeof import("./getAddresses").getAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getAddresses","getAddressesOutput"], () => require("./getAddresses"));

export { GetFirewallArgs, GetFirewallResult, GetFirewallOutputArgs } from "./getFirewall";
export const getFirewall: typeof import("./getFirewall").getFirewall = null as any;
export const getFirewallOutput: typeof import("./getFirewall").getFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getFirewall","getFirewallOutput"], () => require("./getFirewall"));

export { GetRoutesArgs, GetRoutesResult, GetRoutesOutputArgs } from "./getRoutes";
export const getRoutes: typeof import("./getRoutes").getRoutes = null as any;
export const getRoutesOutput: typeof import("./getRoutes").getRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getRoutes","getRoutesOutput"], () => require("./getRoutes"));

export { IpDnsArgs, IpDnsState } from "./ipDns";
export type IpDns = import("./ipDns").IpDns;
export const IpDns: typeof import("./ipDns").IpDns = null as any;
utilities.lazyLoad(exports, ["IpDns"], () => require("./ipDns"));

export { IpDnsRecordArgs, IpDnsRecordState } from "./ipDnsRecord";
export type IpDnsRecord = import("./ipDnsRecord").IpDnsRecord;
export const IpDnsRecord: typeof import("./ipDnsRecord").IpDnsRecord = null as any;
utilities.lazyLoad(exports, ["IpDnsRecord"], () => require("./ipDnsRecord"));

export { IpFirewallAddrListArgs, IpFirewallAddrListState } from "./ipFirewallAddrList";
export type IpFirewallAddrList = import("./ipFirewallAddrList").IpFirewallAddrList;
export const IpFirewallAddrList: typeof import("./ipFirewallAddrList").IpFirewallAddrList = null as any;
utilities.lazyLoad(exports, ["IpFirewallAddrList"], () => require("./ipFirewallAddrList"));

export { IpFirewallFilterArgs, IpFirewallFilterState } from "./ipFirewallFilter";
export type IpFirewallFilter = import("./ipFirewallFilter").IpFirewallFilter;
export const IpFirewallFilter: typeof import("./ipFirewallFilter").IpFirewallFilter = null as any;
utilities.lazyLoad(exports, ["IpFirewallFilter"], () => require("./ipFirewallFilter"));

export { IpFirewallMangleArgs, IpFirewallMangleState } from "./ipFirewallMangle";
export type IpFirewallMangle = import("./ipFirewallMangle").IpFirewallMangle;
export const IpFirewallMangle: typeof import("./ipFirewallMangle").IpFirewallMangle = null as any;
utilities.lazyLoad(exports, ["IpFirewallMangle"], () => require("./ipFirewallMangle"));

export { IpFirewallNatArgs, IpFirewallNatState } from "./ipFirewallNat";
export type IpFirewallNat = import("./ipFirewallNat").IpFirewallNat;
export const IpFirewallNat: typeof import("./ipFirewallNat").IpFirewallNat = null as any;
utilities.lazyLoad(exports, ["IpFirewallNat"], () => require("./ipFirewallNat"));

export { PoolArgs, PoolState } from "./pool";
export type Pool = import("./pool").Pool;
export const Pool: typeof import("./pool").Pool = null as any;
utilities.lazyLoad(exports, ["Pool"], () => require("./pool"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { V4AddressArgs, V4AddressState } from "./v4address";
export type V4Address = import("./v4address").V4Address;
export const V4Address: typeof import("./v4address").V4Address = null as any;
utilities.lazyLoad(exports, ["V4Address"], () => require("./v4address"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "routeros:Ip/dhcpClient:DhcpClient":
                return new DhcpClient(name, <any>undefined, { urn })
            case "routeros:Ip/dhcpIpClient:DhcpIpClient":
                return new DhcpIpClient(name, <any>undefined, { urn })
            case "routeros:Ip/dhcpIpServer:DhcpIpServer":
                return new DhcpIpServer(name, <any>undefined, { urn })
            case "routeros:Ip/dhcpIpServerLease:DhcpIpServerLease":
                return new DhcpIpServerLease(name, <any>undefined, { urn })
            case "routeros:Ip/dhcpIpServerNetwork:DhcpIpServerNetwork":
                return new DhcpIpServerNetwork(name, <any>undefined, { urn })
            case "routeros:Ip/dhcpServer:DhcpServer":
                return new DhcpServer(name, <any>undefined, { urn })
            case "routeros:Ip/dhcpServerLease:DhcpServerLease":
                return new DhcpServerLease(name, <any>undefined, { urn })
            case "routeros:Ip/dhcpServerNetwork:DhcpServerNetwork":
                return new DhcpServerNetwork(name, <any>undefined, { urn })
            case "routeros:Ip/dns:Dns":
                return new Dns(name, <any>undefined, { urn })
            case "routeros:Ip/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "routeros:Ip/firewallAddrList:FirewallAddrList":
                return new FirewallAddrList(name, <any>undefined, { urn })
            case "routeros:Ip/firewallFilter:FirewallFilter":
                return new FirewallFilter(name, <any>undefined, { urn })
            case "routeros:Ip/firewallMangle:FirewallMangle":
                return new FirewallMangle(name, <any>undefined, { urn })
            case "routeros:Ip/firewallNat:FirewallNat":
                return new FirewallNat(name, <any>undefined, { urn })
            case "routeros:Ip/ipDns:IpDns":
                return new IpDns(name, <any>undefined, { urn })
            case "routeros:Ip/ipDnsRecord:IpDnsRecord":
                return new IpDnsRecord(name, <any>undefined, { urn })
            case "routeros:Ip/ipFirewallAddrList:IpFirewallAddrList":
                return new IpFirewallAddrList(name, <any>undefined, { urn })
            case "routeros:Ip/ipFirewallFilter:IpFirewallFilter":
                return new IpFirewallFilter(name, <any>undefined, { urn })
            case "routeros:Ip/ipFirewallMangle:IpFirewallMangle":
                return new IpFirewallMangle(name, <any>undefined, { urn })
            case "routeros:Ip/ipFirewallNat:IpFirewallNat":
                return new IpFirewallNat(name, <any>undefined, { urn })
            case "routeros:Ip/pool:Pool":
                return new Pool(name, <any>undefined, { urn })
            case "routeros:Ip/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "routeros:Ip/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "routeros:Ip/v4Address:V4Address":
                return new V4Address(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("routeros", "Ip/dhcpClient", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/dhcpIpClient", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/dhcpIpServer", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/dhcpIpServerLease", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/dhcpIpServerNetwork", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/dhcpServer", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/dhcpServerLease", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/dhcpServerNetwork", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/dns", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/dnsRecord", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/firewallAddrList", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/firewallFilter", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/firewallMangle", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/firewallNat", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/ipDns", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/ipDnsRecord", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/ipFirewallAddrList", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/ipFirewallFilter", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/ipFirewallMangle", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/ipFirewallNat", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/pool", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/route", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/service", _module)
pulumi.runtime.registerResourceModule("routeros", "Ip/v4Address", _module)
