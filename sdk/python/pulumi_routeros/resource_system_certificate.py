# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceSystemCertificateArgs', 'ResourceSystemCertificate']

@pulumi.input_type
class ResourceSystemCertificateArgs:
    def __init__(__self__, *,
                 common_name: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 ___skip_: Optional[pulumi.Input[str]] = None,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 days_valid: Optional[pulumi.Input[int]] = None,
                 key_size: Optional[pulumi.Input[str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 signs: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSystemCertificateSignArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subject_alt_name: Optional[pulumi.Input[str]] = None,
                 trusted: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ResourceSystemCertificate resource.
        :param pulumi.Input[str] common_name: Common Name (e.g. server FQDN or YOUR name).
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___skip_: <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] country: Country Name (2 letter code).
        :param pulumi.Input[int] days_valid: Certificate lifetime.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_usages: Detailed key usage descriptions can be found in RFC 5280.
        :param pulumi.Input[str] locality: Locality Name (eg, city).
        :param pulumi.Input[str] name: Name of the certificate. Name can be edited.
        :param pulumi.Input[str] organization: Organizational Unit Name (eg, section)
        :param pulumi.Input[str] state: State or Province Name (full name).
        :param pulumi.Input[str] subject_alt_name: SANs (subject alternative names).
        :param pulumi.Input[bool] trusted: If set to yes certificate is included 'in trusted certificate chain'.
        :param pulumi.Input[str] unit: Organizational Unit Name (eg, section).
        """
        pulumi.set(__self__, "common_name", common_name)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if ___skip_ is not None:
            pulumi.set(__self__, "___skip_", ___skip_)
        if copy_from is not None:
            pulumi.set(__self__, "copy_from", copy_from)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if days_valid is not None:
            pulumi.set(__self__, "days_valid", days_valid)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if key_usages is not None:
            pulumi.set(__self__, "key_usages", key_usages)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if signs is not None:
            pulumi.set(__self__, "signs", signs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subject_alt_name is not None:
            pulumi.set(__self__, "subject_alt_name", subject_alt_name)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Input[str]:
        """
        Common Name (e.g. server FQDN or YOUR name).
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def ___skip_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___skip_")

    @___skip_.setter
    def ___skip_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___skip_", value)

    @property
    @pulumi.getter(name="copyFrom")
    def copy_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "copy_from")

    @copy_from.setter
    def copy_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_from", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Country Name (2 letter code).
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="daysValid")
    def days_valid(self) -> Optional[pulumi.Input[int]]:
        """
        Certificate lifetime.
        """
        return pulumi.get(self, "days_valid")

    @days_valid.setter
    def days_valid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days_valid", value)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_size")

    @key_size.setter
    def key_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_size", value)

    @property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Detailed key usage descriptions can be found in RFC 5280.
        """
        return pulumi.get(self, "key_usages")

    @key_usages.setter
    def key_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_usages", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        """
        Locality Name (eg, city).
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the certificate. Name can be edited.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        Organizational Unit Name (eg, section)
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def signs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSystemCertificateSignArgs']]]]:
        return pulumi.get(self, "signs")

    @signs.setter
    def signs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSystemCertificateSignArgs']]]]):
        pulumi.set(self, "signs", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State or Province Name (full name).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subjectAltName")
    def subject_alt_name(self) -> Optional[pulumi.Input[str]]:
        """
        SANs (subject alternative names).
        """
        return pulumi.get(self, "subject_alt_name")

    @subject_alt_name.setter
    def subject_alt_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_alt_name", value)

    @property
    @pulumi.getter
    def trusted(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to yes certificate is included 'in trusted certificate chain'.
        """
        return pulumi.get(self, "trusted")

    @trusted.setter
    def trusted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trusted", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Organizational Unit Name (eg, section).
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class _ResourceSystemCertificateState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 ___skip_: Optional[pulumi.Input[str]] = None,
                 akid: Optional[pulumi.Input[str]] = None,
                 authority: Optional[pulumi.Input[str]] = None,
                 ca: Optional[pulumi.Input[str]] = None,
                 ca_crl_host: Optional[pulumi.Input[str]] = None,
                 ca_fingerprint: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 crl: Optional[pulumi.Input[str]] = None,
                 days_valid: Optional[pulumi.Input[int]] = None,
                 digest_algorithm: Optional[pulumi.Input[bool]] = None,
                 dsa: Optional[pulumi.Input[bool]] = None,
                 expired: Optional[pulumi.Input[bool]] = None,
                 expires_after: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 invalid_after: Optional[pulumi.Input[str]] = None,
                 invalid_before: Optional[pulumi.Input[str]] = None,
                 issued: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 key_size: Optional[pulumi.Input[str]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[bool]] = None,
                 req_fingerprint: Optional[pulumi.Input[str]] = None,
                 revoked: Optional[pulumi.Input[str]] = None,
                 scep_url: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 signs: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSystemCertificateSignArgs']]]] = None,
                 skid: Optional[pulumi.Input[str]] = None,
                 smart_card_key: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subject_alt_name: Optional[pulumi.Input[str]] = None,
                 trusted: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ResourceSystemCertificate resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___skip_: <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] akid: Authority Key Identifier.
        :param pulumi.Input[str] common_name: Common Name (e.g. server FQDN or YOUR name).
        :param pulumi.Input[str] country: Country Name (2 letter code).
        :param pulumi.Input[int] days_valid: Certificate lifetime.
        :param pulumi.Input[bool] expired: Set to true if certificate is expired.
        :param pulumi.Input[str] invalid_after: The date after which certificate wil be invalid.
        :param pulumi.Input[str] invalid_before: The date before which certificate is invalid.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_usages: Detailed key usage descriptions can be found in RFC 5280.
        :param pulumi.Input[str] locality: Locality Name (eg, city).
        :param pulumi.Input[str] name: Name of the certificate. Name can be edited.
        :param pulumi.Input[str] organization: Organizational Unit Name (eg, section)
        :param pulumi.Input[str] skid: Subject Key Identifier.
        :param pulumi.Input[str] state: State or Province Name (full name).
        :param pulumi.Input[str] status: Shows current status of scep client.
        :param pulumi.Input[str] subject_alt_name: SANs (subject alternative names).
        :param pulumi.Input[bool] trusted: If set to yes certificate is included 'in trusted certificate chain'.
        :param pulumi.Input[str] unit: Organizational Unit Name (eg, section).
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if ___skip_ is not None:
            pulumi.set(__self__, "___skip_", ___skip_)
        if akid is not None:
            pulumi.set(__self__, "akid", akid)
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if ca_crl_host is not None:
            pulumi.set(__self__, "ca_crl_host", ca_crl_host)
        if ca_fingerprint is not None:
            pulumi.set(__self__, "ca_fingerprint", ca_fingerprint)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if copy_from is not None:
            pulumi.set(__self__, "copy_from", copy_from)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if crl is not None:
            pulumi.set(__self__, "crl", crl)
        if days_valid is not None:
            pulumi.set(__self__, "days_valid", days_valid)
        if digest_algorithm is not None:
            pulumi.set(__self__, "digest_algorithm", digest_algorithm)
        if dsa is not None:
            pulumi.set(__self__, "dsa", dsa)
        if expired is not None:
            pulumi.set(__self__, "expired", expired)
        if expires_after is not None:
            pulumi.set(__self__, "expires_after", expires_after)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if invalid_after is not None:
            pulumi.set(__self__, "invalid_after", invalid_after)
        if invalid_before is not None:
            pulumi.set(__self__, "invalid_before", invalid_before)
        if issued is not None:
            pulumi.set(__self__, "issued", issued)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if key_usages is not None:
            pulumi.set(__self__, "key_usages", key_usages)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if req_fingerprint is not None:
            pulumi.set(__self__, "req_fingerprint", req_fingerprint)
        if revoked is not None:
            pulumi.set(__self__, "revoked", revoked)
        if scep_url is not None:
            pulumi.set(__self__, "scep_url", scep_url)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signs is not None:
            pulumi.set(__self__, "signs", signs)
        if skid is not None:
            pulumi.set(__self__, "skid", skid)
        if smart_card_key is not None:
            pulumi.set(__self__, "smart_card_key", smart_card_key)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subject_alt_name is not None:
            pulumi.set(__self__, "subject_alt_name", subject_alt_name)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def ___skip_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___skip_")

    @___skip_.setter
    def ___skip_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___skip_", value)

    @property
    @pulumi.getter
    def akid(self) -> Optional[pulumi.Input[str]]:
        """
        Authority Key Identifier.
        """
        return pulumi.get(self, "akid")

    @akid.setter
    def akid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "akid", value)

    @property
    @pulumi.getter
    def authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authority")

    @authority.setter
    def authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority", value)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="caCrlHost")
    def ca_crl_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_crl_host")

    @ca_crl_host.setter
    def ca_crl_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_crl_host", value)

    @property
    @pulumi.getter(name="caFingerprint")
    def ca_fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_fingerprint")

    @ca_fingerprint.setter
    def ca_fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_fingerprint", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        """
        Common Name (e.g. server FQDN or YOUR name).
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="copyFrom")
    def copy_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "copy_from")

    @copy_from.setter
    def copy_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_from", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Country Name (2 letter code).
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def crl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "crl")

    @crl.setter
    def crl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crl", value)

    @property
    @pulumi.getter(name="daysValid")
    def days_valid(self) -> Optional[pulumi.Input[int]]:
        """
        Certificate lifetime.
        """
        return pulumi.get(self, "days_valid")

    @days_valid.setter
    def days_valid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days_valid", value)

    @property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "digest_algorithm")

    @digest_algorithm.setter
    def digest_algorithm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "digest_algorithm", value)

    @property
    @pulumi.getter
    def dsa(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dsa")

    @dsa.setter
    def dsa(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dsa", value)

    @property
    @pulumi.getter
    def expired(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true if certificate is expired.
        """
        return pulumi.get(self, "expired")

    @expired.setter
    def expired(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expired", value)

    @property
    @pulumi.getter(name="expiresAfter")
    def expires_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expires_after")

    @expires_after.setter
    def expires_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_after", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter(name="invalidAfter")
    def invalid_after(self) -> Optional[pulumi.Input[str]]:
        """
        The date after which certificate wil be invalid.
        """
        return pulumi.get(self, "invalid_after")

    @invalid_after.setter
    def invalid_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_after", value)

    @property
    @pulumi.getter(name="invalidBefore")
    def invalid_before(self) -> Optional[pulumi.Input[str]]:
        """
        The date before which certificate is invalid.
        """
        return pulumi.get(self, "invalid_before")

    @invalid_before.setter
    def invalid_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_before", value)

    @property
    @pulumi.getter
    def issued(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issued")

    @issued.setter
    def issued(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issued", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_size")

    @key_size.setter
    def key_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_size", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Detailed key usage descriptions can be found in RFC 5280.
        """
        return pulumi.get(self, "key_usages")

    @key_usages.setter
    def key_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_usages", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        """
        Locality Name (eg, city).
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the certificate. Name can be edited.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        Organizational Unit Name (eg, section)
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="reqFingerprint")
    def req_fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "req_fingerprint")

    @req_fingerprint.setter
    def req_fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "req_fingerprint", value)

    @property
    @pulumi.getter
    def revoked(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "revoked")

    @revoked.setter
    def revoked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked", value)

    @property
    @pulumi.getter(name="scepUrl")
    def scep_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scep_url")

    @scep_url.setter
    def scep_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scep_url", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def signs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSystemCertificateSignArgs']]]]:
        return pulumi.get(self, "signs")

    @signs.setter
    def signs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceSystemCertificateSignArgs']]]]):
        pulumi.set(self, "signs", value)

    @property
    @pulumi.getter
    def skid(self) -> Optional[pulumi.Input[str]]:
        """
        Subject Key Identifier.
        """
        return pulumi.get(self, "skid")

    @skid.setter
    def skid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skid", value)

    @property
    @pulumi.getter(name="smartCardKey")
    def smart_card_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "smart_card_key")

    @smart_card_key.setter
    def smart_card_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smart_card_key", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State or Province Name (full name).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Shows current status of scep client.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subjectAltName")
    def subject_alt_name(self) -> Optional[pulumi.Input[str]]:
        """
        SANs (subject alternative names).
        """
        return pulumi.get(self, "subject_alt_name")

    @subject_alt_name.setter
    def subject_alt_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_alt_name", value)

    @property
    @pulumi.getter
    def trusted(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to yes certificate is included 'in trusted certificate chain'.
        """
        return pulumi.get(self, "trusted")

    @trusted.setter
    def trusted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trusted", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Organizational Unit Name (eg, section).
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


class ResourceSystemCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 ___skip_: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 days_valid: Optional[pulumi.Input[int]] = None,
                 key_size: Optional[pulumi.Input[str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 signs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceSystemCertificateSignArgs']]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subject_alt_name: Optional[pulumi.Input[str]] = None,
                 trusted: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        root_ca = routeros.ResourceSystemCertificate("rootCa",
            common_name="RootCA",
            key_usages=[
                "key-cert-sign",
                "crl-sign",
            ],
            trusted=True,
            signs=[routeros.ResourceSystemCertificateSignArgs()])
        # digitalSignature: Used for entity and data origin authentication with integrity.
        # keyEncipherment:  Used to encrypt symmetric key, which is then transferred to target.
        # keyAgreement:     Enables use of key agreement to establish symmetric key with target. 
        server_crt = routeros.ResourceSystemCertificate("serverCrt",
            common_name="server.crt",
            key_usages=[
                "digital-signature",
                "key-encipherment",
                "tls-server",
            ],
            signs=[routeros.ResourceSystemCertificateSignArgs(
                ca=root_ca.name,
            )])
        client_crt = routeros.ResourceSystemCertificate("clientCrt",
            common_name="client.crt",
            key_size="prime256v1",
            key_usages=[
                "digital-signature",
                "key-agreement",
                "tls-client",
            ],
            signs=[routeros.ResourceSystemCertificateSignArgs(
                ca=root_ca.name,
            )])
        unsigned_crt = routeros.ResourceSystemCertificate("unsignedCrt",
            common_name="unsigned.crt",
            key_size="1024",
            subject_alt_name="DNS:router.lan,DNS:myrouter.lan,IP:192.168.88.1")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/certificate get [print show-ids]] #If you plan to manipulate the certificate requiring signing, you need to correctly fill in the sign{} section. #Changes in the sign{} section will not cause changes in the certificate. It's not a bug, it's a feature!

        ```sh
         $ pulumi import routeros:index/resourceSystemCertificate:ResourceSystemCertificate client *9D
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___skip_: <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] common_name: Common Name (e.g. server FQDN or YOUR name).
        :param pulumi.Input[str] country: Country Name (2 letter code).
        :param pulumi.Input[int] days_valid: Certificate lifetime.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_usages: Detailed key usage descriptions can be found in RFC 5280.
        :param pulumi.Input[str] locality: Locality Name (eg, city).
        :param pulumi.Input[str] name: Name of the certificate. Name can be edited.
        :param pulumi.Input[str] organization: Organizational Unit Name (eg, section)
        :param pulumi.Input[str] state: State or Province Name (full name).
        :param pulumi.Input[str] subject_alt_name: SANs (subject alternative names).
        :param pulumi.Input[bool] trusted: If set to yes certificate is included 'in trusted certificate chain'.
        :param pulumi.Input[str] unit: Organizational Unit Name (eg, section).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceSystemCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        root_ca = routeros.ResourceSystemCertificate("rootCa",
            common_name="RootCA",
            key_usages=[
                "key-cert-sign",
                "crl-sign",
            ],
            trusted=True,
            signs=[routeros.ResourceSystemCertificateSignArgs()])
        # digitalSignature: Used for entity and data origin authentication with integrity.
        # keyEncipherment:  Used to encrypt symmetric key, which is then transferred to target.
        # keyAgreement:     Enables use of key agreement to establish symmetric key with target. 
        server_crt = routeros.ResourceSystemCertificate("serverCrt",
            common_name="server.crt",
            key_usages=[
                "digital-signature",
                "key-encipherment",
                "tls-server",
            ],
            signs=[routeros.ResourceSystemCertificateSignArgs(
                ca=root_ca.name,
            )])
        client_crt = routeros.ResourceSystemCertificate("clientCrt",
            common_name="client.crt",
            key_size="prime256v1",
            key_usages=[
                "digital-signature",
                "key-agreement",
                "tls-client",
            ],
            signs=[routeros.ResourceSystemCertificateSignArgs(
                ca=root_ca.name,
            )])
        unsigned_crt = routeros.ResourceSystemCertificate("unsignedCrt",
            common_name="unsigned.crt",
            key_size="1024",
            subject_alt_name="DNS:router.lan,DNS:myrouter.lan,IP:192.168.88.1")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/certificate get [print show-ids]] #If you plan to manipulate the certificate requiring signing, you need to correctly fill in the sign{} section. #Changes in the sign{} section will not cause changes in the certificate. It's not a bug, it's a feature!

        ```sh
         $ pulumi import routeros:index/resourceSystemCertificate:ResourceSystemCertificate client *9D
        ```

        :param str resource_name: The name of the resource.
        :param ResourceSystemCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceSystemCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 ___skip_: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 days_valid: Optional[pulumi.Input[int]] = None,
                 key_size: Optional[pulumi.Input[str]] = None,
                 key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 signs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceSystemCertificateSignArgs']]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subject_alt_name: Optional[pulumi.Input[str]] = None,
                 trusted: Optional[pulumi.Input[bool]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceSystemCertificateArgs.__new__(ResourceSystemCertificateArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["___skip_"] = ___skip_
            if common_name is None and not opts.urn:
                raise TypeError("Missing required property 'common_name'")
            __props__.__dict__["common_name"] = common_name
            __props__.__dict__["copy_from"] = copy_from
            __props__.__dict__["country"] = country
            __props__.__dict__["days_valid"] = days_valid
            __props__.__dict__["key_size"] = key_size
            __props__.__dict__["key_usages"] = key_usages
            __props__.__dict__["locality"] = locality
            __props__.__dict__["name"] = name
            __props__.__dict__["organization"] = organization
            __props__.__dict__["signs"] = signs
            __props__.__dict__["state"] = state
            __props__.__dict__["subject_alt_name"] = subject_alt_name
            __props__.__dict__["trusted"] = trusted
            __props__.__dict__["unit"] = unit
            __props__.__dict__["akid"] = None
            __props__.__dict__["authority"] = None
            __props__.__dict__["ca"] = None
            __props__.__dict__["ca_crl_host"] = None
            __props__.__dict__["ca_fingerprint"] = None
            __props__.__dict__["crl"] = None
            __props__.__dict__["digest_algorithm"] = None
            __props__.__dict__["dsa"] = None
            __props__.__dict__["expired"] = None
            __props__.__dict__["expires_after"] = None
            __props__.__dict__["fingerprint"] = None
            __props__.__dict__["invalid_after"] = None
            __props__.__dict__["invalid_before"] = None
            __props__.__dict__["issued"] = None
            __props__.__dict__["issuer"] = None
            __props__.__dict__["key_type"] = None
            __props__.__dict__["private_key"] = None
            __props__.__dict__["req_fingerprint"] = None
            __props__.__dict__["revoked"] = None
            __props__.__dict__["scep_url"] = None
            __props__.__dict__["serial_number"] = None
            __props__.__dict__["skid"] = None
            __props__.__dict__["smart_card_key"] = None
            __props__.__dict__["status"] = None
        super(ResourceSystemCertificate, __self__).__init__(
            'routeros:index/resourceSystemCertificate:ResourceSystemCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            ___skip_: Optional[pulumi.Input[str]] = None,
            akid: Optional[pulumi.Input[str]] = None,
            authority: Optional[pulumi.Input[str]] = None,
            ca: Optional[pulumi.Input[str]] = None,
            ca_crl_host: Optional[pulumi.Input[str]] = None,
            ca_fingerprint: Optional[pulumi.Input[str]] = None,
            common_name: Optional[pulumi.Input[str]] = None,
            copy_from: Optional[pulumi.Input[str]] = None,
            country: Optional[pulumi.Input[str]] = None,
            crl: Optional[pulumi.Input[str]] = None,
            days_valid: Optional[pulumi.Input[int]] = None,
            digest_algorithm: Optional[pulumi.Input[bool]] = None,
            dsa: Optional[pulumi.Input[bool]] = None,
            expired: Optional[pulumi.Input[bool]] = None,
            expires_after: Optional[pulumi.Input[str]] = None,
            fingerprint: Optional[pulumi.Input[str]] = None,
            invalid_after: Optional[pulumi.Input[str]] = None,
            invalid_before: Optional[pulumi.Input[str]] = None,
            issued: Optional[pulumi.Input[str]] = None,
            issuer: Optional[pulumi.Input[str]] = None,
            key_size: Optional[pulumi.Input[str]] = None,
            key_type: Optional[pulumi.Input[str]] = None,
            key_usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            locality: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[bool]] = None,
            req_fingerprint: Optional[pulumi.Input[str]] = None,
            revoked: Optional[pulumi.Input[str]] = None,
            scep_url: Optional[pulumi.Input[str]] = None,
            serial_number: Optional[pulumi.Input[str]] = None,
            signs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ResourceSystemCertificateSignArgs']]]]] = None,
            skid: Optional[pulumi.Input[str]] = None,
            smart_card_key: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subject_alt_name: Optional[pulumi.Input[str]] = None,
            trusted: Optional[pulumi.Input[bool]] = None,
            unit: Optional[pulumi.Input[str]] = None) -> 'ResourceSystemCertificate':
        """
        Get an existing ResourceSystemCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___skip_: <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] akid: Authority Key Identifier.
        :param pulumi.Input[str] common_name: Common Name (e.g. server FQDN or YOUR name).
        :param pulumi.Input[str] country: Country Name (2 letter code).
        :param pulumi.Input[int] days_valid: Certificate lifetime.
        :param pulumi.Input[bool] expired: Set to true if certificate is expired.
        :param pulumi.Input[str] invalid_after: The date after which certificate wil be invalid.
        :param pulumi.Input[str] invalid_before: The date before which certificate is invalid.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_usages: Detailed key usage descriptions can be found in RFC 5280.
        :param pulumi.Input[str] locality: Locality Name (eg, city).
        :param pulumi.Input[str] name: Name of the certificate. Name can be edited.
        :param pulumi.Input[str] organization: Organizational Unit Name (eg, section)
        :param pulumi.Input[str] skid: Subject Key Identifier.
        :param pulumi.Input[str] state: State or Province Name (full name).
        :param pulumi.Input[str] status: Shows current status of scep client.
        :param pulumi.Input[str] subject_alt_name: SANs (subject alternative names).
        :param pulumi.Input[bool] trusted: If set to yes certificate is included 'in trusted certificate chain'.
        :param pulumi.Input[str] unit: Organizational Unit Name (eg, section).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceSystemCertificateState.__new__(_ResourceSystemCertificateState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["___skip_"] = ___skip_
        __props__.__dict__["akid"] = akid
        __props__.__dict__["authority"] = authority
        __props__.__dict__["ca"] = ca
        __props__.__dict__["ca_crl_host"] = ca_crl_host
        __props__.__dict__["ca_fingerprint"] = ca_fingerprint
        __props__.__dict__["common_name"] = common_name
        __props__.__dict__["copy_from"] = copy_from
        __props__.__dict__["country"] = country
        __props__.__dict__["crl"] = crl
        __props__.__dict__["days_valid"] = days_valid
        __props__.__dict__["digest_algorithm"] = digest_algorithm
        __props__.__dict__["dsa"] = dsa
        __props__.__dict__["expired"] = expired
        __props__.__dict__["expires_after"] = expires_after
        __props__.__dict__["fingerprint"] = fingerprint
        __props__.__dict__["invalid_after"] = invalid_after
        __props__.__dict__["invalid_before"] = invalid_before
        __props__.__dict__["issued"] = issued
        __props__.__dict__["issuer"] = issuer
        __props__.__dict__["key_size"] = key_size
        __props__.__dict__["key_type"] = key_type
        __props__.__dict__["key_usages"] = key_usages
        __props__.__dict__["locality"] = locality
        __props__.__dict__["name"] = name
        __props__.__dict__["organization"] = organization
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["req_fingerprint"] = req_fingerprint
        __props__.__dict__["revoked"] = revoked
        __props__.__dict__["scep_url"] = scep_url
        __props__.__dict__["serial_number"] = serial_number
        __props__.__dict__["signs"] = signs
        __props__.__dict__["skid"] = skid
        __props__.__dict__["smart_card_key"] = smart_card_key
        __props__.__dict__["state"] = state
        __props__.__dict__["status"] = status
        __props__.__dict__["subject_alt_name"] = subject_alt_name
        __props__.__dict__["trusted"] = trusted
        __props__.__dict__["unit"] = unit
        return ResourceSystemCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def ___skip_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___skip_")

    @property
    @pulumi.getter
    def akid(self) -> pulumi.Output[str]:
        """
        Authority Key Identifier.
        """
        return pulumi.get(self, "akid")

    @property
    @pulumi.getter
    def authority(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authority")

    @property
    @pulumi.getter
    def ca(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="caCrlHost")
    def ca_crl_host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca_crl_host")

    @property
    @pulumi.getter(name="caFingerprint")
    def ca_fingerprint(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca_fingerprint")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Output[str]:
        """
        Common Name (e.g. server FQDN or YOUR name).
        """
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="copyFrom")
    def copy_from(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "copy_from")

    @property
    @pulumi.getter
    def country(self) -> pulumi.Output[Optional[str]]:
        """
        Country Name (2 letter code).
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def crl(self) -> pulumi.Output[str]:
        return pulumi.get(self, "crl")

    @property
    @pulumi.getter(name="daysValid")
    def days_valid(self) -> pulumi.Output[int]:
        """
        Certificate lifetime.
        """
        return pulumi.get(self, "days_valid")

    @property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "digest_algorithm")

    @property
    @pulumi.getter
    def dsa(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "dsa")

    @property
    @pulumi.getter
    def expired(self) -> pulumi.Output[bool]:
        """
        Set to true if certificate is expired.
        """
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter(name="expiresAfter")
    def expires_after(self) -> pulumi.Output[str]:
        return pulumi.get(self, "expires_after")

    @property
    @pulumi.getter
    def fingerprint(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter(name="invalidAfter")
    def invalid_after(self) -> pulumi.Output[str]:
        """
        The date after which certificate wil be invalid.
        """
        return pulumi.get(self, "invalid_after")

    @property
    @pulumi.getter(name="invalidBefore")
    def invalid_before(self) -> pulumi.Output[str]:
        """
        The date before which certificate is invalid.
        """
        return pulumi.get(self, "invalid_before")

    @property
    @pulumi.getter
    def issued(self) -> pulumi.Output[str]:
        return pulumi.get(self, "issued")

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> pulumi.Output[str]:
        return pulumi.get(self, "key_size")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter(name="keyUsages")
    def key_usages(self) -> pulumi.Output[Sequence[str]]:
        """
        Detailed key usage descriptions can be found in RFC 5280.
        """
        return pulumi.get(self, "key_usages")

    @property
    @pulumi.getter
    def locality(self) -> pulumi.Output[Optional[str]]:
        """
        Locality Name (eg, city).
        """
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the certificate. Name can be edited.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[Optional[str]]:
        """
        Organizational Unit Name (eg, section)
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="reqFingerprint")
    def req_fingerprint(self) -> pulumi.Output[str]:
        return pulumi.get(self, "req_fingerprint")

    @property
    @pulumi.getter
    def revoked(self) -> pulumi.Output[str]:
        return pulumi.get(self, "revoked")

    @property
    @pulumi.getter(name="scepUrl")
    def scep_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "scep_url")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[str]:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def signs(self) -> pulumi.Output[Optional[Sequence['outputs.ResourceSystemCertificateSign']]]:
        return pulumi.get(self, "signs")

    @property
    @pulumi.getter
    def skid(self) -> pulumi.Output[str]:
        """
        Subject Key Identifier.
        """
        return pulumi.get(self, "skid")

    @property
    @pulumi.getter(name="smartCardKey")
    def smart_card_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "smart_card_key")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        """
        State or Province Name (full name).
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Shows current status of scep client.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subjectAltName")
    def subject_alt_name(self) -> pulumi.Output[Optional[str]]:
        """
        SANs (subject alternative names).
        """
        return pulumi.get(self, "subject_alt_name")

    @property
    @pulumi.getter
    def trusted(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to yes certificate is included 'in trusted certificate chain'.
        """
        return pulumi.get(self, "trusted")

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Output[Optional[str]]:
        """
        Organizational Unit Name (eg, section).
        """
        return pulumi.get(self, "unit")

