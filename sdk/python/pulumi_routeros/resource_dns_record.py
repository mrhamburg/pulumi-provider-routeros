# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ResourceDnsRecordArgs', 'ResourceDnsRecord']

@pulumi.input_type
class ResourceDnsRecordArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 address_list: Optional[pulumi.Input[str]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 forward_to: Optional[pulumi.Input[str]] = None,
                 match_subdomain: Optional[pulumi.Input[bool]] = None,
                 mx_exchange: Optional[pulumi.Input[str]] = None,
                 mx_preference: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ns: Optional[pulumi.Input[str]] = None,
                 regexp: Optional[pulumi.Input[str]] = None,
                 srv_port: Optional[pulumi.Input[int]] = None,
                 srv_priority: Optional[pulumi.Input[int]] = None,
                 srv_target: Optional[pulumi.Input[str]] = None,
                 srv_weight: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ResourceDnsRecord resource.
        :param pulumi.Input[str] type: Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: The A record to be returend from the DNS hostname.
        :param pulumi.Input[str] address_list: Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
        :param pulumi.Input[str] cname: Alias name for a domain name.
        :param pulumi.Input[str] forward_to: The IP address of a domain name server to which a particular DNS request must be forwarded.
        :param pulumi.Input[bool] match_subdomain: Whether the record will match requests for subdomains.
        :param pulumi.Input[str] mx_exchange: The domain name of the MX server.
        :param pulumi.Input[int] mx_preference: Preference of the particular MX record.
        :param pulumi.Input[str] name: The name of the DNS hostname to be created.
        :param pulumi.Input[str] ns: Name of the authoritative domain name server for the particular record.
        :param pulumi.Input[str] regexp: DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
        :param pulumi.Input[int] srv_port: The TCP or UDP port on which the service is to be found.
        :param pulumi.Input[int] srv_priority: Priority of the particular SRV record.
        :param pulumi.Input[str] srv_target: The canonical hostname of the machine providing the service ends in a dot.
        :param pulumi.Input[str] srv_weight: Weight of the particular SRC record.
        :param pulumi.Input[str] text: Textual information about the domain name.
        :param pulumi.Input[str] ttl: The ttl of the DNS record.
        """
        pulumi.set(__self__, "type", type)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_list is not None:
            pulumi.set(__self__, "address_list", address_list)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if forward_to is not None:
            pulumi.set(__self__, "forward_to", forward_to)
        if match_subdomain is not None:
            pulumi.set(__self__, "match_subdomain", match_subdomain)
        if mx_exchange is not None:
            pulumi.set(__self__, "mx_exchange", mx_exchange)
        if mx_preference is not None:
            pulumi.set(__self__, "mx_preference", mx_preference)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ns is not None:
            pulumi.set(__self__, "ns", ns)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if srv_port is not None:
            pulumi.set(__self__, "srv_port", srv_port)
        if srv_priority is not None:
            pulumi.set(__self__, "srv_priority", srv_priority)
        if srv_target is not None:
            pulumi.set(__self__, "srv_target", srv_target)
        if srv_weight is not None:
            pulumi.set(__self__, "srv_weight", srv_weight)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        The A record to be returend from the DNS hostname.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
        """
        return pulumi.get(self, "address_list")

    @address_list.setter
    def address_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_list", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        """
        Alias name for a domain name.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="forwardTo")
    def forward_to(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of a domain name server to which a particular DNS request must be forwarded.
        """
        return pulumi.get(self, "forward_to")

    @forward_to.setter
    def forward_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_to", value)

    @property
    @pulumi.getter(name="matchSubdomain")
    def match_subdomain(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the record will match requests for subdomains.
        """
        return pulumi.get(self, "match_subdomain")

    @match_subdomain.setter
    def match_subdomain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_subdomain", value)

    @property
    @pulumi.getter(name="mxExchange")
    def mx_exchange(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name of the MX server.
        """
        return pulumi.get(self, "mx_exchange")

    @mx_exchange.setter
    def mx_exchange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mx_exchange", value)

    @property
    @pulumi.getter(name="mxPreference")
    def mx_preference(self) -> Optional[pulumi.Input[int]]:
        """
        Preference of the particular MX record.
        """
        return pulumi.get(self, "mx_preference")

    @mx_preference.setter
    def mx_preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mx_preference", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the DNS hostname to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ns(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the authoritative domain name server for the particular record.
        """
        return pulumi.get(self, "ns")

    @ns.setter
    def ns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ns", value)

    @property
    @pulumi.getter
    def regexp(self) -> Optional[pulumi.Input[str]]:
        """
        DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
        """
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter(name="srvPort")
    def srv_port(self) -> Optional[pulumi.Input[int]]:
        """
        The TCP or UDP port on which the service is to be found.
        """
        return pulumi.get(self, "srv_port")

    @srv_port.setter
    def srv_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "srv_port", value)

    @property
    @pulumi.getter(name="srvPriority")
    def srv_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the particular SRV record.
        """
        return pulumi.get(self, "srv_priority")

    @srv_priority.setter
    def srv_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "srv_priority", value)

    @property
    @pulumi.getter(name="srvTarget")
    def srv_target(self) -> Optional[pulumi.Input[str]]:
        """
        The canonical hostname of the machine providing the service ends in a dot.
        """
        return pulumi.get(self, "srv_target")

    @srv_target.setter
    def srv_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srv_target", value)

    @property
    @pulumi.getter(name="srvWeight")
    def srv_weight(self) -> Optional[pulumi.Input[str]]:
        """
        Weight of the particular SRC record.
        """
        return pulumi.get(self, "srv_weight")

    @srv_weight.setter
    def srv_weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srv_weight", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        Textual information about the domain name.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[str]]:
        """
        The ttl of the DNS record.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _ResourceDnsRecordState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 address_list: Optional[pulumi.Input[str]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 forward_to: Optional[pulumi.Input[str]] = None,
                 match_subdomain: Optional[pulumi.Input[bool]] = None,
                 mx_exchange: Optional[pulumi.Input[str]] = None,
                 mx_preference: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ns: Optional[pulumi.Input[str]] = None,
                 regexp: Optional[pulumi.Input[str]] = None,
                 srv_port: Optional[pulumi.Input[int]] = None,
                 srv_priority: Optional[pulumi.Input[int]] = None,
                 srv_target: Optional[pulumi.Input[str]] = None,
                 srv_weight: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ResourceDnsRecord resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: The A record to be returend from the DNS hostname.
        :param pulumi.Input[str] address_list: Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
        :param pulumi.Input[str] cname: Alias name for a domain name.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[str] forward_to: The IP address of a domain name server to which a particular DNS request must be forwarded.
        :param pulumi.Input[bool] match_subdomain: Whether the record will match requests for subdomains.
        :param pulumi.Input[str] mx_exchange: The domain name of the MX server.
        :param pulumi.Input[int] mx_preference: Preference of the particular MX record.
        :param pulumi.Input[str] name: The name of the DNS hostname to be created.
        :param pulumi.Input[str] ns: Name of the authoritative domain name server for the particular record.
        :param pulumi.Input[str] regexp: DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
        :param pulumi.Input[int] srv_port: The TCP or UDP port on which the service is to be found.
        :param pulumi.Input[int] srv_priority: Priority of the particular SRV record.
        :param pulumi.Input[str] srv_target: The canonical hostname of the machine providing the service ends in a dot.
        :param pulumi.Input[str] srv_weight: Weight of the particular SRC record.
        :param pulumi.Input[str] text: Textual information about the domain name.
        :param pulumi.Input[str] ttl: The ttl of the DNS record.
        :param pulumi.Input[str] type: Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_list is not None:
            pulumi.set(__self__, "address_list", address_list)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dynamic is not None:
            pulumi.set(__self__, "dynamic", dynamic)
        if forward_to is not None:
            pulumi.set(__self__, "forward_to", forward_to)
        if match_subdomain is not None:
            pulumi.set(__self__, "match_subdomain", match_subdomain)
        if mx_exchange is not None:
            pulumi.set(__self__, "mx_exchange", mx_exchange)
        if mx_preference is not None:
            pulumi.set(__self__, "mx_preference", mx_preference)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ns is not None:
            pulumi.set(__self__, "ns", ns)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if srv_port is not None:
            pulumi.set(__self__, "srv_port", srv_port)
        if srv_priority is not None:
            pulumi.set(__self__, "srv_priority", srv_priority)
        if srv_target is not None:
            pulumi.set(__self__, "srv_target", srv_target)
        if srv_weight is not None:
            pulumi.set(__self__, "srv_weight", srv_weight)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        The A record to be returend from the DNS hostname.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
        """
        return pulumi.get(self, "address_list")

    @address_list.setter
    def address_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_list", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        """
        Alias name for a domain name.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter(name="forwardTo")
    def forward_to(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of a domain name server to which a particular DNS request must be forwarded.
        """
        return pulumi.get(self, "forward_to")

    @forward_to.setter
    def forward_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_to", value)

    @property
    @pulumi.getter(name="matchSubdomain")
    def match_subdomain(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the record will match requests for subdomains.
        """
        return pulumi.get(self, "match_subdomain")

    @match_subdomain.setter
    def match_subdomain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_subdomain", value)

    @property
    @pulumi.getter(name="mxExchange")
    def mx_exchange(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name of the MX server.
        """
        return pulumi.get(self, "mx_exchange")

    @mx_exchange.setter
    def mx_exchange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mx_exchange", value)

    @property
    @pulumi.getter(name="mxPreference")
    def mx_preference(self) -> Optional[pulumi.Input[int]]:
        """
        Preference of the particular MX record.
        """
        return pulumi.get(self, "mx_preference")

    @mx_preference.setter
    def mx_preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mx_preference", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the DNS hostname to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ns(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the authoritative domain name server for the particular record.
        """
        return pulumi.get(self, "ns")

    @ns.setter
    def ns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ns", value)

    @property
    @pulumi.getter
    def regexp(self) -> Optional[pulumi.Input[str]]:
        """
        DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
        """
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter(name="srvPort")
    def srv_port(self) -> Optional[pulumi.Input[int]]:
        """
        The TCP or UDP port on which the service is to be found.
        """
        return pulumi.get(self, "srv_port")

    @srv_port.setter
    def srv_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "srv_port", value)

    @property
    @pulumi.getter(name="srvPriority")
    def srv_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the particular SRV record.
        """
        return pulumi.get(self, "srv_priority")

    @srv_priority.setter
    def srv_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "srv_priority", value)

    @property
    @pulumi.getter(name="srvTarget")
    def srv_target(self) -> Optional[pulumi.Input[str]]:
        """
        The canonical hostname of the machine providing the service ends in a dot.
        """
        return pulumi.get(self, "srv_target")

    @srv_target.setter
    def srv_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srv_target", value)

    @property
    @pulumi.getter(name="srvWeight")
    def srv_weight(self) -> Optional[pulumi.Input[str]]:
        """
        Weight of the particular SRC record.
        """
        return pulumi.get(self, "srv_weight")

    @srv_weight.setter
    def srv_weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srv_weight", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        Textual information about the domain name.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[str]]:
        """
        The ttl of the DNS record.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class ResourceDnsRecord(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 address_list: Optional[pulumi.Input[str]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 forward_to: Optional[pulumi.Input[str]] = None,
                 match_subdomain: Optional[pulumi.Input[bool]] = None,
                 mx_exchange: Optional[pulumi.Input[str]] = None,
                 mx_preference: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ns: Optional[pulumi.Input[str]] = None,
                 regexp: Optional[pulumi.Input[str]] = None,
                 srv_port: Optional[pulumi.Input[int]] = None,
                 srv_priority: Optional[pulumi.Input[int]] = None,
                 srv_target: Optional[pulumi.Input[str]] = None,
                 srv_weight: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # ResourceDnsRecord (Resource)

        Creates a DNS record on the MikroTik device.

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/dns/static get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceDnsRecord:ResourceDnsRecord name_record "*0"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: The A record to be returend from the DNS hostname.
        :param pulumi.Input[str] address_list: Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
        :param pulumi.Input[str] cname: Alias name for a domain name.
        :param pulumi.Input[str] forward_to: The IP address of a domain name server to which a particular DNS request must be forwarded.
        :param pulumi.Input[bool] match_subdomain: Whether the record will match requests for subdomains.
        :param pulumi.Input[str] mx_exchange: The domain name of the MX server.
        :param pulumi.Input[int] mx_preference: Preference of the particular MX record.
        :param pulumi.Input[str] name: The name of the DNS hostname to be created.
        :param pulumi.Input[str] ns: Name of the authoritative domain name server for the particular record.
        :param pulumi.Input[str] regexp: DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
        :param pulumi.Input[int] srv_port: The TCP or UDP port on which the service is to be found.
        :param pulumi.Input[int] srv_priority: Priority of the particular SRV record.
        :param pulumi.Input[str] srv_target: The canonical hostname of the machine providing the service ends in a dot.
        :param pulumi.Input[str] srv_weight: Weight of the particular SRC record.
        :param pulumi.Input[str] text: Textual information about the domain name.
        :param pulumi.Input[str] ttl: The ttl of the DNS record.
        :param pulumi.Input[str] type: Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceDnsRecordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # ResourceDnsRecord (Resource)

        Creates a DNS record on the MikroTik device.

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/dns/static get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceDnsRecord:ResourceDnsRecord name_record "*0"
        ```

        :param str resource_name: The name of the resource.
        :param ResourceDnsRecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceDnsRecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 address_list: Optional[pulumi.Input[str]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 forward_to: Optional[pulumi.Input[str]] = None,
                 match_subdomain: Optional[pulumi.Input[bool]] = None,
                 mx_exchange: Optional[pulumi.Input[str]] = None,
                 mx_preference: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ns: Optional[pulumi.Input[str]] = None,
                 regexp: Optional[pulumi.Input[str]] = None,
                 srv_port: Optional[pulumi.Input[int]] = None,
                 srv_priority: Optional[pulumi.Input[int]] = None,
                 srv_target: Optional[pulumi.Input[str]] = None,
                 srv_weight: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceDnsRecordArgs.__new__(ResourceDnsRecordArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["address"] = address
            __props__.__dict__["address_list"] = address_list
            __props__.__dict__["cname"] = cname
            __props__.__dict__["comment"] = comment
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["forward_to"] = forward_to
            __props__.__dict__["match_subdomain"] = match_subdomain
            __props__.__dict__["mx_exchange"] = mx_exchange
            __props__.__dict__["mx_preference"] = mx_preference
            __props__.__dict__["name"] = name
            __props__.__dict__["ns"] = ns
            __props__.__dict__["regexp"] = regexp
            __props__.__dict__["srv_port"] = srv_port
            __props__.__dict__["srv_priority"] = srv_priority
            __props__.__dict__["srv_target"] = srv_target
            __props__.__dict__["srv_weight"] = srv_weight
            __props__.__dict__["text"] = text
            __props__.__dict__["ttl"] = ttl
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["dynamic"] = None
        super(ResourceDnsRecord, __self__).__init__(
            'routeros:index/resourceDnsRecord:ResourceDnsRecord',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            address: Optional[pulumi.Input[str]] = None,
            address_list: Optional[pulumi.Input[str]] = None,
            cname: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            dynamic: Optional[pulumi.Input[bool]] = None,
            forward_to: Optional[pulumi.Input[str]] = None,
            match_subdomain: Optional[pulumi.Input[bool]] = None,
            mx_exchange: Optional[pulumi.Input[str]] = None,
            mx_preference: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            ns: Optional[pulumi.Input[str]] = None,
            regexp: Optional[pulumi.Input[str]] = None,
            srv_port: Optional[pulumi.Input[int]] = None,
            srv_priority: Optional[pulumi.Input[int]] = None,
            srv_target: Optional[pulumi.Input[str]] = None,
            srv_weight: Optional[pulumi.Input[str]] = None,
            text: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'ResourceDnsRecord':
        """
        Get an existing ResourceDnsRecord resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: The A record to be returend from the DNS hostname.
        :param pulumi.Input[str] address_list: Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
        :param pulumi.Input[str] cname: Alias name for a domain name.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[str] forward_to: The IP address of a domain name server to which a particular DNS request must be forwarded.
        :param pulumi.Input[bool] match_subdomain: Whether the record will match requests for subdomains.
        :param pulumi.Input[str] mx_exchange: The domain name of the MX server.
        :param pulumi.Input[int] mx_preference: Preference of the particular MX record.
        :param pulumi.Input[str] name: The name of the DNS hostname to be created.
        :param pulumi.Input[str] ns: Name of the authoritative domain name server for the particular record.
        :param pulumi.Input[str] regexp: DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
        :param pulumi.Input[int] srv_port: The TCP or UDP port on which the service is to be found.
        :param pulumi.Input[int] srv_priority: Priority of the particular SRV record.
        :param pulumi.Input[str] srv_target: The canonical hostname of the machine providing the service ends in a dot.
        :param pulumi.Input[str] srv_weight: Weight of the particular SRC record.
        :param pulumi.Input[str] text: Textual information about the domain name.
        :param pulumi.Input[str] ttl: The ttl of the DNS record.
        :param pulumi.Input[str] type: Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceDnsRecordState.__new__(_ResourceDnsRecordState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["address"] = address
        __props__.__dict__["address_list"] = address_list
        __props__.__dict__["cname"] = cname
        __props__.__dict__["comment"] = comment
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["dynamic"] = dynamic
        __props__.__dict__["forward_to"] = forward_to
        __props__.__dict__["match_subdomain"] = match_subdomain
        __props__.__dict__["mx_exchange"] = mx_exchange
        __props__.__dict__["mx_preference"] = mx_preference
        __props__.__dict__["name"] = name
        __props__.__dict__["ns"] = ns
        __props__.__dict__["regexp"] = regexp
        __props__.__dict__["srv_port"] = srv_port
        __props__.__dict__["srv_priority"] = srv_priority
        __props__.__dict__["srv_target"] = srv_target
        __props__.__dict__["srv_weight"] = srv_weight
        __props__.__dict__["text"] = text
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["type"] = type
        return ResourceDnsRecord(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[Optional[str]]:
        """
        The A record to be returend from the DNS hostname.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the Firewall address list to which address must be dynamically added when some request matches the entry.
        """
        return pulumi.get(self, "address_list")

    @property
    @pulumi.getter
    def cname(self) -> pulumi.Output[Optional[str]]:
        """
        Alias name for a domain name.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dynamic(self) -> pulumi.Output[bool]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter(name="forwardTo")
    def forward_to(self) -> pulumi.Output[Optional[str]]:
        """
        The IP address of a domain name server to which a particular DNS request must be forwarded.
        """
        return pulumi.get(self, "forward_to")

    @property
    @pulumi.getter(name="matchSubdomain")
    def match_subdomain(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the record will match requests for subdomains.
        """
        return pulumi.get(self, "match_subdomain")

    @property
    @pulumi.getter(name="mxExchange")
    def mx_exchange(self) -> pulumi.Output[Optional[str]]:
        """
        The domain name of the MX server.
        """
        return pulumi.get(self, "mx_exchange")

    @property
    @pulumi.getter(name="mxPreference")
    def mx_preference(self) -> pulumi.Output[int]:
        """
        Preference of the particular MX record.
        """
        return pulumi.get(self, "mx_preference")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the DNS hostname to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ns(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the authoritative domain name server for the particular record.
        """
        return pulumi.get(self, "ns")

    @property
    @pulumi.getter
    def regexp(self) -> pulumi.Output[Optional[str]]:
        """
        DNS regexp. Regexp entries are case sensitive, but since DNS requests are not case sensitive, RouterOS converts DNS names to lowercase, you should write regex only with lowercase letters.
        """
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter(name="srvPort")
    def srv_port(self) -> pulumi.Output[int]:
        """
        The TCP or UDP port on which the service is to be found.
        """
        return pulumi.get(self, "srv_port")

    @property
    @pulumi.getter(name="srvPriority")
    def srv_priority(self) -> pulumi.Output[int]:
        """
        Priority of the particular SRV record.
        """
        return pulumi.get(self, "srv_priority")

    @property
    @pulumi.getter(name="srvTarget")
    def srv_target(self) -> pulumi.Output[Optional[str]]:
        """
        The canonical hostname of the machine providing the service ends in a dot.
        """
        return pulumi.get(self, "srv_target")

    @property
    @pulumi.getter(name="srvWeight")
    def srv_weight(self) -> pulumi.Output[str]:
        """
        Weight of the particular SRC record.
        """
        return pulumi.get(self, "srv_weight")

    @property
    @pulumi.getter
    def text(self) -> pulumi.Output[Optional[str]]:
        """
        Textual information about the domain name.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[str]:
        """
        The ttl of the DNS record.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of the DNS record. Available values are: A, AAAA, CNAME, FWD, MX, NS, NXDOMAIN, SRV, TXT
        """
        return pulumi.get(self, "type")

