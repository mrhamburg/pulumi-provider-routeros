# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RatesArgs', 'Rates']

@pulumi.input_type
class RatesArgs:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 basics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ht_basic_mcs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ht_supported_mcs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 supporteds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vht_basic_mcs: Optional[pulumi.Input[str]] = None,
                 vht_supported_mcs: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Rates resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] basics: List of basic rates. Client will connect to AP only if it supports all basic rates announced by the AP. AP will establish WDS link only if it supports all basic rates of the other AP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ht_basic_mcs: Modulation and Coding Schemes that every connecting client must support. Refer to 802.11n for MCS specification.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ht_supported_mcs: Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11n for MCS specification.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supporteds: List of supported rates. Two devices will communicate only using rates that are supported by both devices.
        :param pulumi.Input[str] vht_basic_mcs: Modulation and Coding Schemes that every connecting client must support. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - client must support MCS-0 to MCS-7 MCS 0-8 - client must support MCS-0 to MCS-8 MCS 0-9 - client must support MCS-0 to MCS-9
        :param pulumi.Input[str] vht_supported_mcs: Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - devices will advertise as supported MCS-0 to MCS-7 MCS 0-8 - devices will advertise as supported MCS-0 to MCS-8 MCS 0-9 - devices will advertise as supported MCS-0 to MCS-9
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if basics is not None:
            pulumi.set(__self__, "basics", basics)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if ht_basic_mcs is not None:
            pulumi.set(__self__, "ht_basic_mcs", ht_basic_mcs)
        if ht_supported_mcs is not None:
            pulumi.set(__self__, "ht_supported_mcs", ht_supported_mcs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if supporteds is not None:
            pulumi.set(__self__, "supporteds", supporteds)
        if vht_basic_mcs is not None:
            pulumi.set(__self__, "vht_basic_mcs", vht_basic_mcs)
        if vht_supported_mcs is not None:
            pulumi.set(__self__, "vht_supported_mcs", vht_supported_mcs)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def basics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of basic rates. Client will connect to AP only if it supports all basic rates announced by the AP. AP will establish WDS link only if it supports all basic rates of the other AP.
        """
        return pulumi.get(self, "basics")

    @basics.setter
    def basics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "basics", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="htBasicMcs")
    def ht_basic_mcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Modulation and Coding Schemes that every connecting client must support. Refer to 802.11n for MCS specification.
        """
        return pulumi.get(self, "ht_basic_mcs")

    @ht_basic_mcs.setter
    def ht_basic_mcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ht_basic_mcs", value)

    @property
    @pulumi.getter(name="htSupportedMcs")
    def ht_supported_mcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11n for MCS specification.
        """
        return pulumi.get(self, "ht_supported_mcs")

    @ht_supported_mcs.setter
    def ht_supported_mcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ht_supported_mcs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def supporteds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of supported rates. Two devices will communicate only using rates that are supported by both devices.
        """
        return pulumi.get(self, "supporteds")

    @supporteds.setter
    def supporteds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supporteds", value)

    @property
    @pulumi.getter(name="vhtBasicMcs")
    def vht_basic_mcs(self) -> Optional[pulumi.Input[str]]:
        """
        Modulation and Coding Schemes that every connecting client must support. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - client must support MCS-0 to MCS-7 MCS 0-8 - client must support MCS-0 to MCS-8 MCS 0-9 - client must support MCS-0 to MCS-9
        """
        return pulumi.get(self, "vht_basic_mcs")

    @vht_basic_mcs.setter
    def vht_basic_mcs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vht_basic_mcs", value)

    @property
    @pulumi.getter(name="vhtSupportedMcs")
    def vht_supported_mcs(self) -> Optional[pulumi.Input[str]]:
        """
        Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - devices will advertise as supported MCS-0 to MCS-7 MCS 0-8 - devices will advertise as supported MCS-0 to MCS-8 MCS 0-9 - devices will advertise as supported MCS-0 to MCS-9
        """
        return pulumi.get(self, "vht_supported_mcs")

    @vht_supported_mcs.setter
    def vht_supported_mcs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vht_supported_mcs", value)


@pulumi.input_type
class _RatesState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 basics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ht_basic_mcs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ht_supported_mcs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 supporteds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vht_basic_mcs: Optional[pulumi.Input[str]] = None,
                 vht_supported_mcs: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Rates resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] basics: List of basic rates. Client will connect to AP only if it supports all basic rates announced by the AP. AP will establish WDS link only if it supports all basic rates of the other AP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ht_basic_mcs: Modulation and Coding Schemes that every connecting client must support. Refer to 802.11n for MCS specification.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ht_supported_mcs: Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11n for MCS specification.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supporteds: List of supported rates. Two devices will communicate only using rates that are supported by both devices.
        :param pulumi.Input[str] vht_basic_mcs: Modulation and Coding Schemes that every connecting client must support. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - client must support MCS-0 to MCS-7 MCS 0-8 - client must support MCS-0 to MCS-8 MCS 0-9 - client must support MCS-0 to MCS-9
        :param pulumi.Input[str] vht_supported_mcs: Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - devices will advertise as supported MCS-0 to MCS-7 MCS 0-8 - devices will advertise as supported MCS-0 to MCS-8 MCS 0-9 - devices will advertise as supported MCS-0 to MCS-9
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if basics is not None:
            pulumi.set(__self__, "basics", basics)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if ht_basic_mcs is not None:
            pulumi.set(__self__, "ht_basic_mcs", ht_basic_mcs)
        if ht_supported_mcs is not None:
            pulumi.set(__self__, "ht_supported_mcs", ht_supported_mcs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if supporteds is not None:
            pulumi.set(__self__, "supporteds", supporteds)
        if vht_basic_mcs is not None:
            pulumi.set(__self__, "vht_basic_mcs", vht_basic_mcs)
        if vht_supported_mcs is not None:
            pulumi.set(__self__, "vht_supported_mcs", vht_supported_mcs)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def basics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of basic rates. Client will connect to AP only if it supports all basic rates announced by the AP. AP will establish WDS link only if it supports all basic rates of the other AP.
        """
        return pulumi.get(self, "basics")

    @basics.setter
    def basics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "basics", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="htBasicMcs")
    def ht_basic_mcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Modulation and Coding Schemes that every connecting client must support. Refer to 802.11n for MCS specification.
        """
        return pulumi.get(self, "ht_basic_mcs")

    @ht_basic_mcs.setter
    def ht_basic_mcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ht_basic_mcs", value)

    @property
    @pulumi.getter(name="htSupportedMcs")
    def ht_supported_mcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11n for MCS specification.
        """
        return pulumi.get(self, "ht_supported_mcs")

    @ht_supported_mcs.setter
    def ht_supported_mcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ht_supported_mcs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def supporteds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of supported rates. Two devices will communicate only using rates that are supported by both devices.
        """
        return pulumi.get(self, "supporteds")

    @supporteds.setter
    def supporteds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supporteds", value)

    @property
    @pulumi.getter(name="vhtBasicMcs")
    def vht_basic_mcs(self) -> Optional[pulumi.Input[str]]:
        """
        Modulation and Coding Schemes that every connecting client must support. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - client must support MCS-0 to MCS-7 MCS 0-8 - client must support MCS-0 to MCS-8 MCS 0-9 - client must support MCS-0 to MCS-9
        """
        return pulumi.get(self, "vht_basic_mcs")

    @vht_basic_mcs.setter
    def vht_basic_mcs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vht_basic_mcs", value)

    @property
    @pulumi.getter(name="vhtSupportedMcs")
    def vht_supported_mcs(self) -> Optional[pulumi.Input[str]]:
        """
        Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - devices will advertise as supported MCS-0 to MCS-7 MCS 0-8 - devices will advertise as supported MCS-0 to MCS-8 MCS 0-9 - devices will advertise as supported MCS-0 to MCS-9
        """
        return pulumi.get(self, "vht_supported_mcs")

    @vht_supported_mcs.setter
    def vht_supported_mcs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vht_supported_mcs", value)


class Rates(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 basics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ht_basic_mcs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ht_supported_mcs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 supporteds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vht_basic_mcs: Optional[pulumi.Input[str]] = None,
                 vht_supported_mcs: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_rates = routeros.caps_man.Rates("testRates",
            basics=[
                "1Mbps",
                "5.5Mbps",
                "6Mbps",
                "18Mbps",
                "36Mbps",
                "54Mbps",
            ],
            comment="test_rates",
            ht_basic_mcs=[
                "mcs-0",
                "mcs-7",
                "mcs-11",
                "mcs-14",
                "mcs-16",
                "mcs-21",
            ],
            ht_supported_mcs=[
                "mcs-3",
                "mcs-8",
                "mcs-10",
                "mcs-13",
                "mcs-17",
                "mcs-18",
            ],
            supporteds=[
                "2Mbps",
                "11Mbps",
                "9Mbps",
                "12Mbps",
                "24Mbps",
                "48Mbps",
            ],
            vht_basic_mcs="none",
            vht_supported_mcs="mcs0-9,mcs0-7")
        ```

        ## Import

        Import with the name of the CAPsMAN rates configuration in case of the example use test-rates-config

        ```sh
         $ pulumi import routeros:CapsMan/rates:Rates test_rates test-rates-config
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] basics: List of basic rates. Client will connect to AP only if it supports all basic rates announced by the AP. AP will establish WDS link only if it supports all basic rates of the other AP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ht_basic_mcs: Modulation and Coding Schemes that every connecting client must support. Refer to 802.11n for MCS specification.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ht_supported_mcs: Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11n for MCS specification.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supporteds: List of supported rates. Two devices will communicate only using rates that are supported by both devices.
        :param pulumi.Input[str] vht_basic_mcs: Modulation and Coding Schemes that every connecting client must support. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - client must support MCS-0 to MCS-7 MCS 0-8 - client must support MCS-0 to MCS-8 MCS 0-9 - client must support MCS-0 to MCS-9
        :param pulumi.Input[str] vht_supported_mcs: Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - devices will advertise as supported MCS-0 to MCS-7 MCS 0-8 - devices will advertise as supported MCS-0 to MCS-8 MCS 0-9 - devices will advertise as supported MCS-0 to MCS-9
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RatesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_rates = routeros.caps_man.Rates("testRates",
            basics=[
                "1Mbps",
                "5.5Mbps",
                "6Mbps",
                "18Mbps",
                "36Mbps",
                "54Mbps",
            ],
            comment="test_rates",
            ht_basic_mcs=[
                "mcs-0",
                "mcs-7",
                "mcs-11",
                "mcs-14",
                "mcs-16",
                "mcs-21",
            ],
            ht_supported_mcs=[
                "mcs-3",
                "mcs-8",
                "mcs-10",
                "mcs-13",
                "mcs-17",
                "mcs-18",
            ],
            supporteds=[
                "2Mbps",
                "11Mbps",
                "9Mbps",
                "12Mbps",
                "24Mbps",
                "48Mbps",
            ],
            vht_basic_mcs="none",
            vht_supported_mcs="mcs0-9,mcs0-7")
        ```

        ## Import

        Import with the name of the CAPsMAN rates configuration in case of the example use test-rates-config

        ```sh
         $ pulumi import routeros:CapsMan/rates:Rates test_rates test-rates-config
        ```

        :param str resource_name: The name of the resource.
        :param RatesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RatesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 basics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ht_basic_mcs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ht_supported_mcs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 supporteds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vht_basic_mcs: Optional[pulumi.Input[str]] = None,
                 vht_supported_mcs: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RatesArgs.__new__(RatesArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["basics"] = basics
            __props__.__dict__["comment"] = comment
            __props__.__dict__["ht_basic_mcs"] = ht_basic_mcs
            __props__.__dict__["ht_supported_mcs"] = ht_supported_mcs
            __props__.__dict__["name"] = name
            __props__.__dict__["supporteds"] = supporteds
            __props__.__dict__["vht_basic_mcs"] = vht_basic_mcs
            __props__.__dict__["vht_supported_mcs"] = vht_supported_mcs
        super(Rates, __self__).__init__(
            'routeros:CapsMan/rates:Rates',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            basics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            ht_basic_mcs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ht_supported_mcs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            supporteds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vht_basic_mcs: Optional[pulumi.Input[str]] = None,
            vht_supported_mcs: Optional[pulumi.Input[str]] = None) -> 'Rates':
        """
        Get an existing Rates resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] basics: List of basic rates. Client will connect to AP only if it supports all basic rates announced by the AP. AP will establish WDS link only if it supports all basic rates of the other AP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ht_basic_mcs: Modulation and Coding Schemes that every connecting client must support. Refer to 802.11n for MCS specification.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ht_supported_mcs: Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11n for MCS specification.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supporteds: List of supported rates. Two devices will communicate only using rates that are supported by both devices.
        :param pulumi.Input[str] vht_basic_mcs: Modulation and Coding Schemes that every connecting client must support. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - client must support MCS-0 to MCS-7 MCS 0-8 - client must support MCS-0 to MCS-8 MCS 0-9 - client must support MCS-0 to MCS-9
        :param pulumi.Input[str] vht_supported_mcs: Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - devices will advertise as supported MCS-0 to MCS-7 MCS 0-8 - devices will advertise as supported MCS-0 to MCS-8 MCS 0-9 - devices will advertise as supported MCS-0 to MCS-9
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RatesState.__new__(_RatesState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["basics"] = basics
        __props__.__dict__["comment"] = comment
        __props__.__dict__["ht_basic_mcs"] = ht_basic_mcs
        __props__.__dict__["ht_supported_mcs"] = ht_supported_mcs
        __props__.__dict__["name"] = name
        __props__.__dict__["supporteds"] = supporteds
        __props__.__dict__["vht_basic_mcs"] = vht_basic_mcs
        __props__.__dict__["vht_supported_mcs"] = vht_supported_mcs
        return Rates(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def basics(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of basic rates. Client will connect to AP only if it supports all basic rates announced by the AP. AP will establish WDS link only if it supports all basic rates of the other AP.
        """
        return pulumi.get(self, "basics")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="htBasicMcs")
    def ht_basic_mcs(self) -> pulumi.Output[Sequence[str]]:
        """
        Modulation and Coding Schemes that every connecting client must support. Refer to 802.11n for MCS specification.
        """
        return pulumi.get(self, "ht_basic_mcs")

    @property
    @pulumi.getter(name="htSupportedMcs")
    def ht_supported_mcs(self) -> pulumi.Output[Sequence[str]]:
        """
        Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11n for MCS specification.
        """
        return pulumi.get(self, "ht_supported_mcs")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def supporteds(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of supported rates. Two devices will communicate only using rates that are supported by both devices.
        """
        return pulumi.get(self, "supporteds")

    @property
    @pulumi.getter(name="vhtBasicMcs")
    def vht_basic_mcs(self) -> pulumi.Output[str]:
        """
        Modulation and Coding Schemes that every connecting client must support. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - client must support MCS-0 to MCS-7 MCS 0-8 - client must support MCS-0 to MCS-8 MCS 0-9 - client must support MCS-0 to MCS-9
        """
        return pulumi.get(self, "vht_basic_mcs")

    @property
    @pulumi.getter(name="vhtSupportedMcs")
    def vht_supported_mcs(self) -> pulumi.Output[str]:
        """
        Modulation and Coding Schemes that this device advertises as supported. Refer to 802.11ac for MCS specification. You can set MCS interval for each of Spatial Stream none - will not use selected Spatial Stream MCS 0-7 - devices will advertise as supported MCS-0 to MCS-7 MCS 0-8 - devices will advertise as supported MCS-0 to MCS-8 MCS 0-9 - devices will advertise as supported MCS-0 to MCS-9
        """
        return pulumi.get(self, "vht_supported_mcs")

