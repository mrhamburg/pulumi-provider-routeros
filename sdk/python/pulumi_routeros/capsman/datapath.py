# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DatapathArgs', 'Datapath']

@pulumi.input_type
class DatapathArgs:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 bridge_cost: Optional[pulumi.Input[int]] = None,
                 bridge_horizon: Optional[pulumi.Input[int]] = None,
                 client_to_client_forwarding: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 interface_list: Optional[pulumi.Input[str]] = None,
                 l2mtu: Optional[pulumi.Input[int]] = None,
                 local_forwarding: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 openflow_switch: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vlan_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Datapath resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] arp: ARP mode. See [docs](https://wiki.mikrotik.com/wiki/Manual:IP/ARP#ARP_Modes) for info.
        :param pulumi.Input[str] bridge: Bridge to which particular interface should be automatically added as port. Required only when local-forwarding is not used.
        :param pulumi.Input[int] bridge_cost: Bridge port cost to use when adding as bridge port.
        :param pulumi.Input[int] bridge_horizon: Bridge horizon to use when adding as bridge port.
        :param pulumi.Input[bool] client_to_client_forwarding: Controls if client-to-client forwarding between wireless clients connected to interface should be allowed, in local forwarding mode this function is performed by CAP, otherwise it is performed by CAPsMAN.
        :param pulumi.Input[str] interface_list: Interface list name.
        :param pulumi.Input[int] l2mtu: Layer2 MTU size.
        :param pulumi.Input[bool] local_forwarding: Controls forwarding mode. If disabled, all L2 and L3 data will be forwarded to CAPsMAN, and further forwarding decisions will be made only then. See [docs](https://wiki.mikrotik.com/wiki/Manual:CAPsMAN#Local_Forwarding_Mode) for info.
        :param pulumi.Input[int] mtu: MTU size.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] openflow_switch: OpenFlow switch to add interface to, as port when enabled.
        :param pulumi.Input[int] vlan_id: VLAN ID to assign to interface if vlan-mode enables use of VLAN tagging.
        :param pulumi.Input[str] vlan_mode: VLAN tagging mode specifies if VLAN tag should be assigned to interface (causes all received data to get tagged with VLAN tag and allows interface to only send out data tagged with given tag)
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if arp is not None:
            pulumi.set(__self__, "arp", arp)
        if bridge is not None:
            pulumi.set(__self__, "bridge", bridge)
        if bridge_cost is not None:
            pulumi.set(__self__, "bridge_cost", bridge_cost)
        if bridge_horizon is not None:
            pulumi.set(__self__, "bridge_horizon", bridge_horizon)
        if client_to_client_forwarding is not None:
            pulumi.set(__self__, "client_to_client_forwarding", client_to_client_forwarding)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if interface_list is not None:
            pulumi.set(__self__, "interface_list", interface_list)
        if l2mtu is not None:
            pulumi.set(__self__, "l2mtu", l2mtu)
        if local_forwarding is not None:
            pulumi.set(__self__, "local_forwarding", local_forwarding)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if openflow_switch is not None:
            pulumi.set(__self__, "openflow_switch", openflow_switch)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_mode is not None:
            pulumi.set(__self__, "vlan_mode", vlan_mode)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def arp(self) -> Optional[pulumi.Input[str]]:
        """
        ARP mode. See [docs](https://wiki.mikrotik.com/wiki/Manual:IP/ARP#ARP_Modes) for info.
        """
        return pulumi.get(self, "arp")

    @arp.setter
    def arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp", value)

    @property
    @pulumi.getter
    def bridge(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge to which particular interface should be automatically added as port. Required only when local-forwarding is not used.
        """
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bridge", value)

    @property
    @pulumi.getter(name="bridgeCost")
    def bridge_cost(self) -> Optional[pulumi.Input[int]]:
        """
        Bridge port cost to use when adding as bridge port.
        """
        return pulumi.get(self, "bridge_cost")

    @bridge_cost.setter
    def bridge_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bridge_cost", value)

    @property
    @pulumi.getter(name="bridgeHorizon")
    def bridge_horizon(self) -> Optional[pulumi.Input[int]]:
        """
        Bridge horizon to use when adding as bridge port.
        """
        return pulumi.get(self, "bridge_horizon")

    @bridge_horizon.setter
    def bridge_horizon(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bridge_horizon", value)

    @property
    @pulumi.getter(name="clientToClientForwarding")
    def client_to_client_forwarding(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if client-to-client forwarding between wireless clients connected to interface should be allowed, in local forwarding mode this function is performed by CAP, otherwise it is performed by CAPsMAN.
        """
        return pulumi.get(self, "client_to_client_forwarding")

    @client_to_client_forwarding.setter
    def client_to_client_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_to_client_forwarding", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="interfaceList")
    def interface_list(self) -> Optional[pulumi.Input[str]]:
        """
        Interface list name.
        """
        return pulumi.get(self, "interface_list")

    @interface_list.setter
    def interface_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_list", value)

    @property
    @pulumi.getter
    def l2mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Layer2 MTU size.
        """
        return pulumi.get(self, "l2mtu")

    @l2mtu.setter
    def l2mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "l2mtu", value)

    @property
    @pulumi.getter(name="localForwarding")
    def local_forwarding(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls forwarding mode. If disabled, all L2 and L3 data will be forwarded to CAPsMAN, and further forwarding decisions will be made only then. See [docs](https://wiki.mikrotik.com/wiki/Manual:CAPsMAN#Local_Forwarding_Mode) for info.
        """
        return pulumi.get(self, "local_forwarding")

    @local_forwarding.setter
    def local_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_forwarding", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU size.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="openflowSwitch")
    def openflow_switch(self) -> Optional[pulumi.Input[str]]:
        """
        OpenFlow switch to add interface to, as port when enabled.
        """
        return pulumi.get(self, "openflow_switch")

    @openflow_switch.setter
    def openflow_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "openflow_switch", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID to assign to interface if vlan-mode enables use of VLAN tagging.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vlanMode")
    def vlan_mode(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN tagging mode specifies if VLAN tag should be assigned to interface (causes all received data to get tagged with VLAN tag and allows interface to only send out data tagged with given tag)
        """
        return pulumi.get(self, "vlan_mode")

    @vlan_mode.setter
    def vlan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_mode", value)


@pulumi.input_type
class _DatapathState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 bridge_cost: Optional[pulumi.Input[int]] = None,
                 bridge_horizon: Optional[pulumi.Input[int]] = None,
                 client_to_client_forwarding: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 interface_list: Optional[pulumi.Input[str]] = None,
                 l2mtu: Optional[pulumi.Input[int]] = None,
                 local_forwarding: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 openflow_switch: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vlan_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Datapath resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] arp: ARP mode. See [docs](https://wiki.mikrotik.com/wiki/Manual:IP/ARP#ARP_Modes) for info.
        :param pulumi.Input[str] bridge: Bridge to which particular interface should be automatically added as port. Required only when local-forwarding is not used.
        :param pulumi.Input[int] bridge_cost: Bridge port cost to use when adding as bridge port.
        :param pulumi.Input[int] bridge_horizon: Bridge horizon to use when adding as bridge port.
        :param pulumi.Input[bool] client_to_client_forwarding: Controls if client-to-client forwarding between wireless clients connected to interface should be allowed, in local forwarding mode this function is performed by CAP, otherwise it is performed by CAPsMAN.
        :param pulumi.Input[str] interface_list: Interface list name.
        :param pulumi.Input[int] l2mtu: Layer2 MTU size.
        :param pulumi.Input[bool] local_forwarding: Controls forwarding mode. If disabled, all L2 and L3 data will be forwarded to CAPsMAN, and further forwarding decisions will be made only then. See [docs](https://wiki.mikrotik.com/wiki/Manual:CAPsMAN#Local_Forwarding_Mode) for info.
        :param pulumi.Input[int] mtu: MTU size.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] openflow_switch: OpenFlow switch to add interface to, as port when enabled.
        :param pulumi.Input[int] vlan_id: VLAN ID to assign to interface if vlan-mode enables use of VLAN tagging.
        :param pulumi.Input[str] vlan_mode: VLAN tagging mode specifies if VLAN tag should be assigned to interface (causes all received data to get tagged with VLAN tag and allows interface to only send out data tagged with given tag)
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if arp is not None:
            pulumi.set(__self__, "arp", arp)
        if bridge is not None:
            pulumi.set(__self__, "bridge", bridge)
        if bridge_cost is not None:
            pulumi.set(__self__, "bridge_cost", bridge_cost)
        if bridge_horizon is not None:
            pulumi.set(__self__, "bridge_horizon", bridge_horizon)
        if client_to_client_forwarding is not None:
            pulumi.set(__self__, "client_to_client_forwarding", client_to_client_forwarding)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if interface_list is not None:
            pulumi.set(__self__, "interface_list", interface_list)
        if l2mtu is not None:
            pulumi.set(__self__, "l2mtu", l2mtu)
        if local_forwarding is not None:
            pulumi.set(__self__, "local_forwarding", local_forwarding)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if openflow_switch is not None:
            pulumi.set(__self__, "openflow_switch", openflow_switch)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_mode is not None:
            pulumi.set(__self__, "vlan_mode", vlan_mode)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def arp(self) -> Optional[pulumi.Input[str]]:
        """
        ARP mode. See [docs](https://wiki.mikrotik.com/wiki/Manual:IP/ARP#ARP_Modes) for info.
        """
        return pulumi.get(self, "arp")

    @arp.setter
    def arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp", value)

    @property
    @pulumi.getter
    def bridge(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge to which particular interface should be automatically added as port. Required only when local-forwarding is not used.
        """
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bridge", value)

    @property
    @pulumi.getter(name="bridgeCost")
    def bridge_cost(self) -> Optional[pulumi.Input[int]]:
        """
        Bridge port cost to use when adding as bridge port.
        """
        return pulumi.get(self, "bridge_cost")

    @bridge_cost.setter
    def bridge_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bridge_cost", value)

    @property
    @pulumi.getter(name="bridgeHorizon")
    def bridge_horizon(self) -> Optional[pulumi.Input[int]]:
        """
        Bridge horizon to use when adding as bridge port.
        """
        return pulumi.get(self, "bridge_horizon")

    @bridge_horizon.setter
    def bridge_horizon(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bridge_horizon", value)

    @property
    @pulumi.getter(name="clientToClientForwarding")
    def client_to_client_forwarding(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if client-to-client forwarding between wireless clients connected to interface should be allowed, in local forwarding mode this function is performed by CAP, otherwise it is performed by CAPsMAN.
        """
        return pulumi.get(self, "client_to_client_forwarding")

    @client_to_client_forwarding.setter
    def client_to_client_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "client_to_client_forwarding", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="interfaceList")
    def interface_list(self) -> Optional[pulumi.Input[str]]:
        """
        Interface list name.
        """
        return pulumi.get(self, "interface_list")

    @interface_list.setter
    def interface_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_list", value)

    @property
    @pulumi.getter
    def l2mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Layer2 MTU size.
        """
        return pulumi.get(self, "l2mtu")

    @l2mtu.setter
    def l2mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "l2mtu", value)

    @property
    @pulumi.getter(name="localForwarding")
    def local_forwarding(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls forwarding mode. If disabled, all L2 and L3 data will be forwarded to CAPsMAN, and further forwarding decisions will be made only then. See [docs](https://wiki.mikrotik.com/wiki/Manual:CAPsMAN#Local_Forwarding_Mode) for info.
        """
        return pulumi.get(self, "local_forwarding")

    @local_forwarding.setter
    def local_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_forwarding", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU size.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="openflowSwitch")
    def openflow_switch(self) -> Optional[pulumi.Input[str]]:
        """
        OpenFlow switch to add interface to, as port when enabled.
        """
        return pulumi.get(self, "openflow_switch")

    @openflow_switch.setter
    def openflow_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "openflow_switch", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID to assign to interface if vlan-mode enables use of VLAN tagging.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vlanMode")
    def vlan_mode(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN tagging mode specifies if VLAN tag should be assigned to interface (causes all received data to get tagged with VLAN tag and allows interface to only send out data tagged with given tag)
        """
        return pulumi.get(self, "vlan_mode")

    @vlan_mode.setter
    def vlan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_mode", value)


class Datapath(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 bridge_cost: Optional[pulumi.Input[int]] = None,
                 bridge_horizon: Optional[pulumi.Input[int]] = None,
                 client_to_client_forwarding: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 interface_list: Optional[pulumi.Input[str]] = None,
                 l2mtu: Optional[pulumi.Input[int]] = None,
                 local_forwarding: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 openflow_switch: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vlan_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_datapath = routeros.caps_man.Datapath("testDatapath",
            arp="local-proxy-arp",
            bridge="bridge",
            bridge_cost=100,
            bridge_horizon=200,
            client_to_client_forwarding=True,
            comment="test_datapath",
            interface_list="static",
            l2mtu=1450,
            local_forwarding=True,
            mtu=1500,
            vlan_id=101,
            vlan_mode="no-tag")
        ```

        ## Import

        Import with the name of the CAPsMAN datapath configuration in case of the example use test-datapath-config

        ```sh
         $ pulumi import routeros:CapsMan/datapath:Datapath test_datapath test-datapath-config
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] arp: ARP mode. See [docs](https://wiki.mikrotik.com/wiki/Manual:IP/ARP#ARP_Modes) for info.
        :param pulumi.Input[str] bridge: Bridge to which particular interface should be automatically added as port. Required only when local-forwarding is not used.
        :param pulumi.Input[int] bridge_cost: Bridge port cost to use when adding as bridge port.
        :param pulumi.Input[int] bridge_horizon: Bridge horizon to use when adding as bridge port.
        :param pulumi.Input[bool] client_to_client_forwarding: Controls if client-to-client forwarding between wireless clients connected to interface should be allowed, in local forwarding mode this function is performed by CAP, otherwise it is performed by CAPsMAN.
        :param pulumi.Input[str] interface_list: Interface list name.
        :param pulumi.Input[int] l2mtu: Layer2 MTU size.
        :param pulumi.Input[bool] local_forwarding: Controls forwarding mode. If disabled, all L2 and L3 data will be forwarded to CAPsMAN, and further forwarding decisions will be made only then. See [docs](https://wiki.mikrotik.com/wiki/Manual:CAPsMAN#Local_Forwarding_Mode) for info.
        :param pulumi.Input[int] mtu: MTU size.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] openflow_switch: OpenFlow switch to add interface to, as port when enabled.
        :param pulumi.Input[int] vlan_id: VLAN ID to assign to interface if vlan-mode enables use of VLAN tagging.
        :param pulumi.Input[str] vlan_mode: VLAN tagging mode specifies if VLAN tag should be assigned to interface (causes all received data to get tagged with VLAN tag and allows interface to only send out data tagged with given tag)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DatapathArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_datapath = routeros.caps_man.Datapath("testDatapath",
            arp="local-proxy-arp",
            bridge="bridge",
            bridge_cost=100,
            bridge_horizon=200,
            client_to_client_forwarding=True,
            comment="test_datapath",
            interface_list="static",
            l2mtu=1450,
            local_forwarding=True,
            mtu=1500,
            vlan_id=101,
            vlan_mode="no-tag")
        ```

        ## Import

        Import with the name of the CAPsMAN datapath configuration in case of the example use test-datapath-config

        ```sh
         $ pulumi import routeros:CapsMan/datapath:Datapath test_datapath test-datapath-config
        ```

        :param str resource_name: The name of the resource.
        :param DatapathArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatapathArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 bridge_cost: Optional[pulumi.Input[int]] = None,
                 bridge_horizon: Optional[pulumi.Input[int]] = None,
                 client_to_client_forwarding: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 interface_list: Optional[pulumi.Input[str]] = None,
                 l2mtu: Optional[pulumi.Input[int]] = None,
                 local_forwarding: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 openflow_switch: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vlan_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatapathArgs.__new__(DatapathArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["arp"] = arp
            __props__.__dict__["bridge"] = bridge
            __props__.__dict__["bridge_cost"] = bridge_cost
            __props__.__dict__["bridge_horizon"] = bridge_horizon
            __props__.__dict__["client_to_client_forwarding"] = client_to_client_forwarding
            __props__.__dict__["comment"] = comment
            __props__.__dict__["interface_list"] = interface_list
            __props__.__dict__["l2mtu"] = l2mtu
            __props__.__dict__["local_forwarding"] = local_forwarding
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            __props__.__dict__["openflow_switch"] = openflow_switch
            __props__.__dict__["vlan_id"] = vlan_id
            __props__.__dict__["vlan_mode"] = vlan_mode
        super(Datapath, __self__).__init__(
            'routeros:CapsMan/datapath:Datapath',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            arp: Optional[pulumi.Input[str]] = None,
            bridge: Optional[pulumi.Input[str]] = None,
            bridge_cost: Optional[pulumi.Input[int]] = None,
            bridge_horizon: Optional[pulumi.Input[int]] = None,
            client_to_client_forwarding: Optional[pulumi.Input[bool]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            interface_list: Optional[pulumi.Input[str]] = None,
            l2mtu: Optional[pulumi.Input[int]] = None,
            local_forwarding: Optional[pulumi.Input[bool]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            openflow_switch: Optional[pulumi.Input[str]] = None,
            vlan_id: Optional[pulumi.Input[int]] = None,
            vlan_mode: Optional[pulumi.Input[str]] = None) -> 'Datapath':
        """
        Get an existing Datapath resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] arp: ARP mode. See [docs](https://wiki.mikrotik.com/wiki/Manual:IP/ARP#ARP_Modes) for info.
        :param pulumi.Input[str] bridge: Bridge to which particular interface should be automatically added as port. Required only when local-forwarding is not used.
        :param pulumi.Input[int] bridge_cost: Bridge port cost to use when adding as bridge port.
        :param pulumi.Input[int] bridge_horizon: Bridge horizon to use when adding as bridge port.
        :param pulumi.Input[bool] client_to_client_forwarding: Controls if client-to-client forwarding between wireless clients connected to interface should be allowed, in local forwarding mode this function is performed by CAP, otherwise it is performed by CAPsMAN.
        :param pulumi.Input[str] interface_list: Interface list name.
        :param pulumi.Input[int] l2mtu: Layer2 MTU size.
        :param pulumi.Input[bool] local_forwarding: Controls forwarding mode. If disabled, all L2 and L3 data will be forwarded to CAPsMAN, and further forwarding decisions will be made only then. See [docs](https://wiki.mikrotik.com/wiki/Manual:CAPsMAN#Local_Forwarding_Mode) for info.
        :param pulumi.Input[int] mtu: MTU size.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] openflow_switch: OpenFlow switch to add interface to, as port when enabled.
        :param pulumi.Input[int] vlan_id: VLAN ID to assign to interface if vlan-mode enables use of VLAN tagging.
        :param pulumi.Input[str] vlan_mode: VLAN tagging mode specifies if VLAN tag should be assigned to interface (causes all received data to get tagged with VLAN tag and allows interface to only send out data tagged with given tag)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatapathState.__new__(_DatapathState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["arp"] = arp
        __props__.__dict__["bridge"] = bridge
        __props__.__dict__["bridge_cost"] = bridge_cost
        __props__.__dict__["bridge_horizon"] = bridge_horizon
        __props__.__dict__["client_to_client_forwarding"] = client_to_client_forwarding
        __props__.__dict__["comment"] = comment
        __props__.__dict__["interface_list"] = interface_list
        __props__.__dict__["l2mtu"] = l2mtu
        __props__.__dict__["local_forwarding"] = local_forwarding
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["openflow_switch"] = openflow_switch
        __props__.__dict__["vlan_id"] = vlan_id
        __props__.__dict__["vlan_mode"] = vlan_mode
        return Datapath(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def arp(self) -> pulumi.Output[Optional[str]]:
        """
        ARP mode. See [docs](https://wiki.mikrotik.com/wiki/Manual:IP/ARP#ARP_Modes) for info.
        """
        return pulumi.get(self, "arp")

    @property
    @pulumi.getter
    def bridge(self) -> pulumi.Output[Optional[str]]:
        """
        Bridge to which particular interface should be automatically added as port. Required only when local-forwarding is not used.
        """
        return pulumi.get(self, "bridge")

    @property
    @pulumi.getter(name="bridgeCost")
    def bridge_cost(self) -> pulumi.Output[Optional[int]]:
        """
        Bridge port cost to use when adding as bridge port.
        """
        return pulumi.get(self, "bridge_cost")

    @property
    @pulumi.getter(name="bridgeHorizon")
    def bridge_horizon(self) -> pulumi.Output[Optional[int]]:
        """
        Bridge horizon to use when adding as bridge port.
        """
        return pulumi.get(self, "bridge_horizon")

    @property
    @pulumi.getter(name="clientToClientForwarding")
    def client_to_client_forwarding(self) -> pulumi.Output[Optional[bool]]:
        """
        Controls if client-to-client forwarding between wireless clients connected to interface should be allowed, in local forwarding mode this function is performed by CAP, otherwise it is performed by CAPsMAN.
        """
        return pulumi.get(self, "client_to_client_forwarding")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="interfaceList")
    def interface_list(self) -> pulumi.Output[Optional[str]]:
        """
        Interface list name.
        """
        return pulumi.get(self, "interface_list")

    @property
    @pulumi.getter
    def l2mtu(self) -> pulumi.Output[Optional[int]]:
        """
        Layer2 MTU size.
        """
        return pulumi.get(self, "l2mtu")

    @property
    @pulumi.getter(name="localForwarding")
    def local_forwarding(self) -> pulumi.Output[Optional[bool]]:
        """
        Controls forwarding mode. If disabled, all L2 and L3 data will be forwarded to CAPsMAN, and further forwarding decisions will be made only then. See [docs](https://wiki.mikrotik.com/wiki/Manual:CAPsMAN#Local_Forwarding_Mode) for info.
        """
        return pulumi.get(self, "local_forwarding")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[int]]:
        """
        MTU size.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openflowSwitch")
    def openflow_switch(self) -> pulumi.Output[Optional[str]]:
        """
        OpenFlow switch to add interface to, as port when enabled.
        """
        return pulumi.get(self, "openflow_switch")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[Optional[int]]:
        """
        VLAN ID to assign to interface if vlan-mode enables use of VLAN tagging.
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vlanMode")
    def vlan_mode(self) -> pulumi.Output[Optional[str]]:
        """
        VLAN tagging mode specifies if VLAN tag should be assigned to interface (causes all received data to get tagged with VLAN tag and allows interface to only send out data tagged with given tag)
        """
        return pulumi.get(self, "vlan_mode")

