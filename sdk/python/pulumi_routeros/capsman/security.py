# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SecurityArgs', 'Security']

@pulumi.input_type
class SecurityArgs:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 authentication_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disable_pmkid: Optional[pulumi.Input[bool]] = None,
                 eap_methods: Optional[pulumi.Input[str]] = None,
                 eap_radius_accounting: Optional[pulumi.Input[bool]] = None,
                 encryptions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_encryption: Optional[pulumi.Input[str]] = None,
                 group_key_update: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 tls_certificate: Optional[pulumi.Input[str]] = None,
                 tls_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Security resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authentication_types: Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
        :param pulumi.Input[bool] disable_pmkid: Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
        :param pulumi.Input[str] eap_methods: eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
        :param pulumi.Input[bool] eap_radius_accounting: Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
        :param pulumi.Input[Sequence[pulumi.Input[str]]] encryptions: Set type of unicast encryption algorithm used.
        :param pulumi.Input[str] group_encryption: Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
        :param pulumi.Input[str] group_key_update: Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] passphrase: WPA or WPA2 pre-shared key.
        :param pulumi.Input[str] tls_certificate: Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
        :param pulumi.Input[str] tls_mode: This property has effect only when security.eap-methods contains eap-tls.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if authentication_types is not None:
            pulumi.set(__self__, "authentication_types", authentication_types)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disable_pmkid is not None:
            pulumi.set(__self__, "disable_pmkid", disable_pmkid)
        if eap_methods is not None:
            pulumi.set(__self__, "eap_methods", eap_methods)
        if eap_radius_accounting is not None:
            pulumi.set(__self__, "eap_radius_accounting", eap_radius_accounting)
        if encryptions is not None:
            pulumi.set(__self__, "encryptions", encryptions)
        if group_encryption is not None:
            pulumi.set(__self__, "group_encryption", group_encryption)
        if group_key_update is not None:
            pulumi.set(__self__, "group_key_update", group_key_update)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if tls_certificate is not None:
            pulumi.set(__self__, "tls_certificate", tls_certificate)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="authenticationTypes")
    def authentication_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
        """
        return pulumi.get(self, "authentication_types")

    @authentication_types.setter
    def authentication_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authentication_types", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="disablePmkid")
    def disable_pmkid(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
        """
        return pulumi.get(self, "disable_pmkid")

    @disable_pmkid.setter
    def disable_pmkid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_pmkid", value)

    @property
    @pulumi.getter(name="eapMethods")
    def eap_methods(self) -> Optional[pulumi.Input[str]]:
        """
        eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
        """
        return pulumi.get(self, "eap_methods")

    @eap_methods.setter
    def eap_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_methods", value)

    @property
    @pulumi.getter(name="eapRadiusAccounting")
    def eap_radius_accounting(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
        """
        return pulumi.get(self, "eap_radius_accounting")

    @eap_radius_accounting.setter
    def eap_radius_accounting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eap_radius_accounting", value)

    @property
    @pulumi.getter
    def encryptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set type of unicast encryption algorithm used.
        """
        return pulumi.get(self, "encryptions")

    @encryptions.setter
    def encryptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "encryptions", value)

    @property
    @pulumi.getter(name="groupEncryption")
    def group_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
        """
        return pulumi.get(self, "group_encryption")

    @group_encryption.setter
    def group_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_encryption", value)

    @property
    @pulumi.getter(name="groupKeyUpdate")
    def group_key_update(self) -> Optional[pulumi.Input[str]]:
        """
        Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
        """
        return pulumi.get(self, "group_key_update")

    @group_key_update.setter
    def group_key_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_key_update", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        WPA or WPA2 pre-shared key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
        """
        return pulumi.get(self, "tls_certificate")

    @tls_certificate.setter
    def tls_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_certificate", value)

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional[pulumi.Input[str]]:
        """
        This property has effect only when security.eap-methods contains eap-tls.
        """
        return pulumi.get(self, "tls_mode")

    @tls_mode.setter
    def tls_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_mode", value)


@pulumi.input_type
class _SecurityState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 authentication_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disable_pmkid: Optional[pulumi.Input[bool]] = None,
                 eap_methods: Optional[pulumi.Input[str]] = None,
                 eap_radius_accounting: Optional[pulumi.Input[bool]] = None,
                 encryptions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_encryption: Optional[pulumi.Input[str]] = None,
                 group_key_update: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 tls_certificate: Optional[pulumi.Input[str]] = None,
                 tls_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Security resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authentication_types: Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
        :param pulumi.Input[bool] disable_pmkid: Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
        :param pulumi.Input[str] eap_methods: eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
        :param pulumi.Input[bool] eap_radius_accounting: Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
        :param pulumi.Input[Sequence[pulumi.Input[str]]] encryptions: Set type of unicast encryption algorithm used.
        :param pulumi.Input[str] group_encryption: Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
        :param pulumi.Input[str] group_key_update: Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] passphrase: WPA or WPA2 pre-shared key.
        :param pulumi.Input[str] tls_certificate: Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
        :param pulumi.Input[str] tls_mode: This property has effect only when security.eap-methods contains eap-tls.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if authentication_types is not None:
            pulumi.set(__self__, "authentication_types", authentication_types)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disable_pmkid is not None:
            pulumi.set(__self__, "disable_pmkid", disable_pmkid)
        if eap_methods is not None:
            pulumi.set(__self__, "eap_methods", eap_methods)
        if eap_radius_accounting is not None:
            pulumi.set(__self__, "eap_radius_accounting", eap_radius_accounting)
        if encryptions is not None:
            pulumi.set(__self__, "encryptions", encryptions)
        if group_encryption is not None:
            pulumi.set(__self__, "group_encryption", group_encryption)
        if group_key_update is not None:
            pulumi.set(__self__, "group_key_update", group_key_update)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if tls_certificate is not None:
            pulumi.set(__self__, "tls_certificate", tls_certificate)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="authenticationTypes")
    def authentication_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
        """
        return pulumi.get(self, "authentication_types")

    @authentication_types.setter
    def authentication_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authentication_types", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="disablePmkid")
    def disable_pmkid(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
        """
        return pulumi.get(self, "disable_pmkid")

    @disable_pmkid.setter
    def disable_pmkid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_pmkid", value)

    @property
    @pulumi.getter(name="eapMethods")
    def eap_methods(self) -> Optional[pulumi.Input[str]]:
        """
        eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
        """
        return pulumi.get(self, "eap_methods")

    @eap_methods.setter
    def eap_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_methods", value)

    @property
    @pulumi.getter(name="eapRadiusAccounting")
    def eap_radius_accounting(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
        """
        return pulumi.get(self, "eap_radius_accounting")

    @eap_radius_accounting.setter
    def eap_radius_accounting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eap_radius_accounting", value)

    @property
    @pulumi.getter
    def encryptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set type of unicast encryption algorithm used.
        """
        return pulumi.get(self, "encryptions")

    @encryptions.setter
    def encryptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "encryptions", value)

    @property
    @pulumi.getter(name="groupEncryption")
    def group_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
        """
        return pulumi.get(self, "group_encryption")

    @group_encryption.setter
    def group_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_encryption", value)

    @property
    @pulumi.getter(name="groupKeyUpdate")
    def group_key_update(self) -> Optional[pulumi.Input[str]]:
        """
        Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
        """
        return pulumi.get(self, "group_key_update")

    @group_key_update.setter
    def group_key_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_key_update", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        WPA or WPA2 pre-shared key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
        """
        return pulumi.get(self, "tls_certificate")

    @tls_certificate.setter
    def tls_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_certificate", value)

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional[pulumi.Input[str]]:
        """
        This property has effect only when security.eap-methods contains eap-tls.
        """
        return pulumi.get(self, "tls_mode")

    @tls_mode.setter
    def tls_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_mode", value)


class Security(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 authentication_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disable_pmkid: Optional[pulumi.Input[bool]] = None,
                 eap_methods: Optional[pulumi.Input[str]] = None,
                 eap_radius_accounting: Optional[pulumi.Input[bool]] = None,
                 encryptions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_encryption: Optional[pulumi.Input[str]] = None,
                 group_key_update: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 tls_certificate: Optional[pulumi.Input[str]] = None,
                 tls_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_security = routeros.caps_man.Security("testSecurity",
            authentication_types=[
                "wpa-psk",
                "wpa-eap",
                "wpa2-psk",
            ],
            comment="test_security",
            disable_pmkid=True,
            eap_methods="eap-tls,passthrough",
            eap_radius_accounting=True,
            encryptions=[
                "tkip",
                "aes-ccm",
            ],
            group_encryption="aes-ccm",
            group_key_update="1h",
            passphrase="0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDE",
            tls_certificate="none",
            tls_mode="verify-certificate")
        ```

        ## Import

        Import with the name of the CAPsMAN security profile in case of the example use test-security-config

        ```sh
         $ pulumi import routeros:CapsMan/security:Security test_security test-security-config
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authentication_types: Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
        :param pulumi.Input[bool] disable_pmkid: Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
        :param pulumi.Input[str] eap_methods: eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
        :param pulumi.Input[bool] eap_radius_accounting: Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
        :param pulumi.Input[Sequence[pulumi.Input[str]]] encryptions: Set type of unicast encryption algorithm used.
        :param pulumi.Input[str] group_encryption: Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
        :param pulumi.Input[str] group_key_update: Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] passphrase: WPA or WPA2 pre-shared key.
        :param pulumi.Input[str] tls_certificate: Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
        :param pulumi.Input[str] tls_mode: This property has effect only when security.eap-methods contains eap-tls.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SecurityArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_security = routeros.caps_man.Security("testSecurity",
            authentication_types=[
                "wpa-psk",
                "wpa-eap",
                "wpa2-psk",
            ],
            comment="test_security",
            disable_pmkid=True,
            eap_methods="eap-tls,passthrough",
            eap_radius_accounting=True,
            encryptions=[
                "tkip",
                "aes-ccm",
            ],
            group_encryption="aes-ccm",
            group_key_update="1h",
            passphrase="0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDE",
            tls_certificate="none",
            tls_mode="verify-certificate")
        ```

        ## Import

        Import with the name of the CAPsMAN security profile in case of the example use test-security-config

        ```sh
         $ pulumi import routeros:CapsMan/security:Security test_security test-security-config
        ```

        :param str resource_name: The name of the resource.
        :param SecurityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 authentication_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disable_pmkid: Optional[pulumi.Input[bool]] = None,
                 eap_methods: Optional[pulumi.Input[str]] = None,
                 eap_radius_accounting: Optional[pulumi.Input[bool]] = None,
                 encryptions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_encryption: Optional[pulumi.Input[str]] = None,
                 group_key_update: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 tls_certificate: Optional[pulumi.Input[str]] = None,
                 tls_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityArgs.__new__(SecurityArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["authentication_types"] = authentication_types
            __props__.__dict__["comment"] = comment
            __props__.__dict__["disable_pmkid"] = disable_pmkid
            __props__.__dict__["eap_methods"] = eap_methods
            __props__.__dict__["eap_radius_accounting"] = eap_radius_accounting
            __props__.__dict__["encryptions"] = encryptions
            __props__.__dict__["group_encryption"] = group_encryption
            __props__.__dict__["group_key_update"] = group_key_update
            __props__.__dict__["name"] = name
            __props__.__dict__["passphrase"] = None if passphrase is None else pulumi.Output.secret(passphrase)
            __props__.__dict__["tls_certificate"] = tls_certificate
            __props__.__dict__["tls_mode"] = tls_mode
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["passphrase"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Security, __self__).__init__(
            'routeros:CapsMan/security:Security',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            authentication_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            disable_pmkid: Optional[pulumi.Input[bool]] = None,
            eap_methods: Optional[pulumi.Input[str]] = None,
            eap_radius_accounting: Optional[pulumi.Input[bool]] = None,
            encryptions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            group_encryption: Optional[pulumi.Input[str]] = None,
            group_key_update: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            passphrase: Optional[pulumi.Input[str]] = None,
            tls_certificate: Optional[pulumi.Input[str]] = None,
            tls_mode: Optional[pulumi.Input[str]] = None) -> 'Security':
        """
        Get an existing Security resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authentication_types: Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
        :param pulumi.Input[bool] disable_pmkid: Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
        :param pulumi.Input[str] eap_methods: eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
        :param pulumi.Input[bool] eap_radius_accounting: Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
        :param pulumi.Input[Sequence[pulumi.Input[str]]] encryptions: Set type of unicast encryption algorithm used.
        :param pulumi.Input[str] group_encryption: Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
        :param pulumi.Input[str] group_key_update: Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] passphrase: WPA or WPA2 pre-shared key.
        :param pulumi.Input[str] tls_certificate: Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
        :param pulumi.Input[str] tls_mode: This property has effect only when security.eap-methods contains eap-tls.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityState.__new__(_SecurityState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["authentication_types"] = authentication_types
        __props__.__dict__["comment"] = comment
        __props__.__dict__["disable_pmkid"] = disable_pmkid
        __props__.__dict__["eap_methods"] = eap_methods
        __props__.__dict__["eap_radius_accounting"] = eap_radius_accounting
        __props__.__dict__["encryptions"] = encryptions
        __props__.__dict__["group_encryption"] = group_encryption
        __props__.__dict__["group_key_update"] = group_key_update
        __props__.__dict__["name"] = name
        __props__.__dict__["passphrase"] = passphrase
        __props__.__dict__["tls_certificate"] = tls_certificate
        __props__.__dict__["tls_mode"] = tls_mode
        return Security(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter(name="authenticationTypes")
    def authentication_types(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specify the type of Authentication from wpa-psk, wpa2-psk, wpa-eap or wpa2-eap.
        """
        return pulumi.get(self, "authentication_types")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="disablePmkid")
    def disable_pmkid(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
        """
        return pulumi.get(self, "disable_pmkid")

    @property
    @pulumi.getter(name="eapMethods")
    def eap_methods(self) -> pulumi.Output[Optional[str]]:
        """
        eap-tls - Use built-in EAP TLS authentication; passthrough - Access point will relay authentication process to the RADIUS server.
        """
        return pulumi.get(self, "eap_methods")

    @property
    @pulumi.getter(name="eapRadiusAccounting")
    def eap_radius_accounting(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies if RADIUS traffic accounting should be used if RADIUS authentication gets done for this client
        """
        return pulumi.get(self, "eap_radius_accounting")

    @property
    @pulumi.getter
    def encryptions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Set type of unicast encryption algorithm used.
        """
        return pulumi.get(self, "encryptions")

    @property
    @pulumi.getter(name="groupEncryption")
    def group_encryption(self) -> pulumi.Output[Optional[str]]:
        """
        Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
        """
        return pulumi.get(self, "group_encryption")

    @property
    @pulumi.getter(name="groupKeyUpdate")
    def group_key_update(self) -> pulumi.Output[Optional[str]]:
        """
        Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points. (30s..1h)
        """
        return pulumi.get(self, "group_key_update")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def passphrase(self) -> pulumi.Output[Optional[str]]:
        """
        WPA or WPA2 pre-shared key.
        """
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> pulumi.Output[Optional[str]]:
        """
        Access Point always needs a certificate when security.tls-mode is set to value other than no-certificates.
        """
        return pulumi.get(self, "tls_certificate")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> pulumi.Output[Optional[str]]:
        """
        This property has effect only when security.eap-methods contains eap-tls.
        """
        return pulumi.get(self, "tls_mode")

