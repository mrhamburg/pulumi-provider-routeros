# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetFirewallAddressListArgs',
    'GetFirewallMangleArgs',
    'GetFirewallNatArgs',
    'GetFirewallRuleArgs',
]

@pulumi.input_type
class GetFirewallAddressListArgs:
    def __init__(__self__, *,
                 address: str,
                 comment: str,
                 creation_time: str,
                 disabled: bool,
                 dynamic: bool,
                 id: str,
                 list: str,
                 timeout: str,
                 filter: Optional[Mapping[str, Any]] = None):
        """
        :param str id: The ID of this resource.
        :param Mapping[str, Any] filter: Additional request filtering options.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "list", list)
        pulumi.set(__self__, "timeout", timeout)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: str):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: str):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: str):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: bool):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: bool):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def list(self) -> str:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: str):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: str):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[Mapping[str, Any]]:
        """
        Additional request filtering options.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[Mapping[str, Any]]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class GetFirewallMangleArgs:
    def __init__(__self__, *,
                 action: str,
                 address_list: str,
                 address_list_timeout: str,
                 bytes: int,
                 chain: str,
                 comment: str,
                 connection_bytes: str,
                 connection_limit: str,
                 connection_mark: str,
                 connection_nat_state: str,
                 connection_rate: str,
                 connection_state: str,
                 connection_type: str,
                 content: str,
                 disabled: bool,
                 dscp: int,
                 dst_address: str,
                 dst_address_list: str,
                 dst_address_type: str,
                 dst_limit: str,
                 dst_port: str,
                 dynamic: bool,
                 fragment: bool,
                 hotspot: str,
                 icmp_options: str,
                 id: str,
                 in_bridge_port: str,
                 in_bridge_port_list: str,
                 in_interface: str,
                 in_interface_list: str,
                 ingress_priority: int,
                 invalid: bool,
                 ipsec_policy: str,
                 ipv4_options: str,
                 jump_target: str,
                 layer7_protocol: str,
                 limit: str,
                 log: bool,
                 log_prefix: str,
                 new_connection_mark: str,
                 new_dscp: int,
                 new_mss: int,
                 new_packet_mark: str,
                 new_priority: str,
                 new_routing_mark: str,
                 new_ttl: str,
                 nth: str,
                 out_bridge_port: str,
                 out_bridge_port_list: str,
                 out_interface: str,
                 out_interface_list: str,
                 packet_mark: str,
                 packet_size: str,
                 packets: int,
                 passthrough: bool,
                 per_connection_classifier: str,
                 port: str,
                 protocol: str,
                 psd: str,
                 random: int,
                 route_dst: str,
                 routing_mark: str,
                 src_address: str,
                 src_address_list: str,
                 src_address_type: str,
                 src_mac_address: str,
                 src_port: str,
                 tcp_flags: str,
                 tcp_mss: str,
                 time: str,
                 tls_host: str,
                 ttl: str,
                 filter: Optional[Mapping[str, Any]] = None):
        """
        :param str id: The ID of this resource.
        :param Mapping[str, Any] filter: Additional request filtering options.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "address_list", address_list)
        pulumi.set(__self__, "address_list_timeout", address_list_timeout)
        pulumi.set(__self__, "bytes", bytes)
        pulumi.set(__self__, "chain", chain)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "connection_bytes", connection_bytes)
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "connection_mark", connection_mark)
        pulumi.set(__self__, "connection_nat_state", connection_nat_state)
        pulumi.set(__self__, "connection_rate", connection_rate)
        pulumi.set(__self__, "connection_state", connection_state)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "dst_address", dst_address)
        pulumi.set(__self__, "dst_address_list", dst_address_list)
        pulumi.set(__self__, "dst_address_type", dst_address_type)
        pulumi.set(__self__, "dst_limit", dst_limit)
        pulumi.set(__self__, "dst_port", dst_port)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "fragment", fragment)
        pulumi.set(__self__, "hotspot", hotspot)
        pulumi.set(__self__, "icmp_options", icmp_options)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "in_bridge_port", in_bridge_port)
        pulumi.set(__self__, "in_bridge_port_list", in_bridge_port_list)
        pulumi.set(__self__, "in_interface", in_interface)
        pulumi.set(__self__, "in_interface_list", in_interface_list)
        pulumi.set(__self__, "ingress_priority", ingress_priority)
        pulumi.set(__self__, "invalid", invalid)
        pulumi.set(__self__, "ipsec_policy", ipsec_policy)
        pulumi.set(__self__, "ipv4_options", ipv4_options)
        pulumi.set(__self__, "jump_target", jump_target)
        pulumi.set(__self__, "layer7_protocol", layer7_protocol)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "log_prefix", log_prefix)
        pulumi.set(__self__, "new_connection_mark", new_connection_mark)
        pulumi.set(__self__, "new_dscp", new_dscp)
        pulumi.set(__self__, "new_mss", new_mss)
        pulumi.set(__self__, "new_packet_mark", new_packet_mark)
        pulumi.set(__self__, "new_priority", new_priority)
        pulumi.set(__self__, "new_routing_mark", new_routing_mark)
        pulumi.set(__self__, "new_ttl", new_ttl)
        pulumi.set(__self__, "nth", nth)
        pulumi.set(__self__, "out_bridge_port", out_bridge_port)
        pulumi.set(__self__, "out_bridge_port_list", out_bridge_port_list)
        pulumi.set(__self__, "out_interface", out_interface)
        pulumi.set(__self__, "out_interface_list", out_interface_list)
        pulumi.set(__self__, "packet_mark", packet_mark)
        pulumi.set(__self__, "packet_size", packet_size)
        pulumi.set(__self__, "packets", packets)
        pulumi.set(__self__, "passthrough", passthrough)
        pulumi.set(__self__, "per_connection_classifier", per_connection_classifier)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "psd", psd)
        pulumi.set(__self__, "random", random)
        pulumi.set(__self__, "route_dst", route_dst)
        pulumi.set(__self__, "routing_mark", routing_mark)
        pulumi.set(__self__, "src_address", src_address)
        pulumi.set(__self__, "src_address_list", src_address_list)
        pulumi.set(__self__, "src_address_type", src_address_type)
        pulumi.set(__self__, "src_mac_address", src_mac_address)
        pulumi.set(__self__, "src_port", src_port)
        pulumi.set(__self__, "tcp_flags", tcp_flags)
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "tls_host", tls_host)
        pulumi.set(__self__, "ttl", ttl)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: str):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> str:
        return pulumi.get(self, "address_list")

    @address_list.setter
    def address_list(self, value: str):
        pulumi.set(self, "address_list", value)

    @property
    @pulumi.getter(name="addressListTimeout")
    def address_list_timeout(self) -> str:
        return pulumi.get(self, "address_list_timeout")

    @address_list_timeout.setter
    def address_list_timeout(self, value: str):
        pulumi.set(self, "address_list_timeout", value)

    @property
    @pulumi.getter
    def bytes(self) -> int:
        return pulumi.get(self, "bytes")

    @bytes.setter
    def bytes(self, value: int):
        pulumi.set(self, "bytes", value)

    @property
    @pulumi.getter
    def chain(self) -> str:
        return pulumi.get(self, "chain")

    @chain.setter
    def chain(self, value: str):
        pulumi.set(self, "chain", value)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: str):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="connectionBytes")
    def connection_bytes(self) -> str:
        return pulumi.get(self, "connection_bytes")

    @connection_bytes.setter
    def connection_bytes(self, value: str):
        pulumi.set(self, "connection_bytes", value)

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> str:
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: str):
        pulumi.set(self, "connection_limit", value)

    @property
    @pulumi.getter(name="connectionMark")
    def connection_mark(self) -> str:
        return pulumi.get(self, "connection_mark")

    @connection_mark.setter
    def connection_mark(self, value: str):
        pulumi.set(self, "connection_mark", value)

    @property
    @pulumi.getter(name="connectionNatState")
    def connection_nat_state(self) -> str:
        return pulumi.get(self, "connection_nat_state")

    @connection_nat_state.setter
    def connection_nat_state(self, value: str):
        pulumi.set(self, "connection_nat_state", value)

    @property
    @pulumi.getter(name="connectionRate")
    def connection_rate(self) -> str:
        return pulumi.get(self, "connection_rate")

    @connection_rate.setter
    def connection_rate(self, value: str):
        pulumi.set(self, "connection_rate", value)

    @property
    @pulumi.getter(name="connectionState")
    def connection_state(self) -> str:
        return pulumi.get(self, "connection_state")

    @connection_state.setter
    def connection_state(self, value: str):
        pulumi.set(self, "connection_state", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: str):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: str):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: bool):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: int):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> str:
        return pulumi.get(self, "dst_address")

    @dst_address.setter
    def dst_address(self, value: str):
        pulumi.set(self, "dst_address", value)

    @property
    @pulumi.getter(name="dstAddressList")
    def dst_address_list(self) -> str:
        return pulumi.get(self, "dst_address_list")

    @dst_address_list.setter
    def dst_address_list(self, value: str):
        pulumi.set(self, "dst_address_list", value)

    @property
    @pulumi.getter(name="dstAddressType")
    def dst_address_type(self) -> str:
        return pulumi.get(self, "dst_address_type")

    @dst_address_type.setter
    def dst_address_type(self, value: str):
        pulumi.set(self, "dst_address_type", value)

    @property
    @pulumi.getter(name="dstLimit")
    def dst_limit(self) -> str:
        return pulumi.get(self, "dst_limit")

    @dst_limit.setter
    def dst_limit(self, value: str):
        pulumi.set(self, "dst_limit", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> str:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: str):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: bool):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter
    def fragment(self) -> bool:
        return pulumi.get(self, "fragment")

    @fragment.setter
    def fragment(self, value: bool):
        pulumi.set(self, "fragment", value)

    @property
    @pulumi.getter
    def hotspot(self) -> str:
        return pulumi.get(self, "hotspot")

    @hotspot.setter
    def hotspot(self, value: str):
        pulumi.set(self, "hotspot", value)

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> str:
        return pulumi.get(self, "icmp_options")

    @icmp_options.setter
    def icmp_options(self, value: str):
        pulumi.set(self, "icmp_options", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inBridgePort")
    def in_bridge_port(self) -> str:
        return pulumi.get(self, "in_bridge_port")

    @in_bridge_port.setter
    def in_bridge_port(self, value: str):
        pulumi.set(self, "in_bridge_port", value)

    @property
    @pulumi.getter(name="inBridgePortList")
    def in_bridge_port_list(self) -> str:
        return pulumi.get(self, "in_bridge_port_list")

    @in_bridge_port_list.setter
    def in_bridge_port_list(self, value: str):
        pulumi.set(self, "in_bridge_port_list", value)

    @property
    @pulumi.getter(name="inInterface")
    def in_interface(self) -> str:
        return pulumi.get(self, "in_interface")

    @in_interface.setter
    def in_interface(self, value: str):
        pulumi.set(self, "in_interface", value)

    @property
    @pulumi.getter(name="inInterfaceList")
    def in_interface_list(self) -> str:
        return pulumi.get(self, "in_interface_list")

    @in_interface_list.setter
    def in_interface_list(self, value: str):
        pulumi.set(self, "in_interface_list", value)

    @property
    @pulumi.getter(name="ingressPriority")
    def ingress_priority(self) -> int:
        return pulumi.get(self, "ingress_priority")

    @ingress_priority.setter
    def ingress_priority(self, value: int):
        pulumi.set(self, "ingress_priority", value)

    @property
    @pulumi.getter
    def invalid(self) -> bool:
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: bool):
        pulumi.set(self, "invalid", value)

    @property
    @pulumi.getter(name="ipsecPolicy")
    def ipsec_policy(self) -> str:
        return pulumi.get(self, "ipsec_policy")

    @ipsec_policy.setter
    def ipsec_policy(self, value: str):
        pulumi.set(self, "ipsec_policy", value)

    @property
    @pulumi.getter(name="ipv4Options")
    def ipv4_options(self) -> str:
        return pulumi.get(self, "ipv4_options")

    @ipv4_options.setter
    def ipv4_options(self, value: str):
        pulumi.set(self, "ipv4_options", value)

    @property
    @pulumi.getter(name="jumpTarget")
    def jump_target(self) -> str:
        return pulumi.get(self, "jump_target")

    @jump_target.setter
    def jump_target(self, value: str):
        pulumi.set(self, "jump_target", value)

    @property
    @pulumi.getter(name="layer7Protocol")
    def layer7_protocol(self) -> str:
        return pulumi.get(self, "layer7_protocol")

    @layer7_protocol.setter
    def layer7_protocol(self, value: str):
        pulumi.set(self, "layer7_protocol", value)

    @property
    @pulumi.getter
    def limit(self) -> str:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: str):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def log(self) -> bool:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: bool):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> str:
        return pulumi.get(self, "log_prefix")

    @log_prefix.setter
    def log_prefix(self, value: str):
        pulumi.set(self, "log_prefix", value)

    @property
    @pulumi.getter(name="newConnectionMark")
    def new_connection_mark(self) -> str:
        return pulumi.get(self, "new_connection_mark")

    @new_connection_mark.setter
    def new_connection_mark(self, value: str):
        pulumi.set(self, "new_connection_mark", value)

    @property
    @pulumi.getter(name="newDscp")
    def new_dscp(self) -> int:
        return pulumi.get(self, "new_dscp")

    @new_dscp.setter
    def new_dscp(self, value: int):
        pulumi.set(self, "new_dscp", value)

    @property
    @pulumi.getter(name="newMss")
    def new_mss(self) -> int:
        return pulumi.get(self, "new_mss")

    @new_mss.setter
    def new_mss(self, value: int):
        pulumi.set(self, "new_mss", value)

    @property
    @pulumi.getter(name="newPacketMark")
    def new_packet_mark(self) -> str:
        return pulumi.get(self, "new_packet_mark")

    @new_packet_mark.setter
    def new_packet_mark(self, value: str):
        pulumi.set(self, "new_packet_mark", value)

    @property
    @pulumi.getter(name="newPriority")
    def new_priority(self) -> str:
        return pulumi.get(self, "new_priority")

    @new_priority.setter
    def new_priority(self, value: str):
        pulumi.set(self, "new_priority", value)

    @property
    @pulumi.getter(name="newRoutingMark")
    def new_routing_mark(self) -> str:
        return pulumi.get(self, "new_routing_mark")

    @new_routing_mark.setter
    def new_routing_mark(self, value: str):
        pulumi.set(self, "new_routing_mark", value)

    @property
    @pulumi.getter(name="newTtl")
    def new_ttl(self) -> str:
        return pulumi.get(self, "new_ttl")

    @new_ttl.setter
    def new_ttl(self, value: str):
        pulumi.set(self, "new_ttl", value)

    @property
    @pulumi.getter
    def nth(self) -> str:
        return pulumi.get(self, "nth")

    @nth.setter
    def nth(self, value: str):
        pulumi.set(self, "nth", value)

    @property
    @pulumi.getter(name="outBridgePort")
    def out_bridge_port(self) -> str:
        return pulumi.get(self, "out_bridge_port")

    @out_bridge_port.setter
    def out_bridge_port(self, value: str):
        pulumi.set(self, "out_bridge_port", value)

    @property
    @pulumi.getter(name="outBridgePortList")
    def out_bridge_port_list(self) -> str:
        return pulumi.get(self, "out_bridge_port_list")

    @out_bridge_port_list.setter
    def out_bridge_port_list(self, value: str):
        pulumi.set(self, "out_bridge_port_list", value)

    @property
    @pulumi.getter(name="outInterface")
    def out_interface(self) -> str:
        return pulumi.get(self, "out_interface")

    @out_interface.setter
    def out_interface(self, value: str):
        pulumi.set(self, "out_interface", value)

    @property
    @pulumi.getter(name="outInterfaceList")
    def out_interface_list(self) -> str:
        return pulumi.get(self, "out_interface_list")

    @out_interface_list.setter
    def out_interface_list(self, value: str):
        pulumi.set(self, "out_interface_list", value)

    @property
    @pulumi.getter(name="packetMark")
    def packet_mark(self) -> str:
        return pulumi.get(self, "packet_mark")

    @packet_mark.setter
    def packet_mark(self, value: str):
        pulumi.set(self, "packet_mark", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> str:
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: str):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def packets(self) -> int:
        return pulumi.get(self, "packets")

    @packets.setter
    def packets(self, value: int):
        pulumi.set(self, "packets", value)

    @property
    @pulumi.getter
    def passthrough(self) -> bool:
        return pulumi.get(self, "passthrough")

    @passthrough.setter
    def passthrough(self, value: bool):
        pulumi.set(self, "passthrough", value)

    @property
    @pulumi.getter(name="perConnectionClassifier")
    def per_connection_classifier(self) -> str:
        return pulumi.get(self, "per_connection_classifier")

    @per_connection_classifier.setter
    def per_connection_classifier(self, value: str):
        pulumi.set(self, "per_connection_classifier", value)

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: str):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: str):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def psd(self) -> str:
        return pulumi.get(self, "psd")

    @psd.setter
    def psd(self, value: str):
        pulumi.set(self, "psd", value)

    @property
    @pulumi.getter
    def random(self) -> int:
        return pulumi.get(self, "random")

    @random.setter
    def random(self, value: int):
        pulumi.set(self, "random", value)

    @property
    @pulumi.getter(name="routeDst")
    def route_dst(self) -> str:
        return pulumi.get(self, "route_dst")

    @route_dst.setter
    def route_dst(self, value: str):
        pulumi.set(self, "route_dst", value)

    @property
    @pulumi.getter(name="routingMark")
    def routing_mark(self) -> str:
        return pulumi.get(self, "routing_mark")

    @routing_mark.setter
    def routing_mark(self, value: str):
        pulumi.set(self, "routing_mark", value)

    @property
    @pulumi.getter(name="srcAddress")
    def src_address(self) -> str:
        return pulumi.get(self, "src_address")

    @src_address.setter
    def src_address(self, value: str):
        pulumi.set(self, "src_address", value)

    @property
    @pulumi.getter(name="srcAddressList")
    def src_address_list(self) -> str:
        return pulumi.get(self, "src_address_list")

    @src_address_list.setter
    def src_address_list(self, value: str):
        pulumi.set(self, "src_address_list", value)

    @property
    @pulumi.getter(name="srcAddressType")
    def src_address_type(self) -> str:
        return pulumi.get(self, "src_address_type")

    @src_address_type.setter
    def src_address_type(self, value: str):
        pulumi.set(self, "src_address_type", value)

    @property
    @pulumi.getter(name="srcMacAddress")
    def src_mac_address(self) -> str:
        return pulumi.get(self, "src_mac_address")

    @src_mac_address.setter
    def src_mac_address(self, value: str):
        pulumi.set(self, "src_mac_address", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> str:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: str):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter(name="tcpFlags")
    def tcp_flags(self) -> str:
        return pulumi.get(self, "tcp_flags")

    @tcp_flags.setter
    def tcp_flags(self, value: str):
        pulumi.set(self, "tcp_flags", value)

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> str:
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: str):
        pulumi.set(self, "tcp_mss", value)

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: str):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="tlsHost")
    def tls_host(self) -> str:
        return pulumi.get(self, "tls_host")

    @tls_host.setter
    def tls_host(self, value: str):
        pulumi.set(self, "tls_host", value)

    @property
    @pulumi.getter
    def ttl(self) -> str:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: str):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[Mapping[str, Any]]:
        """
        Additional request filtering options.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[Mapping[str, Any]]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class GetFirewallNatArgs:
    def __init__(__self__, *,
                 action: str,
                 address_list: str,
                 address_list_timeout: str,
                 bytes: int,
                 chain: str,
                 comment: str,
                 connection_bytes: str,
                 connection_limit: str,
                 connection_mark: str,
                 connection_rate: str,
                 connection_type: str,
                 content: str,
                 disabled: bool,
                 dscp: int,
                 dst_address: str,
                 dst_address_list: str,
                 dst_address_type: str,
                 dst_limit: str,
                 dst_port: str,
                 dynamic: bool,
                 fragment: bool,
                 hotspot: str,
                 icmp_options: str,
                 id: str,
                 in_bridge_port: str,
                 in_bridge_port_list: str,
                 in_interface: str,
                 in_interface_list: str,
                 ingress_priority: int,
                 invalid: bool,
                 ipsec_policy: str,
                 ipv4_options: str,
                 jump_target: str,
                 layer7_protocol: str,
                 limit: str,
                 log: bool,
                 log_prefix: str,
                 nth: str,
                 out_bridge_port: str,
                 out_bridge_port_list: str,
                 out_interface: str,
                 out_interface_list: str,
                 packet_mark: str,
                 packet_size: str,
                 packets: int,
                 per_connection_classifier: str,
                 port: str,
                 priority: int,
                 protocol: str,
                 psd: str,
                 random: int,
                 routing_mark: str,
                 same_not_by_dst: bool,
                 src_address: str,
                 src_address_list: str,
                 src_address_type: str,
                 src_mac_address: str,
                 src_port: str,
                 tcp_mss: str,
                 time: str,
                 to_addresses: str,
                 to_ports: str,
                 ttl: str,
                 filter: Optional[Mapping[str, Any]] = None):
        """
        :param str id: The ID of this resource.
        :param Mapping[str, Any] filter: Additional request filtering options.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "address_list", address_list)
        pulumi.set(__self__, "address_list_timeout", address_list_timeout)
        pulumi.set(__self__, "bytes", bytes)
        pulumi.set(__self__, "chain", chain)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "connection_bytes", connection_bytes)
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "connection_mark", connection_mark)
        pulumi.set(__self__, "connection_rate", connection_rate)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "dst_address", dst_address)
        pulumi.set(__self__, "dst_address_list", dst_address_list)
        pulumi.set(__self__, "dst_address_type", dst_address_type)
        pulumi.set(__self__, "dst_limit", dst_limit)
        pulumi.set(__self__, "dst_port", dst_port)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "fragment", fragment)
        pulumi.set(__self__, "hotspot", hotspot)
        pulumi.set(__self__, "icmp_options", icmp_options)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "in_bridge_port", in_bridge_port)
        pulumi.set(__self__, "in_bridge_port_list", in_bridge_port_list)
        pulumi.set(__self__, "in_interface", in_interface)
        pulumi.set(__self__, "in_interface_list", in_interface_list)
        pulumi.set(__self__, "ingress_priority", ingress_priority)
        pulumi.set(__self__, "invalid", invalid)
        pulumi.set(__self__, "ipsec_policy", ipsec_policy)
        pulumi.set(__self__, "ipv4_options", ipv4_options)
        pulumi.set(__self__, "jump_target", jump_target)
        pulumi.set(__self__, "layer7_protocol", layer7_protocol)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "log_prefix", log_prefix)
        pulumi.set(__self__, "nth", nth)
        pulumi.set(__self__, "out_bridge_port", out_bridge_port)
        pulumi.set(__self__, "out_bridge_port_list", out_bridge_port_list)
        pulumi.set(__self__, "out_interface", out_interface)
        pulumi.set(__self__, "out_interface_list", out_interface_list)
        pulumi.set(__self__, "packet_mark", packet_mark)
        pulumi.set(__self__, "packet_size", packet_size)
        pulumi.set(__self__, "packets", packets)
        pulumi.set(__self__, "per_connection_classifier", per_connection_classifier)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "psd", psd)
        pulumi.set(__self__, "random", random)
        pulumi.set(__self__, "routing_mark", routing_mark)
        pulumi.set(__self__, "same_not_by_dst", same_not_by_dst)
        pulumi.set(__self__, "src_address", src_address)
        pulumi.set(__self__, "src_address_list", src_address_list)
        pulumi.set(__self__, "src_address_type", src_address_type)
        pulumi.set(__self__, "src_mac_address", src_mac_address)
        pulumi.set(__self__, "src_port", src_port)
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "to_addresses", to_addresses)
        pulumi.set(__self__, "to_ports", to_ports)
        pulumi.set(__self__, "ttl", ttl)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: str):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> str:
        return pulumi.get(self, "address_list")

    @address_list.setter
    def address_list(self, value: str):
        pulumi.set(self, "address_list", value)

    @property
    @pulumi.getter(name="addressListTimeout")
    def address_list_timeout(self) -> str:
        return pulumi.get(self, "address_list_timeout")

    @address_list_timeout.setter
    def address_list_timeout(self, value: str):
        pulumi.set(self, "address_list_timeout", value)

    @property
    @pulumi.getter
    def bytes(self) -> int:
        return pulumi.get(self, "bytes")

    @bytes.setter
    def bytes(self, value: int):
        pulumi.set(self, "bytes", value)

    @property
    @pulumi.getter
    def chain(self) -> str:
        return pulumi.get(self, "chain")

    @chain.setter
    def chain(self, value: str):
        pulumi.set(self, "chain", value)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: str):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="connectionBytes")
    def connection_bytes(self) -> str:
        return pulumi.get(self, "connection_bytes")

    @connection_bytes.setter
    def connection_bytes(self, value: str):
        pulumi.set(self, "connection_bytes", value)

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> str:
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: str):
        pulumi.set(self, "connection_limit", value)

    @property
    @pulumi.getter(name="connectionMark")
    def connection_mark(self) -> str:
        return pulumi.get(self, "connection_mark")

    @connection_mark.setter
    def connection_mark(self, value: str):
        pulumi.set(self, "connection_mark", value)

    @property
    @pulumi.getter(name="connectionRate")
    def connection_rate(self) -> str:
        return pulumi.get(self, "connection_rate")

    @connection_rate.setter
    def connection_rate(self, value: str):
        pulumi.set(self, "connection_rate", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: str):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: str):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: bool):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: int):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> str:
        return pulumi.get(self, "dst_address")

    @dst_address.setter
    def dst_address(self, value: str):
        pulumi.set(self, "dst_address", value)

    @property
    @pulumi.getter(name="dstAddressList")
    def dst_address_list(self) -> str:
        return pulumi.get(self, "dst_address_list")

    @dst_address_list.setter
    def dst_address_list(self, value: str):
        pulumi.set(self, "dst_address_list", value)

    @property
    @pulumi.getter(name="dstAddressType")
    def dst_address_type(self) -> str:
        return pulumi.get(self, "dst_address_type")

    @dst_address_type.setter
    def dst_address_type(self, value: str):
        pulumi.set(self, "dst_address_type", value)

    @property
    @pulumi.getter(name="dstLimit")
    def dst_limit(self) -> str:
        return pulumi.get(self, "dst_limit")

    @dst_limit.setter
    def dst_limit(self, value: str):
        pulumi.set(self, "dst_limit", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> str:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: str):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: bool):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter
    def fragment(self) -> bool:
        return pulumi.get(self, "fragment")

    @fragment.setter
    def fragment(self, value: bool):
        pulumi.set(self, "fragment", value)

    @property
    @pulumi.getter
    def hotspot(self) -> str:
        return pulumi.get(self, "hotspot")

    @hotspot.setter
    def hotspot(self, value: str):
        pulumi.set(self, "hotspot", value)

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> str:
        return pulumi.get(self, "icmp_options")

    @icmp_options.setter
    def icmp_options(self, value: str):
        pulumi.set(self, "icmp_options", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inBridgePort")
    def in_bridge_port(self) -> str:
        return pulumi.get(self, "in_bridge_port")

    @in_bridge_port.setter
    def in_bridge_port(self, value: str):
        pulumi.set(self, "in_bridge_port", value)

    @property
    @pulumi.getter(name="inBridgePortList")
    def in_bridge_port_list(self) -> str:
        return pulumi.get(self, "in_bridge_port_list")

    @in_bridge_port_list.setter
    def in_bridge_port_list(self, value: str):
        pulumi.set(self, "in_bridge_port_list", value)

    @property
    @pulumi.getter(name="inInterface")
    def in_interface(self) -> str:
        return pulumi.get(self, "in_interface")

    @in_interface.setter
    def in_interface(self, value: str):
        pulumi.set(self, "in_interface", value)

    @property
    @pulumi.getter(name="inInterfaceList")
    def in_interface_list(self) -> str:
        return pulumi.get(self, "in_interface_list")

    @in_interface_list.setter
    def in_interface_list(self, value: str):
        pulumi.set(self, "in_interface_list", value)

    @property
    @pulumi.getter(name="ingressPriority")
    def ingress_priority(self) -> int:
        return pulumi.get(self, "ingress_priority")

    @ingress_priority.setter
    def ingress_priority(self, value: int):
        pulumi.set(self, "ingress_priority", value)

    @property
    @pulumi.getter
    def invalid(self) -> bool:
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: bool):
        pulumi.set(self, "invalid", value)

    @property
    @pulumi.getter(name="ipsecPolicy")
    def ipsec_policy(self) -> str:
        return pulumi.get(self, "ipsec_policy")

    @ipsec_policy.setter
    def ipsec_policy(self, value: str):
        pulumi.set(self, "ipsec_policy", value)

    @property
    @pulumi.getter(name="ipv4Options")
    def ipv4_options(self) -> str:
        return pulumi.get(self, "ipv4_options")

    @ipv4_options.setter
    def ipv4_options(self, value: str):
        pulumi.set(self, "ipv4_options", value)

    @property
    @pulumi.getter(name="jumpTarget")
    def jump_target(self) -> str:
        return pulumi.get(self, "jump_target")

    @jump_target.setter
    def jump_target(self, value: str):
        pulumi.set(self, "jump_target", value)

    @property
    @pulumi.getter(name="layer7Protocol")
    def layer7_protocol(self) -> str:
        return pulumi.get(self, "layer7_protocol")

    @layer7_protocol.setter
    def layer7_protocol(self, value: str):
        pulumi.set(self, "layer7_protocol", value)

    @property
    @pulumi.getter
    def limit(self) -> str:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: str):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def log(self) -> bool:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: bool):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> str:
        return pulumi.get(self, "log_prefix")

    @log_prefix.setter
    def log_prefix(self, value: str):
        pulumi.set(self, "log_prefix", value)

    @property
    @pulumi.getter
    def nth(self) -> str:
        return pulumi.get(self, "nth")

    @nth.setter
    def nth(self, value: str):
        pulumi.set(self, "nth", value)

    @property
    @pulumi.getter(name="outBridgePort")
    def out_bridge_port(self) -> str:
        return pulumi.get(self, "out_bridge_port")

    @out_bridge_port.setter
    def out_bridge_port(self, value: str):
        pulumi.set(self, "out_bridge_port", value)

    @property
    @pulumi.getter(name="outBridgePortList")
    def out_bridge_port_list(self) -> str:
        return pulumi.get(self, "out_bridge_port_list")

    @out_bridge_port_list.setter
    def out_bridge_port_list(self, value: str):
        pulumi.set(self, "out_bridge_port_list", value)

    @property
    @pulumi.getter(name="outInterface")
    def out_interface(self) -> str:
        return pulumi.get(self, "out_interface")

    @out_interface.setter
    def out_interface(self, value: str):
        pulumi.set(self, "out_interface", value)

    @property
    @pulumi.getter(name="outInterfaceList")
    def out_interface_list(self) -> str:
        return pulumi.get(self, "out_interface_list")

    @out_interface_list.setter
    def out_interface_list(self, value: str):
        pulumi.set(self, "out_interface_list", value)

    @property
    @pulumi.getter(name="packetMark")
    def packet_mark(self) -> str:
        return pulumi.get(self, "packet_mark")

    @packet_mark.setter
    def packet_mark(self, value: str):
        pulumi.set(self, "packet_mark", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> str:
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: str):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def packets(self) -> int:
        return pulumi.get(self, "packets")

    @packets.setter
    def packets(self, value: int):
        pulumi.set(self, "packets", value)

    @property
    @pulumi.getter(name="perConnectionClassifier")
    def per_connection_classifier(self) -> str:
        return pulumi.get(self, "per_connection_classifier")

    @per_connection_classifier.setter
    def per_connection_classifier(self, value: str):
        pulumi.set(self, "per_connection_classifier", value)

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: str):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: int):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: str):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def psd(self) -> str:
        return pulumi.get(self, "psd")

    @psd.setter
    def psd(self, value: str):
        pulumi.set(self, "psd", value)

    @property
    @pulumi.getter
    def random(self) -> int:
        return pulumi.get(self, "random")

    @random.setter
    def random(self, value: int):
        pulumi.set(self, "random", value)

    @property
    @pulumi.getter(name="routingMark")
    def routing_mark(self) -> str:
        return pulumi.get(self, "routing_mark")

    @routing_mark.setter
    def routing_mark(self, value: str):
        pulumi.set(self, "routing_mark", value)

    @property
    @pulumi.getter(name="sameNotByDst")
    def same_not_by_dst(self) -> bool:
        return pulumi.get(self, "same_not_by_dst")

    @same_not_by_dst.setter
    def same_not_by_dst(self, value: bool):
        pulumi.set(self, "same_not_by_dst", value)

    @property
    @pulumi.getter(name="srcAddress")
    def src_address(self) -> str:
        return pulumi.get(self, "src_address")

    @src_address.setter
    def src_address(self, value: str):
        pulumi.set(self, "src_address", value)

    @property
    @pulumi.getter(name="srcAddressList")
    def src_address_list(self) -> str:
        return pulumi.get(self, "src_address_list")

    @src_address_list.setter
    def src_address_list(self, value: str):
        pulumi.set(self, "src_address_list", value)

    @property
    @pulumi.getter(name="srcAddressType")
    def src_address_type(self) -> str:
        return pulumi.get(self, "src_address_type")

    @src_address_type.setter
    def src_address_type(self, value: str):
        pulumi.set(self, "src_address_type", value)

    @property
    @pulumi.getter(name="srcMacAddress")
    def src_mac_address(self) -> str:
        return pulumi.get(self, "src_mac_address")

    @src_mac_address.setter
    def src_mac_address(self, value: str):
        pulumi.set(self, "src_mac_address", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> str:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: str):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> str:
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: str):
        pulumi.set(self, "tcp_mss", value)

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: str):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="toAddresses")
    def to_addresses(self) -> str:
        return pulumi.get(self, "to_addresses")

    @to_addresses.setter
    def to_addresses(self, value: str):
        pulumi.set(self, "to_addresses", value)

    @property
    @pulumi.getter(name="toPorts")
    def to_ports(self) -> str:
        return pulumi.get(self, "to_ports")

    @to_ports.setter
    def to_ports(self, value: str):
        pulumi.set(self, "to_ports", value)

    @property
    @pulumi.getter
    def ttl(self) -> str:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: str):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[Mapping[str, Any]]:
        """
        Additional request filtering options.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[Mapping[str, Any]]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class GetFirewallRuleArgs:
    def __init__(__self__, *,
                 action: str,
                 address_list_timeout: str,
                 bytes: int,
                 chain: str,
                 comment: str,
                 connection_bytes: str,
                 connection_limit: str,
                 connection_mark: str,
                 connection_nat_state: str,
                 connection_rate: str,
                 connection_state: str,
                 connection_type: str,
                 content: str,
                 disabled: bool,
                 dscp: int,
                 dst_address: str,
                 dst_address_list: str,
                 dst_address_type: str,
                 dst_limit: str,
                 dst_port: str,
                 dynamic: bool,
                 fragment: bool,
                 hotspot: str,
                 hw_offload: bool,
                 icmp_options: str,
                 id: str,
                 in_bridge_port: str,
                 in_bridge_port_list: str,
                 in_interface: str,
                 in_interface_list: str,
                 ingress_priority: int,
                 invalid: bool,
                 ipsec_policy: str,
                 ipv4_options: str,
                 jump_target: str,
                 layer7_protocol: str,
                 limit: str,
                 log: bool,
                 log_prefix: str,
                 nth: str,
                 out_bridge_port: str,
                 out_bridge_port_list: str,
                 out_interface: str,
                 out_interface_list: str,
                 packet_mark: str,
                 packet_size: str,
                 packets: int,
                 per_connection_classifier: str,
                 port: str,
                 priority: int,
                 protocol: str,
                 psd: str,
                 random: int,
                 reject_with: str,
                 routing_mark: str,
                 routing_table: str,
                 src_address: str,
                 src_address_list: str,
                 src_address_type: str,
                 src_mac_address: str,
                 src_port: str,
                 tcp_flags: str,
                 tcp_mss: str,
                 time: str,
                 tls_host: str,
                 ttl: str,
                 filter: Optional[Mapping[str, Any]] = None):
        """
        :param str id: The ID of this resource.
        :param Mapping[str, Any] filter: Additional request filtering options.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "address_list_timeout", address_list_timeout)
        pulumi.set(__self__, "bytes", bytes)
        pulumi.set(__self__, "chain", chain)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "connection_bytes", connection_bytes)
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "connection_mark", connection_mark)
        pulumi.set(__self__, "connection_nat_state", connection_nat_state)
        pulumi.set(__self__, "connection_rate", connection_rate)
        pulumi.set(__self__, "connection_state", connection_state)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "dst_address", dst_address)
        pulumi.set(__self__, "dst_address_list", dst_address_list)
        pulumi.set(__self__, "dst_address_type", dst_address_type)
        pulumi.set(__self__, "dst_limit", dst_limit)
        pulumi.set(__self__, "dst_port", dst_port)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "fragment", fragment)
        pulumi.set(__self__, "hotspot", hotspot)
        pulumi.set(__self__, "hw_offload", hw_offload)
        pulumi.set(__self__, "icmp_options", icmp_options)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "in_bridge_port", in_bridge_port)
        pulumi.set(__self__, "in_bridge_port_list", in_bridge_port_list)
        pulumi.set(__self__, "in_interface", in_interface)
        pulumi.set(__self__, "in_interface_list", in_interface_list)
        pulumi.set(__self__, "ingress_priority", ingress_priority)
        pulumi.set(__self__, "invalid", invalid)
        pulumi.set(__self__, "ipsec_policy", ipsec_policy)
        pulumi.set(__self__, "ipv4_options", ipv4_options)
        pulumi.set(__self__, "jump_target", jump_target)
        pulumi.set(__self__, "layer7_protocol", layer7_protocol)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "log_prefix", log_prefix)
        pulumi.set(__self__, "nth", nth)
        pulumi.set(__self__, "out_bridge_port", out_bridge_port)
        pulumi.set(__self__, "out_bridge_port_list", out_bridge_port_list)
        pulumi.set(__self__, "out_interface", out_interface)
        pulumi.set(__self__, "out_interface_list", out_interface_list)
        pulumi.set(__self__, "packet_mark", packet_mark)
        pulumi.set(__self__, "packet_size", packet_size)
        pulumi.set(__self__, "packets", packets)
        pulumi.set(__self__, "per_connection_classifier", per_connection_classifier)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "psd", psd)
        pulumi.set(__self__, "random", random)
        pulumi.set(__self__, "reject_with", reject_with)
        pulumi.set(__self__, "routing_mark", routing_mark)
        pulumi.set(__self__, "routing_table", routing_table)
        pulumi.set(__self__, "src_address", src_address)
        pulumi.set(__self__, "src_address_list", src_address_list)
        pulumi.set(__self__, "src_address_type", src_address_type)
        pulumi.set(__self__, "src_mac_address", src_mac_address)
        pulumi.set(__self__, "src_port", src_port)
        pulumi.set(__self__, "tcp_flags", tcp_flags)
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "tls_host", tls_host)
        pulumi.set(__self__, "ttl", ttl)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: str):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addressListTimeout")
    def address_list_timeout(self) -> str:
        return pulumi.get(self, "address_list_timeout")

    @address_list_timeout.setter
    def address_list_timeout(self, value: str):
        pulumi.set(self, "address_list_timeout", value)

    @property
    @pulumi.getter
    def bytes(self) -> int:
        return pulumi.get(self, "bytes")

    @bytes.setter
    def bytes(self, value: int):
        pulumi.set(self, "bytes", value)

    @property
    @pulumi.getter
    def chain(self) -> str:
        return pulumi.get(self, "chain")

    @chain.setter
    def chain(self, value: str):
        pulumi.set(self, "chain", value)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: str):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="connectionBytes")
    def connection_bytes(self) -> str:
        return pulumi.get(self, "connection_bytes")

    @connection_bytes.setter
    def connection_bytes(self, value: str):
        pulumi.set(self, "connection_bytes", value)

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> str:
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: str):
        pulumi.set(self, "connection_limit", value)

    @property
    @pulumi.getter(name="connectionMark")
    def connection_mark(self) -> str:
        return pulumi.get(self, "connection_mark")

    @connection_mark.setter
    def connection_mark(self, value: str):
        pulumi.set(self, "connection_mark", value)

    @property
    @pulumi.getter(name="connectionNatState")
    def connection_nat_state(self) -> str:
        return pulumi.get(self, "connection_nat_state")

    @connection_nat_state.setter
    def connection_nat_state(self, value: str):
        pulumi.set(self, "connection_nat_state", value)

    @property
    @pulumi.getter(name="connectionRate")
    def connection_rate(self) -> str:
        return pulumi.get(self, "connection_rate")

    @connection_rate.setter
    def connection_rate(self, value: str):
        pulumi.set(self, "connection_rate", value)

    @property
    @pulumi.getter(name="connectionState")
    def connection_state(self) -> str:
        return pulumi.get(self, "connection_state")

    @connection_state.setter
    def connection_state(self, value: str):
        pulumi.set(self, "connection_state", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: str):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: str):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: bool):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: int):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> str:
        return pulumi.get(self, "dst_address")

    @dst_address.setter
    def dst_address(self, value: str):
        pulumi.set(self, "dst_address", value)

    @property
    @pulumi.getter(name="dstAddressList")
    def dst_address_list(self) -> str:
        return pulumi.get(self, "dst_address_list")

    @dst_address_list.setter
    def dst_address_list(self, value: str):
        pulumi.set(self, "dst_address_list", value)

    @property
    @pulumi.getter(name="dstAddressType")
    def dst_address_type(self) -> str:
        return pulumi.get(self, "dst_address_type")

    @dst_address_type.setter
    def dst_address_type(self, value: str):
        pulumi.set(self, "dst_address_type", value)

    @property
    @pulumi.getter(name="dstLimit")
    def dst_limit(self) -> str:
        return pulumi.get(self, "dst_limit")

    @dst_limit.setter
    def dst_limit(self, value: str):
        pulumi.set(self, "dst_limit", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> str:
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: str):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: bool):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter
    def fragment(self) -> bool:
        return pulumi.get(self, "fragment")

    @fragment.setter
    def fragment(self, value: bool):
        pulumi.set(self, "fragment", value)

    @property
    @pulumi.getter
    def hotspot(self) -> str:
        return pulumi.get(self, "hotspot")

    @hotspot.setter
    def hotspot(self, value: str):
        pulumi.set(self, "hotspot", value)

    @property
    @pulumi.getter(name="hwOffload")
    def hw_offload(self) -> bool:
        return pulumi.get(self, "hw_offload")

    @hw_offload.setter
    def hw_offload(self, value: bool):
        pulumi.set(self, "hw_offload", value)

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> str:
        return pulumi.get(self, "icmp_options")

    @icmp_options.setter
    def icmp_options(self, value: str):
        pulumi.set(self, "icmp_options", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inBridgePort")
    def in_bridge_port(self) -> str:
        return pulumi.get(self, "in_bridge_port")

    @in_bridge_port.setter
    def in_bridge_port(self, value: str):
        pulumi.set(self, "in_bridge_port", value)

    @property
    @pulumi.getter(name="inBridgePortList")
    def in_bridge_port_list(self) -> str:
        return pulumi.get(self, "in_bridge_port_list")

    @in_bridge_port_list.setter
    def in_bridge_port_list(self, value: str):
        pulumi.set(self, "in_bridge_port_list", value)

    @property
    @pulumi.getter(name="inInterface")
    def in_interface(self) -> str:
        return pulumi.get(self, "in_interface")

    @in_interface.setter
    def in_interface(self, value: str):
        pulumi.set(self, "in_interface", value)

    @property
    @pulumi.getter(name="inInterfaceList")
    def in_interface_list(self) -> str:
        return pulumi.get(self, "in_interface_list")

    @in_interface_list.setter
    def in_interface_list(self, value: str):
        pulumi.set(self, "in_interface_list", value)

    @property
    @pulumi.getter(name="ingressPriority")
    def ingress_priority(self) -> int:
        return pulumi.get(self, "ingress_priority")

    @ingress_priority.setter
    def ingress_priority(self, value: int):
        pulumi.set(self, "ingress_priority", value)

    @property
    @pulumi.getter
    def invalid(self) -> bool:
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: bool):
        pulumi.set(self, "invalid", value)

    @property
    @pulumi.getter(name="ipsecPolicy")
    def ipsec_policy(self) -> str:
        return pulumi.get(self, "ipsec_policy")

    @ipsec_policy.setter
    def ipsec_policy(self, value: str):
        pulumi.set(self, "ipsec_policy", value)

    @property
    @pulumi.getter(name="ipv4Options")
    def ipv4_options(self) -> str:
        return pulumi.get(self, "ipv4_options")

    @ipv4_options.setter
    def ipv4_options(self, value: str):
        pulumi.set(self, "ipv4_options", value)

    @property
    @pulumi.getter(name="jumpTarget")
    def jump_target(self) -> str:
        return pulumi.get(self, "jump_target")

    @jump_target.setter
    def jump_target(self, value: str):
        pulumi.set(self, "jump_target", value)

    @property
    @pulumi.getter(name="layer7Protocol")
    def layer7_protocol(self) -> str:
        return pulumi.get(self, "layer7_protocol")

    @layer7_protocol.setter
    def layer7_protocol(self, value: str):
        pulumi.set(self, "layer7_protocol", value)

    @property
    @pulumi.getter
    def limit(self) -> str:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: str):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def log(self) -> bool:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: bool):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> str:
        return pulumi.get(self, "log_prefix")

    @log_prefix.setter
    def log_prefix(self, value: str):
        pulumi.set(self, "log_prefix", value)

    @property
    @pulumi.getter
    def nth(self) -> str:
        return pulumi.get(self, "nth")

    @nth.setter
    def nth(self, value: str):
        pulumi.set(self, "nth", value)

    @property
    @pulumi.getter(name="outBridgePort")
    def out_bridge_port(self) -> str:
        return pulumi.get(self, "out_bridge_port")

    @out_bridge_port.setter
    def out_bridge_port(self, value: str):
        pulumi.set(self, "out_bridge_port", value)

    @property
    @pulumi.getter(name="outBridgePortList")
    def out_bridge_port_list(self) -> str:
        return pulumi.get(self, "out_bridge_port_list")

    @out_bridge_port_list.setter
    def out_bridge_port_list(self, value: str):
        pulumi.set(self, "out_bridge_port_list", value)

    @property
    @pulumi.getter(name="outInterface")
    def out_interface(self) -> str:
        return pulumi.get(self, "out_interface")

    @out_interface.setter
    def out_interface(self, value: str):
        pulumi.set(self, "out_interface", value)

    @property
    @pulumi.getter(name="outInterfaceList")
    def out_interface_list(self) -> str:
        return pulumi.get(self, "out_interface_list")

    @out_interface_list.setter
    def out_interface_list(self, value: str):
        pulumi.set(self, "out_interface_list", value)

    @property
    @pulumi.getter(name="packetMark")
    def packet_mark(self) -> str:
        return pulumi.get(self, "packet_mark")

    @packet_mark.setter
    def packet_mark(self, value: str):
        pulumi.set(self, "packet_mark", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> str:
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: str):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def packets(self) -> int:
        return pulumi.get(self, "packets")

    @packets.setter
    def packets(self, value: int):
        pulumi.set(self, "packets", value)

    @property
    @pulumi.getter(name="perConnectionClassifier")
    def per_connection_classifier(self) -> str:
        return pulumi.get(self, "per_connection_classifier")

    @per_connection_classifier.setter
    def per_connection_classifier(self, value: str):
        pulumi.set(self, "per_connection_classifier", value)

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: str):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: int):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: str):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def psd(self) -> str:
        return pulumi.get(self, "psd")

    @psd.setter
    def psd(self, value: str):
        pulumi.set(self, "psd", value)

    @property
    @pulumi.getter
    def random(self) -> int:
        return pulumi.get(self, "random")

    @random.setter
    def random(self, value: int):
        pulumi.set(self, "random", value)

    @property
    @pulumi.getter(name="rejectWith")
    def reject_with(self) -> str:
        return pulumi.get(self, "reject_with")

    @reject_with.setter
    def reject_with(self, value: str):
        pulumi.set(self, "reject_with", value)

    @property
    @pulumi.getter(name="routingMark")
    def routing_mark(self) -> str:
        return pulumi.get(self, "routing_mark")

    @routing_mark.setter
    def routing_mark(self, value: str):
        pulumi.set(self, "routing_mark", value)

    @property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> str:
        return pulumi.get(self, "routing_table")

    @routing_table.setter
    def routing_table(self, value: str):
        pulumi.set(self, "routing_table", value)

    @property
    @pulumi.getter(name="srcAddress")
    def src_address(self) -> str:
        return pulumi.get(self, "src_address")

    @src_address.setter
    def src_address(self, value: str):
        pulumi.set(self, "src_address", value)

    @property
    @pulumi.getter(name="srcAddressList")
    def src_address_list(self) -> str:
        return pulumi.get(self, "src_address_list")

    @src_address_list.setter
    def src_address_list(self, value: str):
        pulumi.set(self, "src_address_list", value)

    @property
    @pulumi.getter(name="srcAddressType")
    def src_address_type(self) -> str:
        return pulumi.get(self, "src_address_type")

    @src_address_type.setter
    def src_address_type(self, value: str):
        pulumi.set(self, "src_address_type", value)

    @property
    @pulumi.getter(name="srcMacAddress")
    def src_mac_address(self) -> str:
        return pulumi.get(self, "src_mac_address")

    @src_mac_address.setter
    def src_mac_address(self, value: str):
        pulumi.set(self, "src_mac_address", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> str:
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: str):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter(name="tcpFlags")
    def tcp_flags(self) -> str:
        return pulumi.get(self, "tcp_flags")

    @tcp_flags.setter
    def tcp_flags(self, value: str):
        pulumi.set(self, "tcp_flags", value)

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> str:
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: str):
        pulumi.set(self, "tcp_mss", value)

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: str):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="tlsHost")
    def tls_host(self) -> str:
        return pulumi.get(self, "tls_host")

    @tls_host.setter
    def tls_host(self, value: str):
        pulumi.set(self, "tls_host", value)

    @property
    @pulumi.getter
    def ttl(self) -> str:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: str):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[Mapping[str, Any]]:
        """
        Additional request filtering options.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[Mapping[str, Any]]):
        pulumi.set(self, "filter", value)


