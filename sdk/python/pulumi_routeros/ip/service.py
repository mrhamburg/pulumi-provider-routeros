# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ServiceArgs', 'Service']

@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 numbers: pulumi.Input[str],
                 port: pulumi.Input[int],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 tls_version: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Service resource.
        :param pulumi.Input[str] numbers: The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
        :param pulumi.Input[int] port: The port particular service listens on.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: List of IP/IPv6 prefixes from which the service is accessible.
        :param pulumi.Input[str] certificate: The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
        :param pulumi.Input[str] tls_version: Specifies which TLS versions to allow by a particular service.
        :param pulumi.Input[str] vrf: Specify which VRF instance to use by a particular service.
        """
        pulumi.set(__self__, "numbers", numbers)
        pulumi.set(__self__, "port", port)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if tls_version is not None:
            pulumi.set(__self__, "tls_version", tls_version)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def numbers(self) -> pulumi.Input[str]:
        """
        The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
        """
        return pulumi.get(self, "numbers")

    @numbers.setter
    def numbers(self, value: pulumi.Input[str]):
        pulumi.set(self, "numbers", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port particular service listens on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        List of IP/IPv6 prefixes from which the service is accessible.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies which TLS versions to allow by a particular service.
        """
        return pulumi.get(self, "tls_version")

    @tls_version.setter
    def tls_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_version", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        Specify which VRF instance to use by a particular service.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class _ServiceState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 invalid: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 numbers: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tls_version: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Service resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: List of IP/IPv6 prefixes from which the service is accessible.
        :param pulumi.Input[str] certificate: The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
        :param pulumi.Input[str] name: Service name.
        :param pulumi.Input[str] numbers: The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
        :param pulumi.Input[int] port: The port particular service listens on.
        :param pulumi.Input[str] tls_version: Specifies which TLS versions to allow by a particular service.
        :param pulumi.Input[str] vrf: Specify which VRF instance to use by a particular service.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if numbers is not None:
            pulumi.set(__self__, "numbers", numbers)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tls_version is not None:
            pulumi.set(__self__, "tls_version", tls_version)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        List of IP/IPv6 prefixes from which the service is accessible.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def invalid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invalid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def numbers(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
        """
        return pulumi.get(self, "numbers")

    @numbers.setter
    def numbers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "numbers", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port particular service listens on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies which TLS versions to allow by a particular service.
        """
        return pulumi.get(self, "tls_version")

    @tls_version.setter
    def tls_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_version", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        Specify which VRF instance to use by a particular service.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


class Service(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 numbers: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tls_version: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        tls_service = {
            "api-ssl": 8729,
            "www-ssl": 443,
        }
        disable_service = {
            "api": 8728,
            "ftp": 21,
            "telnet": 23,
            "www": 80,
        }
        enable_service = {
            "ssh": 22,
            "winbox": 8291,
        }
        tls_cert = routeros.system.Certificate("tlsCert",
            common_name="Mikrotik Router",
            days_valid=3650,
            key_usages=[
                "key-cert-sign",
                "crl-sign",
                "digital-signature",
                "key-agreement",
                "tls-server",
            ],
            key_size="prime256v1",
            signs=[routeros.system.CertificateSignArgs()])
        # terraform state rm 'routeros_ip_service.tls["www-ssl"]'
        # terraform import 'routeros_ip_service.tls["www-ssl"]' www-ssl
        tls = []
        for range in [{"key": k, "value": v} for [k, v] in enumerate(tls_service)]:
            tls.append(routeros.ip.Service(f"tls-{range['key']}",
                numbers=range["key"],
                port=range["value"],
                certificate=tls_cert.name,
                tls_version="only-1.2",
                disabled=False))
        disabled = []
        for range in [{"key": k, "value": v} for [k, v] in enumerate(disable_service)]:
            disabled.append(routeros.ip.Service(f"disabled-{range['key']}",
                numbers=range["key"],
                port=range["value"],
                disabled=True))
        enabled = []
        for range in [{"key": k, "value": v} for [k, v] in enumerate(enable_service)]:
            enabled.append(routeros.ip.Service(f"enabled-{range['key']}",
                numbers=range["key"],
                port=range["value"],
                disabled=False))
        ```

        ## Import

        Import with the name of the ip service in case of the example use www-ssl

        ```sh
         $ pulumi import routeros:Ip/service:Service www_ssl www-ssl
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: List of IP/IPv6 prefixes from which the service is accessible.
        :param pulumi.Input[str] certificate: The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
        :param pulumi.Input[str] numbers: The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
        :param pulumi.Input[int] port: The port particular service listens on.
        :param pulumi.Input[str] tls_version: Specifies which TLS versions to allow by a particular service.
        :param pulumi.Input[str] vrf: Specify which VRF instance to use by a particular service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        tls_service = {
            "api-ssl": 8729,
            "www-ssl": 443,
        }
        disable_service = {
            "api": 8728,
            "ftp": 21,
            "telnet": 23,
            "www": 80,
        }
        enable_service = {
            "ssh": 22,
            "winbox": 8291,
        }
        tls_cert = routeros.system.Certificate("tlsCert",
            common_name="Mikrotik Router",
            days_valid=3650,
            key_usages=[
                "key-cert-sign",
                "crl-sign",
                "digital-signature",
                "key-agreement",
                "tls-server",
            ],
            key_size="prime256v1",
            signs=[routeros.system.CertificateSignArgs()])
        # terraform state rm 'routeros_ip_service.tls["www-ssl"]'
        # terraform import 'routeros_ip_service.tls["www-ssl"]' www-ssl
        tls = []
        for range in [{"key": k, "value": v} for [k, v] in enumerate(tls_service)]:
            tls.append(routeros.ip.Service(f"tls-{range['key']}",
                numbers=range["key"],
                port=range["value"],
                certificate=tls_cert.name,
                tls_version="only-1.2",
                disabled=False))
        disabled = []
        for range in [{"key": k, "value": v} for [k, v] in enumerate(disable_service)]:
            disabled.append(routeros.ip.Service(f"disabled-{range['key']}",
                numbers=range["key"],
                port=range["value"],
                disabled=True))
        enabled = []
        for range in [{"key": k, "value": v} for [k, v] in enumerate(enable_service)]:
            enabled.append(routeros.ip.Service(f"enabled-{range['key']}",
                numbers=range["key"],
                port=range["value"],
                disabled=False))
        ```

        ## Import

        Import with the name of the ip service in case of the example use www-ssl

        ```sh
         $ pulumi import routeros:Ip/service:Service www_ssl www-ssl
        ```

        :param str resource_name: The name of the resource.
        :param ServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 numbers: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tls_version: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceArgs.__new__(ServiceArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["address"] = address
            __props__.__dict__["certificate"] = certificate
            __props__.__dict__["disabled"] = disabled
            if numbers is None and not opts.urn:
                raise TypeError("Missing required property 'numbers'")
            __props__.__dict__["numbers"] = numbers
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            __props__.__dict__["tls_version"] = tls_version
            __props__.__dict__["vrf"] = vrf
            __props__.__dict__["invalid"] = None
            __props__.__dict__["name"] = None
        super(Service, __self__).__init__(
            'routeros:Ip/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            address: Optional[pulumi.Input[str]] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            invalid: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            numbers: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            tls_version: Optional[pulumi.Input[str]] = None,
            vrf: Optional[pulumi.Input[str]] = None) -> 'Service':
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: List of IP/IPv6 prefixes from which the service is accessible.
        :param pulumi.Input[str] certificate: The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
        :param pulumi.Input[str] name: Service name.
        :param pulumi.Input[str] numbers: The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
        :param pulumi.Input[int] port: The port particular service listens on.
        :param pulumi.Input[str] tls_version: Specifies which TLS versions to allow by a particular service.
        :param pulumi.Input[str] vrf: Specify which VRF instance to use by a particular service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceState.__new__(_ServiceState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["address"] = address
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["invalid"] = invalid
        __props__.__dict__["name"] = name
        __props__.__dict__["numbers"] = numbers
        __props__.__dict__["port"] = port
        __props__.__dict__["tls_version"] = tls_version
        __props__.__dict__["vrf"] = vrf
        return Service(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[Optional[str]]:
        """
        List of IP/IPv6 prefixes from which the service is accessible.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the certificate used by a particular service. Applicable only for services that depend on certificates ( www-ssl, api-ssl ).
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def invalid(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def numbers(self) -> pulumi.Output[str]:
        """
        The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
        """
        return pulumi.get(self, "numbers")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        The port particular service listens on.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies which TLS versions to allow by a particular service.
        """
        return pulumi.get(self, "tls_version")

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Output[Optional[str]]:
        """
        Specify which VRF instance to use by a particular service.
        """
        return pulumi.get(self, "vrf")

