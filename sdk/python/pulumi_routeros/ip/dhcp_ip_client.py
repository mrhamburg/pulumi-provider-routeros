# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DhcpIpClientArgs', 'DhcpIpClient']

@pulumi.input_type
class DhcpIpClientArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 add_default_route: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 default_route_distance: Optional[pulumi.Input[int]] = None,
                 dhcp_options: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 use_peer_dns: Optional[pulumi.Input[bool]] = None,
                 use_peer_ntp: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a DhcpIpClient resource.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] add_default_route: Whether to install default route in routing table received from DHCP server.
        :param pulumi.Input[int] default_route_distance: Distance of default route. Applicable if add-default-route is set to yes.
        :param pulumi.Input[str] dhcp_options: Options that are sent to the DHCP server.
        :param pulumi.Input[bool] use_peer_dns: Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
        :param pulumi.Input[bool] use_peer_ntp: Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
        """
        pulumi.set(__self__, "interface", interface)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if add_default_route is not None:
            pulumi.set(__self__, "add_default_route", add_default_route)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if default_route_distance is not None:
            pulumi.set(__self__, "default_route_distance", default_route_distance)
        if dhcp_options is not None:
            pulumi.set(__self__, "dhcp_options", dhcp_options)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if use_peer_dns is not None:
            pulumi.set(__self__, "use_peer_dns", use_peer_dns)
        if use_peer_ntp is not None:
            pulumi.set(__self__, "use_peer_ntp", use_peer_ntp)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="addDefaultRoute")
    def add_default_route(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to install default route in routing table received from DHCP server.
        """
        return pulumi.get(self, "add_default_route")

    @add_default_route.setter
    def add_default_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_default_route", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="defaultRouteDistance")
    def default_route_distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance of default route. Applicable if add-default-route is set to yes.
        """
        return pulumi.get(self, "default_route_distance")

    @default_route_distance.setter
    def default_route_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_route_distance", value)

    @property
    @pulumi.getter(name="dhcpOptions")
    def dhcp_options(self) -> Optional[pulumi.Input[str]]:
        """
        Options that are sent to the DHCP server.
        """
        return pulumi.get(self, "dhcp_options")

    @dhcp_options.setter
    def dhcp_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_options", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="usePeerDns")
    def use_peer_dns(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
        """
        return pulumi.get(self, "use_peer_dns")

    @use_peer_dns.setter
    def use_peer_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_peer_dns", value)

    @property
    @pulumi.getter(name="usePeerNtp")
    def use_peer_ntp(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
        """
        return pulumi.get(self, "use_peer_ntp")

    @use_peer_ntp.setter
    def use_peer_ntp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_peer_ntp", value)


@pulumi.input_type
class _DhcpIpClientState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 add_default_route: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 default_route_distance: Optional[pulumi.Input[int]] = None,
                 dhcp_options: Optional[pulumi.Input[str]] = None,
                 dhcp_server: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 expires_after: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 invalid: Optional[pulumi.Input[bool]] = None,
                 primary_dns: Optional[pulumi.Input[str]] = None,
                 primary_ntp: Optional[pulumi.Input[str]] = None,
                 secondary_dns: Optional[pulumi.Input[str]] = None,
                 secondary_ntp: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 use_peer_dns: Optional[pulumi.Input[bool]] = None,
                 use_peer_ntp: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering DhcpIpClient resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] add_default_route: Whether to install default route in routing table received from DHCP server.
        :param pulumi.Input[str] address: IP address and netmask, which is assigned to DHCP Client from the Server.
        :param pulumi.Input[int] default_route_distance: Distance of default route. Applicable if add-default-route is set to yes.
        :param pulumi.Input[str] dhcp_options: Options that are sent to the DHCP server.
        :param pulumi.Input[str] dhcp_server: The IP address of the DHCP server.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[str] expires_after: A time when the lease expires (specified by the DHCP server).
        :param pulumi.Input[str] gateway: The IP address of the gateway which is assigned by DHCP server.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[str] primary_dns: The IP address of the first DNS resolver, that was assigned by the DHCP server.
        :param pulumi.Input[str] primary_ntp: The IP address of the primary NTP server, assigned by the DHCP server.
        :param pulumi.Input[str] secondary_dns: The IP address of the second DNS resolver, assigned by the DHCP server.
        :param pulumi.Input[str] secondary_ntp: The IP address of the secondary NTP server, assigned by the DHCP server.
        :param pulumi.Input[bool] use_peer_dns: Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
        :param pulumi.Input[bool] use_peer_ntp: Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if add_default_route is not None:
            pulumi.set(__self__, "add_default_route", add_default_route)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if default_route_distance is not None:
            pulumi.set(__self__, "default_route_distance", default_route_distance)
        if dhcp_options is not None:
            pulumi.set(__self__, "dhcp_options", dhcp_options)
        if dhcp_server is not None:
            pulumi.set(__self__, "dhcp_server", dhcp_server)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dynamic is not None:
            pulumi.set(__self__, "dynamic", dynamic)
        if expires_after is not None:
            pulumi.set(__self__, "expires_after", expires_after)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if primary_dns is not None:
            pulumi.set(__self__, "primary_dns", primary_dns)
        if primary_ntp is not None:
            pulumi.set(__self__, "primary_ntp", primary_ntp)
        if secondary_dns is not None:
            pulumi.set(__self__, "secondary_dns", secondary_dns)
        if secondary_ntp is not None:
            pulumi.set(__self__, "secondary_ntp", secondary_ntp)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if use_peer_dns is not None:
            pulumi.set(__self__, "use_peer_dns", use_peer_dns)
        if use_peer_ntp is not None:
            pulumi.set(__self__, "use_peer_ntp", use_peer_ntp)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="addDefaultRoute")
    def add_default_route(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to install default route in routing table received from DHCP server.
        """
        return pulumi.get(self, "add_default_route")

    @add_default_route.setter
    def add_default_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_default_route", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address and netmask, which is assigned to DHCP Client from the Server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="defaultRouteDistance")
    def default_route_distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance of default route. Applicable if add-default-route is set to yes.
        """
        return pulumi.get(self, "default_route_distance")

    @default_route_distance.setter
    def default_route_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_route_distance", value)

    @property
    @pulumi.getter(name="dhcpOptions")
    def dhcp_options(self) -> Optional[pulumi.Input[str]]:
        """
        Options that are sent to the DHCP server.
        """
        return pulumi.get(self, "dhcp_options")

    @dhcp_options.setter
    def dhcp_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_options", value)

    @property
    @pulumi.getter(name="dhcpServer")
    def dhcp_server(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the DHCP server.
        """
        return pulumi.get(self, "dhcp_server")

    @dhcp_server.setter
    def dhcp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter(name="expiresAfter")
    def expires_after(self) -> Optional[pulumi.Input[str]]:
        """
        A time when the lease expires (specified by the DHCP server).
        """
        return pulumi.get(self, "expires_after")

    @expires_after.setter
    def expires_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_after", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the gateway which is assigned by DHCP server.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def invalid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invalid", value)

    @property
    @pulumi.getter(name="primaryDns")
    def primary_dns(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the first DNS resolver, that was assigned by the DHCP server.
        """
        return pulumi.get(self, "primary_dns")

    @primary_dns.setter
    def primary_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_dns", value)

    @property
    @pulumi.getter(name="primaryNtp")
    def primary_ntp(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the primary NTP server, assigned by the DHCP server.
        """
        return pulumi.get(self, "primary_ntp")

    @primary_ntp.setter
    def primary_ntp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ntp", value)

    @property
    @pulumi.getter(name="secondaryDns")
    def secondary_dns(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the second DNS resolver, assigned by the DHCP server.
        """
        return pulumi.get(self, "secondary_dns")

    @secondary_dns.setter
    def secondary_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_dns", value)

    @property
    @pulumi.getter(name="secondaryNtp")
    def secondary_ntp(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the secondary NTP server, assigned by the DHCP server.
        """
        return pulumi.get(self, "secondary_ntp")

    @secondary_ntp.setter
    def secondary_ntp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_ntp", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="usePeerDns")
    def use_peer_dns(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
        """
        return pulumi.get(self, "use_peer_dns")

    @use_peer_dns.setter
    def use_peer_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_peer_dns", value)

    @property
    @pulumi.getter(name="usePeerNtp")
    def use_peer_ntp(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
        """
        return pulumi.get(self, "use_peer_ntp")

    @use_peer_ntp.setter
    def use_peer_ntp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_peer_ntp", value)


class DhcpIpClient(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 add_default_route: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 default_route_distance: Optional[pulumi.Input[int]] = None,
                 dhcp_options: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 use_peer_dns: Optional[pulumi.Input[bool]] = None,
                 use_peer_ntp: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        client = routeros.ip.DhcpIpClient("client", interface="bridge")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/dhcp-client get [print show-ids]]

        ```sh
         $ pulumi import routeros:Ip/dhcpIpClient:DhcpIpClient client "*0"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] add_default_route: Whether to install default route in routing table received from DHCP server.
        :param pulumi.Input[int] default_route_distance: Distance of default route. Applicable if add-default-route is set to yes.
        :param pulumi.Input[str] dhcp_options: Options that are sent to the DHCP server.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[bool] use_peer_dns: Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
        :param pulumi.Input[bool] use_peer_ntp: Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DhcpIpClientArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        client = routeros.ip.DhcpIpClient("client", interface="bridge")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/dhcp-client get [print show-ids]]

        ```sh
         $ pulumi import routeros:Ip/dhcpIpClient:DhcpIpClient client "*0"
        ```

        :param str resource_name: The name of the resource.
        :param DhcpIpClientArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DhcpIpClientArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 add_default_route: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 default_route_distance: Optional[pulumi.Input[int]] = None,
                 dhcp_options: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 use_peer_dns: Optional[pulumi.Input[bool]] = None,
                 use_peer_ntp: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DhcpIpClientArgs.__new__(DhcpIpClientArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["add_default_route"] = add_default_route
            __props__.__dict__["comment"] = comment
            __props__.__dict__["default_route_distance"] = default_route_distance
            __props__.__dict__["dhcp_options"] = dhcp_options
            __props__.__dict__["disabled"] = disabled
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["use_peer_dns"] = use_peer_dns
            __props__.__dict__["use_peer_ntp"] = use_peer_ntp
            __props__.__dict__["address"] = None
            __props__.__dict__["dhcp_server"] = None
            __props__.__dict__["dynamic"] = None
            __props__.__dict__["expires_after"] = None
            __props__.__dict__["gateway"] = None
            __props__.__dict__["invalid"] = None
            __props__.__dict__["primary_dns"] = None
            __props__.__dict__["primary_ntp"] = None
            __props__.__dict__["secondary_dns"] = None
            __props__.__dict__["secondary_ntp"] = None
            __props__.__dict__["status"] = None
        super(DhcpIpClient, __self__).__init__(
            'routeros:Ip/dhcpIpClient:DhcpIpClient',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            add_default_route: Optional[pulumi.Input[str]] = None,
            address: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            default_route_distance: Optional[pulumi.Input[int]] = None,
            dhcp_options: Optional[pulumi.Input[str]] = None,
            dhcp_server: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            dynamic: Optional[pulumi.Input[bool]] = None,
            expires_after: Optional[pulumi.Input[str]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            invalid: Optional[pulumi.Input[bool]] = None,
            primary_dns: Optional[pulumi.Input[str]] = None,
            primary_ntp: Optional[pulumi.Input[str]] = None,
            secondary_dns: Optional[pulumi.Input[str]] = None,
            secondary_ntp: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            use_peer_dns: Optional[pulumi.Input[bool]] = None,
            use_peer_ntp: Optional[pulumi.Input[bool]] = None) -> 'DhcpIpClient':
        """
        Get an existing DhcpIpClient resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] add_default_route: Whether to install default route in routing table received from DHCP server.
        :param pulumi.Input[str] address: IP address and netmask, which is assigned to DHCP Client from the Server.
        :param pulumi.Input[int] default_route_distance: Distance of default route. Applicable if add-default-route is set to yes.
        :param pulumi.Input[str] dhcp_options: Options that are sent to the DHCP server.
        :param pulumi.Input[str] dhcp_server: The IP address of the DHCP server.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[str] expires_after: A time when the lease expires (specified by the DHCP server).
        :param pulumi.Input[str] gateway: The IP address of the gateway which is assigned by DHCP server.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[str] primary_dns: The IP address of the first DNS resolver, that was assigned by the DHCP server.
        :param pulumi.Input[str] primary_ntp: The IP address of the primary NTP server, assigned by the DHCP server.
        :param pulumi.Input[str] secondary_dns: The IP address of the second DNS resolver, assigned by the DHCP server.
        :param pulumi.Input[str] secondary_ntp: The IP address of the secondary NTP server, assigned by the DHCP server.
        :param pulumi.Input[bool] use_peer_dns: Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
        :param pulumi.Input[bool] use_peer_ntp: Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DhcpIpClientState.__new__(_DhcpIpClientState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["add_default_route"] = add_default_route
        __props__.__dict__["address"] = address
        __props__.__dict__["comment"] = comment
        __props__.__dict__["default_route_distance"] = default_route_distance
        __props__.__dict__["dhcp_options"] = dhcp_options
        __props__.__dict__["dhcp_server"] = dhcp_server
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["dynamic"] = dynamic
        __props__.__dict__["expires_after"] = expires_after
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["interface"] = interface
        __props__.__dict__["invalid"] = invalid
        __props__.__dict__["primary_dns"] = primary_dns
        __props__.__dict__["primary_ntp"] = primary_ntp
        __props__.__dict__["secondary_dns"] = secondary_dns
        __props__.__dict__["secondary_ntp"] = secondary_ntp
        __props__.__dict__["status"] = status
        __props__.__dict__["use_peer_dns"] = use_peer_dns
        __props__.__dict__["use_peer_ntp"] = use_peer_ntp
        return DhcpIpClient(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter(name="addDefaultRoute")
    def add_default_route(self) -> pulumi.Output[str]:
        """
        Whether to install default route in routing table received from DHCP server.
        """
        return pulumi.get(self, "add_default_route")

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        IP address and netmask, which is assigned to DHCP Client from the Server.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="defaultRouteDistance")
    def default_route_distance(self) -> pulumi.Output[Optional[int]]:
        """
        Distance of default route. Applicable if add-default-route is set to yes.
        """
        return pulumi.get(self, "default_route_distance")

    @property
    @pulumi.getter(name="dhcpOptions")
    def dhcp_options(self) -> pulumi.Output[Optional[str]]:
        """
        Options that are sent to the DHCP server.
        """
        return pulumi.get(self, "dhcp_options")

    @property
    @pulumi.getter(name="dhcpServer")
    def dhcp_server(self) -> pulumi.Output[str]:
        """
        The IP address of the DHCP server.
        """
        return pulumi.get(self, "dhcp_server")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dynamic(self) -> pulumi.Output[bool]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter(name="expiresAfter")
    def expires_after(self) -> pulumi.Output[str]:
        """
        A time when the lease expires (specified by the DHCP server).
        """
        return pulumi.get(self, "expires_after")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        """
        The IP address of the gateway which is assigned by DHCP server.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def invalid(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter(name="primaryDns")
    def primary_dns(self) -> pulumi.Output[str]:
        """
        The IP address of the first DNS resolver, that was assigned by the DHCP server.
        """
        return pulumi.get(self, "primary_dns")

    @property
    @pulumi.getter(name="primaryNtp")
    def primary_ntp(self) -> pulumi.Output[str]:
        """
        The IP address of the primary NTP server, assigned by the DHCP server.
        """
        return pulumi.get(self, "primary_ntp")

    @property
    @pulumi.getter(name="secondaryDns")
    def secondary_dns(self) -> pulumi.Output[str]:
        """
        The IP address of the second DNS resolver, assigned by the DHCP server.
        """
        return pulumi.get(self, "secondary_dns")

    @property
    @pulumi.getter(name="secondaryNtp")
    def secondary_ntp(self) -> pulumi.Output[str]:
        """
        The IP address of the secondary NTP server, assigned by the DHCP server.
        """
        return pulumi.get(self, "secondary_ntp")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="usePeerDns")
    def use_peer_dns(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to accept the DNS settings advertised by DHCP Server (will override the settings put in the /ip dns submenu).
        """
        return pulumi.get(self, "use_peer_dns")

    @property
    @pulumi.getter(name="usePeerNtp")
    def use_peer_ntp(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to accept the NTP settings advertised by DHCP Server (will override the settings put in the /system ntp client submenu).
        """
        return pulumi.get(self, "use_peer_ntp")

