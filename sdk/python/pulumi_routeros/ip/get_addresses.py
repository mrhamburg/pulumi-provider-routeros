# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAddressesResult',
    'AwaitableGetAddressesResult',
    'get_addresses',
    'get_addresses_output',
]

@pulumi.output_type
class GetAddressesResult:
    """
    A collection of values returned by getAddresses.
    """
    def __init__(__self__, ___id_=None, ___path_=None, addresses=None, filter=None, id=None):
        if ___id_ and not isinstance(___id_, int):
            raise TypeError("Expected argument '___id_' to be a int")
        pulumi.set(__self__, "___id_", ___id_)
        if ___path_ and not isinstance(___path_, str):
            raise TypeError("Expected argument '___path_' to be a str")
        pulumi.set(__self__, "___path_", ___path_)
        if addresses and not isinstance(addresses, list):
            raise TypeError("Expected argument 'addresses' to be a list")
        pulumi.set(__self__, "addresses", addresses)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[int]:
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[str]:
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetAddressesAddressResult']:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def filter(self) -> Optional[Mapping[str, Any]]:
        """
        Additional request filtering options.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetAddressesResult(GetAddressesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAddressesResult(
            ___id_=self.___id_,
            ___path_=self.___path_,
            addresses=self.addresses,
            filter=self.filter,
            id=self.id)


def get_addresses(___id_: Optional[int] = None,
                  ___path_: Optional[str] = None,
                  filter: Optional[Mapping[str, Any]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAddressesResult:
    """
    Use this data source to access information about an existing resource.

    :param Mapping[str, Any] filter: Additional request filtering options.
    """
    __args__ = dict()
    __args__['___id_'] = ___id_
    __args__['___path_'] = ___path_
    __args__['filter'] = filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('routeros:Ip/getAddresses:getAddresses', __args__, opts=opts, typ=GetAddressesResult).value

    return AwaitableGetAddressesResult(
        ___id_=__ret__.___id_,
        ___path_=__ret__.___path_,
        addresses=__ret__.addresses,
        filter=__ret__.filter,
        id=__ret__.id)


@_utilities.lift_output_func(get_addresses)
def get_addresses_output(___id_: Optional[pulumi.Input[Optional[int]]] = None,
                         ___path_: Optional[pulumi.Input[Optional[str]]] = None,
                         filter: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAddressesResult]:
    """
    Use this data source to access information about an existing resource.

    :param Mapping[str, Any] filter: Additional request filtering options.
    """
    ...
