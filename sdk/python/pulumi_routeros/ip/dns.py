# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DnsArgs', 'Dns']

@pulumi.input_type
class DnsArgs:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 allow_remote_requests: Optional[pulumi.Input[bool]] = None,
                 cache_max_ttl: Optional[pulumi.Input[str]] = None,
                 cache_size: Optional[pulumi.Input[int]] = None,
                 doh_max_concurrent_queries: Optional[pulumi.Input[int]] = None,
                 doh_max_server_connections: Optional[pulumi.Input[int]] = None,
                 doh_timeout: Optional[pulumi.Input[str]] = None,
                 max_concurrent_queries: Optional[pulumi.Input[int]] = None,
                 max_concurrent_tcp_sessions: Optional[pulumi.Input[int]] = None,
                 max_udp_packet_size: Optional[pulumi.Input[int]] = None,
                 query_server_timeout: Optional[pulumi.Input[str]] = None,
                 query_total_timeout: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[str]] = None,
                 use_doh_server: Optional[pulumi.Input[str]] = None,
                 verify_doh_cert: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Dns resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] allow_remote_requests: Specifies whether to allow network requests.
        :param pulumi.Input[str] cache_max_ttl: Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
               time. Shorter TTL received from DNS servers are respected. *Default: 1w*
        :param pulumi.Input[int] cache_size: Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
        :param pulumi.Input[int] doh_max_concurrent_queries: Specifies how many DoH concurrent queries are allowed.
        :param pulumi.Input[int] doh_max_server_connections: Specifies how many concurrent connections to the DoH server are allowed.
        :param pulumi.Input[str] doh_timeout: Specifies how long to wait for query response from the DoH server.
        :param pulumi.Input[int] max_concurrent_queries: Specifies how much concurrent queries are allowed. *Default: 100*
        :param pulumi.Input[int] max_concurrent_tcp_sessions: Specifies how much concurrent TCP sessions are allowed. *Default: 20*
        :param pulumi.Input[int] max_udp_packet_size: Maximum size of allowed UDP packet. *Default: 4096*
        :param pulumi.Input[str] query_server_timeout: Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
        :param pulumi.Input[str] query_total_timeout: Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
               query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
        :param pulumi.Input[str] servers: List of DNS server IPv4/IPv6 addresses.
        :param pulumi.Input[str] use_doh_server: DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
               fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
               on the device.
        :param pulumi.Input[bool] verify_doh_cert: DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if allow_remote_requests is not None:
            pulumi.set(__self__, "allow_remote_requests", allow_remote_requests)
        if cache_max_ttl is not None:
            pulumi.set(__self__, "cache_max_ttl", cache_max_ttl)
        if cache_size is not None:
            pulumi.set(__self__, "cache_size", cache_size)
        if doh_max_concurrent_queries is not None:
            pulumi.set(__self__, "doh_max_concurrent_queries", doh_max_concurrent_queries)
        if doh_max_server_connections is not None:
            pulumi.set(__self__, "doh_max_server_connections", doh_max_server_connections)
        if doh_timeout is not None:
            pulumi.set(__self__, "doh_timeout", doh_timeout)
        if max_concurrent_queries is not None:
            pulumi.set(__self__, "max_concurrent_queries", max_concurrent_queries)
        if max_concurrent_tcp_sessions is not None:
            pulumi.set(__self__, "max_concurrent_tcp_sessions", max_concurrent_tcp_sessions)
        if max_udp_packet_size is not None:
            pulumi.set(__self__, "max_udp_packet_size", max_udp_packet_size)
        if query_server_timeout is not None:
            pulumi.set(__self__, "query_server_timeout", query_server_timeout)
        if query_total_timeout is not None:
            pulumi.set(__self__, "query_total_timeout", query_total_timeout)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if use_doh_server is not None:
            pulumi.set(__self__, "use_doh_server", use_doh_server)
        if verify_doh_cert is not None:
            pulumi.set(__self__, "verify_doh_cert", verify_doh_cert)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="allowRemoteRequests")
    def allow_remote_requests(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to allow network requests.
        """
        return pulumi.get(self, "allow_remote_requests")

    @allow_remote_requests.setter
    def allow_remote_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_remote_requests", value)

    @property
    @pulumi.getter(name="cacheMaxTtl")
    def cache_max_ttl(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
        time. Shorter TTL received from DNS servers are respected. *Default: 1w*
        """
        return pulumi.get(self, "cache_max_ttl")

    @cache_max_ttl.setter
    def cache_max_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_max_ttl", value)

    @property
    @pulumi.getter(name="cacheSize")
    def cache_size(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
        """
        return pulumi.get(self, "cache_size")

    @cache_size.setter
    def cache_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_size", value)

    @property
    @pulumi.getter(name="dohMaxConcurrentQueries")
    def doh_max_concurrent_queries(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how many DoH concurrent queries are allowed.
        """
        return pulumi.get(self, "doh_max_concurrent_queries")

    @doh_max_concurrent_queries.setter
    def doh_max_concurrent_queries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "doh_max_concurrent_queries", value)

    @property
    @pulumi.getter(name="dohMaxServerConnections")
    def doh_max_server_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how many concurrent connections to the DoH server are allowed.
        """
        return pulumi.get(self, "doh_max_server_connections")

    @doh_max_server_connections.setter
    def doh_max_server_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "doh_max_server_connections", value)

    @property
    @pulumi.getter(name="dohTimeout")
    def doh_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how long to wait for query response from the DoH server.
        """
        return pulumi.get(self, "doh_timeout")

    @doh_timeout.setter
    def doh_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "doh_timeout", value)

    @property
    @pulumi.getter(name="maxConcurrentQueries")
    def max_concurrent_queries(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how much concurrent queries are allowed. *Default: 100*
        """
        return pulumi.get(self, "max_concurrent_queries")

    @max_concurrent_queries.setter
    def max_concurrent_queries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_queries", value)

    @property
    @pulumi.getter(name="maxConcurrentTcpSessions")
    def max_concurrent_tcp_sessions(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how much concurrent TCP sessions are allowed. *Default: 20*
        """
        return pulumi.get(self, "max_concurrent_tcp_sessions")

    @max_concurrent_tcp_sessions.setter
    def max_concurrent_tcp_sessions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_tcp_sessions", value)

    @property
    @pulumi.getter(name="maxUdpPacketSize")
    def max_udp_packet_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of allowed UDP packet. *Default: 4096*
        """
        return pulumi.get(self, "max_udp_packet_size")

    @max_udp_packet_size.setter
    def max_udp_packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_udp_packet_size", value)

    @property
    @pulumi.getter(name="queryServerTimeout")
    def query_server_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
        """
        return pulumi.get(self, "query_server_timeout")

    @query_server_timeout.setter
    def query_server_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_server_timeout", value)

    @property
    @pulumi.getter(name="queryTotalTimeout")
    def query_total_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
        query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
        """
        return pulumi.get(self, "query_total_timeout")

    @query_total_timeout.setter
    def query_total_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_total_timeout", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[str]]:
        """
        List of DNS server IPv4/IPv6 addresses.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="useDohServer")
    def use_doh_server(self) -> Optional[pulumi.Input[str]]:
        """
        DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
        fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
        on the device.
        """
        return pulumi.get(self, "use_doh_server")

    @use_doh_server.setter
    def use_doh_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_doh_server", value)

    @property
    @pulumi.getter(name="verifyDohCert")
    def verify_doh_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
        """
        return pulumi.get(self, "verify_doh_cert")

    @verify_doh_cert.setter
    def verify_doh_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_doh_cert", value)


@pulumi.input_type
class _DnsState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 allow_remote_requests: Optional[pulumi.Input[bool]] = None,
                 cache_max_ttl: Optional[pulumi.Input[str]] = None,
                 cache_size: Optional[pulumi.Input[int]] = None,
                 cache_used: Optional[pulumi.Input[int]] = None,
                 doh_max_concurrent_queries: Optional[pulumi.Input[int]] = None,
                 doh_max_server_connections: Optional[pulumi.Input[int]] = None,
                 doh_timeout: Optional[pulumi.Input[str]] = None,
                 dynamic_servers: Optional[pulumi.Input[str]] = None,
                 max_concurrent_queries: Optional[pulumi.Input[int]] = None,
                 max_concurrent_tcp_sessions: Optional[pulumi.Input[int]] = None,
                 max_udp_packet_size: Optional[pulumi.Input[int]] = None,
                 query_server_timeout: Optional[pulumi.Input[str]] = None,
                 query_total_timeout: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[str]] = None,
                 use_doh_server: Optional[pulumi.Input[str]] = None,
                 verify_doh_cert: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Dns resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] allow_remote_requests: Specifies whether to allow network requests.
        :param pulumi.Input[str] cache_max_ttl: Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
               time. Shorter TTL received from DNS servers are respected. *Default: 1w*
        :param pulumi.Input[int] cache_size: Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
        :param pulumi.Input[int] cache_used: Shows the currently used cache size in KiB.
        :param pulumi.Input[int] doh_max_concurrent_queries: Specifies how many DoH concurrent queries are allowed.
        :param pulumi.Input[int] doh_max_server_connections: Specifies how many concurrent connections to the DoH server are allowed.
        :param pulumi.Input[str] doh_timeout: Specifies how long to wait for query response from the DoH server.
        :param pulumi.Input[str] dynamic_servers: List of dynamically added DNS server from different services, for example, DHCP.
        :param pulumi.Input[int] max_concurrent_queries: Specifies how much concurrent queries are allowed. *Default: 100*
        :param pulumi.Input[int] max_concurrent_tcp_sessions: Specifies how much concurrent TCP sessions are allowed. *Default: 20*
        :param pulumi.Input[int] max_udp_packet_size: Maximum size of allowed UDP packet. *Default: 4096*
        :param pulumi.Input[str] query_server_timeout: Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
        :param pulumi.Input[str] query_total_timeout: Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
               query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
        :param pulumi.Input[str] servers: List of DNS server IPv4/IPv6 addresses.
        :param pulumi.Input[str] use_doh_server: DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
               fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
               on the device.
        :param pulumi.Input[bool] verify_doh_cert: DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if allow_remote_requests is not None:
            pulumi.set(__self__, "allow_remote_requests", allow_remote_requests)
        if cache_max_ttl is not None:
            pulumi.set(__self__, "cache_max_ttl", cache_max_ttl)
        if cache_size is not None:
            pulumi.set(__self__, "cache_size", cache_size)
        if cache_used is not None:
            pulumi.set(__self__, "cache_used", cache_used)
        if doh_max_concurrent_queries is not None:
            pulumi.set(__self__, "doh_max_concurrent_queries", doh_max_concurrent_queries)
        if doh_max_server_connections is not None:
            pulumi.set(__self__, "doh_max_server_connections", doh_max_server_connections)
        if doh_timeout is not None:
            pulumi.set(__self__, "doh_timeout", doh_timeout)
        if dynamic_servers is not None:
            pulumi.set(__self__, "dynamic_servers", dynamic_servers)
        if max_concurrent_queries is not None:
            pulumi.set(__self__, "max_concurrent_queries", max_concurrent_queries)
        if max_concurrent_tcp_sessions is not None:
            pulumi.set(__self__, "max_concurrent_tcp_sessions", max_concurrent_tcp_sessions)
        if max_udp_packet_size is not None:
            pulumi.set(__self__, "max_udp_packet_size", max_udp_packet_size)
        if query_server_timeout is not None:
            pulumi.set(__self__, "query_server_timeout", query_server_timeout)
        if query_total_timeout is not None:
            pulumi.set(__self__, "query_total_timeout", query_total_timeout)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if use_doh_server is not None:
            pulumi.set(__self__, "use_doh_server", use_doh_server)
        if verify_doh_cert is not None:
            pulumi.set(__self__, "verify_doh_cert", verify_doh_cert)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="allowRemoteRequests")
    def allow_remote_requests(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to allow network requests.
        """
        return pulumi.get(self, "allow_remote_requests")

    @allow_remote_requests.setter
    def allow_remote_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_remote_requests", value)

    @property
    @pulumi.getter(name="cacheMaxTtl")
    def cache_max_ttl(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
        time. Shorter TTL received from DNS servers are respected. *Default: 1w*
        """
        return pulumi.get(self, "cache_max_ttl")

    @cache_max_ttl.setter
    def cache_max_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_max_ttl", value)

    @property
    @pulumi.getter(name="cacheSize")
    def cache_size(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
        """
        return pulumi.get(self, "cache_size")

    @cache_size.setter
    def cache_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_size", value)

    @property
    @pulumi.getter(name="cacheUsed")
    def cache_used(self) -> Optional[pulumi.Input[int]]:
        """
        Shows the currently used cache size in KiB.
        """
        return pulumi.get(self, "cache_used")

    @cache_used.setter
    def cache_used(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_used", value)

    @property
    @pulumi.getter(name="dohMaxConcurrentQueries")
    def doh_max_concurrent_queries(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how many DoH concurrent queries are allowed.
        """
        return pulumi.get(self, "doh_max_concurrent_queries")

    @doh_max_concurrent_queries.setter
    def doh_max_concurrent_queries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "doh_max_concurrent_queries", value)

    @property
    @pulumi.getter(name="dohMaxServerConnections")
    def doh_max_server_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how many concurrent connections to the DoH server are allowed.
        """
        return pulumi.get(self, "doh_max_server_connections")

    @doh_max_server_connections.setter
    def doh_max_server_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "doh_max_server_connections", value)

    @property
    @pulumi.getter(name="dohTimeout")
    def doh_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how long to wait for query response from the DoH server.
        """
        return pulumi.get(self, "doh_timeout")

    @doh_timeout.setter
    def doh_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "doh_timeout", value)

    @property
    @pulumi.getter(name="dynamicServers")
    def dynamic_servers(self) -> Optional[pulumi.Input[str]]:
        """
        List of dynamically added DNS server from different services, for example, DHCP.
        """
        return pulumi.get(self, "dynamic_servers")

    @dynamic_servers.setter
    def dynamic_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_servers", value)

    @property
    @pulumi.getter(name="maxConcurrentQueries")
    def max_concurrent_queries(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how much concurrent queries are allowed. *Default: 100*
        """
        return pulumi.get(self, "max_concurrent_queries")

    @max_concurrent_queries.setter
    def max_concurrent_queries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_queries", value)

    @property
    @pulumi.getter(name="maxConcurrentTcpSessions")
    def max_concurrent_tcp_sessions(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how much concurrent TCP sessions are allowed. *Default: 20*
        """
        return pulumi.get(self, "max_concurrent_tcp_sessions")

    @max_concurrent_tcp_sessions.setter
    def max_concurrent_tcp_sessions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_tcp_sessions", value)

    @property
    @pulumi.getter(name="maxUdpPacketSize")
    def max_udp_packet_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of allowed UDP packet. *Default: 4096*
        """
        return pulumi.get(self, "max_udp_packet_size")

    @max_udp_packet_size.setter
    def max_udp_packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_udp_packet_size", value)

    @property
    @pulumi.getter(name="queryServerTimeout")
    def query_server_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
        """
        return pulumi.get(self, "query_server_timeout")

    @query_server_timeout.setter
    def query_server_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_server_timeout", value)

    @property
    @pulumi.getter(name="queryTotalTimeout")
    def query_total_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
        query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
        """
        return pulumi.get(self, "query_total_timeout")

    @query_total_timeout.setter
    def query_total_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_total_timeout", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[str]]:
        """
        List of DNS server IPv4/IPv6 addresses.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="useDohServer")
    def use_doh_server(self) -> Optional[pulumi.Input[str]]:
        """
        DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
        fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
        on the device.
        """
        return pulumi.get(self, "use_doh_server")

    @use_doh_server.setter
    def use_doh_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_doh_server", value)

    @property
    @pulumi.getter(name="verifyDohCert")
    def verify_doh_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
        """
        return pulumi.get(self, "verify_doh_cert")

    @verify_doh_cert.setter
    def verify_doh_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_doh_cert", value)


class Dns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 allow_remote_requests: Optional[pulumi.Input[bool]] = None,
                 cache_max_ttl: Optional[pulumi.Input[str]] = None,
                 cache_size: Optional[pulumi.Input[int]] = None,
                 doh_max_concurrent_queries: Optional[pulumi.Input[int]] = None,
                 doh_max_server_connections: Optional[pulumi.Input[int]] = None,
                 doh_timeout: Optional[pulumi.Input[str]] = None,
                 max_concurrent_queries: Optional[pulumi.Input[int]] = None,
                 max_concurrent_tcp_sessions: Optional[pulumi.Input[int]] = None,
                 max_udp_packet_size: Optional[pulumi.Input[int]] = None,
                 query_server_timeout: Optional[pulumi.Input[str]] = None,
                 query_total_timeout: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[str]] = None,
                 use_doh_server: Optional[pulumi.Input[str]] = None,
                 verify_doh_cert: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## # Ip.Dns (Resource)

        ***

        #### This is an alias for backwards compatibility between plugin versions.
        Please see documentation for Ip.IpDns

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] allow_remote_requests: Specifies whether to allow network requests.
        :param pulumi.Input[str] cache_max_ttl: Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
               time. Shorter TTL received from DNS servers are respected. *Default: 1w*
        :param pulumi.Input[int] cache_size: Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
        :param pulumi.Input[int] doh_max_concurrent_queries: Specifies how many DoH concurrent queries are allowed.
        :param pulumi.Input[int] doh_max_server_connections: Specifies how many concurrent connections to the DoH server are allowed.
        :param pulumi.Input[str] doh_timeout: Specifies how long to wait for query response from the DoH server.
        :param pulumi.Input[int] max_concurrent_queries: Specifies how much concurrent queries are allowed. *Default: 100*
        :param pulumi.Input[int] max_concurrent_tcp_sessions: Specifies how much concurrent TCP sessions are allowed. *Default: 20*
        :param pulumi.Input[int] max_udp_packet_size: Maximum size of allowed UDP packet. *Default: 4096*
        :param pulumi.Input[str] query_server_timeout: Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
        :param pulumi.Input[str] query_total_timeout: Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
               query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
        :param pulumi.Input[str] servers: List of DNS server IPv4/IPv6 addresses.
        :param pulumi.Input[str] use_doh_server: DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
               fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
               on the device.
        :param pulumi.Input[bool] verify_doh_cert: DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DnsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Ip.Dns (Resource)

        ***

        #### This is an alias for backwards compatibility between plugin versions.
        Please see documentation for Ip.IpDns

        :param str resource_name: The name of the resource.
        :param DnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 allow_remote_requests: Optional[pulumi.Input[bool]] = None,
                 cache_max_ttl: Optional[pulumi.Input[str]] = None,
                 cache_size: Optional[pulumi.Input[int]] = None,
                 doh_max_concurrent_queries: Optional[pulumi.Input[int]] = None,
                 doh_max_server_connections: Optional[pulumi.Input[int]] = None,
                 doh_timeout: Optional[pulumi.Input[str]] = None,
                 max_concurrent_queries: Optional[pulumi.Input[int]] = None,
                 max_concurrent_tcp_sessions: Optional[pulumi.Input[int]] = None,
                 max_udp_packet_size: Optional[pulumi.Input[int]] = None,
                 query_server_timeout: Optional[pulumi.Input[str]] = None,
                 query_total_timeout: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[str]] = None,
                 use_doh_server: Optional[pulumi.Input[str]] = None,
                 verify_doh_cert: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsArgs.__new__(DnsArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["allow_remote_requests"] = allow_remote_requests
            __props__.__dict__["cache_max_ttl"] = cache_max_ttl
            __props__.__dict__["cache_size"] = cache_size
            __props__.__dict__["doh_max_concurrent_queries"] = doh_max_concurrent_queries
            __props__.__dict__["doh_max_server_connections"] = doh_max_server_connections
            __props__.__dict__["doh_timeout"] = doh_timeout
            __props__.__dict__["max_concurrent_queries"] = max_concurrent_queries
            __props__.__dict__["max_concurrent_tcp_sessions"] = max_concurrent_tcp_sessions
            __props__.__dict__["max_udp_packet_size"] = max_udp_packet_size
            __props__.__dict__["query_server_timeout"] = query_server_timeout
            __props__.__dict__["query_total_timeout"] = query_total_timeout
            __props__.__dict__["servers"] = servers
            __props__.__dict__["use_doh_server"] = use_doh_server
            __props__.__dict__["verify_doh_cert"] = verify_doh_cert
            __props__.__dict__["cache_used"] = None
            __props__.__dict__["dynamic_servers"] = None
        super(Dns, __self__).__init__(
            'routeros:Ip/dns:Dns',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            allow_remote_requests: Optional[pulumi.Input[bool]] = None,
            cache_max_ttl: Optional[pulumi.Input[str]] = None,
            cache_size: Optional[pulumi.Input[int]] = None,
            cache_used: Optional[pulumi.Input[int]] = None,
            doh_max_concurrent_queries: Optional[pulumi.Input[int]] = None,
            doh_max_server_connections: Optional[pulumi.Input[int]] = None,
            doh_timeout: Optional[pulumi.Input[str]] = None,
            dynamic_servers: Optional[pulumi.Input[str]] = None,
            max_concurrent_queries: Optional[pulumi.Input[int]] = None,
            max_concurrent_tcp_sessions: Optional[pulumi.Input[int]] = None,
            max_udp_packet_size: Optional[pulumi.Input[int]] = None,
            query_server_timeout: Optional[pulumi.Input[str]] = None,
            query_total_timeout: Optional[pulumi.Input[str]] = None,
            servers: Optional[pulumi.Input[str]] = None,
            use_doh_server: Optional[pulumi.Input[str]] = None,
            verify_doh_cert: Optional[pulumi.Input[bool]] = None) -> 'Dns':
        """
        Get an existing Dns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] allow_remote_requests: Specifies whether to allow network requests.
        :param pulumi.Input[str] cache_max_ttl: Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
               time. Shorter TTL received from DNS servers are respected. *Default: 1w*
        :param pulumi.Input[int] cache_size: Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
        :param pulumi.Input[int] cache_used: Shows the currently used cache size in KiB.
        :param pulumi.Input[int] doh_max_concurrent_queries: Specifies how many DoH concurrent queries are allowed.
        :param pulumi.Input[int] doh_max_server_connections: Specifies how many concurrent connections to the DoH server are allowed.
        :param pulumi.Input[str] doh_timeout: Specifies how long to wait for query response from the DoH server.
        :param pulumi.Input[str] dynamic_servers: List of dynamically added DNS server from different services, for example, DHCP.
        :param pulumi.Input[int] max_concurrent_queries: Specifies how much concurrent queries are allowed. *Default: 100*
        :param pulumi.Input[int] max_concurrent_tcp_sessions: Specifies how much concurrent TCP sessions are allowed. *Default: 20*
        :param pulumi.Input[int] max_udp_packet_size: Maximum size of allowed UDP packet. *Default: 4096*
        :param pulumi.Input[str] query_server_timeout: Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
        :param pulumi.Input[str] query_total_timeout: Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
               query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
        :param pulumi.Input[str] servers: List of DNS server IPv4/IPv6 addresses.
        :param pulumi.Input[str] use_doh_server: DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
               fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
               on the device.
        :param pulumi.Input[bool] verify_doh_cert: DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsState.__new__(_DnsState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["allow_remote_requests"] = allow_remote_requests
        __props__.__dict__["cache_max_ttl"] = cache_max_ttl
        __props__.__dict__["cache_size"] = cache_size
        __props__.__dict__["cache_used"] = cache_used
        __props__.__dict__["doh_max_concurrent_queries"] = doh_max_concurrent_queries
        __props__.__dict__["doh_max_server_connections"] = doh_max_server_connections
        __props__.__dict__["doh_timeout"] = doh_timeout
        __props__.__dict__["dynamic_servers"] = dynamic_servers
        __props__.__dict__["max_concurrent_queries"] = max_concurrent_queries
        __props__.__dict__["max_concurrent_tcp_sessions"] = max_concurrent_tcp_sessions
        __props__.__dict__["max_udp_packet_size"] = max_udp_packet_size
        __props__.__dict__["query_server_timeout"] = query_server_timeout
        __props__.__dict__["query_total_timeout"] = query_total_timeout
        __props__.__dict__["servers"] = servers
        __props__.__dict__["use_doh_server"] = use_doh_server
        __props__.__dict__["verify_doh_cert"] = verify_doh_cert
        return Dns(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter(name="allowRemoteRequests")
    def allow_remote_requests(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether to allow network requests.
        """
        return pulumi.get(self, "allow_remote_requests")

    @property
    @pulumi.getter(name="cacheMaxTtl")
    def cache_max_ttl(self) -> pulumi.Output[str]:
        """
        Maximum time-to-live for cache records. In other words, cache records will expire unconditionally after cache-max-ttl
        time. Shorter TTL received from DNS servers are respected. *Default: 1w*
        """
        return pulumi.get(self, "cache_max_ttl")

    @property
    @pulumi.getter(name="cacheSize")
    def cache_size(self) -> pulumi.Output[int]:
        """
        Specifies the size of DNS cache in KiB (64..4294967295). *Default: 2048*
        """
        return pulumi.get(self, "cache_size")

    @property
    @pulumi.getter(name="cacheUsed")
    def cache_used(self) -> pulumi.Output[int]:
        """
        Shows the currently used cache size in KiB.
        """
        return pulumi.get(self, "cache_used")

    @property
    @pulumi.getter(name="dohMaxConcurrentQueries")
    def doh_max_concurrent_queries(self) -> pulumi.Output[int]:
        """
        Specifies how many DoH concurrent queries are allowed.
        """
        return pulumi.get(self, "doh_max_concurrent_queries")

    @property
    @pulumi.getter(name="dohMaxServerConnections")
    def doh_max_server_connections(self) -> pulumi.Output[int]:
        """
        Specifies how many concurrent connections to the DoH server are allowed.
        """
        return pulumi.get(self, "doh_max_server_connections")

    @property
    @pulumi.getter(name="dohTimeout")
    def doh_timeout(self) -> pulumi.Output[str]:
        """
        Specifies how long to wait for query response from the DoH server.
        """
        return pulumi.get(self, "doh_timeout")

    @property
    @pulumi.getter(name="dynamicServers")
    def dynamic_servers(self) -> pulumi.Output[str]:
        """
        List of dynamically added DNS server from different services, for example, DHCP.
        """
        return pulumi.get(self, "dynamic_servers")

    @property
    @pulumi.getter(name="maxConcurrentQueries")
    def max_concurrent_queries(self) -> pulumi.Output[int]:
        """
        Specifies how much concurrent queries are allowed. *Default: 100*
        """
        return pulumi.get(self, "max_concurrent_queries")

    @property
    @pulumi.getter(name="maxConcurrentTcpSessions")
    def max_concurrent_tcp_sessions(self) -> pulumi.Output[int]:
        """
        Specifies how much concurrent TCP sessions are allowed. *Default: 20*
        """
        return pulumi.get(self, "max_concurrent_tcp_sessions")

    @property
    @pulumi.getter(name="maxUdpPacketSize")
    def max_udp_packet_size(self) -> pulumi.Output[int]:
        """
        Maximum size of allowed UDP packet. *Default: 4096*
        """
        return pulumi.get(self, "max_udp_packet_size")

    @property
    @pulumi.getter(name="queryServerTimeout")
    def query_server_timeout(self) -> pulumi.Output[str]:
        """
        Specifies how long to wait for query response from one server. Time can be specified in milliseconds. *Default: 2s*
        """
        return pulumi.get(self, "query_server_timeout")

    @property
    @pulumi.getter(name="queryTotalTimeout")
    def query_total_timeout(self) -> pulumi.Output[str]:
        """
        Specifies how long to wait for query response in total. Note that this setting must be configured taking into account
        query_server_timeout and number of used DNS server. Time can be specified in milliseconds. *Default: 10s*
        """
        return pulumi.get(self, "query_total_timeout")

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Output[Optional[str]]:
        """
        List of DNS server IPv4/IPv6 addresses.
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter(name="useDohServer")
    def use_doh_server(self) -> pulumi.Output[Optional[str]]:
        """
        DNS over HTTPS (DoH) server URL. > Mikrotik strongly suggest not use third-party download links for certificate
        fetching. Use the Certificate Authority's own website. > RouterOS prioritize DoH over DNS server if both are configured
        on the device.
        """
        return pulumi.get(self, "use_doh_server")

    @property
    @pulumi.getter(name="verifyDohCert")
    def verify_doh_cert(self) -> pulumi.Output[Optional[bool]]:
        """
        DoH certificate verification. [See docs](https://wiki.mikrotik.com/wiki/Manual:IP/DNS#DNS_over_HTTPS).
        """
        return pulumi.get(self, "verify_doh_cert")

