# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RouteArgs', 'Route']

@pulumi.input_type
class RouteArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 blackhole: Optional[pulumi.Input[bool]] = None,
                 check_gateway: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dst_address: Optional[pulumi.Input[str]] = None,
                 pref_src: Optional[pulumi.Input[str]] = None,
                 routing_table: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[int]] = None,
                 target_scope: Optional[pulumi.Input[int]] = None,
                 vrf_interface: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Route resource.
        :param pulumi.Input[str] gateway: Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] blackhole: It's a blackhole route.
        :param pulumi.Input[str] check_gateway: Currently used check-gateway option.
        :param pulumi.Input[int] distance: Value used in route selection. Routes with smaller distance value are given preference.
        :param pulumi.Input[str] dst_address: IP prefix of route, specifies destination addresses that this route can be used for.
        :param pulumi.Input[str] pref_src: Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
        :param pulumi.Input[str] routing_table: Routing table this route belongs to.
        :param pulumi.Input[int] scope: Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
        :param pulumi.Input[int] target_scope: Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
        :param pulumi.Input[str] vrf_interface: VRF interface name.
        """
        pulumi.set(__self__, "gateway", gateway)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if blackhole is not None:
            pulumi.set(__self__, "blackhole", blackhole)
        if check_gateway is not None:
            pulumi.set(__self__, "check_gateway", check_gateway)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dst_address is not None:
            pulumi.set(__self__, "dst_address", dst_address)
        if pref_src is not None:
            pulumi.set(__self__, "pref_src", pref_src)
        if routing_table is not None:
            pulumi.set(__self__, "routing_table", routing_table)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if target_scope is not None:
            pulumi.set(__self__, "target_scope", target_scope)
        if vrf_interface is not None:
            pulumi.set(__self__, "vrf_interface", vrf_interface)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        """
        Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def blackhole(self) -> Optional[pulumi.Input[bool]]:
        """
        It's a blackhole route.
        """
        return pulumi.get(self, "blackhole")

    @blackhole.setter
    def blackhole(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blackhole", value)

    @property
    @pulumi.getter(name="checkGateway")
    def check_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Currently used check-gateway option.
        """
        return pulumi.get(self, "check_gateway")

    @check_gateway.setter
    def check_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_gateway", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Value used in route selection. Routes with smaller distance value are given preference.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP prefix of route, specifies destination addresses that this route can be used for.
        """
        return pulumi.get(self, "dst_address")

    @dst_address.setter
    def dst_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_address", value)

    @property
    @pulumi.getter(name="prefSrc")
    def pref_src(self) -> Optional[pulumi.Input[str]]:
        """
        Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
        """
        return pulumi.get(self, "pref_src")

    @pref_src.setter
    def pref_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pref_src", value)

    @property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> Optional[pulumi.Input[str]]:
        """
        Routing table this route belongs to.
        """
        return pulumi.get(self, "routing_table")

    @routing_table.setter
    def routing_table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_table", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[int]]:
        """
        Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="targetScope")
    def target_scope(self) -> Optional[pulumi.Input[int]]:
        """
        Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
        """
        return pulumi.get(self, "target_scope")

    @target_scope.setter
    def target_scope(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_scope", value)

    @property
    @pulumi.getter(name="vrfInterface")
    def vrf_interface(self) -> Optional[pulumi.Input[str]]:
        """
        VRF interface name.
        """
        return pulumi.get(self, "vrf_interface")

    @vrf_interface.setter
    def vrf_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_interface", value)


@pulumi.input_type
class _RouteState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 blackhole: Optional[pulumi.Input[bool]] = None,
                 check_gateway: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dst_address: Optional[pulumi.Input[str]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 ecmp: Optional[pulumi.Input[bool]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 hw_offloaded: Optional[pulumi.Input[bool]] = None,
                 immediate_gw: Optional[pulumi.Input[str]] = None,
                 inactive: Optional[pulumi.Input[bool]] = None,
                 pref_src: Optional[pulumi.Input[str]] = None,
                 routing_table: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[int]] = None,
                 static: Optional[pulumi.Input[bool]] = None,
                 suppress_hw_offload: Optional[pulumi.Input[bool]] = None,
                 target_scope: Optional[pulumi.Input[int]] = None,
                 vrf_interface: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Route resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] active: A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
        :param pulumi.Input[bool] blackhole: It's a blackhole route.
        :param pulumi.Input[str] check_gateway: Currently used check-gateway option.
        :param pulumi.Input[bool] dhcp: A flag indicates whether the route was added by the DHCP service.
        :param pulumi.Input[int] distance: Value used in route selection. Routes with smaller distance value are given preference.
        :param pulumi.Input[str] dst_address: IP prefix of route, specifies destination addresses that this route can be used for.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[bool] ecmp: A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
        :param pulumi.Input[str] gateway: Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
        :param pulumi.Input[bool] hw_offloaded: Indicates whether the route is eligible to be hardware offloaded on supported hardware.
        :param pulumi.Input[str] immediate_gw: Shows actual (resolved) gateway and interface that will be used for packet forwarding.
        :param pulumi.Input[str] pref_src: Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
        :param pulumi.Input[str] routing_table: Routing table this route belongs to.
        :param pulumi.Input[int] scope: Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
        :param pulumi.Input[int] target_scope: Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
        :param pulumi.Input[str] vrf_interface: VRF interface name.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if blackhole is not None:
            pulumi.set(__self__, "blackhole", blackhole)
        if check_gateway is not None:
            pulumi.set(__self__, "check_gateway", check_gateway)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dst_address is not None:
            pulumi.set(__self__, "dst_address", dst_address)
        if dynamic is not None:
            pulumi.set(__self__, "dynamic", dynamic)
        if ecmp is not None:
            pulumi.set(__self__, "ecmp", ecmp)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if hw_offloaded is not None:
            pulumi.set(__self__, "hw_offloaded", hw_offloaded)
        if immediate_gw is not None:
            pulumi.set(__self__, "immediate_gw", immediate_gw)
        if inactive is not None:
            pulumi.set(__self__, "inactive", inactive)
        if pref_src is not None:
            pulumi.set(__self__, "pref_src", pref_src)
        if routing_table is not None:
            pulumi.set(__self__, "routing_table", routing_table)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if static is not None:
            pulumi.set(__self__, "static", static)
        if suppress_hw_offload is not None:
            pulumi.set(__self__, "suppress_hw_offload", suppress_hw_offload)
        if target_scope is not None:
            pulumi.set(__self__, "target_scope", target_scope)
        if vrf_interface is not None:
            pulumi.set(__self__, "vrf_interface", vrf_interface)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def blackhole(self) -> Optional[pulumi.Input[bool]]:
        """
        It's a blackhole route.
        """
        return pulumi.get(self, "blackhole")

    @blackhole.setter
    def blackhole(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blackhole", value)

    @property
    @pulumi.getter(name="checkGateway")
    def check_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Currently used check-gateway option.
        """
        return pulumi.get(self, "check_gateway")

    @check_gateway.setter
    def check_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_gateway", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicates whether the route was added by the DHCP service.
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Value used in route selection. Routes with smaller distance value are given preference.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP prefix of route, specifies destination addresses that this route can be used for.
        """
        return pulumi.get(self, "dst_address")

    @dst_address.setter
    def dst_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_address", value)

    @property
    @pulumi.getter
    def dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter
    def ecmp(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
        """
        return pulumi.get(self, "ecmp")

    @ecmp.setter
    def ecmp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ecmp", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="hwOffloaded")
    def hw_offloaded(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the route is eligible to be hardware offloaded on supported hardware.
        """
        return pulumi.get(self, "hw_offloaded")

    @hw_offloaded.setter
    def hw_offloaded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hw_offloaded", value)

    @property
    @pulumi.getter(name="immediateGw")
    def immediate_gw(self) -> Optional[pulumi.Input[str]]:
        """
        Shows actual (resolved) gateway and interface that will be used for packet forwarding.
        """
        return pulumi.get(self, "immediate_gw")

    @immediate_gw.setter
    def immediate_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "immediate_gw", value)

    @property
    @pulumi.getter
    def inactive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inactive")

    @inactive.setter
    def inactive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inactive", value)

    @property
    @pulumi.getter(name="prefSrc")
    def pref_src(self) -> Optional[pulumi.Input[str]]:
        """
        Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
        """
        return pulumi.get(self, "pref_src")

    @pref_src.setter
    def pref_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pref_src", value)

    @property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> Optional[pulumi.Input[str]]:
        """
        Routing table this route belongs to.
        """
        return pulumi.get(self, "routing_table")

    @routing_table.setter
    def routing_table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_table", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[int]]:
        """
        Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def static(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "static")

    @static.setter
    def static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "static", value)

    @property
    @pulumi.getter(name="suppressHwOffload")
    def suppress_hw_offload(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "suppress_hw_offload")

    @suppress_hw_offload.setter
    def suppress_hw_offload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suppress_hw_offload", value)

    @property
    @pulumi.getter(name="targetScope")
    def target_scope(self) -> Optional[pulumi.Input[int]]:
        """
        Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
        """
        return pulumi.get(self, "target_scope")

    @target_scope.setter
    def target_scope(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_scope", value)

    @property
    @pulumi.getter(name="vrfInterface")
    def vrf_interface(self) -> Optional[pulumi.Input[str]]:
        """
        VRF interface name.
        """
        return pulumi.get(self, "vrf_interface")

    @vrf_interface.setter
    def vrf_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_interface", value)


class Route(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 blackhole: Optional[pulumi.Input[bool]] = None,
                 check_gateway: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dst_address: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 pref_src: Optional[pulumi.Input[str]] = None,
                 routing_table: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[int]] = None,
                 target_scope: Optional[pulumi.Input[int]] = None,
                 vrf_interface: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        a_route = routeros.ip.Route("aRoute",
            dst_address="0.0.0.0/0",
            gateway="10.0.0.1")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/route get [print show-ids]]

        ```sh
         $ pulumi import routeros:Ip/route:Route a_route "*0"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] blackhole: It's a blackhole route.
        :param pulumi.Input[str] check_gateway: Currently used check-gateway option.
        :param pulumi.Input[int] distance: Value used in route selection. Routes with smaller distance value are given preference.
        :param pulumi.Input[str] dst_address: IP prefix of route, specifies destination addresses that this route can be used for.
        :param pulumi.Input[str] gateway: Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
        :param pulumi.Input[str] pref_src: Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
        :param pulumi.Input[str] routing_table: Routing table this route belongs to.
        :param pulumi.Input[int] scope: Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
        :param pulumi.Input[int] target_scope: Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
        :param pulumi.Input[str] vrf_interface: VRF interface name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        a_route = routeros.ip.Route("aRoute",
            dst_address="0.0.0.0/0",
            gateway="10.0.0.1")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/route get [print show-ids]]

        ```sh
         $ pulumi import routeros:Ip/route:Route a_route "*0"
        ```

        :param str resource_name: The name of the resource.
        :param RouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 blackhole: Optional[pulumi.Input[bool]] = None,
                 check_gateway: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dst_address: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 pref_src: Optional[pulumi.Input[str]] = None,
                 routing_table: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[int]] = None,
                 target_scope: Optional[pulumi.Input[int]] = None,
                 vrf_interface: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteArgs.__new__(RouteArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["blackhole"] = blackhole
            __props__.__dict__["check_gateway"] = check_gateway
            __props__.__dict__["comment"] = comment
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["distance"] = distance
            __props__.__dict__["dst_address"] = dst_address
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["pref_src"] = pref_src
            __props__.__dict__["routing_table"] = routing_table
            __props__.__dict__["scope"] = scope
            __props__.__dict__["target_scope"] = target_scope
            __props__.__dict__["vrf_interface"] = vrf_interface
            __props__.__dict__["active"] = None
            __props__.__dict__["dhcp"] = None
            __props__.__dict__["dynamic"] = None
            __props__.__dict__["ecmp"] = None
            __props__.__dict__["hw_offloaded"] = None
            __props__.__dict__["immediate_gw"] = None
            __props__.__dict__["inactive"] = None
            __props__.__dict__["static"] = None
            __props__.__dict__["suppress_hw_offload"] = None
        super(Route, __self__).__init__(
            'routeros:Ip/route:Route',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            active: Optional[pulumi.Input[bool]] = None,
            blackhole: Optional[pulumi.Input[bool]] = None,
            check_gateway: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dhcp: Optional[pulumi.Input[bool]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            distance: Optional[pulumi.Input[int]] = None,
            dst_address: Optional[pulumi.Input[str]] = None,
            dynamic: Optional[pulumi.Input[bool]] = None,
            ecmp: Optional[pulumi.Input[bool]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            hw_offloaded: Optional[pulumi.Input[bool]] = None,
            immediate_gw: Optional[pulumi.Input[str]] = None,
            inactive: Optional[pulumi.Input[bool]] = None,
            pref_src: Optional[pulumi.Input[str]] = None,
            routing_table: Optional[pulumi.Input[str]] = None,
            scope: Optional[pulumi.Input[int]] = None,
            static: Optional[pulumi.Input[bool]] = None,
            suppress_hw_offload: Optional[pulumi.Input[bool]] = None,
            target_scope: Optional[pulumi.Input[int]] = None,
            vrf_interface: Optional[pulumi.Input[str]] = None) -> 'Route':
        """
        Get an existing Route resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] active: A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
        :param pulumi.Input[bool] blackhole: It's a blackhole route.
        :param pulumi.Input[str] check_gateway: Currently used check-gateway option.
        :param pulumi.Input[bool] dhcp: A flag indicates whether the route was added by the DHCP service.
        :param pulumi.Input[int] distance: Value used in route selection. Routes with smaller distance value are given preference.
        :param pulumi.Input[str] dst_address: IP prefix of route, specifies destination addresses that this route can be used for.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[bool] ecmp: A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
        :param pulumi.Input[str] gateway: Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
        :param pulumi.Input[bool] hw_offloaded: Indicates whether the route is eligible to be hardware offloaded on supported hardware.
        :param pulumi.Input[str] immediate_gw: Shows actual (resolved) gateway and interface that will be used for packet forwarding.
        :param pulumi.Input[str] pref_src: Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
        :param pulumi.Input[str] routing_table: Routing table this route belongs to.
        :param pulumi.Input[int] scope: Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
        :param pulumi.Input[int] target_scope: Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
        :param pulumi.Input[str] vrf_interface: VRF interface name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteState.__new__(_RouteState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["active"] = active
        __props__.__dict__["blackhole"] = blackhole
        __props__.__dict__["check_gateway"] = check_gateway
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dhcp"] = dhcp
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["distance"] = distance
        __props__.__dict__["dst_address"] = dst_address
        __props__.__dict__["dynamic"] = dynamic
        __props__.__dict__["ecmp"] = ecmp
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["hw_offloaded"] = hw_offloaded
        __props__.__dict__["immediate_gw"] = immediate_gw
        __props__.__dict__["inactive"] = inactive
        __props__.__dict__["pref_src"] = pref_src
        __props__.__dict__["routing_table"] = routing_table
        __props__.__dict__["scope"] = scope
        __props__.__dict__["static"] = static
        __props__.__dict__["suppress_hw_offload"] = suppress_hw_offload
        __props__.__dict__["target_scope"] = target_scope
        __props__.__dict__["vrf_interface"] = vrf_interface
        return Route(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[bool]:
        """
        A flag indicates whether the route is elected as Active and eligible to be added to the FIB.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def blackhole(self) -> pulumi.Output[Optional[bool]]:
        """
        It's a blackhole route.
        """
        return pulumi.get(self, "blackhole")

    @property
    @pulumi.getter(name="checkGateway")
    def check_gateway(self) -> pulumi.Output[Optional[str]]:
        """
        Currently used check-gateway option.
        """
        return pulumi.get(self, "check_gateway")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dhcp(self) -> pulumi.Output[bool]:
        """
        A flag indicates whether the route was added by the DHCP service.
        """
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[Optional[int]]:
        """
        Value used in route selection. Routes with smaller distance value are given preference.
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> pulumi.Output[Optional[str]]:
        """
        IP prefix of route, specifies destination addresses that this route can be used for.
        """
        return pulumi.get(self, "dst_address")

    @property
    @pulumi.getter
    def dynamic(self) -> pulumi.Output[bool]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def ecmp(self) -> pulumi.Output[bool]:
        """
        A flag indicates whether the route is added as an Equal-Cost Multi-Path route in the FIB.
        """
        return pulumi.get(self, "ecmp")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        """
        Array of IP addresses or interface names. Specifies which host or interface packets should be sent to (IP | interface | IP%interface | IP@table[, IP | string, [..]]).
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="hwOffloaded")
    def hw_offloaded(self) -> pulumi.Output[bool]:
        """
        Indicates whether the route is eligible to be hardware offloaded on supported hardware.
        """
        return pulumi.get(self, "hw_offloaded")

    @property
    @pulumi.getter(name="immediateGw")
    def immediate_gw(self) -> pulumi.Output[str]:
        """
        Shows actual (resolved) gateway and interface that will be used for packet forwarding.
        """
        return pulumi.get(self, "immediate_gw")

    @property
    @pulumi.getter
    def inactive(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "inactive")

    @property
    @pulumi.getter(name="prefSrc")
    def pref_src(self) -> pulumi.Output[Optional[str]]:
        """
        Which of the local IP addresses to use for locally originated packets that are sent via this route. Value of this property has no effect on forwarded packets. If value of this property is set to IP address that is not local address of this router then the route will be inactive (in ROS v6, ROS v7 allows IP spoofing).
        """
        return pulumi.get(self, "pref_src")

    @property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> pulumi.Output[Optional[str]]:
        """
        Routing table this route belongs to.
        """
        return pulumi.get(self, "routing_table")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[int]]:
        """
        Used in nexthop resolution. Route can resolve nexthop only through routes that have scope less than or equal to the target-scope of this route.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def static(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "static")

    @property
    @pulumi.getter(name="suppressHwOffload")
    def suppress_hw_offload(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "suppress_hw_offload")

    @property
    @pulumi.getter(name="targetScope")
    def target_scope(self) -> pulumi.Output[Optional[int]]:
        """
        Used in nexthop resolution. This is the maximum value of scope for a route through which a nexthop of this route can be resolved.
        """
        return pulumi.get(self, "target_scope")

    @property
    @pulumi.getter(name="vrfInterface")
    def vrf_interface(self) -> pulumi.Output[str]:
        """
        VRF interface name.
        """
        return pulumi.get(self, "vrf_interface")

