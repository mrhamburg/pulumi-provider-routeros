# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DhcpServerLeaseArgs', 'DhcpServerLease']

@pulumi.input_type
class DhcpServerLeaseArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 mac_address: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address_lists: Optional[pulumi.Input[str]] = None,
                 allow_dual_stack_queue: Optional[pulumi.Input[bool]] = None,
                 always_broadcast: Optional[pulumi.Input[bool]] = None,
                 block_access: Optional[pulumi.Input[bool]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_option: Optional[pulumi.Input[str]] = None,
                 dhcp_option_set: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 insert_queue_before: Optional[pulumi.Input[str]] = None,
                 lease_time: Optional[pulumi.Input[str]] = None,
                 rate_limit: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 use_src_mac: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a DhcpServerLease resource.
        :param pulumi.Input[str] address: The IP address of the DHCP lease to be created.
        :param pulumi.Input[str] mac_address: The MAC addreess of the DHCP lease to be created.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address_lists: Address list to which address will be added if lease is bound.
        :param pulumi.Input[bool] allow_dual_stack_queue: Creates a single simple queue entry for both IPv4 and IPv6 addresses, uses the MAC address and DUID for identification.
        :param pulumi.Input[bool] always_broadcast: Send all replies as broadcasts.
        :param pulumi.Input[bool] block_access: Whether to block access for this DHCP client (true|false).
        :param pulumi.Input[str] client_id: If specified, must match DHCP 'client identifier' option of the request.
        :param pulumi.Input[str] dhcp_option: Add additional DHCP options.
        :param pulumi.Input[str] dhcp_option_set: Add additional set of DHCP options.
        :param pulumi.Input[bool] dynamic: Whether the dhcp lease is static or dynamic. Dynamic leases are not guaranteed to continue to be assigned to that
               specific device. Defaults to false.
        :param pulumi.Input[str] insert_queue_before: Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
        :param pulumi.Input[str] lease_time: Time that the client may use the address. If set to 0s lease will never expire.
        :param pulumi.Input[str] rate_limit: Adds a dynamic simple queue to limit IP's bandwidth to a specified rate. Requires the lease to be static.
        :param pulumi.Input[str] server: Server name which serves this client.
        :param pulumi.Input[bool] use_src_mac: When this option is set server uses source MAC address instead of received CHADDR to assign address.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "mac_address", mac_address)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if address_lists is not None:
            pulumi.set(__self__, "address_lists", address_lists)
        if allow_dual_stack_queue is not None:
            pulumi.set(__self__, "allow_dual_stack_queue", allow_dual_stack_queue)
        if always_broadcast is not None:
            pulumi.set(__self__, "always_broadcast", always_broadcast)
        if block_access is not None:
            pulumi.set(__self__, "block_access", block_access)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dhcp_option is not None:
            pulumi.set(__self__, "dhcp_option", dhcp_option)
        if dhcp_option_set is not None:
            pulumi.set(__self__, "dhcp_option_set", dhcp_option_set)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dynamic is not None:
            pulumi.set(__self__, "dynamic", dynamic)
        if insert_queue_before is not None:
            pulumi.set(__self__, "insert_queue_before", insert_queue_before)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if use_src_mac is not None:
            pulumi.set(__self__, "use_src_mac", use_src_mac)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The IP address of the DHCP lease to be created.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Input[str]:
        """
        The MAC addreess of the DHCP lease to be created.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> Optional[pulumi.Input[str]]:
        """
        Address list to which address will be added if lease is bound.
        """
        return pulumi.get(self, "address_lists")

    @address_lists.setter
    def address_lists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_lists", value)

    @property
    @pulumi.getter(name="allowDualStackQueue")
    def allow_dual_stack_queue(self) -> Optional[pulumi.Input[bool]]:
        """
        Creates a single simple queue entry for both IPv4 and IPv6 addresses, uses the MAC address and DUID for identification.
        """
        return pulumi.get(self, "allow_dual_stack_queue")

    @allow_dual_stack_queue.setter
    def allow_dual_stack_queue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_dual_stack_queue", value)

    @property
    @pulumi.getter(name="alwaysBroadcast")
    def always_broadcast(self) -> Optional[pulumi.Input[bool]]:
        """
        Send all replies as broadcasts.
        """
        return pulumi.get(self, "always_broadcast")

    @always_broadcast.setter
    def always_broadcast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_broadcast", value)

    @property
    @pulumi.getter(name="blockAccess")
    def block_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to block access for this DHCP client (true|false).
        """
        return pulumi.get(self, "block_access")

    @block_access.setter
    def block_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_access", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, must match DHCP 'client identifier' option of the request.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dhcpOption")
    def dhcp_option(self) -> Optional[pulumi.Input[str]]:
        """
        Add additional DHCP options.
        """
        return pulumi.get(self, "dhcp_option")

    @dhcp_option.setter
    def dhcp_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option", value)

    @property
    @pulumi.getter(name="dhcpOptionSet")
    def dhcp_option_set(self) -> Optional[pulumi.Input[str]]:
        """
        Add additional set of DHCP options.
        """
        return pulumi.get(self, "dhcp_option_set")

    @dhcp_option_set.setter
    def dhcp_option_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option_set", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the dhcp lease is static or dynamic. Dynamic leases are not guaranteed to continue to be assigned to that
        specific device. Defaults to false.
        """
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter(name="insertQueueBefore")
    def insert_queue_before(self) -> Optional[pulumi.Input[str]]:
        """
        Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
        """
        return pulumi.get(self, "insert_queue_before")

    @insert_queue_before.setter
    def insert_queue_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_queue_before", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time that the client may use the address. If set to 0s lease will never expire.
        """
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Adds a dynamic simple queue to limit IP's bandwidth to a specified rate. Requires the lease to be static.
        """
        return pulumi.get(self, "rate_limit")

    @rate_limit.setter
    def rate_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_limit", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server name which serves this client.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="useSrcMac")
    def use_src_mac(self) -> Optional[pulumi.Input[bool]]:
        """
        When this option is set server uses source MAC address instead of received CHADDR to assign address.
        """
        return pulumi.get(self, "use_src_mac")

    @use_src_mac.setter
    def use_src_mac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_src_mac", value)


@pulumi.input_type
class _DhcpServerLeaseState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 active_address: Optional[pulumi.Input[str]] = None,
                 active_client_id: Optional[pulumi.Input[str]] = None,
                 active_hostname: Optional[pulumi.Input[str]] = None,
                 active_mac_address: Optional[pulumi.Input[str]] = None,
                 active_server: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 address_lists: Optional[pulumi.Input[str]] = None,
                 agent_circuit_id: Optional[pulumi.Input[str]] = None,
                 agent_remote_id: Optional[pulumi.Input[str]] = None,
                 allow_dual_stack_queue: Optional[pulumi.Input[bool]] = None,
                 always_broadcast: Optional[pulumi.Input[bool]] = None,
                 block_access: Optional[pulumi.Input[bool]] = None,
                 blocked: Optional[pulumi.Input[bool]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_option: Optional[pulumi.Input[str]] = None,
                 dhcp_option_set: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 expires_after: Optional[pulumi.Input[str]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 insert_queue_before: Optional[pulumi.Input[str]] = None,
                 last_seen: Optional[pulumi.Input[str]] = None,
                 lease_time: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 radius: Optional[pulumi.Input[str]] = None,
                 rate_limit: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 src_mac_address: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 use_src_mac: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering DhcpServerLease resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] active_address: The IP address of the machine currently holding the DHCP lease.
        :param pulumi.Input[str] active_client_id: Actual client-id of the client.
        :param pulumi.Input[str] active_hostname: The hostname of the machine currently holding the DHCP lease.
        :param pulumi.Input[str] active_mac_address: The MAC address of of the machine currently holding the DHCP lease.
        :param pulumi.Input[str] active_server: Actual dhcp server, which serves this client.
        :param pulumi.Input[str] address: The IP address of the DHCP lease to be created.
        :param pulumi.Input[str] address_lists: Address list to which address will be added if lease is bound.
        :param pulumi.Input[str] agent_circuit_id: Circuit ID of DHCP relay agent. If each character should be valid ASCII text symbol or else this value is displayed as
               hex dump.
        :param pulumi.Input[str] agent_remote_id: Remote ID, set by DHCP relay agent.
        :param pulumi.Input[bool] allow_dual_stack_queue: Creates a single simple queue entry for both IPv4 and IPv6 addresses, uses the MAC address and DUID for identification.
        :param pulumi.Input[bool] always_broadcast: Send all replies as broadcasts.
        :param pulumi.Input[bool] block_access: Whether to block access for this DHCP client (true|false).
        :param pulumi.Input[bool] blocked: Whether the lease is blocked.
        :param pulumi.Input[str] client_id: If specified, must match DHCP 'client identifier' option of the request.
        :param pulumi.Input[str] dhcp_option: Add additional DHCP options.
        :param pulumi.Input[str] dhcp_option_set: Add additional set of DHCP options.
        :param pulumi.Input[bool] dynamic: Whether the dhcp lease is static or dynamic. Dynamic leases are not guaranteed to continue to be assigned to that
               specific device. Defaults to false.
        :param pulumi.Input[str] expires_after: Time until lease expires.
        :param pulumi.Input[str] host_name: The hostname of the device
        :param pulumi.Input[str] insert_queue_before: Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
        :param pulumi.Input[str] lease_time: Time that the client may use the address. If set to 0s lease will never expire.
        :param pulumi.Input[str] mac_address: The MAC addreess of the DHCP lease to be created.
        :param pulumi.Input[str] radius: Shows if this dynamic lease is authenticated by RADIUS or not.
        :param pulumi.Input[str] rate_limit: Adds a dynamic simple queue to limit IP's bandwidth to a specified rate. Requires the lease to be static.
        :param pulumi.Input[str] server: Server name which serves this client.
        :param pulumi.Input[str] src_mac_address: Source MAC address.
        :param pulumi.Input[str] status: Lease status.
        :param pulumi.Input[bool] use_src_mac: When this option is set server uses source MAC address instead of received CHADDR to assign address.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if active_address is not None:
            pulumi.set(__self__, "active_address", active_address)
        if active_client_id is not None:
            pulumi.set(__self__, "active_client_id", active_client_id)
        if active_hostname is not None:
            pulumi.set(__self__, "active_hostname", active_hostname)
        if active_mac_address is not None:
            pulumi.set(__self__, "active_mac_address", active_mac_address)
        if active_server is not None:
            pulumi.set(__self__, "active_server", active_server)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_lists is not None:
            pulumi.set(__self__, "address_lists", address_lists)
        if agent_circuit_id is not None:
            pulumi.set(__self__, "agent_circuit_id", agent_circuit_id)
        if agent_remote_id is not None:
            pulumi.set(__self__, "agent_remote_id", agent_remote_id)
        if allow_dual_stack_queue is not None:
            pulumi.set(__self__, "allow_dual_stack_queue", allow_dual_stack_queue)
        if always_broadcast is not None:
            pulumi.set(__self__, "always_broadcast", always_broadcast)
        if block_access is not None:
            pulumi.set(__self__, "block_access", block_access)
        if blocked is not None:
            pulumi.set(__self__, "blocked", blocked)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dhcp_option is not None:
            pulumi.set(__self__, "dhcp_option", dhcp_option)
        if dhcp_option_set is not None:
            pulumi.set(__self__, "dhcp_option_set", dhcp_option_set)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dynamic is not None:
            pulumi.set(__self__, "dynamic", dynamic)
        if expires_after is not None:
            pulumi.set(__self__, "expires_after", expires_after)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if insert_queue_before is not None:
            pulumi.set(__self__, "insert_queue_before", insert_queue_before)
        if last_seen is not None:
            pulumi.set(__self__, "last_seen", last_seen)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if radius is not None:
            pulumi.set(__self__, "radius", radius)
        if rate_limit is not None:
            pulumi.set(__self__, "rate_limit", rate_limit)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if src_mac_address is not None:
            pulumi.set(__self__, "src_mac_address", src_mac_address)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if use_src_mac is not None:
            pulumi.set(__self__, "use_src_mac", use_src_mac)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="activeAddress")
    def active_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the machine currently holding the DHCP lease.
        """
        return pulumi.get(self, "active_address")

    @active_address.setter
    def active_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_address", value)

    @property
    @pulumi.getter(name="activeClientId")
    def active_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Actual client-id of the client.
        """
        return pulumi.get(self, "active_client_id")

    @active_client_id.setter
    def active_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_client_id", value)

    @property
    @pulumi.getter(name="activeHostname")
    def active_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname of the machine currently holding the DHCP lease.
        """
        return pulumi.get(self, "active_hostname")

    @active_hostname.setter
    def active_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_hostname", value)

    @property
    @pulumi.getter(name="activeMacAddress")
    def active_mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        The MAC address of of the machine currently holding the DHCP lease.
        """
        return pulumi.get(self, "active_mac_address")

    @active_mac_address.setter
    def active_mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_mac_address", value)

    @property
    @pulumi.getter(name="activeServer")
    def active_server(self) -> Optional[pulumi.Input[str]]:
        """
        Actual dhcp server, which serves this client.
        """
        return pulumi.get(self, "active_server")

    @active_server.setter
    def active_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_server", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the DHCP lease to be created.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> Optional[pulumi.Input[str]]:
        """
        Address list to which address will be added if lease is bound.
        """
        return pulumi.get(self, "address_lists")

    @address_lists.setter
    def address_lists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_lists", value)

    @property
    @pulumi.getter(name="agentCircuitId")
    def agent_circuit_id(self) -> Optional[pulumi.Input[str]]:
        """
        Circuit ID of DHCP relay agent. If each character should be valid ASCII text symbol or else this value is displayed as
        hex dump.
        """
        return pulumi.get(self, "agent_circuit_id")

    @agent_circuit_id.setter
    def agent_circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_circuit_id", value)

    @property
    @pulumi.getter(name="agentRemoteId")
    def agent_remote_id(self) -> Optional[pulumi.Input[str]]:
        """
        Remote ID, set by DHCP relay agent.
        """
        return pulumi.get(self, "agent_remote_id")

    @agent_remote_id.setter
    def agent_remote_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_remote_id", value)

    @property
    @pulumi.getter(name="allowDualStackQueue")
    def allow_dual_stack_queue(self) -> Optional[pulumi.Input[bool]]:
        """
        Creates a single simple queue entry for both IPv4 and IPv6 addresses, uses the MAC address and DUID for identification.
        """
        return pulumi.get(self, "allow_dual_stack_queue")

    @allow_dual_stack_queue.setter
    def allow_dual_stack_queue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_dual_stack_queue", value)

    @property
    @pulumi.getter(name="alwaysBroadcast")
    def always_broadcast(self) -> Optional[pulumi.Input[bool]]:
        """
        Send all replies as broadcasts.
        """
        return pulumi.get(self, "always_broadcast")

    @always_broadcast.setter
    def always_broadcast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_broadcast", value)

    @property
    @pulumi.getter(name="blockAccess")
    def block_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to block access for this DHCP client (true|false).
        """
        return pulumi.get(self, "block_access")

    @block_access.setter
    def block_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_access", value)

    @property
    @pulumi.getter
    def blocked(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the lease is blocked.
        """
        return pulumi.get(self, "blocked")

    @blocked.setter
    def blocked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blocked", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, must match DHCP 'client identifier' option of the request.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dhcpOption")
    def dhcp_option(self) -> Optional[pulumi.Input[str]]:
        """
        Add additional DHCP options.
        """
        return pulumi.get(self, "dhcp_option")

    @dhcp_option.setter
    def dhcp_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option", value)

    @property
    @pulumi.getter(name="dhcpOptionSet")
    def dhcp_option_set(self) -> Optional[pulumi.Input[str]]:
        """
        Add additional set of DHCP options.
        """
        return pulumi.get(self, "dhcp_option_set")

    @dhcp_option_set.setter
    def dhcp_option_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option_set", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the dhcp lease is static or dynamic. Dynamic leases are not guaranteed to continue to be assigned to that
        specific device. Defaults to false.
        """
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter(name="expiresAfter")
    def expires_after(self) -> Optional[pulumi.Input[str]]:
        """
        Time until lease expires.
        """
        return pulumi.get(self, "expires_after")

    @expires_after.setter
    def expires_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_after", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname of the device
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="insertQueueBefore")
    def insert_queue_before(self) -> Optional[pulumi.Input[str]]:
        """
        Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
        """
        return pulumi.get(self, "insert_queue_before")

    @insert_queue_before.setter
    def insert_queue_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_queue_before", value)

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_seen")

    @last_seen.setter
    def last_seen(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_seen", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time that the client may use the address. If set to 0s lease will never expire.
        """
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        The MAC addreess of the DHCP lease to be created.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def radius(self) -> Optional[pulumi.Input[str]]:
        """
        Shows if this dynamic lease is authenticated by RADIUS or not.
        """
        return pulumi.get(self, "radius")

    @radius.setter
    def radius(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius", value)

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Adds a dynamic simple queue to limit IP's bandwidth to a specified rate. Requires the lease to be static.
        """
        return pulumi.get(self, "rate_limit")

    @rate_limit.setter
    def rate_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_limit", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server name which serves this client.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="srcMacAddress")
    def src_mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        Source MAC address.
        """
        return pulumi.get(self, "src_mac_address")

    @src_mac_address.setter
    def src_mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_mac_address", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Lease status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="useSrcMac")
    def use_src_mac(self) -> Optional[pulumi.Input[bool]]:
        """
        When this option is set server uses source MAC address instead of received CHADDR to assign address.
        """
        return pulumi.get(self, "use_src_mac")

    @use_src_mac.setter
    def use_src_mac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_src_mac", value)


class DhcpServerLease(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 address_lists: Optional[pulumi.Input[str]] = None,
                 allow_dual_stack_queue: Optional[pulumi.Input[bool]] = None,
                 always_broadcast: Optional[pulumi.Input[bool]] = None,
                 block_access: Optional[pulumi.Input[bool]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_option: Optional[pulumi.Input[str]] = None,
                 dhcp_option_set: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 insert_queue_before: Optional[pulumi.Input[str]] = None,
                 lease_time: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 rate_limit: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 use_src_mac: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## # Ip.DhcpServerLease (Resource)

        ***

        #### This is an alias for backwards compatibility between plugin versions.
        Please see documentation for Ip.DhcpIpServerLease

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: The IP address of the DHCP lease to be created.
        :param pulumi.Input[str] address_lists: Address list to which address will be added if lease is bound.
        :param pulumi.Input[bool] allow_dual_stack_queue: Creates a single simple queue entry for both IPv4 and IPv6 addresses, uses the MAC address and DUID for identification.
        :param pulumi.Input[bool] always_broadcast: Send all replies as broadcasts.
        :param pulumi.Input[bool] block_access: Whether to block access for this DHCP client (true|false).
        :param pulumi.Input[str] client_id: If specified, must match DHCP 'client identifier' option of the request.
        :param pulumi.Input[str] dhcp_option: Add additional DHCP options.
        :param pulumi.Input[str] dhcp_option_set: Add additional set of DHCP options.
        :param pulumi.Input[bool] dynamic: Whether the dhcp lease is static or dynamic. Dynamic leases are not guaranteed to continue to be assigned to that
               specific device. Defaults to false.
        :param pulumi.Input[str] insert_queue_before: Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
        :param pulumi.Input[str] lease_time: Time that the client may use the address. If set to 0s lease will never expire.
        :param pulumi.Input[str] mac_address: The MAC addreess of the DHCP lease to be created.
        :param pulumi.Input[str] rate_limit: Adds a dynamic simple queue to limit IP's bandwidth to a specified rate. Requires the lease to be static.
        :param pulumi.Input[str] server: Server name which serves this client.
        :param pulumi.Input[bool] use_src_mac: When this option is set server uses source MAC address instead of received CHADDR to assign address.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DhcpServerLeaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Ip.DhcpServerLease (Resource)

        ***

        #### This is an alias for backwards compatibility between plugin versions.
        Please see documentation for Ip.DhcpIpServerLease

        :param str resource_name: The name of the resource.
        :param DhcpServerLeaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DhcpServerLeaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 address_lists: Optional[pulumi.Input[str]] = None,
                 allow_dual_stack_queue: Optional[pulumi.Input[bool]] = None,
                 always_broadcast: Optional[pulumi.Input[bool]] = None,
                 block_access: Optional[pulumi.Input[bool]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_option: Optional[pulumi.Input[str]] = None,
                 dhcp_option_set: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 insert_queue_before: Optional[pulumi.Input[str]] = None,
                 lease_time: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 rate_limit: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 use_src_mac: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DhcpServerLeaseArgs.__new__(DhcpServerLeaseArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            if address is None and not opts.urn:
                raise TypeError("Missing required property 'address'")
            __props__.__dict__["address"] = address
            __props__.__dict__["address_lists"] = address_lists
            __props__.__dict__["allow_dual_stack_queue"] = allow_dual_stack_queue
            __props__.__dict__["always_broadcast"] = always_broadcast
            __props__.__dict__["block_access"] = block_access
            __props__.__dict__["client_id"] = client_id
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dhcp_option"] = dhcp_option
            __props__.__dict__["dhcp_option_set"] = dhcp_option_set
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["dynamic"] = dynamic
            __props__.__dict__["insert_queue_before"] = insert_queue_before
            __props__.__dict__["lease_time"] = lease_time
            if mac_address is None and not opts.urn:
                raise TypeError("Missing required property 'mac_address'")
            __props__.__dict__["mac_address"] = mac_address
            __props__.__dict__["rate_limit"] = rate_limit
            __props__.__dict__["server"] = server
            __props__.__dict__["use_src_mac"] = use_src_mac
            __props__.__dict__["active_address"] = None
            __props__.__dict__["active_client_id"] = None
            __props__.__dict__["active_hostname"] = None
            __props__.__dict__["active_mac_address"] = None
            __props__.__dict__["active_server"] = None
            __props__.__dict__["agent_circuit_id"] = None
            __props__.__dict__["agent_remote_id"] = None
            __props__.__dict__["blocked"] = None
            __props__.__dict__["expires_after"] = None
            __props__.__dict__["host_name"] = None
            __props__.__dict__["last_seen"] = None
            __props__.__dict__["radius"] = None
            __props__.__dict__["src_mac_address"] = None
            __props__.__dict__["status"] = None
        super(DhcpServerLease, __self__).__init__(
            'routeros:Ip/dhcpServerLease:DhcpServerLease',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            active_address: Optional[pulumi.Input[str]] = None,
            active_client_id: Optional[pulumi.Input[str]] = None,
            active_hostname: Optional[pulumi.Input[str]] = None,
            active_mac_address: Optional[pulumi.Input[str]] = None,
            active_server: Optional[pulumi.Input[str]] = None,
            address: Optional[pulumi.Input[str]] = None,
            address_lists: Optional[pulumi.Input[str]] = None,
            agent_circuit_id: Optional[pulumi.Input[str]] = None,
            agent_remote_id: Optional[pulumi.Input[str]] = None,
            allow_dual_stack_queue: Optional[pulumi.Input[bool]] = None,
            always_broadcast: Optional[pulumi.Input[bool]] = None,
            block_access: Optional[pulumi.Input[bool]] = None,
            blocked: Optional[pulumi.Input[bool]] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dhcp_option: Optional[pulumi.Input[str]] = None,
            dhcp_option_set: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            dynamic: Optional[pulumi.Input[bool]] = None,
            expires_after: Optional[pulumi.Input[str]] = None,
            host_name: Optional[pulumi.Input[str]] = None,
            insert_queue_before: Optional[pulumi.Input[str]] = None,
            last_seen: Optional[pulumi.Input[str]] = None,
            lease_time: Optional[pulumi.Input[str]] = None,
            mac_address: Optional[pulumi.Input[str]] = None,
            radius: Optional[pulumi.Input[str]] = None,
            rate_limit: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            src_mac_address: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            use_src_mac: Optional[pulumi.Input[bool]] = None) -> 'DhcpServerLease':
        """
        Get an existing DhcpServerLease resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] active_address: The IP address of the machine currently holding the DHCP lease.
        :param pulumi.Input[str] active_client_id: Actual client-id of the client.
        :param pulumi.Input[str] active_hostname: The hostname of the machine currently holding the DHCP lease.
        :param pulumi.Input[str] active_mac_address: The MAC address of of the machine currently holding the DHCP lease.
        :param pulumi.Input[str] active_server: Actual dhcp server, which serves this client.
        :param pulumi.Input[str] address: The IP address of the DHCP lease to be created.
        :param pulumi.Input[str] address_lists: Address list to which address will be added if lease is bound.
        :param pulumi.Input[str] agent_circuit_id: Circuit ID of DHCP relay agent. If each character should be valid ASCII text symbol or else this value is displayed as
               hex dump.
        :param pulumi.Input[str] agent_remote_id: Remote ID, set by DHCP relay agent.
        :param pulumi.Input[bool] allow_dual_stack_queue: Creates a single simple queue entry for both IPv4 and IPv6 addresses, uses the MAC address and DUID for identification.
        :param pulumi.Input[bool] always_broadcast: Send all replies as broadcasts.
        :param pulumi.Input[bool] block_access: Whether to block access for this DHCP client (true|false).
        :param pulumi.Input[bool] blocked: Whether the lease is blocked.
        :param pulumi.Input[str] client_id: If specified, must match DHCP 'client identifier' option of the request.
        :param pulumi.Input[str] dhcp_option: Add additional DHCP options.
        :param pulumi.Input[str] dhcp_option_set: Add additional set of DHCP options.
        :param pulumi.Input[bool] dynamic: Whether the dhcp lease is static or dynamic. Dynamic leases are not guaranteed to continue to be assigned to that
               specific device. Defaults to false.
        :param pulumi.Input[str] expires_after: Time until lease expires.
        :param pulumi.Input[str] host_name: The hostname of the device
        :param pulumi.Input[str] insert_queue_before: Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
        :param pulumi.Input[str] lease_time: Time that the client may use the address. If set to 0s lease will never expire.
        :param pulumi.Input[str] mac_address: The MAC addreess of the DHCP lease to be created.
        :param pulumi.Input[str] radius: Shows if this dynamic lease is authenticated by RADIUS or not.
        :param pulumi.Input[str] rate_limit: Adds a dynamic simple queue to limit IP's bandwidth to a specified rate. Requires the lease to be static.
        :param pulumi.Input[str] server: Server name which serves this client.
        :param pulumi.Input[str] src_mac_address: Source MAC address.
        :param pulumi.Input[str] status: Lease status.
        :param pulumi.Input[bool] use_src_mac: When this option is set server uses source MAC address instead of received CHADDR to assign address.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DhcpServerLeaseState.__new__(_DhcpServerLeaseState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["active_address"] = active_address
        __props__.__dict__["active_client_id"] = active_client_id
        __props__.__dict__["active_hostname"] = active_hostname
        __props__.__dict__["active_mac_address"] = active_mac_address
        __props__.__dict__["active_server"] = active_server
        __props__.__dict__["address"] = address
        __props__.__dict__["address_lists"] = address_lists
        __props__.__dict__["agent_circuit_id"] = agent_circuit_id
        __props__.__dict__["agent_remote_id"] = agent_remote_id
        __props__.__dict__["allow_dual_stack_queue"] = allow_dual_stack_queue
        __props__.__dict__["always_broadcast"] = always_broadcast
        __props__.__dict__["block_access"] = block_access
        __props__.__dict__["blocked"] = blocked
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dhcp_option"] = dhcp_option
        __props__.__dict__["dhcp_option_set"] = dhcp_option_set
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["dynamic"] = dynamic
        __props__.__dict__["expires_after"] = expires_after
        __props__.__dict__["host_name"] = host_name
        __props__.__dict__["insert_queue_before"] = insert_queue_before
        __props__.__dict__["last_seen"] = last_seen
        __props__.__dict__["lease_time"] = lease_time
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["radius"] = radius
        __props__.__dict__["rate_limit"] = rate_limit
        __props__.__dict__["server"] = server
        __props__.__dict__["src_mac_address"] = src_mac_address
        __props__.__dict__["status"] = status
        __props__.__dict__["use_src_mac"] = use_src_mac
        return DhcpServerLease(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter(name="activeAddress")
    def active_address(self) -> pulumi.Output[str]:
        """
        The IP address of the machine currently holding the DHCP lease.
        """
        return pulumi.get(self, "active_address")

    @property
    @pulumi.getter(name="activeClientId")
    def active_client_id(self) -> pulumi.Output[str]:
        """
        Actual client-id of the client.
        """
        return pulumi.get(self, "active_client_id")

    @property
    @pulumi.getter(name="activeHostname")
    def active_hostname(self) -> pulumi.Output[str]:
        """
        The hostname of the machine currently holding the DHCP lease.
        """
        return pulumi.get(self, "active_hostname")

    @property
    @pulumi.getter(name="activeMacAddress")
    def active_mac_address(self) -> pulumi.Output[str]:
        """
        The MAC address of of the machine currently holding the DHCP lease.
        """
        return pulumi.get(self, "active_mac_address")

    @property
    @pulumi.getter(name="activeServer")
    def active_server(self) -> pulumi.Output[str]:
        """
        Actual dhcp server, which serves this client.
        """
        return pulumi.get(self, "active_server")

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        The IP address of the DHCP lease to be created.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> pulumi.Output[Optional[str]]:
        """
        Address list to which address will be added if lease is bound.
        """
        return pulumi.get(self, "address_lists")

    @property
    @pulumi.getter(name="agentCircuitId")
    def agent_circuit_id(self) -> pulumi.Output[str]:
        """
        Circuit ID of DHCP relay agent. If each character should be valid ASCII text symbol or else this value is displayed as
        hex dump.
        """
        return pulumi.get(self, "agent_circuit_id")

    @property
    @pulumi.getter(name="agentRemoteId")
    def agent_remote_id(self) -> pulumi.Output[str]:
        """
        Remote ID, set by DHCP relay agent.
        """
        return pulumi.get(self, "agent_remote_id")

    @property
    @pulumi.getter(name="allowDualStackQueue")
    def allow_dual_stack_queue(self) -> pulumi.Output[Optional[bool]]:
        """
        Creates a single simple queue entry for both IPv4 and IPv6 addresses, uses the MAC address and DUID for identification.
        """
        return pulumi.get(self, "allow_dual_stack_queue")

    @property
    @pulumi.getter(name="alwaysBroadcast")
    def always_broadcast(self) -> pulumi.Output[Optional[bool]]:
        """
        Send all replies as broadcasts.
        """
        return pulumi.get(self, "always_broadcast")

    @property
    @pulumi.getter(name="blockAccess")
    def block_access(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to block access for this DHCP client (true|false).
        """
        return pulumi.get(self, "block_access")

    @property
    @pulumi.getter
    def blocked(self) -> pulumi.Output[bool]:
        """
        Whether the lease is blocked.
        """
        return pulumi.get(self, "blocked")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[Optional[str]]:
        """
        If specified, must match DHCP 'client identifier' option of the request.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dhcpOption")
    def dhcp_option(self) -> pulumi.Output[Optional[str]]:
        """
        Add additional DHCP options.
        """
        return pulumi.get(self, "dhcp_option")

    @property
    @pulumi.getter(name="dhcpOptionSet")
    def dhcp_option_set(self) -> pulumi.Output[Optional[str]]:
        """
        Add additional set of DHCP options.
        """
        return pulumi.get(self, "dhcp_option_set")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dynamic(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the dhcp lease is static or dynamic. Dynamic leases are not guaranteed to continue to be assigned to that
        specific device. Defaults to false.
        """
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter(name="expiresAfter")
    def expires_after(self) -> pulumi.Output[str]:
        """
        Time until lease expires.
        """
        return pulumi.get(self, "expires_after")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[str]:
        """
        The hostname of the device
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="insertQueueBefore")
    def insert_queue_before(self) -> pulumi.Output[Optional[str]]:
        """
        Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
        """
        return pulumi.get(self, "insert_queue_before")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> pulumi.Output[Optional[str]]:
        """
        Time that the client may use the address. If set to 0s lease will never expire.
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[str]:
        """
        The MAC addreess of the DHCP lease to be created.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def radius(self) -> pulumi.Output[str]:
        """
        Shows if this dynamic lease is authenticated by RADIUS or not.
        """
        return pulumi.get(self, "radius")

    @property
    @pulumi.getter(name="rateLimit")
    def rate_limit(self) -> pulumi.Output[Optional[str]]:
        """
        Adds a dynamic simple queue to limit IP's bandwidth to a specified rate. Requires the lease to be static.
        """
        return pulumi.get(self, "rate_limit")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[Optional[str]]:
        """
        Server name which serves this client.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="srcMacAddress")
    def src_mac_address(self) -> pulumi.Output[str]:
        """
        Source MAC address.
        """
        return pulumi.get(self, "src_mac_address")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Lease status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="useSrcMac")
    def use_src_mac(self) -> pulumi.Output[Optional[bool]]:
        """
        When this option is set server uses source MAC address instead of received CHADDR to assign address.
        """
        return pulumi.get(self, "use_src_mac")

