# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetFirewallResult',
    'AwaitableGetFirewallResult',
    'get_firewall',
    'get_firewall_output',
]

@pulumi.output_type
class GetFirewallResult:
    """
    A collection of values returned by getFirewall.
    """
    def __init__(__self__, address_lists=None, id=None, mangles=None, nats=None, rules=None):
        if address_lists and not isinstance(address_lists, list):
            raise TypeError("Expected argument 'address_lists' to be a list")
        pulumi.set(__self__, "address_lists", address_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mangles and not isinstance(mangles, list):
            raise TypeError("Expected argument 'mangles' to be a list")
        pulumi.set(__self__, "mangles", mangles)
        if nats and not isinstance(nats, list):
            raise TypeError("Expected argument 'nats' to be a list")
        pulumi.set(__self__, "nats", nats)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="addressLists")
    def address_lists(self) -> Sequence['outputs.GetFirewallAddressListResult']:
        return pulumi.get(self, "address_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mangles(self) -> Sequence['outputs.GetFirewallMangleResult']:
        return pulumi.get(self, "mangles")

    @property
    @pulumi.getter
    def nats(self) -> Sequence['outputs.GetFirewallNatResult']:
        return pulumi.get(self, "nats")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetFirewallRuleResult']:
        return pulumi.get(self, "rules")


class AwaitableGetFirewallResult(GetFirewallResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallResult(
            address_lists=self.address_lists,
            id=self.id,
            mangles=self.mangles,
            nats=self.nats,
            rules=self.rules)


def get_firewall(address_lists: Optional[Sequence[pulumi.InputType['GetFirewallAddressListArgs']]] = None,
                 mangles: Optional[Sequence[pulumi.InputType['GetFirewallMangleArgs']]] = None,
                 nats: Optional[Sequence[pulumi.InputType['GetFirewallNatArgs']]] = None,
                 rules: Optional[Sequence[pulumi.InputType['GetFirewallRuleArgs']]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallResult:
    """
    ## # ip_get_firewall (Data Source)

    This datasource contains all supported firewall resources:
    - address_list
    - nat
    - mangle
    - rules (aka filter)
    """
    __args__ = dict()
    __args__['addressLists'] = address_lists
    __args__['mangles'] = mangles
    __args__['nats'] = nats
    __args__['rules'] = rules
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('routeros:Ip/getFirewall:getFirewall', __args__, opts=opts, typ=GetFirewallResult).value

    return AwaitableGetFirewallResult(
        address_lists=__ret__.address_lists,
        id=__ret__.id,
        mangles=__ret__.mangles,
        nats=__ret__.nats,
        rules=__ret__.rules)


@_utilities.lift_output_func(get_firewall)
def get_firewall_output(address_lists: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetFirewallAddressListArgs']]]]] = None,
                        mangles: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetFirewallMangleArgs']]]]] = None,
                        nats: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetFirewallNatArgs']]]]] = None,
                        rules: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetFirewallRuleArgs']]]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallResult]:
    """
    ## # ip_get_firewall (Data Source)

    This datasource contains all supported firewall resources:
    - address_list
    - nat
    - mangle
    - rules (aka filter)
    """
    ...
