# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BridgeArgs', 'Bridge']

@pulumi.input_type
class BridgeArgs:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 add_dhcp_option82: Optional[pulumi.Input[bool]] = None,
                 admin_mac: Optional[pulumi.Input[str]] = None,
                 ageing_time: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 arp_timeout: Optional[pulumi.Input[str]] = None,
                 auto_mac: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 ether_type: Optional[pulumi.Input[str]] = None,
                 fast_forward: Optional[pulumi.Input[bool]] = None,
                 forward_delay: Optional[pulumi.Input[str]] = None,
                 frame_types: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[bool]] = None,
                 igmp_version: Optional[pulumi.Input[int]] = None,
                 ingress_filtering: Optional[pulumi.Input[bool]] = None,
                 last_member_interval: Optional[pulumi.Input[str]] = None,
                 last_member_query_count: Optional[pulumi.Input[int]] = None,
                 max_hops: Optional[pulumi.Input[int]] = None,
                 max_message_age: Optional[pulumi.Input[str]] = None,
                 membership_interval: Optional[pulumi.Input[str]] = None,
                 mld_version: Optional[pulumi.Input[int]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 multicast_querier: Optional[pulumi.Input[bool]] = None,
                 multicast_router: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 protocol_mode: Optional[pulumi.Input[str]] = None,
                 pvid: Optional[pulumi.Input[int]] = None,
                 querier_interval: Optional[pulumi.Input[str]] = None,
                 query_interval: Optional[pulumi.Input[str]] = None,
                 query_response_interval: Optional[pulumi.Input[str]] = None,
                 region_name: Optional[pulumi.Input[str]] = None,
                 region_revision: Optional[pulumi.Input[int]] = None,
                 startup_query_count: Optional[pulumi.Input[int]] = None,
                 startup_query_interval: Optional[pulumi.Input[str]] = None,
                 transmit_hold_count: Optional[pulumi.Input[int]] = None,
                 vlan_filtering: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Bridge resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] add_dhcp_option82: Whether to add DHCP Option-82 information (Agent Remote ID and Agent Circuit ID) to DHCP packets. Can be used together
               with Option-82 capable DHCP server to assign IP addresses and implement policies. This property only has effect when
               dhcp-snooping is set to yes.
        :param pulumi.Input[str] admin_mac: Static MAC address of the bridge. This property only has effect when auto-mac is set to no.
        :param pulumi.Input[str] ageing_time: How long a host's information will be kept in the bridge database.
        :param pulumi.Input[str] arp: ARP resolution protocol mode.
        :param pulumi.Input[str] arp_timeout: ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
               the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
               minutes, hours or days. If no postfix is set then seconds (s) is used.
        :param pulumi.Input[bool] auto_mac: Automatically select one MAC address of bridge ports as a bridge MAC address, bridge MAC will be chosen from the first
               added bridge port. After a device reboot, the bridge MAC can change depending on the port-number.
        :param pulumi.Input[str] ether_type: This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] forward_delay: Time which is spent during the initialization phase of the bridge interface (i.e., after router startup or enabling the
               interface) in listening/learning state before the bridge will start functioning normally.
        :param pulumi.Input[str] frame_types: Specifies allowed frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] igmp_snooping: Enables multicast group and port learning to prevent multicast traffic from flooding all interfaces in a bridge.
        :param pulumi.Input[int] igmp_version: Selects the IGMP version in which IGMP general membership queries will be generated. This property only has effect when
               igmp-snooping is set to yes.
        :param pulumi.Input[bool] ingress_filtering: Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
               bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
               property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] last_member_interval: If a port has fast-leave set to no and a bridge port receives a IGMP Leave message, then a IGMP Snooping enabled bridge
               will send a IGMP query to make sure that no devices has subscribed to a certain multicast stream on a bridge port.
        :param pulumi.Input[int] last_member_query_count: How many times should last-member-interval pass until a IGMP Snooping bridge will stop forwarding a certain multicast
               stream. This property only has effect when igmp-snooping is set to yes.
        :param pulumi.Input[int] max_hops: Bridge count which BPDU can pass in a MSTP enabled network in the same region before BPDU is being ignored. This
               property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[str] max_message_age: Changes the Max Age value in BPDU packets, which is transmitted by the root bridge. This property only has effect when
               protocol-mode is set to stp or rstp. Value: 6s..40s
        :param pulumi.Input[str] membership_interval: Amount of time after an entry in the Multicast Database (MDB) is removed if a IGMP membership report is not received on
               a certain port. This property only has effect when igmp-snooping is set to yes.
        :param pulumi.Input[int] mld_version: Selects the MLD version. Version 2 adds support for source-specific multicast. This property only has effect when
               RouterOS IPv6 package is enabled and igmp-snooping is set to yes.
        :param pulumi.Input[str] mtu: The default bridge MTU value without any bridge ports added is 1500. The MTU value can be set manually, but it cannot
               exceed the bridge L2MTU or the lowest bridge port L2MTU. If a new bridge port is added with L2MTU which is smaller than
               the actual-mtu of the bridge (set by the mtu property), then manually set value will be ignored and the bridge will act
               as if mtu=auto is set.
        :param pulumi.Input[bool] multicast_querier: Multicast querier generates IGMP general membership queries to which all IGMP capable devices respond with an IGMP
               membership report, usually a PIM (multicast) router or IGMP proxy generates these queries. This property only has an
               effect when igmp-snooping is set to yes. Additionally, the igmp-snooping should be disabled/enabled after changing
               multicast-querier property.
        :param pulumi.Input[str] multicast_router: A multicast router port is a port where a multicast router or querier is connected. On this port, unregistered multicast
               streams and IGMP/MLD membership reports will be sent. This setting changes the state of the multicast router for a
               bridge interface itself. This property can be used to send IGMP/MLD membership reports and multicast traffic to the
               bridge interface for further multicast routing or proxying. This property only has an effect when igmp-snooping is set
               to yes.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] priority: Bridge priority, used by STP to determine root bridge, used by MSTP to determine CIST and IST regional root bridge. This
               property has no effect when protocol-mode is set to none.
        :param pulumi.Input[str] protocol_mode: Select Spanning tree protocol (STP) or Rapid spanning tree protocol (RSTP) to ensure a loop-free topology for any
               bridged LAN.
        :param pulumi.Input[int] pvid: Port VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. It applies e.g. to frames sent
               from bridge IP and destined to a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] querier_interval: Used to change the interval how often a bridge checks if it is the active multicast querier. This property only has
               effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] query_interval: Used to change the interval how often IGMP general membership queries are sent out. This property only has effect when
               igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] query_response_interval: Interval in which a IGMP capable device must reply to a IGMP query with a IGMP membership report. This property only has
               effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] region_name: MSTP region name. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[int] region_revision: MSTP configuration revision number. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[int] startup_query_count: Specifies how many times must startup-query-interval pass until the bridge starts sending out IGMP general membership
               queries periodically. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] startup_query_interval: Used to change the amount of time after a bridge starts sending out IGMP general membership queries after the bridge is
               enabled. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[int] transmit_hold_count: The Transmit Hold Count used by the Port Transmit state machine to limit transmission rate.
        :param pulumi.Input[bool] vlan_filtering: Globally enables or disables VLAN functionality for bridge.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if add_dhcp_option82 is not None:
            pulumi.set(__self__, "add_dhcp_option82", add_dhcp_option82)
        if admin_mac is not None:
            pulumi.set(__self__, "admin_mac", admin_mac)
        if ageing_time is not None:
            pulumi.set(__self__, "ageing_time", ageing_time)
        if arp is not None:
            pulumi.set(__self__, "arp", arp)
        if arp_timeout is not None:
            pulumi.set(__self__, "arp_timeout", arp_timeout)
        if auto_mac is not None:
            pulumi.set(__self__, "auto_mac", auto_mac)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dhcp_snooping is not None:
            pulumi.set(__self__, "dhcp_snooping", dhcp_snooping)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if ether_type is not None:
            pulumi.set(__self__, "ether_type", ether_type)
        if fast_forward is not None:
            pulumi.set(__self__, "fast_forward", fast_forward)
        if forward_delay is not None:
            pulumi.set(__self__, "forward_delay", forward_delay)
        if frame_types is not None:
            pulumi.set(__self__, "frame_types", frame_types)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if igmp_version is not None:
            pulumi.set(__self__, "igmp_version", igmp_version)
        if ingress_filtering is not None:
            pulumi.set(__self__, "ingress_filtering", ingress_filtering)
        if last_member_interval is not None:
            pulumi.set(__self__, "last_member_interval", last_member_interval)
        if last_member_query_count is not None:
            pulumi.set(__self__, "last_member_query_count", last_member_query_count)
        if max_hops is not None:
            pulumi.set(__self__, "max_hops", max_hops)
        if max_message_age is not None:
            pulumi.set(__self__, "max_message_age", max_message_age)
        if membership_interval is not None:
            pulumi.set(__self__, "membership_interval", membership_interval)
        if mld_version is not None:
            pulumi.set(__self__, "mld_version", mld_version)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if multicast_querier is not None:
            pulumi.set(__self__, "multicast_querier", multicast_querier)
        if multicast_router is not None:
            pulumi.set(__self__, "multicast_router", multicast_router)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol_mode is not None:
            pulumi.set(__self__, "protocol_mode", protocol_mode)
        if pvid is not None:
            pulumi.set(__self__, "pvid", pvid)
        if querier_interval is not None:
            pulumi.set(__self__, "querier_interval", querier_interval)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if query_response_interval is not None:
            pulumi.set(__self__, "query_response_interval", query_response_interval)
        if region_name is not None:
            pulumi.set(__self__, "region_name", region_name)
        if region_revision is not None:
            pulumi.set(__self__, "region_revision", region_revision)
        if startup_query_count is not None:
            pulumi.set(__self__, "startup_query_count", startup_query_count)
        if startup_query_interval is not None:
            pulumi.set(__self__, "startup_query_interval", startup_query_interval)
        if transmit_hold_count is not None:
            pulumi.set(__self__, "transmit_hold_count", transmit_hold_count)
        if vlan_filtering is not None:
            pulumi.set(__self__, "vlan_filtering", vlan_filtering)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="addDhcpOption82")
    def add_dhcp_option82(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to add DHCP Option-82 information (Agent Remote ID and Agent Circuit ID) to DHCP packets. Can be used together
        with Option-82 capable DHCP server to assign IP addresses and implement policies. This property only has effect when
        dhcp-snooping is set to yes.
        """
        return pulumi.get(self, "add_dhcp_option82")

    @add_dhcp_option82.setter
    def add_dhcp_option82(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_dhcp_option82", value)

    @property
    @pulumi.getter(name="adminMac")
    def admin_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Static MAC address of the bridge. This property only has effect when auto-mac is set to no.
        """
        return pulumi.get(self, "admin_mac")

    @admin_mac.setter
    def admin_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_mac", value)

    @property
    @pulumi.getter(name="ageingTime")
    def ageing_time(self) -> Optional[pulumi.Input[str]]:
        """
        How long a host's information will be kept in the bridge database.
        """
        return pulumi.get(self, "ageing_time")

    @ageing_time.setter
    def ageing_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ageing_time", value)

    @property
    @pulumi.getter
    def arp(self) -> Optional[pulumi.Input[str]]:
        """
        ARP resolution protocol mode.
        """
        return pulumi.get(self, "arp")

    @arp.setter
    def arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp", value)

    @property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
        the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
        minutes, hours or days. If no postfix is set then seconds (s) is used.
        """
        return pulumi.get(self, "arp_timeout")

    @arp_timeout.setter
    def arp_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_timeout", value)

    @property
    @pulumi.getter(name="autoMac")
    def auto_mac(self) -> Optional[pulumi.Input[bool]]:
        """
        Automatically select one MAC address of bridge ports as a bridge MAC address, bridge MAC will be chosen from the first
        added bridge port. After a device reboot, the bridge MAC can change depending on the port-number.
        """
        return pulumi.get(self, "auto_mac")

    @auto_mac.setter
    def auto_mac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_mac", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dhcp_snooping")

    @dhcp_snooping.setter
    def dhcp_snooping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp_snooping", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="etherType")
    def ether_type(self) -> Optional[pulumi.Input[str]]:
        """
        This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "ether_type")

    @ether_type.setter
    def ether_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ether_type", value)

    @property
    @pulumi.getter(name="fastForward")
    def fast_forward(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fast_forward")

    @fast_forward.setter
    def fast_forward(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fast_forward", value)

    @property
    @pulumi.getter(name="forwardDelay")
    def forward_delay(self) -> Optional[pulumi.Input[str]]:
        """
        Time which is spent during the initialization phase of the bridge interface (i.e., after router startup or enabling the
        interface) in listening/learning state before the bridge will start functioning normally.
        """
        return pulumi.get(self, "forward_delay")

    @forward_delay.setter
    def forward_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_delay", value)

    @property
    @pulumi.getter(name="frameTypes")
    def frame_types(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies allowed frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "frame_types")

    @frame_types.setter
    def frame_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frame_types", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables multicast group and port learning to prevent multicast traffic from flooding all interfaces in a bridge.
        """
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="igmpVersion")
    def igmp_version(self) -> Optional[pulumi.Input[int]]:
        """
        Selects the IGMP version in which IGMP general membership queries will be generated. This property only has effect when
        igmp-snooping is set to yes.
        """
        return pulumi.get(self, "igmp_version")

    @igmp_version.setter
    def igmp_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "igmp_version", value)

    @property
    @pulumi.getter(name="ingressFiltering")
    def ingress_filtering(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
        bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
        property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "ingress_filtering")

    @ingress_filtering.setter
    def ingress_filtering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ingress_filtering", value)

    @property
    @pulumi.getter(name="lastMemberInterval")
    def last_member_interval(self) -> Optional[pulumi.Input[str]]:
        """
        If a port has fast-leave set to no and a bridge port receives a IGMP Leave message, then a IGMP Snooping enabled bridge
        will send a IGMP query to make sure that no devices has subscribed to a certain multicast stream on a bridge port.
        """
        return pulumi.get(self, "last_member_interval")

    @last_member_interval.setter
    def last_member_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_member_interval", value)

    @property
    @pulumi.getter(name="lastMemberQueryCount")
    def last_member_query_count(self) -> Optional[pulumi.Input[int]]:
        """
        How many times should last-member-interval pass until a IGMP Snooping bridge will stop forwarding a certain multicast
        stream. This property only has effect when igmp-snooping is set to yes.
        """
        return pulumi.get(self, "last_member_query_count")

    @last_member_query_count.setter
    def last_member_query_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_member_query_count", value)

    @property
    @pulumi.getter(name="maxHops")
    def max_hops(self) -> Optional[pulumi.Input[int]]:
        """
        Bridge count which BPDU can pass in a MSTP enabled network in the same region before BPDU is being ignored. This
        property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "max_hops")

    @max_hops.setter
    def max_hops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_hops", value)

    @property
    @pulumi.getter(name="maxMessageAge")
    def max_message_age(self) -> Optional[pulumi.Input[str]]:
        """
        Changes the Max Age value in BPDU packets, which is transmitted by the root bridge. This property only has effect when
        protocol-mode is set to stp or rstp. Value: 6s..40s
        """
        return pulumi.get(self, "max_message_age")

    @max_message_age.setter
    def max_message_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_message_age", value)

    @property
    @pulumi.getter(name="membershipInterval")
    def membership_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Amount of time after an entry in the Multicast Database (MDB) is removed if a IGMP membership report is not received on
        a certain port. This property only has effect when igmp-snooping is set to yes.
        """
        return pulumi.get(self, "membership_interval")

    @membership_interval.setter
    def membership_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "membership_interval", value)

    @property
    @pulumi.getter(name="mldVersion")
    def mld_version(self) -> Optional[pulumi.Input[int]]:
        """
        Selects the MLD version. Version 2 adds support for source-specific multicast. This property only has effect when
        RouterOS IPv6 package is enabled and igmp-snooping is set to yes.
        """
        return pulumi.get(self, "mld_version")

    @mld_version.setter
    def mld_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mld_version", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[str]]:
        """
        The default bridge MTU value without any bridge ports added is 1500. The MTU value can be set manually, but it cannot
        exceed the bridge L2MTU or the lowest bridge port L2MTU. If a new bridge port is added with L2MTU which is smaller than
        the actual-mtu of the bridge (set by the mtu property), then manually set value will be ignored and the bridge will act
        as if mtu=auto is set.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="multicastQuerier")
    def multicast_querier(self) -> Optional[pulumi.Input[bool]]:
        """
        Multicast querier generates IGMP general membership queries to which all IGMP capable devices respond with an IGMP
        membership report, usually a PIM (multicast) router or IGMP proxy generates these queries. This property only has an
        effect when igmp-snooping is set to yes. Additionally, the igmp-snooping should be disabled/enabled after changing
        multicast-querier property.
        """
        return pulumi.get(self, "multicast_querier")

    @multicast_querier.setter
    def multicast_querier(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multicast_querier", value)

    @property
    @pulumi.getter(name="multicastRouter")
    def multicast_router(self) -> Optional[pulumi.Input[str]]:
        """
        A multicast router port is a port where a multicast router or querier is connected. On this port, unregistered multicast
        streams and IGMP/MLD membership reports will be sent. This setting changes the state of the multicast router for a
        bridge interface itself. This property can be used to send IGMP/MLD membership reports and multicast traffic to the
        bridge interface for further multicast routing or proxying. This property only has an effect when igmp-snooping is set
        to yes.
        """
        return pulumi.get(self, "multicast_router")

    @multicast_router.setter
    def multicast_router(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_router", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge priority, used by STP to determine root bridge, used by MSTP to determine CIST and IST regional root bridge. This
        property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="protocolMode")
    def protocol_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Select Spanning tree protocol (STP) or Rapid spanning tree protocol (RSTP) to ensure a loop-free topology for any
        bridged LAN.
        """
        return pulumi.get(self, "protocol_mode")

    @protocol_mode.setter
    def protocol_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_mode", value)

    @property
    @pulumi.getter
    def pvid(self) -> Optional[pulumi.Input[int]]:
        """
        Port VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. It applies e.g. to frames sent
        from bridge IP and destined to a bridge port. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "pvid")

    @pvid.setter
    def pvid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pvid", value)

    @property
    @pulumi.getter(name="querierInterval")
    def querier_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Used to change the interval how often a bridge checks if it is the active multicast querier. This property only has
        effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "querier_interval")

    @querier_interval.setter
    def querier_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "querier_interval", value)

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Used to change the interval how often IGMP general membership queries are sent out. This property only has effect when
        igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "query_interval")

    @query_interval.setter
    def query_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_interval", value)

    @property
    @pulumi.getter(name="queryResponseInterval")
    def query_response_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Interval in which a IGMP capable device must reply to a IGMP query with a IGMP membership report. This property only has
        effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "query_response_interval")

    @query_response_interval.setter
    def query_response_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_response_interval", value)

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> Optional[pulumi.Input[str]]:
        """
        MSTP region name. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "region_name")

    @region_name.setter
    def region_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_name", value)

    @property
    @pulumi.getter(name="regionRevision")
    def region_revision(self) -> Optional[pulumi.Input[int]]:
        """
        MSTP configuration revision number. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "region_revision")

    @region_revision.setter
    def region_revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "region_revision", value)

    @property
    @pulumi.getter(name="startupQueryCount")
    def startup_query_count(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how many times must startup-query-interval pass until the bridge starts sending out IGMP general membership
        queries periodically. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "startup_query_count")

    @startup_query_count.setter
    def startup_query_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "startup_query_count", value)

    @property
    @pulumi.getter(name="startupQueryInterval")
    def startup_query_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Used to change the amount of time after a bridge starts sending out IGMP general membership queries after the bridge is
        enabled. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "startup_query_interval")

    @startup_query_interval.setter
    def startup_query_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "startup_query_interval", value)

    @property
    @pulumi.getter(name="transmitHoldCount")
    def transmit_hold_count(self) -> Optional[pulumi.Input[int]]:
        """
        The Transmit Hold Count used by the Port Transmit state machine to limit transmission rate.
        """
        return pulumi.get(self, "transmit_hold_count")

    @transmit_hold_count.setter
    def transmit_hold_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_hold_count", value)

    @property
    @pulumi.getter(name="vlanFiltering")
    def vlan_filtering(self) -> Optional[pulumi.Input[bool]]:
        """
        Globally enables or disables VLAN functionality for bridge.
        """
        return pulumi.get(self, "vlan_filtering")

    @vlan_filtering.setter
    def vlan_filtering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_filtering", value)


@pulumi.input_type
class _BridgeState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 actual_mtu: Optional[pulumi.Input[int]] = None,
                 add_dhcp_option82: Optional[pulumi.Input[bool]] = None,
                 admin_mac: Optional[pulumi.Input[str]] = None,
                 ageing_time: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 arp_timeout: Optional[pulumi.Input[str]] = None,
                 auto_mac: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 ether_type: Optional[pulumi.Input[str]] = None,
                 fast_forward: Optional[pulumi.Input[bool]] = None,
                 forward_delay: Optional[pulumi.Input[str]] = None,
                 frame_types: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[bool]] = None,
                 igmp_version: Optional[pulumi.Input[int]] = None,
                 ingress_filtering: Optional[pulumi.Input[bool]] = None,
                 l2mtu: Optional[pulumi.Input[int]] = None,
                 last_member_interval: Optional[pulumi.Input[str]] = None,
                 last_member_query_count: Optional[pulumi.Input[int]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 max_hops: Optional[pulumi.Input[int]] = None,
                 max_message_age: Optional[pulumi.Input[str]] = None,
                 membership_interval: Optional[pulumi.Input[str]] = None,
                 mld_version: Optional[pulumi.Input[int]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 multicast_querier: Optional[pulumi.Input[bool]] = None,
                 multicast_router: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 protocol_mode: Optional[pulumi.Input[str]] = None,
                 pvid: Optional[pulumi.Input[int]] = None,
                 querier_interval: Optional[pulumi.Input[str]] = None,
                 query_interval: Optional[pulumi.Input[str]] = None,
                 query_response_interval: Optional[pulumi.Input[str]] = None,
                 region_name: Optional[pulumi.Input[str]] = None,
                 region_revision: Optional[pulumi.Input[int]] = None,
                 running: Optional[pulumi.Input[bool]] = None,
                 startup_query_count: Optional[pulumi.Input[int]] = None,
                 startup_query_interval: Optional[pulumi.Input[str]] = None,
                 transmit_hold_count: Optional[pulumi.Input[int]] = None,
                 vlan_filtering: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Bridge resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] add_dhcp_option82: Whether to add DHCP Option-82 information (Agent Remote ID and Agent Circuit ID) to DHCP packets. Can be used together
               with Option-82 capable DHCP server to assign IP addresses and implement policies. This property only has effect when
               dhcp-snooping is set to yes.
        :param pulumi.Input[str] admin_mac: Static MAC address of the bridge. This property only has effect when auto-mac is set to no.
        :param pulumi.Input[str] ageing_time: How long a host's information will be kept in the bridge database.
        :param pulumi.Input[str] arp: ARP resolution protocol mode.
        :param pulumi.Input[str] arp_timeout: ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
               the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
               minutes, hours or days. If no postfix is set then seconds (s) is used.
        :param pulumi.Input[bool] auto_mac: Automatically select one MAC address of bridge ports as a bridge MAC address, bridge MAC will be chosen from the first
               added bridge port. After a device reboot, the bridge MAC can change depending on the port-number.
        :param pulumi.Input[str] ether_type: This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] forward_delay: Time which is spent during the initialization phase of the bridge interface (i.e., after router startup or enabling the
               interface) in listening/learning state before the bridge will start functioning normally.
        :param pulumi.Input[str] frame_types: Specifies allowed frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] igmp_snooping: Enables multicast group and port learning to prevent multicast traffic from flooding all interfaces in a bridge.
        :param pulumi.Input[int] igmp_version: Selects the IGMP version in which IGMP general membership queries will be generated. This property only has effect when
               igmp-snooping is set to yes.
        :param pulumi.Input[bool] ingress_filtering: Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
               bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
               property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[int] l2mtu: Layer2 Maximum transmission unit.
        :param pulumi.Input[str] last_member_interval: If a port has fast-leave set to no and a bridge port receives a IGMP Leave message, then a IGMP Snooping enabled bridge
               will send a IGMP query to make sure that no devices has subscribed to a certain multicast stream on a bridge port.
        :param pulumi.Input[int] last_member_query_count: How many times should last-member-interval pass until a IGMP Snooping bridge will stop forwarding a certain multicast
               stream. This property only has effect when igmp-snooping is set to yes.
        :param pulumi.Input[int] max_hops: Bridge count which BPDU can pass in a MSTP enabled network in the same region before BPDU is being ignored. This
               property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[str] max_message_age: Changes the Max Age value in BPDU packets, which is transmitted by the root bridge. This property only has effect when
               protocol-mode is set to stp or rstp. Value: 6s..40s
        :param pulumi.Input[str] membership_interval: Amount of time after an entry in the Multicast Database (MDB) is removed if a IGMP membership report is not received on
               a certain port. This property only has effect when igmp-snooping is set to yes.
        :param pulumi.Input[int] mld_version: Selects the MLD version. Version 2 adds support for source-specific multicast. This property only has effect when
               RouterOS IPv6 package is enabled and igmp-snooping is set to yes.
        :param pulumi.Input[str] mtu: The default bridge MTU value without any bridge ports added is 1500. The MTU value can be set manually, but it cannot
               exceed the bridge L2MTU or the lowest bridge port L2MTU. If a new bridge port is added with L2MTU which is smaller than
               the actual-mtu of the bridge (set by the mtu property), then manually set value will be ignored and the bridge will act
               as if mtu=auto is set.
        :param pulumi.Input[bool] multicast_querier: Multicast querier generates IGMP general membership queries to which all IGMP capable devices respond with an IGMP
               membership report, usually a PIM (multicast) router or IGMP proxy generates these queries. This property only has an
               effect when igmp-snooping is set to yes. Additionally, the igmp-snooping should be disabled/enabled after changing
               multicast-querier property.
        :param pulumi.Input[str] multicast_router: A multicast router port is a port where a multicast router or querier is connected. On this port, unregistered multicast
               streams and IGMP/MLD membership reports will be sent. This setting changes the state of the multicast router for a
               bridge interface itself. This property can be used to send IGMP/MLD membership reports and multicast traffic to the
               bridge interface for further multicast routing or proxying. This property only has an effect when igmp-snooping is set
               to yes.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] priority: Bridge priority, used by STP to determine root bridge, used by MSTP to determine CIST and IST regional root bridge. This
               property has no effect when protocol-mode is set to none.
        :param pulumi.Input[str] protocol_mode: Select Spanning tree protocol (STP) or Rapid spanning tree protocol (RSTP) to ensure a loop-free topology for any
               bridged LAN.
        :param pulumi.Input[int] pvid: Port VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. It applies e.g. to frames sent
               from bridge IP and destined to a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] querier_interval: Used to change the interval how often a bridge checks if it is the active multicast querier. This property only has
               effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] query_interval: Used to change the interval how often IGMP general membership queries are sent out. This property only has effect when
               igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] query_response_interval: Interval in which a IGMP capable device must reply to a IGMP query with a IGMP membership report. This property only has
               effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] region_name: MSTP region name. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[int] region_revision: MSTP configuration revision number. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[int] startup_query_count: Specifies how many times must startup-query-interval pass until the bridge starts sending out IGMP general membership
               queries periodically. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] startup_query_interval: Used to change the amount of time after a bridge starts sending out IGMP general membership queries after the bridge is
               enabled. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[int] transmit_hold_count: The Transmit Hold Count used by the Port Transmit state machine to limit transmission rate.
        :param pulumi.Input[bool] vlan_filtering: Globally enables or disables VLAN functionality for bridge.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if actual_mtu is not None:
            pulumi.set(__self__, "actual_mtu", actual_mtu)
        if add_dhcp_option82 is not None:
            pulumi.set(__self__, "add_dhcp_option82", add_dhcp_option82)
        if admin_mac is not None:
            pulumi.set(__self__, "admin_mac", admin_mac)
        if ageing_time is not None:
            pulumi.set(__self__, "ageing_time", ageing_time)
        if arp is not None:
            pulumi.set(__self__, "arp", arp)
        if arp_timeout is not None:
            pulumi.set(__self__, "arp_timeout", arp_timeout)
        if auto_mac is not None:
            pulumi.set(__self__, "auto_mac", auto_mac)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dhcp_snooping is not None:
            pulumi.set(__self__, "dhcp_snooping", dhcp_snooping)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if ether_type is not None:
            pulumi.set(__self__, "ether_type", ether_type)
        if fast_forward is not None:
            pulumi.set(__self__, "fast_forward", fast_forward)
        if forward_delay is not None:
            pulumi.set(__self__, "forward_delay", forward_delay)
        if frame_types is not None:
            pulumi.set(__self__, "frame_types", frame_types)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if igmp_version is not None:
            pulumi.set(__self__, "igmp_version", igmp_version)
        if ingress_filtering is not None:
            pulumi.set(__self__, "ingress_filtering", ingress_filtering)
        if l2mtu is not None:
            pulumi.set(__self__, "l2mtu", l2mtu)
        if last_member_interval is not None:
            pulumi.set(__self__, "last_member_interval", last_member_interval)
        if last_member_query_count is not None:
            pulumi.set(__self__, "last_member_query_count", last_member_query_count)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if max_hops is not None:
            pulumi.set(__self__, "max_hops", max_hops)
        if max_message_age is not None:
            pulumi.set(__self__, "max_message_age", max_message_age)
        if membership_interval is not None:
            pulumi.set(__self__, "membership_interval", membership_interval)
        if mld_version is not None:
            pulumi.set(__self__, "mld_version", mld_version)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if multicast_querier is not None:
            pulumi.set(__self__, "multicast_querier", multicast_querier)
        if multicast_router is not None:
            pulumi.set(__self__, "multicast_router", multicast_router)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol_mode is not None:
            pulumi.set(__self__, "protocol_mode", protocol_mode)
        if pvid is not None:
            pulumi.set(__self__, "pvid", pvid)
        if querier_interval is not None:
            pulumi.set(__self__, "querier_interval", querier_interval)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if query_response_interval is not None:
            pulumi.set(__self__, "query_response_interval", query_response_interval)
        if region_name is not None:
            pulumi.set(__self__, "region_name", region_name)
        if region_revision is not None:
            pulumi.set(__self__, "region_revision", region_revision)
        if running is not None:
            pulumi.set(__self__, "running", running)
        if startup_query_count is not None:
            pulumi.set(__self__, "startup_query_count", startup_query_count)
        if startup_query_interval is not None:
            pulumi.set(__self__, "startup_query_interval", startup_query_interval)
        if transmit_hold_count is not None:
            pulumi.set(__self__, "transmit_hold_count", transmit_hold_count)
        if vlan_filtering is not None:
            pulumi.set(__self__, "vlan_filtering", vlan_filtering)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="actualMtu")
    def actual_mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "actual_mtu")

    @actual_mtu.setter
    def actual_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "actual_mtu", value)

    @property
    @pulumi.getter(name="addDhcpOption82")
    def add_dhcp_option82(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to add DHCP Option-82 information (Agent Remote ID and Agent Circuit ID) to DHCP packets. Can be used together
        with Option-82 capable DHCP server to assign IP addresses and implement policies. This property only has effect when
        dhcp-snooping is set to yes.
        """
        return pulumi.get(self, "add_dhcp_option82")

    @add_dhcp_option82.setter
    def add_dhcp_option82(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_dhcp_option82", value)

    @property
    @pulumi.getter(name="adminMac")
    def admin_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Static MAC address of the bridge. This property only has effect when auto-mac is set to no.
        """
        return pulumi.get(self, "admin_mac")

    @admin_mac.setter
    def admin_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_mac", value)

    @property
    @pulumi.getter(name="ageingTime")
    def ageing_time(self) -> Optional[pulumi.Input[str]]:
        """
        How long a host's information will be kept in the bridge database.
        """
        return pulumi.get(self, "ageing_time")

    @ageing_time.setter
    def ageing_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ageing_time", value)

    @property
    @pulumi.getter
    def arp(self) -> Optional[pulumi.Input[str]]:
        """
        ARP resolution protocol mode.
        """
        return pulumi.get(self, "arp")

    @arp.setter
    def arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp", value)

    @property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
        the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
        minutes, hours or days. If no postfix is set then seconds (s) is used.
        """
        return pulumi.get(self, "arp_timeout")

    @arp_timeout.setter
    def arp_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_timeout", value)

    @property
    @pulumi.getter(name="autoMac")
    def auto_mac(self) -> Optional[pulumi.Input[bool]]:
        """
        Automatically select one MAC address of bridge ports as a bridge MAC address, bridge MAC will be chosen from the first
        added bridge port. After a device reboot, the bridge MAC can change depending on the port-number.
        """
        return pulumi.get(self, "auto_mac")

    @auto_mac.setter
    def auto_mac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_mac", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dhcp_snooping")

    @dhcp_snooping.setter
    def dhcp_snooping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp_snooping", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="etherType")
    def ether_type(self) -> Optional[pulumi.Input[str]]:
        """
        This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "ether_type")

    @ether_type.setter
    def ether_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ether_type", value)

    @property
    @pulumi.getter(name="fastForward")
    def fast_forward(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fast_forward")

    @fast_forward.setter
    def fast_forward(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fast_forward", value)

    @property
    @pulumi.getter(name="forwardDelay")
    def forward_delay(self) -> Optional[pulumi.Input[str]]:
        """
        Time which is spent during the initialization phase of the bridge interface (i.e., after router startup or enabling the
        interface) in listening/learning state before the bridge will start functioning normally.
        """
        return pulumi.get(self, "forward_delay")

    @forward_delay.setter
    def forward_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_delay", value)

    @property
    @pulumi.getter(name="frameTypes")
    def frame_types(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies allowed frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "frame_types")

    @frame_types.setter
    def frame_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frame_types", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables multicast group and port learning to prevent multicast traffic from flooding all interfaces in a bridge.
        """
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="igmpVersion")
    def igmp_version(self) -> Optional[pulumi.Input[int]]:
        """
        Selects the IGMP version in which IGMP general membership queries will be generated. This property only has effect when
        igmp-snooping is set to yes.
        """
        return pulumi.get(self, "igmp_version")

    @igmp_version.setter
    def igmp_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "igmp_version", value)

    @property
    @pulumi.getter(name="ingressFiltering")
    def ingress_filtering(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
        bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
        property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "ingress_filtering")

    @ingress_filtering.setter
    def ingress_filtering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ingress_filtering", value)

    @property
    @pulumi.getter
    def l2mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Layer2 Maximum transmission unit.
        """
        return pulumi.get(self, "l2mtu")

    @l2mtu.setter
    def l2mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "l2mtu", value)

    @property
    @pulumi.getter(name="lastMemberInterval")
    def last_member_interval(self) -> Optional[pulumi.Input[str]]:
        """
        If a port has fast-leave set to no and a bridge port receives a IGMP Leave message, then a IGMP Snooping enabled bridge
        will send a IGMP query to make sure that no devices has subscribed to a certain multicast stream on a bridge port.
        """
        return pulumi.get(self, "last_member_interval")

    @last_member_interval.setter
    def last_member_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_member_interval", value)

    @property
    @pulumi.getter(name="lastMemberQueryCount")
    def last_member_query_count(self) -> Optional[pulumi.Input[int]]:
        """
        How many times should last-member-interval pass until a IGMP Snooping bridge will stop forwarding a certain multicast
        stream. This property only has effect when igmp-snooping is set to yes.
        """
        return pulumi.get(self, "last_member_query_count")

    @last_member_query_count.setter
    def last_member_query_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_member_query_count", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter(name="maxHops")
    def max_hops(self) -> Optional[pulumi.Input[int]]:
        """
        Bridge count which BPDU can pass in a MSTP enabled network in the same region before BPDU is being ignored. This
        property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "max_hops")

    @max_hops.setter
    def max_hops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_hops", value)

    @property
    @pulumi.getter(name="maxMessageAge")
    def max_message_age(self) -> Optional[pulumi.Input[str]]:
        """
        Changes the Max Age value in BPDU packets, which is transmitted by the root bridge. This property only has effect when
        protocol-mode is set to stp or rstp. Value: 6s..40s
        """
        return pulumi.get(self, "max_message_age")

    @max_message_age.setter
    def max_message_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_message_age", value)

    @property
    @pulumi.getter(name="membershipInterval")
    def membership_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Amount of time after an entry in the Multicast Database (MDB) is removed if a IGMP membership report is not received on
        a certain port. This property only has effect when igmp-snooping is set to yes.
        """
        return pulumi.get(self, "membership_interval")

    @membership_interval.setter
    def membership_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "membership_interval", value)

    @property
    @pulumi.getter(name="mldVersion")
    def mld_version(self) -> Optional[pulumi.Input[int]]:
        """
        Selects the MLD version. Version 2 adds support for source-specific multicast. This property only has effect when
        RouterOS IPv6 package is enabled and igmp-snooping is set to yes.
        """
        return pulumi.get(self, "mld_version")

    @mld_version.setter
    def mld_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mld_version", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[str]]:
        """
        The default bridge MTU value without any bridge ports added is 1500. The MTU value can be set manually, but it cannot
        exceed the bridge L2MTU or the lowest bridge port L2MTU. If a new bridge port is added with L2MTU which is smaller than
        the actual-mtu of the bridge (set by the mtu property), then manually set value will be ignored and the bridge will act
        as if mtu=auto is set.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="multicastQuerier")
    def multicast_querier(self) -> Optional[pulumi.Input[bool]]:
        """
        Multicast querier generates IGMP general membership queries to which all IGMP capable devices respond with an IGMP
        membership report, usually a PIM (multicast) router or IGMP proxy generates these queries. This property only has an
        effect when igmp-snooping is set to yes. Additionally, the igmp-snooping should be disabled/enabled after changing
        multicast-querier property.
        """
        return pulumi.get(self, "multicast_querier")

    @multicast_querier.setter
    def multicast_querier(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multicast_querier", value)

    @property
    @pulumi.getter(name="multicastRouter")
    def multicast_router(self) -> Optional[pulumi.Input[str]]:
        """
        A multicast router port is a port where a multicast router or querier is connected. On this port, unregistered multicast
        streams and IGMP/MLD membership reports will be sent. This setting changes the state of the multicast router for a
        bridge interface itself. This property can be used to send IGMP/MLD membership reports and multicast traffic to the
        bridge interface for further multicast routing or proxying. This property only has an effect when igmp-snooping is set
        to yes.
        """
        return pulumi.get(self, "multicast_router")

    @multicast_router.setter
    def multicast_router(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_router", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge priority, used by STP to determine root bridge, used by MSTP to determine CIST and IST regional root bridge. This
        property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="protocolMode")
    def protocol_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Select Spanning tree protocol (STP) or Rapid spanning tree protocol (RSTP) to ensure a loop-free topology for any
        bridged LAN.
        """
        return pulumi.get(self, "protocol_mode")

    @protocol_mode.setter
    def protocol_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_mode", value)

    @property
    @pulumi.getter
    def pvid(self) -> Optional[pulumi.Input[int]]:
        """
        Port VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. It applies e.g. to frames sent
        from bridge IP and destined to a bridge port. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "pvid")

    @pvid.setter
    def pvid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pvid", value)

    @property
    @pulumi.getter(name="querierInterval")
    def querier_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Used to change the interval how often a bridge checks if it is the active multicast querier. This property only has
        effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "querier_interval")

    @querier_interval.setter
    def querier_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "querier_interval", value)

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Used to change the interval how often IGMP general membership queries are sent out. This property only has effect when
        igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "query_interval")

    @query_interval.setter
    def query_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_interval", value)

    @property
    @pulumi.getter(name="queryResponseInterval")
    def query_response_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Interval in which a IGMP capable device must reply to a IGMP query with a IGMP membership report. This property only has
        effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "query_response_interval")

    @query_response_interval.setter
    def query_response_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_response_interval", value)

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> Optional[pulumi.Input[str]]:
        """
        MSTP region name. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "region_name")

    @region_name.setter
    def region_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_name", value)

    @property
    @pulumi.getter(name="regionRevision")
    def region_revision(self) -> Optional[pulumi.Input[int]]:
        """
        MSTP configuration revision number. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "region_revision")

    @region_revision.setter
    def region_revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "region_revision", value)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running", value)

    @property
    @pulumi.getter(name="startupQueryCount")
    def startup_query_count(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies how many times must startup-query-interval pass until the bridge starts sending out IGMP general membership
        queries periodically. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "startup_query_count")

    @startup_query_count.setter
    def startup_query_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "startup_query_count", value)

    @property
    @pulumi.getter(name="startupQueryInterval")
    def startup_query_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Used to change the amount of time after a bridge starts sending out IGMP general membership queries after the bridge is
        enabled. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "startup_query_interval")

    @startup_query_interval.setter
    def startup_query_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "startup_query_interval", value)

    @property
    @pulumi.getter(name="transmitHoldCount")
    def transmit_hold_count(self) -> Optional[pulumi.Input[int]]:
        """
        The Transmit Hold Count used by the Port Transmit state machine to limit transmission rate.
        """
        return pulumi.get(self, "transmit_hold_count")

    @transmit_hold_count.setter
    def transmit_hold_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_hold_count", value)

    @property
    @pulumi.getter(name="vlanFiltering")
    def vlan_filtering(self) -> Optional[pulumi.Input[bool]]:
        """
        Globally enables or disables VLAN functionality for bridge.
        """
        return pulumi.get(self, "vlan_filtering")

    @vlan_filtering.setter
    def vlan_filtering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_filtering", value)


class Bridge(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 add_dhcp_option82: Optional[pulumi.Input[bool]] = None,
                 admin_mac: Optional[pulumi.Input[str]] = None,
                 ageing_time: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 arp_timeout: Optional[pulumi.Input[str]] = None,
                 auto_mac: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 ether_type: Optional[pulumi.Input[str]] = None,
                 fast_forward: Optional[pulumi.Input[bool]] = None,
                 forward_delay: Optional[pulumi.Input[str]] = None,
                 frame_types: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[bool]] = None,
                 igmp_version: Optional[pulumi.Input[int]] = None,
                 ingress_filtering: Optional[pulumi.Input[bool]] = None,
                 last_member_interval: Optional[pulumi.Input[str]] = None,
                 last_member_query_count: Optional[pulumi.Input[int]] = None,
                 max_hops: Optional[pulumi.Input[int]] = None,
                 max_message_age: Optional[pulumi.Input[str]] = None,
                 membership_interval: Optional[pulumi.Input[str]] = None,
                 mld_version: Optional[pulumi.Input[int]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 multicast_querier: Optional[pulumi.Input[bool]] = None,
                 multicast_router: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 protocol_mode: Optional[pulumi.Input[str]] = None,
                 pvid: Optional[pulumi.Input[int]] = None,
                 querier_interval: Optional[pulumi.Input[str]] = None,
                 query_interval: Optional[pulumi.Input[str]] = None,
                 query_response_interval: Optional[pulumi.Input[str]] = None,
                 region_name: Optional[pulumi.Input[str]] = None,
                 region_revision: Optional[pulumi.Input[int]] = None,
                 startup_query_count: Optional[pulumi.Input[int]] = None,
                 startup_query_interval: Optional[pulumi.Input[str]] = None,
                 transmit_hold_count: Optional[pulumi.Input[int]] = None,
                 vlan_filtering: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## # Iface.Bridge (Resource)

        ***

        #### This is an alias for backwards compatibility between plugin versions.
        Please see documentation for Iface.InterfaceBridge

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] add_dhcp_option82: Whether to add DHCP Option-82 information (Agent Remote ID and Agent Circuit ID) to DHCP packets. Can be used together
               with Option-82 capable DHCP server to assign IP addresses and implement policies. This property only has effect when
               dhcp-snooping is set to yes.
        :param pulumi.Input[str] admin_mac: Static MAC address of the bridge. This property only has effect when auto-mac is set to no.
        :param pulumi.Input[str] ageing_time: How long a host's information will be kept in the bridge database.
        :param pulumi.Input[str] arp: ARP resolution protocol mode.
        :param pulumi.Input[str] arp_timeout: ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
               the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
               minutes, hours or days. If no postfix is set then seconds (s) is used.
        :param pulumi.Input[bool] auto_mac: Automatically select one MAC address of bridge ports as a bridge MAC address, bridge MAC will be chosen from the first
               added bridge port. After a device reboot, the bridge MAC can change depending on the port-number.
        :param pulumi.Input[str] ether_type: This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] forward_delay: Time which is spent during the initialization phase of the bridge interface (i.e., after router startup or enabling the
               interface) in listening/learning state before the bridge will start functioning normally.
        :param pulumi.Input[str] frame_types: Specifies allowed frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] igmp_snooping: Enables multicast group and port learning to prevent multicast traffic from flooding all interfaces in a bridge.
        :param pulumi.Input[int] igmp_version: Selects the IGMP version in which IGMP general membership queries will be generated. This property only has effect when
               igmp-snooping is set to yes.
        :param pulumi.Input[bool] ingress_filtering: Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
               bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
               property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] last_member_interval: If a port has fast-leave set to no and a bridge port receives a IGMP Leave message, then a IGMP Snooping enabled bridge
               will send a IGMP query to make sure that no devices has subscribed to a certain multicast stream on a bridge port.
        :param pulumi.Input[int] last_member_query_count: How many times should last-member-interval pass until a IGMP Snooping bridge will stop forwarding a certain multicast
               stream. This property only has effect when igmp-snooping is set to yes.
        :param pulumi.Input[int] max_hops: Bridge count which BPDU can pass in a MSTP enabled network in the same region before BPDU is being ignored. This
               property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[str] max_message_age: Changes the Max Age value in BPDU packets, which is transmitted by the root bridge. This property only has effect when
               protocol-mode is set to stp or rstp. Value: 6s..40s
        :param pulumi.Input[str] membership_interval: Amount of time after an entry in the Multicast Database (MDB) is removed if a IGMP membership report is not received on
               a certain port. This property only has effect when igmp-snooping is set to yes.
        :param pulumi.Input[int] mld_version: Selects the MLD version. Version 2 adds support for source-specific multicast. This property only has effect when
               RouterOS IPv6 package is enabled and igmp-snooping is set to yes.
        :param pulumi.Input[str] mtu: The default bridge MTU value without any bridge ports added is 1500. The MTU value can be set manually, but it cannot
               exceed the bridge L2MTU or the lowest bridge port L2MTU. If a new bridge port is added with L2MTU which is smaller than
               the actual-mtu of the bridge (set by the mtu property), then manually set value will be ignored and the bridge will act
               as if mtu=auto is set.
        :param pulumi.Input[bool] multicast_querier: Multicast querier generates IGMP general membership queries to which all IGMP capable devices respond with an IGMP
               membership report, usually a PIM (multicast) router or IGMP proxy generates these queries. This property only has an
               effect when igmp-snooping is set to yes. Additionally, the igmp-snooping should be disabled/enabled after changing
               multicast-querier property.
        :param pulumi.Input[str] multicast_router: A multicast router port is a port where a multicast router or querier is connected. On this port, unregistered multicast
               streams and IGMP/MLD membership reports will be sent. This setting changes the state of the multicast router for a
               bridge interface itself. This property can be used to send IGMP/MLD membership reports and multicast traffic to the
               bridge interface for further multicast routing or proxying. This property only has an effect when igmp-snooping is set
               to yes.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] priority: Bridge priority, used by STP to determine root bridge, used by MSTP to determine CIST and IST regional root bridge. This
               property has no effect when protocol-mode is set to none.
        :param pulumi.Input[str] protocol_mode: Select Spanning tree protocol (STP) or Rapid spanning tree protocol (RSTP) to ensure a loop-free topology for any
               bridged LAN.
        :param pulumi.Input[int] pvid: Port VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. It applies e.g. to frames sent
               from bridge IP and destined to a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] querier_interval: Used to change the interval how often a bridge checks if it is the active multicast querier. This property only has
               effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] query_interval: Used to change the interval how often IGMP general membership queries are sent out. This property only has effect when
               igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] query_response_interval: Interval in which a IGMP capable device must reply to a IGMP query with a IGMP membership report. This property only has
               effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] region_name: MSTP region name. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[int] region_revision: MSTP configuration revision number. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[int] startup_query_count: Specifies how many times must startup-query-interval pass until the bridge starts sending out IGMP general membership
               queries periodically. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] startup_query_interval: Used to change the amount of time after a bridge starts sending out IGMP general membership queries after the bridge is
               enabled. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[int] transmit_hold_count: The Transmit Hold Count used by the Port Transmit state machine to limit transmission rate.
        :param pulumi.Input[bool] vlan_filtering: Globally enables or disables VLAN functionality for bridge.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[BridgeArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Iface.Bridge (Resource)

        ***

        #### This is an alias for backwards compatibility between plugin versions.
        Please see documentation for Iface.InterfaceBridge

        :param str resource_name: The name of the resource.
        :param BridgeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BridgeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 add_dhcp_option82: Optional[pulumi.Input[bool]] = None,
                 admin_mac: Optional[pulumi.Input[str]] = None,
                 ageing_time: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 arp_timeout: Optional[pulumi.Input[str]] = None,
                 auto_mac: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 ether_type: Optional[pulumi.Input[str]] = None,
                 fast_forward: Optional[pulumi.Input[bool]] = None,
                 forward_delay: Optional[pulumi.Input[str]] = None,
                 frame_types: Optional[pulumi.Input[str]] = None,
                 igmp_snooping: Optional[pulumi.Input[bool]] = None,
                 igmp_version: Optional[pulumi.Input[int]] = None,
                 ingress_filtering: Optional[pulumi.Input[bool]] = None,
                 last_member_interval: Optional[pulumi.Input[str]] = None,
                 last_member_query_count: Optional[pulumi.Input[int]] = None,
                 max_hops: Optional[pulumi.Input[int]] = None,
                 max_message_age: Optional[pulumi.Input[str]] = None,
                 membership_interval: Optional[pulumi.Input[str]] = None,
                 mld_version: Optional[pulumi.Input[int]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 multicast_querier: Optional[pulumi.Input[bool]] = None,
                 multicast_router: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 protocol_mode: Optional[pulumi.Input[str]] = None,
                 pvid: Optional[pulumi.Input[int]] = None,
                 querier_interval: Optional[pulumi.Input[str]] = None,
                 query_interval: Optional[pulumi.Input[str]] = None,
                 query_response_interval: Optional[pulumi.Input[str]] = None,
                 region_name: Optional[pulumi.Input[str]] = None,
                 region_revision: Optional[pulumi.Input[int]] = None,
                 startup_query_count: Optional[pulumi.Input[int]] = None,
                 startup_query_interval: Optional[pulumi.Input[str]] = None,
                 transmit_hold_count: Optional[pulumi.Input[int]] = None,
                 vlan_filtering: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BridgeArgs.__new__(BridgeArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["add_dhcp_option82"] = add_dhcp_option82
            __props__.__dict__["admin_mac"] = admin_mac
            __props__.__dict__["ageing_time"] = ageing_time
            __props__.__dict__["arp"] = arp
            __props__.__dict__["arp_timeout"] = arp_timeout
            __props__.__dict__["auto_mac"] = auto_mac
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dhcp_snooping"] = dhcp_snooping
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["ether_type"] = ether_type
            __props__.__dict__["fast_forward"] = fast_forward
            __props__.__dict__["forward_delay"] = forward_delay
            __props__.__dict__["frame_types"] = frame_types
            __props__.__dict__["igmp_snooping"] = igmp_snooping
            __props__.__dict__["igmp_version"] = igmp_version
            __props__.__dict__["ingress_filtering"] = ingress_filtering
            __props__.__dict__["last_member_interval"] = last_member_interval
            __props__.__dict__["last_member_query_count"] = last_member_query_count
            __props__.__dict__["max_hops"] = max_hops
            __props__.__dict__["max_message_age"] = max_message_age
            __props__.__dict__["membership_interval"] = membership_interval
            __props__.__dict__["mld_version"] = mld_version
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["multicast_querier"] = multicast_querier
            __props__.__dict__["multicast_router"] = multicast_router
            __props__.__dict__["name"] = name
            __props__.__dict__["priority"] = priority
            __props__.__dict__["protocol_mode"] = protocol_mode
            __props__.__dict__["pvid"] = pvid
            __props__.__dict__["querier_interval"] = querier_interval
            __props__.__dict__["query_interval"] = query_interval
            __props__.__dict__["query_response_interval"] = query_response_interval
            __props__.__dict__["region_name"] = region_name
            __props__.__dict__["region_revision"] = region_revision
            __props__.__dict__["startup_query_count"] = startup_query_count
            __props__.__dict__["startup_query_interval"] = startup_query_interval
            __props__.__dict__["transmit_hold_count"] = transmit_hold_count
            __props__.__dict__["vlan_filtering"] = vlan_filtering
            __props__.__dict__["actual_mtu"] = None
            __props__.__dict__["l2mtu"] = None
            __props__.__dict__["mac_address"] = None
            __props__.__dict__["running"] = None
        super(Bridge, __self__).__init__(
            'routeros:Iface/bridge:Bridge',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            actual_mtu: Optional[pulumi.Input[int]] = None,
            add_dhcp_option82: Optional[pulumi.Input[bool]] = None,
            admin_mac: Optional[pulumi.Input[str]] = None,
            ageing_time: Optional[pulumi.Input[str]] = None,
            arp: Optional[pulumi.Input[str]] = None,
            arp_timeout: Optional[pulumi.Input[str]] = None,
            auto_mac: Optional[pulumi.Input[bool]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dhcp_snooping: Optional[pulumi.Input[bool]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            ether_type: Optional[pulumi.Input[str]] = None,
            fast_forward: Optional[pulumi.Input[bool]] = None,
            forward_delay: Optional[pulumi.Input[str]] = None,
            frame_types: Optional[pulumi.Input[str]] = None,
            igmp_snooping: Optional[pulumi.Input[bool]] = None,
            igmp_version: Optional[pulumi.Input[int]] = None,
            ingress_filtering: Optional[pulumi.Input[bool]] = None,
            l2mtu: Optional[pulumi.Input[int]] = None,
            last_member_interval: Optional[pulumi.Input[str]] = None,
            last_member_query_count: Optional[pulumi.Input[int]] = None,
            mac_address: Optional[pulumi.Input[str]] = None,
            max_hops: Optional[pulumi.Input[int]] = None,
            max_message_age: Optional[pulumi.Input[str]] = None,
            membership_interval: Optional[pulumi.Input[str]] = None,
            mld_version: Optional[pulumi.Input[int]] = None,
            mtu: Optional[pulumi.Input[str]] = None,
            multicast_querier: Optional[pulumi.Input[bool]] = None,
            multicast_router: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            protocol_mode: Optional[pulumi.Input[str]] = None,
            pvid: Optional[pulumi.Input[int]] = None,
            querier_interval: Optional[pulumi.Input[str]] = None,
            query_interval: Optional[pulumi.Input[str]] = None,
            query_response_interval: Optional[pulumi.Input[str]] = None,
            region_name: Optional[pulumi.Input[str]] = None,
            region_revision: Optional[pulumi.Input[int]] = None,
            running: Optional[pulumi.Input[bool]] = None,
            startup_query_count: Optional[pulumi.Input[int]] = None,
            startup_query_interval: Optional[pulumi.Input[str]] = None,
            transmit_hold_count: Optional[pulumi.Input[int]] = None,
            vlan_filtering: Optional[pulumi.Input[bool]] = None) -> 'Bridge':
        """
        Get an existing Bridge resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] add_dhcp_option82: Whether to add DHCP Option-82 information (Agent Remote ID and Agent Circuit ID) to DHCP packets. Can be used together
               with Option-82 capable DHCP server to assign IP addresses and implement policies. This property only has effect when
               dhcp-snooping is set to yes.
        :param pulumi.Input[str] admin_mac: Static MAC address of the bridge. This property only has effect when auto-mac is set to no.
        :param pulumi.Input[str] ageing_time: How long a host's information will be kept in the bridge database.
        :param pulumi.Input[str] arp: ARP resolution protocol mode.
        :param pulumi.Input[str] arp_timeout: ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
               the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
               minutes, hours or days. If no postfix is set then seconds (s) is used.
        :param pulumi.Input[bool] auto_mac: Automatically select one MAC address of bridge ports as a bridge MAC address, bridge MAC will be chosen from the first
               added bridge port. After a device reboot, the bridge MAC can change depending on the port-number.
        :param pulumi.Input[str] ether_type: This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] forward_delay: Time which is spent during the initialization phase of the bridge interface (i.e., after router startup or enabling the
               interface) in listening/learning state before the bridge will start functioning normally.
        :param pulumi.Input[str] frame_types: Specifies allowed frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] igmp_snooping: Enables multicast group and port learning to prevent multicast traffic from flooding all interfaces in a bridge.
        :param pulumi.Input[int] igmp_version: Selects the IGMP version in which IGMP general membership queries will be generated. This property only has effect when
               igmp-snooping is set to yes.
        :param pulumi.Input[bool] ingress_filtering: Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
               bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
               property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[int] l2mtu: Layer2 Maximum transmission unit.
        :param pulumi.Input[str] last_member_interval: If a port has fast-leave set to no and a bridge port receives a IGMP Leave message, then a IGMP Snooping enabled bridge
               will send a IGMP query to make sure that no devices has subscribed to a certain multicast stream on a bridge port.
        :param pulumi.Input[int] last_member_query_count: How many times should last-member-interval pass until a IGMP Snooping bridge will stop forwarding a certain multicast
               stream. This property only has effect when igmp-snooping is set to yes.
        :param pulumi.Input[int] max_hops: Bridge count which BPDU can pass in a MSTP enabled network in the same region before BPDU is being ignored. This
               property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[str] max_message_age: Changes the Max Age value in BPDU packets, which is transmitted by the root bridge. This property only has effect when
               protocol-mode is set to stp or rstp. Value: 6s..40s
        :param pulumi.Input[str] membership_interval: Amount of time after an entry in the Multicast Database (MDB) is removed if a IGMP membership report is not received on
               a certain port. This property only has effect when igmp-snooping is set to yes.
        :param pulumi.Input[int] mld_version: Selects the MLD version. Version 2 adds support for source-specific multicast. This property only has effect when
               RouterOS IPv6 package is enabled and igmp-snooping is set to yes.
        :param pulumi.Input[str] mtu: The default bridge MTU value without any bridge ports added is 1500. The MTU value can be set manually, but it cannot
               exceed the bridge L2MTU or the lowest bridge port L2MTU. If a new bridge port is added with L2MTU which is smaller than
               the actual-mtu of the bridge (set by the mtu property), then manually set value will be ignored and the bridge will act
               as if mtu=auto is set.
        :param pulumi.Input[bool] multicast_querier: Multicast querier generates IGMP general membership queries to which all IGMP capable devices respond with an IGMP
               membership report, usually a PIM (multicast) router or IGMP proxy generates these queries. This property only has an
               effect when igmp-snooping is set to yes. Additionally, the igmp-snooping should be disabled/enabled after changing
               multicast-querier property.
        :param pulumi.Input[str] multicast_router: A multicast router port is a port where a multicast router or querier is connected. On this port, unregistered multicast
               streams and IGMP/MLD membership reports will be sent. This setting changes the state of the multicast router for a
               bridge interface itself. This property can be used to send IGMP/MLD membership reports and multicast traffic to the
               bridge interface for further multicast routing or proxying. This property only has an effect when igmp-snooping is set
               to yes.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] priority: Bridge priority, used by STP to determine root bridge, used by MSTP to determine CIST and IST regional root bridge. This
               property has no effect when protocol-mode is set to none.
        :param pulumi.Input[str] protocol_mode: Select Spanning tree protocol (STP) or Rapid spanning tree protocol (RSTP) to ensure a loop-free topology for any
               bridged LAN.
        :param pulumi.Input[int] pvid: Port VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. It applies e.g. to frames sent
               from bridge IP and destined to a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] querier_interval: Used to change the interval how often a bridge checks if it is the active multicast querier. This property only has
               effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] query_interval: Used to change the interval how often IGMP general membership queries are sent out. This property only has effect when
               igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] query_response_interval: Interval in which a IGMP capable device must reply to a IGMP query with a IGMP membership report. This property only has
               effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] region_name: MSTP region name. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[int] region_revision: MSTP configuration revision number. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[int] startup_query_count: Specifies how many times must startup-query-interval pass until the bridge starts sending out IGMP general membership
               queries periodically. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[str] startup_query_interval: Used to change the amount of time after a bridge starts sending out IGMP general membership queries after the bridge is
               enabled. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        :param pulumi.Input[int] transmit_hold_count: The Transmit Hold Count used by the Port Transmit state machine to limit transmission rate.
        :param pulumi.Input[bool] vlan_filtering: Globally enables or disables VLAN functionality for bridge.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BridgeState.__new__(_BridgeState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["actual_mtu"] = actual_mtu
        __props__.__dict__["add_dhcp_option82"] = add_dhcp_option82
        __props__.__dict__["admin_mac"] = admin_mac
        __props__.__dict__["ageing_time"] = ageing_time
        __props__.__dict__["arp"] = arp
        __props__.__dict__["arp_timeout"] = arp_timeout
        __props__.__dict__["auto_mac"] = auto_mac
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dhcp_snooping"] = dhcp_snooping
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["ether_type"] = ether_type
        __props__.__dict__["fast_forward"] = fast_forward
        __props__.__dict__["forward_delay"] = forward_delay
        __props__.__dict__["frame_types"] = frame_types
        __props__.__dict__["igmp_snooping"] = igmp_snooping
        __props__.__dict__["igmp_version"] = igmp_version
        __props__.__dict__["ingress_filtering"] = ingress_filtering
        __props__.__dict__["l2mtu"] = l2mtu
        __props__.__dict__["last_member_interval"] = last_member_interval
        __props__.__dict__["last_member_query_count"] = last_member_query_count
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["max_hops"] = max_hops
        __props__.__dict__["max_message_age"] = max_message_age
        __props__.__dict__["membership_interval"] = membership_interval
        __props__.__dict__["mld_version"] = mld_version
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["multicast_querier"] = multicast_querier
        __props__.__dict__["multicast_router"] = multicast_router
        __props__.__dict__["name"] = name
        __props__.__dict__["priority"] = priority
        __props__.__dict__["protocol_mode"] = protocol_mode
        __props__.__dict__["pvid"] = pvid
        __props__.__dict__["querier_interval"] = querier_interval
        __props__.__dict__["query_interval"] = query_interval
        __props__.__dict__["query_response_interval"] = query_response_interval
        __props__.__dict__["region_name"] = region_name
        __props__.__dict__["region_revision"] = region_revision
        __props__.__dict__["running"] = running
        __props__.__dict__["startup_query_count"] = startup_query_count
        __props__.__dict__["startup_query_interval"] = startup_query_interval
        __props__.__dict__["transmit_hold_count"] = transmit_hold_count
        __props__.__dict__["vlan_filtering"] = vlan_filtering
        return Bridge(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter(name="actualMtu")
    def actual_mtu(self) -> pulumi.Output[int]:
        return pulumi.get(self, "actual_mtu")

    @property
    @pulumi.getter(name="addDhcpOption82")
    def add_dhcp_option82(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to add DHCP Option-82 information (Agent Remote ID and Agent Circuit ID) to DHCP packets. Can be used together
        with Option-82 capable DHCP server to assign IP addresses and implement policies. This property only has effect when
        dhcp-snooping is set to yes.
        """
        return pulumi.get(self, "add_dhcp_option82")

    @property
    @pulumi.getter(name="adminMac")
    def admin_mac(self) -> pulumi.Output[str]:
        """
        Static MAC address of the bridge. This property only has effect when auto-mac is set to no.
        """
        return pulumi.get(self, "admin_mac")

    @property
    @pulumi.getter(name="ageingTime")
    def ageing_time(self) -> pulumi.Output[Optional[str]]:
        """
        How long a host's information will be kept in the bridge database.
        """
        return pulumi.get(self, "ageing_time")

    @property
    @pulumi.getter
    def arp(self) -> pulumi.Output[Optional[str]]:
        """
        ARP resolution protocol mode.
        """
        return pulumi.get(self, "arp")

    @property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> pulumi.Output[Optional[str]]:
        """
        ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to
        the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds,
        minutes, hours or days. If no postfix is set then seconds (s) is used.
        """
        return pulumi.get(self, "arp_timeout")

    @property
    @pulumi.getter(name="autoMac")
    def auto_mac(self) -> pulumi.Output[Optional[bool]]:
        """
        Automatically select one MAC address of bridge ports as a bridge MAC address, bridge MAC will be chosen from the first
        added bridge port. After a device reboot, the bridge MAC can change depending on the port-number.
        """
        return pulumi.get(self, "auto_mac")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "dhcp_snooping")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="etherType")
    def ether_type(self) -> pulumi.Output[Optional[str]]:
        """
        This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "ether_type")

    @property
    @pulumi.getter(name="fastForward")
    def fast_forward(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "fast_forward")

    @property
    @pulumi.getter(name="forwardDelay")
    def forward_delay(self) -> pulumi.Output[Optional[str]]:
        """
        Time which is spent during the initialization phase of the bridge interface (i.e., after router startup or enabling the
        interface) in listening/learning state before the bridge will start functioning normally.
        """
        return pulumi.get(self, "forward_delay")

    @property
    @pulumi.getter(name="frameTypes")
    def frame_types(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies allowed frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "frame_types")

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables multicast group and port learning to prevent multicast traffic from flooding all interfaces in a bridge.
        """
        return pulumi.get(self, "igmp_snooping")

    @property
    @pulumi.getter(name="igmpVersion")
    def igmp_version(self) -> pulumi.Output[int]:
        """
        Selects the IGMP version in which IGMP general membership queries will be generated. This property only has effect when
        igmp-snooping is set to yes.
        """
        return pulumi.get(self, "igmp_version")

    @property
    @pulumi.getter(name="ingressFiltering")
    def ingress_filtering(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the
        bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This
        property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "ingress_filtering")

    @property
    @pulumi.getter
    def l2mtu(self) -> pulumi.Output[int]:
        """
        Layer2 Maximum transmission unit.
        """
        return pulumi.get(self, "l2mtu")

    @property
    @pulumi.getter(name="lastMemberInterval")
    def last_member_interval(self) -> pulumi.Output[str]:
        """
        If a port has fast-leave set to no and a bridge port receives a IGMP Leave message, then a IGMP Snooping enabled bridge
        will send a IGMP query to make sure that no devices has subscribed to a certain multicast stream on a bridge port.
        """
        return pulumi.get(self, "last_member_interval")

    @property
    @pulumi.getter(name="lastMemberQueryCount")
    def last_member_query_count(self) -> pulumi.Output[int]:
        """
        How many times should last-member-interval pass until a IGMP Snooping bridge will stop forwarding a certain multicast
        stream. This property only has effect when igmp-snooping is set to yes.
        """
        return pulumi.get(self, "last_member_query_count")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="maxHops")
    def max_hops(self) -> pulumi.Output[int]:
        """
        Bridge count which BPDU can pass in a MSTP enabled network in the same region before BPDU is being ignored. This
        property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "max_hops")

    @property
    @pulumi.getter(name="maxMessageAge")
    def max_message_age(self) -> pulumi.Output[Optional[str]]:
        """
        Changes the Max Age value in BPDU packets, which is transmitted by the root bridge. This property only has effect when
        protocol-mode is set to stp or rstp. Value: 6s..40s
        """
        return pulumi.get(self, "max_message_age")

    @property
    @pulumi.getter(name="membershipInterval")
    def membership_interval(self) -> pulumi.Output[str]:
        """
        Amount of time after an entry in the Multicast Database (MDB) is removed if a IGMP membership report is not received on
        a certain port. This property only has effect when igmp-snooping is set to yes.
        """
        return pulumi.get(self, "membership_interval")

    @property
    @pulumi.getter(name="mldVersion")
    def mld_version(self) -> pulumi.Output[int]:
        """
        Selects the MLD version. Version 2 adds support for source-specific multicast. This property only has effect when
        RouterOS IPv6 package is enabled and igmp-snooping is set to yes.
        """
        return pulumi.get(self, "mld_version")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[str]]:
        """
        The default bridge MTU value without any bridge ports added is 1500. The MTU value can be set manually, but it cannot
        exceed the bridge L2MTU or the lowest bridge port L2MTU. If a new bridge port is added with L2MTU which is smaller than
        the actual-mtu of the bridge (set by the mtu property), then manually set value will be ignored and the bridge will act
        as if mtu=auto is set.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="multicastQuerier")
    def multicast_querier(self) -> pulumi.Output[Optional[bool]]:
        """
        Multicast querier generates IGMP general membership queries to which all IGMP capable devices respond with an IGMP
        membership report, usually a PIM (multicast) router or IGMP proxy generates these queries. This property only has an
        effect when igmp-snooping is set to yes. Additionally, the igmp-snooping should be disabled/enabled after changing
        multicast-querier property.
        """
        return pulumi.get(self, "multicast_querier")

    @property
    @pulumi.getter(name="multicastRouter")
    def multicast_router(self) -> pulumi.Output[str]:
        """
        A multicast router port is a port where a multicast router or querier is connected. On this port, unregistered multicast
        streams and IGMP/MLD membership reports will be sent. This setting changes the state of the multicast router for a
        bridge interface itself. This property can be used to send IGMP/MLD membership reports and multicast traffic to the
        bridge interface for further multicast routing or proxying. This property only has an effect when igmp-snooping is set
        to yes.
        """
        return pulumi.get(self, "multicast_router")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[str]]:
        """
        Bridge priority, used by STP to determine root bridge, used by MSTP to determine CIST and IST regional root bridge. This
        property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="protocolMode")
    def protocol_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Select Spanning tree protocol (STP) or Rapid spanning tree protocol (RSTP) to ensure a loop-free topology for any
        bridged LAN.
        """
        return pulumi.get(self, "protocol_mode")

    @property
    @pulumi.getter
    def pvid(self) -> pulumi.Output[Optional[int]]:
        """
        Port VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. It applies e.g. to frames sent
        from bridge IP and destined to a bridge port. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "pvid")

    @property
    @pulumi.getter(name="querierInterval")
    def querier_interval(self) -> pulumi.Output[str]:
        """
        Used to change the interval how often a bridge checks if it is the active multicast querier. This property only has
        effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "querier_interval")

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> pulumi.Output[str]:
        """
        Used to change the interval how often IGMP general membership queries are sent out. This property only has effect when
        igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "query_interval")

    @property
    @pulumi.getter(name="queryResponseInterval")
    def query_response_interval(self) -> pulumi.Output[str]:
        """
        Interval in which a IGMP capable device must reply to a IGMP query with a IGMP membership report. This property only has
        effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "query_response_interval")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> pulumi.Output[Optional[str]]:
        """
        MSTP region name. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="regionRevision")
    def region_revision(self) -> pulumi.Output[Optional[int]]:
        """
        MSTP configuration revision number. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "region_revision")

    @property
    @pulumi.getter
    def running(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "running")

    @property
    @pulumi.getter(name="startupQueryCount")
    def startup_query_count(self) -> pulumi.Output[int]:
        """
        Specifies how many times must startup-query-interval pass until the bridge starts sending out IGMP general membership
        queries periodically. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "startup_query_count")

    @property
    @pulumi.getter(name="startupQueryInterval")
    def startup_query_interval(self) -> pulumi.Output[str]:
        """
        Used to change the amount of time after a bridge starts sending out IGMP general membership queries after the bridge is
        enabled. This property only has effect when igmp-snooping and multicast-querier is set to yes.
        """
        return pulumi.get(self, "startup_query_interval")

    @property
    @pulumi.getter(name="transmitHoldCount")
    def transmit_hold_count(self) -> pulumi.Output[Optional[int]]:
        """
        The Transmit Hold Count used by the Port Transmit state machine to limit transmission rate.
        """
        return pulumi.get(self, "transmit_hold_count")

    @property
    @pulumi.getter(name="vlanFiltering")
    def vlan_filtering(self) -> pulumi.Output[Optional[bool]]:
        """
        Globally enables or disables VLAN functionality for bridge.
        """
        return pulumi.get(self, "vlan_filtering")

