# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InterfaceVrrpArgs', 'InterfaceVrrp']

@pulumi.input_type
class InterfaceVrrpArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 arp_timeout: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 group_master: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_backup: Optional[pulumi.Input[str]] = None,
                 on_fail: Optional[pulumi.Input[str]] = None,
                 on_master: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 preemption_mode: Optional[pulumi.Input[bool]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 remote_address: Optional[pulumi.Input[str]] = None,
                 sync_connection_tracking: Optional[pulumi.Input[bool]] = None,
                 v3_protocol: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 vrid: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a InterfaceVrrp resource.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] arp: ARP resolution protocol mode.
        :param pulumi.Input[str] arp_timeout: ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
        :param pulumi.Input[str] authentication: Authentication method to use for VRRP advertisement packets.
        :param pulumi.Input[str] group_master: Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
        :param pulumi.Input[str] interval: VRRP update interval in seconds. Defines how often master sends advertisement packets.
        :param pulumi.Input[str] mtu: Layer3 Maximum transmission unit ('auto', 0 .. 65535)
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] on_backup: Script to execute when the node is switched to the backup state.
        :param pulumi.Input[str] on_fail: Script to execute when the node fails.
        :param pulumi.Input[str] on_master: Script to execute when the node is switched to master state.
        :param pulumi.Input[str] password: Password required for authentication. Can be ignored if authentication is not used.
        :param pulumi.Input[bool] preemption_mode: Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
        :param pulumi.Input[int] priority: Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
        :param pulumi.Input[str] remote_address: Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
        :param pulumi.Input[bool] sync_connection_tracking: Synchronize connection tracking entries from Master to Backup device.
        :param pulumi.Input[str] v3_protocol: A protocol that will be used by VRRPv3. Valid only if the version is 3.
        :param pulumi.Input[int] version: Which VRRP version to use.
        :param pulumi.Input[int] vrid: Virtual Router identifier. Each Virtual router must have a unique id number.
        """
        pulumi.set(__self__, "interface", interface)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if arp is not None:
            pulumi.set(__self__, "arp", arp)
        if arp_timeout is not None:
            pulumi.set(__self__, "arp_timeout", arp_timeout)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if group_master is not None:
            pulumi.set(__self__, "group_master", group_master)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_backup is not None:
            pulumi.set(__self__, "on_backup", on_backup)
        if on_fail is not None:
            pulumi.set(__self__, "on_fail", on_fail)
        if on_master is not None:
            pulumi.set(__self__, "on_master", on_master)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if preemption_mode is not None:
            pulumi.set(__self__, "preemption_mode", preemption_mode)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if remote_address is not None:
            pulumi.set(__self__, "remote_address", remote_address)
        if sync_connection_tracking is not None:
            pulumi.set(__self__, "sync_connection_tracking", sync_connection_tracking)
        if v3_protocol is not None:
            pulumi.set(__self__, "v3_protocol", v3_protocol)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def arp(self) -> Optional[pulumi.Input[str]]:
        """
        ARP resolution protocol mode.
        """
        return pulumi.get(self, "arp")

    @arp.setter
    def arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp", value)

    @property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
        """
        return pulumi.get(self, "arp_timeout")

    @arp_timeout.setter
    def arp_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_timeout", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method to use for VRRP advertisement packets.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="groupMaster")
    def group_master(self) -> Optional[pulumi.Input[str]]:
        """
        Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
        """
        return pulumi.get(self, "group_master")

    @group_master.setter
    def group_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_master", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        VRRP update interval in seconds. Defines how often master sends advertisement packets.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[str]]:
        """
        Layer3 Maximum transmission unit ('auto', 0 .. 65535)
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onBackup")
    def on_backup(self) -> Optional[pulumi.Input[str]]:
        """
        Script to execute when the node is switched to the backup state.
        """
        return pulumi.get(self, "on_backup")

    @on_backup.setter
    def on_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_backup", value)

    @property
    @pulumi.getter(name="onFail")
    def on_fail(self) -> Optional[pulumi.Input[str]]:
        """
        Script to execute when the node fails.
        """
        return pulumi.get(self, "on_fail")

    @on_fail.setter
    def on_fail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_fail", value)

    @property
    @pulumi.getter(name="onMaster")
    def on_master(self) -> Optional[pulumi.Input[str]]:
        """
        Script to execute when the node is switched to master state.
        """
        return pulumi.get(self, "on_master")

    @on_master.setter
    def on_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_master", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password required for authentication. Can be ignored if authentication is not used.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="preemptionMode")
    def preemption_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
        """
        return pulumi.get(self, "preemption_mode")

    @preemption_mode.setter
    def preemption_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preemption_mode", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
        """
        return pulumi.get(self, "remote_address")

    @remote_address.setter
    def remote_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_address", value)

    @property
    @pulumi.getter(name="syncConnectionTracking")
    def sync_connection_tracking(self) -> Optional[pulumi.Input[bool]]:
        """
        Synchronize connection tracking entries from Master to Backup device.
        """
        return pulumi.get(self, "sync_connection_tracking")

    @sync_connection_tracking.setter
    def sync_connection_tracking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_connection_tracking", value)

    @property
    @pulumi.getter(name="v3Protocol")
    def v3_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        A protocol that will be used by VRRPv3. Valid only if the version is 3.
        """
        return pulumi.get(self, "v3_protocol")

    @v3_protocol.setter
    def v3_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_protocol", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        Which VRRP version to use.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def vrid(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual Router identifier. Each Virtual router must have a unique id number.
        """
        return pulumi.get(self, "vrid")

    @vrid.setter
    def vrid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrid", value)


@pulumi.input_type
class _InterfaceVrrpState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 arp_timeout: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 group_master: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 invalid: Optional[pulumi.Input[bool]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_backup: Optional[pulumi.Input[str]] = None,
                 on_fail: Optional[pulumi.Input[str]] = None,
                 on_master: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 preemption_mode: Optional[pulumi.Input[bool]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 remote_address: Optional[pulumi.Input[str]] = None,
                 running: Optional[pulumi.Input[bool]] = None,
                 sync_connection_tracking: Optional[pulumi.Input[bool]] = None,
                 v3_protocol: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 vrid: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering InterfaceVrrp resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] arp: ARP resolution protocol mode.
        :param pulumi.Input[str] arp_timeout: ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
        :param pulumi.Input[str] authentication: Authentication method to use for VRRP advertisement packets.
        :param pulumi.Input[str] group_master: Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[str] interval: VRRP update interval in seconds. Defines how often master sends advertisement packets.
        :param pulumi.Input[str] mtu: Layer3 Maximum transmission unit ('auto', 0 .. 65535)
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] on_backup: Script to execute when the node is switched to the backup state.
        :param pulumi.Input[str] on_fail: Script to execute when the node fails.
        :param pulumi.Input[str] on_master: Script to execute when the node is switched to master state.
        :param pulumi.Input[str] password: Password required for authentication. Can be ignored if authentication is not used.
        :param pulumi.Input[bool] preemption_mode: Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
        :param pulumi.Input[int] priority: Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
        :param pulumi.Input[str] remote_address: Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
        :param pulumi.Input[bool] sync_connection_tracking: Synchronize connection tracking entries from Master to Backup device.
        :param pulumi.Input[str] v3_protocol: A protocol that will be used by VRRPv3. Valid only if the version is 3.
        :param pulumi.Input[int] version: Which VRRP version to use.
        :param pulumi.Input[int] vrid: Virtual Router identifier. Each Virtual router must have a unique id number.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if arp is not None:
            pulumi.set(__self__, "arp", arp)
        if arp_timeout is not None:
            pulumi.set(__self__, "arp_timeout", arp_timeout)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if group_master is not None:
            pulumi.set(__self__, "group_master", group_master)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if on_backup is not None:
            pulumi.set(__self__, "on_backup", on_backup)
        if on_fail is not None:
            pulumi.set(__self__, "on_fail", on_fail)
        if on_master is not None:
            pulumi.set(__self__, "on_master", on_master)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if preemption_mode is not None:
            pulumi.set(__self__, "preemption_mode", preemption_mode)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if remote_address is not None:
            pulumi.set(__self__, "remote_address", remote_address)
        if running is not None:
            pulumi.set(__self__, "running", running)
        if sync_connection_tracking is not None:
            pulumi.set(__self__, "sync_connection_tracking", sync_connection_tracking)
        if v3_protocol is not None:
            pulumi.set(__self__, "v3_protocol", v3_protocol)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def arp(self) -> Optional[pulumi.Input[str]]:
        """
        ARP resolution protocol mode.
        """
        return pulumi.get(self, "arp")

    @arp.setter
    def arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp", value)

    @property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
        """
        return pulumi.get(self, "arp_timeout")

    @arp_timeout.setter
    def arp_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_timeout", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method to use for VRRP advertisement packets.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="groupMaster")
    def group_master(self) -> Optional[pulumi.Input[str]]:
        """
        Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
        """
        return pulumi.get(self, "group_master")

    @group_master.setter
    def group_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_master", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        VRRP update interval in seconds. Defines how often master sends advertisement packets.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def invalid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invalid", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[str]]:
        """
        Layer3 Maximum transmission unit ('auto', 0 .. 65535)
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="onBackup")
    def on_backup(self) -> Optional[pulumi.Input[str]]:
        """
        Script to execute when the node is switched to the backup state.
        """
        return pulumi.get(self, "on_backup")

    @on_backup.setter
    def on_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_backup", value)

    @property
    @pulumi.getter(name="onFail")
    def on_fail(self) -> Optional[pulumi.Input[str]]:
        """
        Script to execute when the node fails.
        """
        return pulumi.get(self, "on_fail")

    @on_fail.setter
    def on_fail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_fail", value)

    @property
    @pulumi.getter(name="onMaster")
    def on_master(self) -> Optional[pulumi.Input[str]]:
        """
        Script to execute when the node is switched to master state.
        """
        return pulumi.get(self, "on_master")

    @on_master.setter
    def on_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_master", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password required for authentication. Can be ignored if authentication is not used.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="preemptionMode")
    def preemption_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
        """
        return pulumi.get(self, "preemption_mode")

    @preemption_mode.setter
    def preemption_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preemption_mode", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
        """
        return pulumi.get(self, "remote_address")

    @remote_address.setter
    def remote_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_address", value)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running", value)

    @property
    @pulumi.getter(name="syncConnectionTracking")
    def sync_connection_tracking(self) -> Optional[pulumi.Input[bool]]:
        """
        Synchronize connection tracking entries from Master to Backup device.
        """
        return pulumi.get(self, "sync_connection_tracking")

    @sync_connection_tracking.setter
    def sync_connection_tracking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_connection_tracking", value)

    @property
    @pulumi.getter(name="v3Protocol")
    def v3_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        A protocol that will be used by VRRPv3. Valid only if the version is 3.
        """
        return pulumi.get(self, "v3_protocol")

    @v3_protocol.setter
    def v3_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_protocol", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        Which VRRP version to use.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def vrid(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual Router identifier. Each Virtual router must have a unique id number.
        """
        return pulumi.get(self, "vrid")

    @vrid.setter
    def vrid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrid", value)


class InterfaceVrrp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 arp_timeout: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 group_master: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_backup: Optional[pulumi.Input[str]] = None,
                 on_fail: Optional[pulumi.Input[str]] = None,
                 on_master: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 preemption_mode: Optional[pulumi.Input[bool]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 remote_address: Optional[pulumi.Input[str]] = None,
                 sync_connection_tracking: Optional[pulumi.Input[bool]] = None,
                 v3_protocol: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 vrid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        interface_vrrp = routeros.iface.InterfaceVrrp("interfaceVrrp", interface="bridge")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/vrrp get [print show-ids]]

        ```sh
         $ pulumi import routeros:Iface/interfaceVrrp:InterfaceVrrp interface_vrrp "*0"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] arp: ARP resolution protocol mode.
        :param pulumi.Input[str] arp_timeout: ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
        :param pulumi.Input[str] authentication: Authentication method to use for VRRP advertisement packets.
        :param pulumi.Input[str] group_master: Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[str] interval: VRRP update interval in seconds. Defines how often master sends advertisement packets.
        :param pulumi.Input[str] mtu: Layer3 Maximum transmission unit ('auto', 0 .. 65535)
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] on_backup: Script to execute when the node is switched to the backup state.
        :param pulumi.Input[str] on_fail: Script to execute when the node fails.
        :param pulumi.Input[str] on_master: Script to execute when the node is switched to master state.
        :param pulumi.Input[str] password: Password required for authentication. Can be ignored if authentication is not used.
        :param pulumi.Input[bool] preemption_mode: Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
        :param pulumi.Input[int] priority: Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
        :param pulumi.Input[str] remote_address: Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
        :param pulumi.Input[bool] sync_connection_tracking: Synchronize connection tracking entries from Master to Backup device.
        :param pulumi.Input[str] v3_protocol: A protocol that will be used by VRRPv3. Valid only if the version is 3.
        :param pulumi.Input[int] version: Which VRRP version to use.
        :param pulumi.Input[int] vrid: Virtual Router identifier. Each Virtual router must have a unique id number.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InterfaceVrrpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        interface_vrrp = routeros.iface.InterfaceVrrp("interfaceVrrp", interface="bridge")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/vrrp get [print show-ids]]

        ```sh
         $ pulumi import routeros:Iface/interfaceVrrp:InterfaceVrrp interface_vrrp "*0"
        ```

        :param str resource_name: The name of the resource.
        :param InterfaceVrrpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterfaceVrrpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 arp: Optional[pulumi.Input[str]] = None,
                 arp_timeout: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 group_master: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_backup: Optional[pulumi.Input[str]] = None,
                 on_fail: Optional[pulumi.Input[str]] = None,
                 on_master: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 preemption_mode: Optional[pulumi.Input[bool]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 remote_address: Optional[pulumi.Input[str]] = None,
                 sync_connection_tracking: Optional[pulumi.Input[bool]] = None,
                 v3_protocol: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 vrid: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterfaceVrrpArgs.__new__(InterfaceVrrpArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["arp"] = arp
            __props__.__dict__["arp_timeout"] = arp_timeout
            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["comment"] = comment
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["group_master"] = group_master
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interval"] = interval
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            __props__.__dict__["on_backup"] = on_backup
            __props__.__dict__["on_fail"] = on_fail
            __props__.__dict__["on_master"] = on_master
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["preemption_mode"] = preemption_mode
            __props__.__dict__["priority"] = priority
            __props__.__dict__["remote_address"] = remote_address
            __props__.__dict__["sync_connection_tracking"] = sync_connection_tracking
            __props__.__dict__["v3_protocol"] = v3_protocol
            __props__.__dict__["version"] = version
            __props__.__dict__["vrid"] = vrid
            __props__.__dict__["invalid"] = None
            __props__.__dict__["mac_address"] = None
            __props__.__dict__["running"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(InterfaceVrrp, __self__).__init__(
            'routeros:Iface/interfaceVrrp:InterfaceVrrp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            arp: Optional[pulumi.Input[str]] = None,
            arp_timeout: Optional[pulumi.Input[str]] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            group_master: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interval: Optional[pulumi.Input[str]] = None,
            invalid: Optional[pulumi.Input[bool]] = None,
            mac_address: Optional[pulumi.Input[str]] = None,
            mtu: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            on_backup: Optional[pulumi.Input[str]] = None,
            on_fail: Optional[pulumi.Input[str]] = None,
            on_master: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            preemption_mode: Optional[pulumi.Input[bool]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            remote_address: Optional[pulumi.Input[str]] = None,
            running: Optional[pulumi.Input[bool]] = None,
            sync_connection_tracking: Optional[pulumi.Input[bool]] = None,
            v3_protocol: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None,
            vrid: Optional[pulumi.Input[int]] = None) -> 'InterfaceVrrp':
        """
        Get an existing InterfaceVrrp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] arp: ARP resolution protocol mode.
        :param pulumi.Input[str] arp_timeout: ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
        :param pulumi.Input[str] authentication: Authentication method to use for VRRP advertisement packets.
        :param pulumi.Input[str] group_master: Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[str] interval: VRRP update interval in seconds. Defines how often master sends advertisement packets.
        :param pulumi.Input[str] mtu: Layer3 Maximum transmission unit ('auto', 0 .. 65535)
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] on_backup: Script to execute when the node is switched to the backup state.
        :param pulumi.Input[str] on_fail: Script to execute when the node fails.
        :param pulumi.Input[str] on_master: Script to execute when the node is switched to master state.
        :param pulumi.Input[str] password: Password required for authentication. Can be ignored if authentication is not used.
        :param pulumi.Input[bool] preemption_mode: Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
        :param pulumi.Input[int] priority: Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
        :param pulumi.Input[str] remote_address: Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
        :param pulumi.Input[bool] sync_connection_tracking: Synchronize connection tracking entries from Master to Backup device.
        :param pulumi.Input[str] v3_protocol: A protocol that will be used by VRRPv3. Valid only if the version is 3.
        :param pulumi.Input[int] version: Which VRRP version to use.
        :param pulumi.Input[int] vrid: Virtual Router identifier. Each Virtual router must have a unique id number.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterfaceVrrpState.__new__(_InterfaceVrrpState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["arp"] = arp
        __props__.__dict__["arp_timeout"] = arp_timeout
        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["comment"] = comment
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["group_master"] = group_master
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interval"] = interval
        __props__.__dict__["invalid"] = invalid
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["on_backup"] = on_backup
        __props__.__dict__["on_fail"] = on_fail
        __props__.__dict__["on_master"] = on_master
        __props__.__dict__["password"] = password
        __props__.__dict__["preemption_mode"] = preemption_mode
        __props__.__dict__["priority"] = priority
        __props__.__dict__["remote_address"] = remote_address
        __props__.__dict__["running"] = running
        __props__.__dict__["sync_connection_tracking"] = sync_connection_tracking
        __props__.__dict__["v3_protocol"] = v3_protocol
        __props__.__dict__["version"] = version
        __props__.__dict__["vrid"] = vrid
        return InterfaceVrrp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def arp(self) -> pulumi.Output[Optional[str]]:
        """
        ARP resolution protocol mode.
        """
        return pulumi.get(self, "arp")

    @property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> pulumi.Output[Optional[str]]:
        """
        ARP timeout is time how long ARP record is kept in ARP table after no packets are received from IP. Value auto equals to the value of arp-timeout in IP/Settings, default is 30s. Can use postfix ms, s, M, h, d for milliseconds, seconds, minutes, hours or days. If no postfix is set then seconds (s) is used.
        """
        return pulumi.get(self, "arp_timeout")

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication method to use for VRRP advertisement packets.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="groupMaster")
    def group_master(self) -> pulumi.Output[str]:
        """
        Allows combining multiple VRRP interfaces to maintain the same VRRP status within the group.
        """
        return pulumi.get(self, "group_master")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[Optional[str]]:
        """
        VRRP update interval in seconds. Defines how often master sends advertisement packets.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def invalid(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[str]:
        """
        Layer3 Maximum transmission unit ('auto', 0 .. 65535)
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onBackup")
    def on_backup(self) -> pulumi.Output[Optional[str]]:
        """
        Script to execute when the node is switched to the backup state.
        """
        return pulumi.get(self, "on_backup")

    @property
    @pulumi.getter(name="onFail")
    def on_fail(self) -> pulumi.Output[Optional[str]]:
        """
        Script to execute when the node fails.
        """
        return pulumi.get(self, "on_fail")

    @property
    @pulumi.getter(name="onMaster")
    def on_master(self) -> pulumi.Output[Optional[str]]:
        """
        Script to execute when the node is switched to master state.
        """
        return pulumi.get(self, "on_master")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password required for authentication. Can be ignored if authentication is not used.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="preemptionMode")
    def preemption_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the master node always has the priority. When set to 'no' the backup node will not be elected to be a master until the current master fails, even if the backup node has higher priority than the current master. This setting is ignored if the owner router becomes available
        """
        return pulumi.get(self, "preemption_mode")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[int]]:
        """
        Priority of VRRP node used in Master election algorithm. A higher number means higher priority. '255' is reserved for the router that owns VR IP and '0' is reserved for the Master router to indicate that it is releasing responsibility.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the remote address of the other VRRP router for syncing connection tracking. If not set, the system autodetects the remote address via VRRP. The remote address is used only if sync-connection-tracking=yes.Sync connection tracking uses UDP port 8275.
        """
        return pulumi.get(self, "remote_address")

    @property
    @pulumi.getter
    def running(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "running")

    @property
    @pulumi.getter(name="syncConnectionTracking")
    def sync_connection_tracking(self) -> pulumi.Output[Optional[bool]]:
        """
        Synchronize connection tracking entries from Master to Backup device.
        """
        return pulumi.get(self, "sync_connection_tracking")

    @property
    @pulumi.getter(name="v3Protocol")
    def v3_protocol(self) -> pulumi.Output[Optional[str]]:
        """
        A protocol that will be used by VRRPv3. Valid only if the version is 3.
        """
        return pulumi.get(self, "v3_protocol")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[int]]:
        """
        Which VRRP version to use.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def vrid(self) -> pulumi.Output[Optional[int]]:
        """
        Virtual Router identifier. Each Virtual router must have a unique id number.
        """
        return pulumi.get(self, "vrid")

