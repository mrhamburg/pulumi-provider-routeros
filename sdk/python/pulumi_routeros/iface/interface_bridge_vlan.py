# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InterfaceBridgeVlanArgs', 'InterfaceBridgeVlan']

@pulumi.input_type
class InterfaceBridgeVlanArgs:
    def __init__(__self__, *,
                 bridge: pulumi.Input[str],
                 vlan_ids: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 taggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 untaggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a InterfaceBridgeVlan resource.
        :param pulumi.Input[str] bridge: The bridge interface which the respective VLAN entry is intended for.
        :param pulumi.Input[str] vlan_ids: The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taggeds: Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] untaggeds: Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
        """
        pulumi.set(__self__, "bridge", bridge)
        pulumi.set(__self__, "vlan_ids", vlan_ids)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if taggeds is not None:
            pulumi.set(__self__, "taggeds", taggeds)
        if untaggeds is not None:
            pulumi.set(__self__, "untaggeds", untaggeds)

    @property
    @pulumi.getter
    def bridge(self) -> pulumi.Input[str]:
        """
        The bridge interface which the respective VLAN entry is intended for.
        """
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: pulumi.Input[str]):
        pulumi.set(self, "bridge", value)

    @property
    @pulumi.getter(name="vlanIds")
    def vlan_ids(self) -> pulumi.Input[str]:
        """
        The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
        """
        return pulumi.get(self, "vlan_ids")

    @vlan_ids.setter
    def vlan_ids(self, value: pulumi.Input[str]):
        pulumi.set(self, "vlan_ids", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def taggeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
        """
        return pulumi.get(self, "taggeds")

    @taggeds.setter
    def taggeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "taggeds", value)

    @property
    @pulumi.getter
    def untaggeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
        """
        return pulumi.get(self, "untaggeds")

    @untaggeds.setter
    def untaggeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "untaggeds", value)


@pulumi.input_type
class _InterfaceBridgeVlanState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 current_taggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 current_untaggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 taggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 untaggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vlan_ids: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InterfaceBridgeVlan resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] bridge: The bridge interface which the respective VLAN entry is intended for.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taggeds: Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] untaggeds: Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
        :param pulumi.Input[str] vlan_ids: The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if bridge is not None:
            pulumi.set(__self__, "bridge", bridge)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if current_taggeds is not None:
            pulumi.set(__self__, "current_taggeds", current_taggeds)
        if current_untaggeds is not None:
            pulumi.set(__self__, "current_untaggeds", current_untaggeds)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dynamic is not None:
            pulumi.set(__self__, "dynamic", dynamic)
        if taggeds is not None:
            pulumi.set(__self__, "taggeds", taggeds)
        if untaggeds is not None:
            pulumi.set(__self__, "untaggeds", untaggeds)
        if vlan_ids is not None:
            pulumi.set(__self__, "vlan_ids", vlan_ids)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def bridge(self) -> Optional[pulumi.Input[str]]:
        """
        The bridge interface which the respective VLAN entry is intended for.
        """
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bridge", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="currentTaggeds")
    def current_taggeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "current_taggeds")

    @current_taggeds.setter
    def current_taggeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "current_taggeds", value)

    @property
    @pulumi.getter(name="currentUntaggeds")
    def current_untaggeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "current_untaggeds")

    @current_untaggeds.setter
    def current_untaggeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "current_untaggeds", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter
    def taggeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
        """
        return pulumi.get(self, "taggeds")

    @taggeds.setter
    def taggeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "taggeds", value)

    @property
    @pulumi.getter
    def untaggeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
        """
        return pulumi.get(self, "untaggeds")

    @untaggeds.setter
    def untaggeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "untaggeds", value)

    @property
    @pulumi.getter(name="vlanIds")
    def vlan_ids(self) -> Optional[pulumi.Input[str]]:
        """
        The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
        """
        return pulumi.get(self, "vlan_ids")

    @vlan_ids.setter
    def vlan_ids(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_ids", value)


class InterfaceBridgeVlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 taggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 untaggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vlan_ids: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        bridge_vlan = routeros.iface.InterfaceBridgeVlan("bridgeVlan",
            bridge="bridge",
            taggeds=[
                "bridge",
                "ether1",
            ],
            untaggeds=["ether5"],
            vlan_ids="50")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/bridge/vlan get [print show-ids]]

        ```sh
         $ pulumi import routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan bridge_vlan "*0"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] bridge: The bridge interface which the respective VLAN entry is intended for.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taggeds: Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] untaggeds: Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
        :param pulumi.Input[str] vlan_ids: The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InterfaceBridgeVlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        bridge_vlan = routeros.iface.InterfaceBridgeVlan("bridgeVlan",
            bridge="bridge",
            taggeds=[
                "bridge",
                "ether1",
            ],
            untaggeds=["ether5"],
            vlan_ids="50")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/bridge/vlan get [print show-ids]]

        ```sh
         $ pulumi import routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan bridge_vlan "*0"
        ```

        :param str resource_name: The name of the resource.
        :param InterfaceBridgeVlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterfaceBridgeVlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 taggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 untaggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vlan_ids: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterfaceBridgeVlanArgs.__new__(InterfaceBridgeVlanArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            if bridge is None and not opts.urn:
                raise TypeError("Missing required property 'bridge'")
            __props__.__dict__["bridge"] = bridge
            __props__.__dict__["comment"] = comment
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["taggeds"] = taggeds
            __props__.__dict__["untaggeds"] = untaggeds
            if vlan_ids is None and not opts.urn:
                raise TypeError("Missing required property 'vlan_ids'")
            __props__.__dict__["vlan_ids"] = vlan_ids
            __props__.__dict__["current_taggeds"] = None
            __props__.__dict__["current_untaggeds"] = None
            __props__.__dict__["dynamic"] = None
        super(InterfaceBridgeVlan, __self__).__init__(
            'routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            bridge: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            current_taggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            current_untaggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            dynamic: Optional[pulumi.Input[bool]] = None,
            taggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            untaggeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vlan_ids: Optional[pulumi.Input[str]] = None) -> 'InterfaceBridgeVlan':
        """
        Get an existing InterfaceBridgeVlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] bridge: The bridge interface which the respective VLAN entry is intended for.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taggeds: Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] untaggeds: Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
        :param pulumi.Input[str] vlan_ids: The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterfaceBridgeVlanState.__new__(_InterfaceBridgeVlanState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["bridge"] = bridge
        __props__.__dict__["comment"] = comment
        __props__.__dict__["current_taggeds"] = current_taggeds
        __props__.__dict__["current_untaggeds"] = current_untaggeds
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["dynamic"] = dynamic
        __props__.__dict__["taggeds"] = taggeds
        __props__.__dict__["untaggeds"] = untaggeds
        __props__.__dict__["vlan_ids"] = vlan_ids
        return InterfaceBridgeVlan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def bridge(self) -> pulumi.Output[str]:
        """
        The bridge interface which the respective VLAN entry is intended for.
        """
        return pulumi.get(self, "bridge")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="currentTaggeds")
    def current_taggeds(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "current_taggeds")

    @property
    @pulumi.getter(name="currentUntaggeds")
    def current_untaggeds(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "current_untaggeds")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dynamic(self) -> pulumi.Output[bool]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def taggeds(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
        """
        return pulumi.get(self, "taggeds")

    @property
    @pulumi.getter
    def untaggeds(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
        """
        return pulumi.get(self, "untaggeds")

    @property
    @pulumi.getter(name="vlanIds")
    def vlan_ids(self) -> pulumi.Output[str]:
        """
        The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
        """
        return pulumi.get(self, "vlan_ids")

