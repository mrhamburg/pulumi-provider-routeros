# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ResourceCapsManConfigurationArgs', 'ResourceCapsManConfiguration']

@pulumi.input_type
class ResourceCapsManConfigurationArgs:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 ___ts_: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 datapath: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 disconnect_timeout: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 frame_lifetime: Optional[pulumi.Input[str]] = None,
                 guard_interval: Optional[pulumi.Input[str]] = None,
                 hide_ssid: Optional[pulumi.Input[bool]] = None,
                 hw_protection_mode: Optional[pulumi.Input[str]] = None,
                 hw_retries: Optional[pulumi.Input[int]] = None,
                 installation: Optional[pulumi.Input[str]] = None,
                 keepalive_frames: Optional[pulumi.Input[str]] = None,
                 load_balancing_group: Optional[pulumi.Input[str]] = None,
                 max_sta_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 multicast_helper: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rx_chains: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 security: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 tx_chains: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a ResourceCapsManConfiguration resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___ts_: <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] channel: Channel inline settings.
        :param pulumi.Input[str] country: Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] datapath: Datapath inline settings.
        :param pulumi.Input[str] disconnect_timeout: This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
        :param pulumi.Input[str] distance: How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
        :param pulumi.Input[str] frame_lifetime: Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
        :param pulumi.Input[str] guard_interval: Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
        :param pulumi.Input[bool] hide_ssid: This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
        :param pulumi.Input[str] hw_protection_mode: Frame protection support property. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)).
        :param pulumi.Input[int] hw_retries: Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
        :param pulumi.Input[str] installation: Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
        :param pulumi.Input[str] keepalive_frames: If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
        :param pulumi.Input[str] load_balancing_group: Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
        :param pulumi.Input[int] max_sta_count: Maximum number of associated clients.
        :param pulumi.Input[str] mode: Set operational mode. Only **ap** currently supported.
        :param pulumi.Input[str] multicast_helper: When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] rates: Rates inline settings.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] rx_chains: Which antennas to use for receive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] security: Security inline settings.
        :param pulumi.Input[str] ssid: SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tx_chains: Which antennas to use for transmit.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if ___ts_ is not None:
            pulumi.set(__self__, "___ts_", ___ts_)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if datapath is not None:
            pulumi.set(__self__, "datapath", datapath)
        if disconnect_timeout is not None:
            pulumi.set(__self__, "disconnect_timeout", disconnect_timeout)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if frame_lifetime is not None:
            pulumi.set(__self__, "frame_lifetime", frame_lifetime)
        if guard_interval is not None:
            pulumi.set(__self__, "guard_interval", guard_interval)
        if hide_ssid is not None:
            pulumi.set(__self__, "hide_ssid", hide_ssid)
        if hw_protection_mode is not None:
            pulumi.set(__self__, "hw_protection_mode", hw_protection_mode)
        if hw_retries is not None:
            pulumi.set(__self__, "hw_retries", hw_retries)
        if installation is not None:
            pulumi.set(__self__, "installation", installation)
        if keepalive_frames is not None:
            pulumi.set(__self__, "keepalive_frames", keepalive_frames)
        if load_balancing_group is not None:
            pulumi.set(__self__, "load_balancing_group", load_balancing_group)
        if max_sta_count is not None:
            pulumi.set(__self__, "max_sta_count", max_sta_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if multicast_helper is not None:
            pulumi.set(__self__, "multicast_helper", multicast_helper)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rates is not None:
            pulumi.set(__self__, "rates", rates)
        if rx_chains is not None:
            pulumi.set(__self__, "rx_chains", rx_chains)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if ssid is not None:
            pulumi.set(__self__, "ssid", ssid)
        if tx_chains is not None:
            pulumi.set(__self__, "tx_chains", tx_chains)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def ___ts_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___ts_")

    @___ts_.setter
    def ___ts_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___ts_", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Channel inline settings.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def datapath(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Datapath inline settings.
        """
        return pulumi.get(self, "datapath")

    @datapath.setter
    def datapath(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "datapath", value)

    @property
    @pulumi.getter(name="disconnectTimeout")
    def disconnect_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
        """
        return pulumi.get(self, "disconnect_timeout")

    @disconnect_timeout.setter
    def disconnect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect_timeout", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[str]]:
        """
        How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="frameLifetime")
    def frame_lifetime(self) -> Optional[pulumi.Input[str]]:
        """
        Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
        """
        return pulumi.get(self, "frame_lifetime")

    @frame_lifetime.setter
    def frame_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frame_lifetime", value)

    @property
    @pulumi.getter(name="guardInterval")
    def guard_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
        """
        return pulumi.get(self, "guard_interval")

    @guard_interval.setter
    def guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guard_interval", value)

    @property
    @pulumi.getter(name="hideSsid")
    def hide_ssid(self) -> Optional[pulumi.Input[bool]]:
        """
        This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
        """
        return pulumi.get(self, "hide_ssid")

    @hide_ssid.setter
    def hide_ssid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_ssid", value)

    @property
    @pulumi.getter(name="hwProtectionMode")
    def hw_protection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Frame protection support property. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)).
        """
        return pulumi.get(self, "hw_protection_mode")

    @hw_protection_mode.setter
    def hw_protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_protection_mode", value)

    @property
    @pulumi.getter(name="hwRetries")
    def hw_retries(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
        """
        return pulumi.get(self, "hw_retries")

    @hw_retries.setter
    def hw_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hw_retries", value)

    @property
    @pulumi.getter
    def installation(self) -> Optional[pulumi.Input[str]]:
        """
        Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
        """
        return pulumi.get(self, "installation")

    @installation.setter
    def installation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "installation", value)

    @property
    @pulumi.getter(name="keepaliveFrames")
    def keepalive_frames(self) -> Optional[pulumi.Input[str]]:
        """
        If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
        """
        return pulumi.get(self, "keepalive_frames")

    @keepalive_frames.setter
    def keepalive_frames(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keepalive_frames", value)

    @property
    @pulumi.getter(name="loadBalancingGroup")
    def load_balancing_group(self) -> Optional[pulumi.Input[str]]:
        """
        Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
        """
        return pulumi.get(self, "load_balancing_group")

    @load_balancing_group.setter
    def load_balancing_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_group", value)

    @property
    @pulumi.getter(name="maxStaCount")
    def max_sta_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of associated clients.
        """
        return pulumi.get(self, "max_sta_count")

    @max_sta_count.setter
    def max_sta_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_sta_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set operational mode. Only **ap** currently supported.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="multicastHelper")
    def multicast_helper(self) -> Optional[pulumi.Input[str]]:
        """
        When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
        """
        return pulumi.get(self, "multicast_helper")

    @multicast_helper.setter
    def multicast_helper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_helper", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rates(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Rates inline settings.
        """
        return pulumi.get(self, "rates")

    @rates.setter
    def rates(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "rates", value)

    @property
    @pulumi.getter(name="rxChains")
    def rx_chains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Which antennas to use for receive.
        """
        return pulumi.get(self, "rx_chains")

    @rx_chains.setter
    def rx_chains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "rx_chains", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Security inline settings.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def ssid(self) -> Optional[pulumi.Input[str]]:
        """
        SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
        """
        return pulumi.get(self, "ssid")

    @ssid.setter
    def ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid", value)

    @property
    @pulumi.getter(name="txChains")
    def tx_chains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Which antennas to use for transmit.
        """
        return pulumi.get(self, "tx_chains")

    @tx_chains.setter
    def tx_chains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tx_chains", value)


@pulumi.input_type
class _ResourceCapsManConfigurationState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 ___ts_: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 datapath: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 disconnect_timeout: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 frame_lifetime: Optional[pulumi.Input[str]] = None,
                 guard_interval: Optional[pulumi.Input[str]] = None,
                 hide_ssid: Optional[pulumi.Input[bool]] = None,
                 hw_protection_mode: Optional[pulumi.Input[str]] = None,
                 hw_retries: Optional[pulumi.Input[int]] = None,
                 installation: Optional[pulumi.Input[str]] = None,
                 keepalive_frames: Optional[pulumi.Input[str]] = None,
                 load_balancing_group: Optional[pulumi.Input[str]] = None,
                 max_sta_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 multicast_helper: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rx_chains: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 security: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 tx_chains: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering ResourceCapsManConfiguration resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___ts_: <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] channel: Channel inline settings.
        :param pulumi.Input[str] country: Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] datapath: Datapath inline settings.
        :param pulumi.Input[str] disconnect_timeout: This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
        :param pulumi.Input[str] distance: How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
        :param pulumi.Input[str] frame_lifetime: Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
        :param pulumi.Input[str] guard_interval: Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
        :param pulumi.Input[bool] hide_ssid: This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
        :param pulumi.Input[str] hw_protection_mode: Frame protection support property. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)).
        :param pulumi.Input[int] hw_retries: Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
        :param pulumi.Input[str] installation: Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
        :param pulumi.Input[str] keepalive_frames: If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
        :param pulumi.Input[str] load_balancing_group: Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
        :param pulumi.Input[int] max_sta_count: Maximum number of associated clients.
        :param pulumi.Input[str] mode: Set operational mode. Only **ap** currently supported.
        :param pulumi.Input[str] multicast_helper: When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] rates: Rates inline settings.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] rx_chains: Which antennas to use for receive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] security: Security inline settings.
        :param pulumi.Input[str] ssid: SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tx_chains: Which antennas to use for transmit.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if ___ts_ is not None:
            pulumi.set(__self__, "___ts_", ___ts_)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if datapath is not None:
            pulumi.set(__self__, "datapath", datapath)
        if disconnect_timeout is not None:
            pulumi.set(__self__, "disconnect_timeout", disconnect_timeout)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if frame_lifetime is not None:
            pulumi.set(__self__, "frame_lifetime", frame_lifetime)
        if guard_interval is not None:
            pulumi.set(__self__, "guard_interval", guard_interval)
        if hide_ssid is not None:
            pulumi.set(__self__, "hide_ssid", hide_ssid)
        if hw_protection_mode is not None:
            pulumi.set(__self__, "hw_protection_mode", hw_protection_mode)
        if hw_retries is not None:
            pulumi.set(__self__, "hw_retries", hw_retries)
        if installation is not None:
            pulumi.set(__self__, "installation", installation)
        if keepalive_frames is not None:
            pulumi.set(__self__, "keepalive_frames", keepalive_frames)
        if load_balancing_group is not None:
            pulumi.set(__self__, "load_balancing_group", load_balancing_group)
        if max_sta_count is not None:
            pulumi.set(__self__, "max_sta_count", max_sta_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if multicast_helper is not None:
            pulumi.set(__self__, "multicast_helper", multicast_helper)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rates is not None:
            pulumi.set(__self__, "rates", rates)
        if rx_chains is not None:
            pulumi.set(__self__, "rx_chains", rx_chains)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if ssid is not None:
            pulumi.set(__self__, "ssid", ssid)
        if tx_chains is not None:
            pulumi.set(__self__, "tx_chains", tx_chains)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def ___ts_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___ts_")

    @___ts_.setter
    def ___ts_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___ts_", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Channel inline settings.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def datapath(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Datapath inline settings.
        """
        return pulumi.get(self, "datapath")

    @datapath.setter
    def datapath(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "datapath", value)

    @property
    @pulumi.getter(name="disconnectTimeout")
    def disconnect_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
        """
        return pulumi.get(self, "disconnect_timeout")

    @disconnect_timeout.setter
    def disconnect_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect_timeout", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[str]]:
        """
        How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="frameLifetime")
    def frame_lifetime(self) -> Optional[pulumi.Input[str]]:
        """
        Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
        """
        return pulumi.get(self, "frame_lifetime")

    @frame_lifetime.setter
    def frame_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frame_lifetime", value)

    @property
    @pulumi.getter(name="guardInterval")
    def guard_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
        """
        return pulumi.get(self, "guard_interval")

    @guard_interval.setter
    def guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guard_interval", value)

    @property
    @pulumi.getter(name="hideSsid")
    def hide_ssid(self) -> Optional[pulumi.Input[bool]]:
        """
        This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
        """
        return pulumi.get(self, "hide_ssid")

    @hide_ssid.setter
    def hide_ssid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_ssid", value)

    @property
    @pulumi.getter(name="hwProtectionMode")
    def hw_protection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Frame protection support property. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)).
        """
        return pulumi.get(self, "hw_protection_mode")

    @hw_protection_mode.setter
    def hw_protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_protection_mode", value)

    @property
    @pulumi.getter(name="hwRetries")
    def hw_retries(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
        """
        return pulumi.get(self, "hw_retries")

    @hw_retries.setter
    def hw_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hw_retries", value)

    @property
    @pulumi.getter
    def installation(self) -> Optional[pulumi.Input[str]]:
        """
        Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
        """
        return pulumi.get(self, "installation")

    @installation.setter
    def installation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "installation", value)

    @property
    @pulumi.getter(name="keepaliveFrames")
    def keepalive_frames(self) -> Optional[pulumi.Input[str]]:
        """
        If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
        """
        return pulumi.get(self, "keepalive_frames")

    @keepalive_frames.setter
    def keepalive_frames(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keepalive_frames", value)

    @property
    @pulumi.getter(name="loadBalancingGroup")
    def load_balancing_group(self) -> Optional[pulumi.Input[str]]:
        """
        Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
        """
        return pulumi.get(self, "load_balancing_group")

    @load_balancing_group.setter
    def load_balancing_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_group", value)

    @property
    @pulumi.getter(name="maxStaCount")
    def max_sta_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of associated clients.
        """
        return pulumi.get(self, "max_sta_count")

    @max_sta_count.setter
    def max_sta_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_sta_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set operational mode. Only **ap** currently supported.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="multicastHelper")
    def multicast_helper(self) -> Optional[pulumi.Input[str]]:
        """
        When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
        """
        return pulumi.get(self, "multicast_helper")

    @multicast_helper.setter
    def multicast_helper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_helper", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rates(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Rates inline settings.
        """
        return pulumi.get(self, "rates")

    @rates.setter
    def rates(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "rates", value)

    @property
    @pulumi.getter(name="rxChains")
    def rx_chains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Which antennas to use for receive.
        """
        return pulumi.get(self, "rx_chains")

    @rx_chains.setter
    def rx_chains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "rx_chains", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Security inline settings.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def ssid(self) -> Optional[pulumi.Input[str]]:
        """
        SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
        """
        return pulumi.get(self, "ssid")

    @ssid.setter
    def ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid", value)

    @property
    @pulumi.getter(name="txChains")
    def tx_chains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Which antennas to use for transmit.
        """
        return pulumi.get(self, "tx_chains")

    @tx_chains.setter
    def tx_chains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "tx_chains", value)


class ResourceCapsManConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 ___ts_: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 datapath: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 disconnect_timeout: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 frame_lifetime: Optional[pulumi.Input[str]] = None,
                 guard_interval: Optional[pulumi.Input[str]] = None,
                 hide_ssid: Optional[pulumi.Input[bool]] = None,
                 hw_protection_mode: Optional[pulumi.Input[str]] = None,
                 hw_retries: Optional[pulumi.Input[int]] = None,
                 installation: Optional[pulumi.Input[str]] = None,
                 keepalive_frames: Optional[pulumi.Input[str]] = None,
                 load_balancing_group: Optional[pulumi.Input[str]] = None,
                 max_sta_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 multicast_helper: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rx_chains: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 security: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 tx_chains: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_configuration = routeros.ResourceCapsManConfiguration("testConfiguration",
            comment="Comment",
            country="no_country_set",
            disconnect_timeout="1s150ms",
            distance="indoors",
            frame_lifetime="0.12",
            guard_interval="long",
            hide_ssid=True,
            hw_protection_mode="rts-cts",
            hw_retries=1,
            installation="indoor",
            keepalive_frames="enabled",
            load_balancing_group="",
            max_sta_count=1,
            mode="ap",
            multicast_helper="full",
            rx_chains=[
                1,
                3,
            ],
            ssid="SSID",
            tx_chains=[
                0,
                2,
            ])
        test_channel = routeros.ResourceCapsManChannel("testChannel")
        test_datapath = routeros.ResourceCapsManDatapath("testDatapath")
        test_rates = routeros.ResourceCapsManRates("testRates")
        test_security = routeros.ResourceCapsManSecurity("testSecurity")
        test_configuration2 = routeros.ResourceCapsManConfiguration("testConfiguration2",
            channel={
                "config": test_channel.name,
                "band": "2ghz-b/g/n",
                "control_channel_width": "10mhz",
                "extension_channel": "eCee",
                "frequency": "2412",
                "reselect_interval": "1h",
                "save_selected": "true",
                "secondary_frequency": "disabled",
                "skip_dfs_channels": "true",
                "tx_power": "20",
            },
            datapath={
                "config": test_datapath.name,
                "arp": "local-proxy-arp",
                "bridge": "bridge",
                "bridge_cost": "100",
                "bridge_horizon": "200",
                "client_to_client_forwarding": "true",
                "interface_list": "static",
                "l2mtu": "1450",
                "local_forwarding": "true",
                "mtu": "1500",
                "vlan_id": "101",
                "vlan_mode": "no-tag",
            },
            rates={
                "config": test_rates.name,
                "basic": "1Mbps,5.5Mbps,6Mbps,18Mbps,36Mbps,54Mbps",
                "ht_basic_mcs": "mcs-0,mcs-7,mcs-11,mcs-14,mcs-16,mcs-21",
                "ht_supported_mcs": "mcs-3,mcs-8,mcs-10,mcs-13,mcs-17,mcs-18",
                "supported": "2Mbps,11Mbps,9Mbps,12Mbps,24Mbps,48Mbps",
                "vht_basic_mcs": "none",
                "vht_supported_mcs": "mcs0-9,mcs0-7",
            },
            security={
                "config": test_security.name,
                "authentication_types": "wpa-psk,wpa-eap",
                "disable_pmkid": "true",
                "eap_methods": "eap-tls,passthrough",
                "eap_radius_accounting": "true",
                "encryption": "aes-ccm,tkip",
                "group_encryption": "aes-ccm",
                "group_key_update": "1h",
                "passphrase": "AAAAAAAAA",
                "tls_certificate": "none",
                "tls_mode": "verify-certificate",
            },
            opts=pulumi.ResourceOptions(depends_on=[
                    test_channel,
                    test_datapath,
                    test_rates,
                    test_security,
                ]))
        ```

        ## Import

        Import with the name of the CAPsMAN configuration in case of the example use test_configuration_name

        ```sh
         $ pulumi import routeros:index/resourceCapsManConfiguration:ResourceCapsManConfiguration test_configuration_2 test_configuration_name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___ts_: <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] channel: Channel inline settings.
        :param pulumi.Input[str] country: Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] datapath: Datapath inline settings.
        :param pulumi.Input[str] disconnect_timeout: This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
        :param pulumi.Input[str] distance: How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
        :param pulumi.Input[str] frame_lifetime: Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
        :param pulumi.Input[str] guard_interval: Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
        :param pulumi.Input[bool] hide_ssid: This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
        :param pulumi.Input[str] hw_protection_mode: Frame protection support property. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)).
        :param pulumi.Input[int] hw_retries: Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
        :param pulumi.Input[str] installation: Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
        :param pulumi.Input[str] keepalive_frames: If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
        :param pulumi.Input[str] load_balancing_group: Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
        :param pulumi.Input[int] max_sta_count: Maximum number of associated clients.
        :param pulumi.Input[str] mode: Set operational mode. Only **ap** currently supported.
        :param pulumi.Input[str] multicast_helper: When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] rates: Rates inline settings.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] rx_chains: Which antennas to use for receive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] security: Security inline settings.
        :param pulumi.Input[str] ssid: SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tx_chains: Which antennas to use for transmit.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ResourceCapsManConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_configuration = routeros.ResourceCapsManConfiguration("testConfiguration",
            comment="Comment",
            country="no_country_set",
            disconnect_timeout="1s150ms",
            distance="indoors",
            frame_lifetime="0.12",
            guard_interval="long",
            hide_ssid=True,
            hw_protection_mode="rts-cts",
            hw_retries=1,
            installation="indoor",
            keepalive_frames="enabled",
            load_balancing_group="",
            max_sta_count=1,
            mode="ap",
            multicast_helper="full",
            rx_chains=[
                1,
                3,
            ],
            ssid="SSID",
            tx_chains=[
                0,
                2,
            ])
        test_channel = routeros.ResourceCapsManChannel("testChannel")
        test_datapath = routeros.ResourceCapsManDatapath("testDatapath")
        test_rates = routeros.ResourceCapsManRates("testRates")
        test_security = routeros.ResourceCapsManSecurity("testSecurity")
        test_configuration2 = routeros.ResourceCapsManConfiguration("testConfiguration2",
            channel={
                "config": test_channel.name,
                "band": "2ghz-b/g/n",
                "control_channel_width": "10mhz",
                "extension_channel": "eCee",
                "frequency": "2412",
                "reselect_interval": "1h",
                "save_selected": "true",
                "secondary_frequency": "disabled",
                "skip_dfs_channels": "true",
                "tx_power": "20",
            },
            datapath={
                "config": test_datapath.name,
                "arp": "local-proxy-arp",
                "bridge": "bridge",
                "bridge_cost": "100",
                "bridge_horizon": "200",
                "client_to_client_forwarding": "true",
                "interface_list": "static",
                "l2mtu": "1450",
                "local_forwarding": "true",
                "mtu": "1500",
                "vlan_id": "101",
                "vlan_mode": "no-tag",
            },
            rates={
                "config": test_rates.name,
                "basic": "1Mbps,5.5Mbps,6Mbps,18Mbps,36Mbps,54Mbps",
                "ht_basic_mcs": "mcs-0,mcs-7,mcs-11,mcs-14,mcs-16,mcs-21",
                "ht_supported_mcs": "mcs-3,mcs-8,mcs-10,mcs-13,mcs-17,mcs-18",
                "supported": "2Mbps,11Mbps,9Mbps,12Mbps,24Mbps,48Mbps",
                "vht_basic_mcs": "none",
                "vht_supported_mcs": "mcs0-9,mcs0-7",
            },
            security={
                "config": test_security.name,
                "authentication_types": "wpa-psk,wpa-eap",
                "disable_pmkid": "true",
                "eap_methods": "eap-tls,passthrough",
                "eap_radius_accounting": "true",
                "encryption": "aes-ccm,tkip",
                "group_encryption": "aes-ccm",
                "group_key_update": "1h",
                "passphrase": "AAAAAAAAA",
                "tls_certificate": "none",
                "tls_mode": "verify-certificate",
            },
            opts=pulumi.ResourceOptions(depends_on=[
                    test_channel,
                    test_datapath,
                    test_rates,
                    test_security,
                ]))
        ```

        ## Import

        Import with the name of the CAPsMAN configuration in case of the example use test_configuration_name

        ```sh
         $ pulumi import routeros:index/resourceCapsManConfiguration:ResourceCapsManConfiguration test_configuration_2 test_configuration_name
        ```

        :param str resource_name: The name of the resource.
        :param ResourceCapsManConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceCapsManConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 ___ts_: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 datapath: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 disconnect_timeout: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 frame_lifetime: Optional[pulumi.Input[str]] = None,
                 guard_interval: Optional[pulumi.Input[str]] = None,
                 hide_ssid: Optional[pulumi.Input[bool]] = None,
                 hw_protection_mode: Optional[pulumi.Input[str]] = None,
                 hw_retries: Optional[pulumi.Input[int]] = None,
                 installation: Optional[pulumi.Input[str]] = None,
                 keepalive_frames: Optional[pulumi.Input[str]] = None,
                 load_balancing_group: Optional[pulumi.Input[str]] = None,
                 max_sta_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 multicast_helper: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rx_chains: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 security: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ssid: Optional[pulumi.Input[str]] = None,
                 tx_chains: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceCapsManConfigurationArgs.__new__(ResourceCapsManConfigurationArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["___ts_"] = ___ts_
            __props__.__dict__["channel"] = channel
            __props__.__dict__["comment"] = comment
            __props__.__dict__["country"] = country
            __props__.__dict__["datapath"] = datapath
            __props__.__dict__["disconnect_timeout"] = disconnect_timeout
            __props__.__dict__["distance"] = distance
            __props__.__dict__["frame_lifetime"] = frame_lifetime
            __props__.__dict__["guard_interval"] = guard_interval
            __props__.__dict__["hide_ssid"] = hide_ssid
            __props__.__dict__["hw_protection_mode"] = hw_protection_mode
            __props__.__dict__["hw_retries"] = hw_retries
            __props__.__dict__["installation"] = installation
            __props__.__dict__["keepalive_frames"] = keepalive_frames
            __props__.__dict__["load_balancing_group"] = load_balancing_group
            __props__.__dict__["max_sta_count"] = max_sta_count
            __props__.__dict__["mode"] = mode
            __props__.__dict__["multicast_helper"] = multicast_helper
            __props__.__dict__["name"] = name
            __props__.__dict__["rates"] = rates
            __props__.__dict__["rx_chains"] = rx_chains
            __props__.__dict__["security"] = security
            __props__.__dict__["ssid"] = ssid
            __props__.__dict__["tx_chains"] = tx_chains
        super(ResourceCapsManConfiguration, __self__).__init__(
            'routeros:index/resourceCapsManConfiguration:ResourceCapsManConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            ___ts_: Optional[pulumi.Input[str]] = None,
            channel: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            country: Optional[pulumi.Input[str]] = None,
            datapath: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            disconnect_timeout: Optional[pulumi.Input[str]] = None,
            distance: Optional[pulumi.Input[str]] = None,
            frame_lifetime: Optional[pulumi.Input[str]] = None,
            guard_interval: Optional[pulumi.Input[str]] = None,
            hide_ssid: Optional[pulumi.Input[bool]] = None,
            hw_protection_mode: Optional[pulumi.Input[str]] = None,
            hw_retries: Optional[pulumi.Input[int]] = None,
            installation: Optional[pulumi.Input[str]] = None,
            keepalive_frames: Optional[pulumi.Input[str]] = None,
            load_balancing_group: Optional[pulumi.Input[str]] = None,
            max_sta_count: Optional[pulumi.Input[int]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            multicast_helper: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rates: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            rx_chains: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            security: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            ssid: Optional[pulumi.Input[str]] = None,
            tx_chains: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'ResourceCapsManConfiguration':
        """
        Get an existing ResourceCapsManConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___ts_: <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] channel: Channel inline settings.
        :param pulumi.Input[str] country: Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] datapath: Datapath inline settings.
        :param pulumi.Input[str] disconnect_timeout: This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
        :param pulumi.Input[str] distance: How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
        :param pulumi.Input[str] frame_lifetime: Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
        :param pulumi.Input[str] guard_interval: Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
        :param pulumi.Input[bool] hide_ssid: This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
        :param pulumi.Input[str] hw_protection_mode: Frame protection support property. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)).
        :param pulumi.Input[int] hw_retries: Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
        :param pulumi.Input[str] installation: Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
        :param pulumi.Input[str] keepalive_frames: If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
        :param pulumi.Input[str] load_balancing_group: Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
        :param pulumi.Input[int] max_sta_count: Maximum number of associated clients.
        :param pulumi.Input[str] mode: Set operational mode. Only **ap** currently supported.
        :param pulumi.Input[str] multicast_helper: When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] rates: Rates inline settings.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] rx_chains: Which antennas to use for receive.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] security: Security inline settings.
        :param pulumi.Input[str] ssid: SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] tx_chains: Which antennas to use for transmit.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceCapsManConfigurationState.__new__(_ResourceCapsManConfigurationState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["___ts_"] = ___ts_
        __props__.__dict__["channel"] = channel
        __props__.__dict__["comment"] = comment
        __props__.__dict__["country"] = country
        __props__.__dict__["datapath"] = datapath
        __props__.__dict__["disconnect_timeout"] = disconnect_timeout
        __props__.__dict__["distance"] = distance
        __props__.__dict__["frame_lifetime"] = frame_lifetime
        __props__.__dict__["guard_interval"] = guard_interval
        __props__.__dict__["hide_ssid"] = hide_ssid
        __props__.__dict__["hw_protection_mode"] = hw_protection_mode
        __props__.__dict__["hw_retries"] = hw_retries
        __props__.__dict__["installation"] = installation
        __props__.__dict__["keepalive_frames"] = keepalive_frames
        __props__.__dict__["load_balancing_group"] = load_balancing_group
        __props__.__dict__["max_sta_count"] = max_sta_count
        __props__.__dict__["mode"] = mode
        __props__.__dict__["multicast_helper"] = multicast_helper
        __props__.__dict__["name"] = name
        __props__.__dict__["rates"] = rates
        __props__.__dict__["rx_chains"] = rx_chains
        __props__.__dict__["security"] = security
        __props__.__dict__["ssid"] = ssid
        __props__.__dict__["tx_chains"] = tx_chains
        return ResourceCapsManConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def ___ts_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___ts_")

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Channel inline settings.
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def country(self) -> pulumi.Output[Optional[str]]:
        """
        Limits available bands, frequencies and maximum transmit power for each frequency. Also specifies default value of scan-list. Value no*country*set is an FCC compliant set of channels.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def datapath(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Datapath inline settings.
        """
        return pulumi.get(self, "datapath")

    @property
    @pulumi.getter(name="disconnectTimeout")
    def disconnect_timeout(self) -> pulumi.Output[Optional[str]]:
        """
        This interval is measured from third sending failure on the lowest data rate. At this point 3 * (hw-retries + 1) frame transmits on the lowest data rate had failed. During disconnect-timeout packet transmission will be retried with on-fail-retry-time interval. If no frame can be transmitted successfully during disconnect-timeout, the connection is closed, and this event is logged as "extensive data loss". Successful frame transmission resets this timer.
        """
        return pulumi.get(self, "disconnect_timeout")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[Optional[str]]:
        """
        How long to wait for confirmation of unicast frames (ACKs) before considering transmission unsuccessful, or in short ACK-Timeout.
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="frameLifetime")
    def frame_lifetime(self) -> pulumi.Output[Optional[str]]:
        """
        Discard frames that have been queued for sending longer than frame-lifetime. By default, when value of this property is 0, frames are discarded only after connection is closed (format: 0.00 sec).
        """
        return pulumi.get(self, "frame_lifetime")

    @property
    @pulumi.getter(name="guardInterval")
    def guard_interval(self) -> pulumi.Output[Optional[str]]:
        """
        Whether to allow use of short guard interval (refer to 802.11n MCS specification to see how this may affect throughput). "any" will use either short or long, depending on data rate, "long" will use long.
        """
        return pulumi.get(self, "guard_interval")

    @property
    @pulumi.getter(name="hideSsid")
    def hide_ssid(self) -> pulumi.Output[bool]:
        """
        This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks that are shown by some client software. Changing this setting does not improve the security of the wireless network, because SSID is included in other frames sent by the AP.
        """
        return pulumi.get(self, "hide_ssid")

    @property
    @pulumi.getter(name="hwProtectionMode")
    def hw_protection_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Frame protection support property. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Frame_protection_support_(RTS/CTS)).
        """
        return pulumi.get(self, "hw_protection_mode")

    @property
    @pulumi.getter(name="hwRetries")
    def hw_retries(self) -> pulumi.Output[Optional[int]]:
        """
        Number of times sending frame is retried without considering it a transmission failure. [See docs](https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless)
        """
        return pulumi.get(self, "hw_retries")

    @property
    @pulumi.getter
    def installation(self) -> pulumi.Output[Optional[str]]:
        """
        Adjusts scan-list to use indoor, outdoor or all frequencies for the country that is set.
        """
        return pulumi.get(self, "installation")

    @property
    @pulumi.getter(name="keepaliveFrames")
    def keepalive_frames(self) -> pulumi.Output[Optional[str]]:
        """
        If a client has not communicated for around 20 seconds, AP sends a "keepalive-frame".
        """
        return pulumi.get(self, "keepalive_frames")

    @property
    @pulumi.getter(name="loadBalancingGroup")
    def load_balancing_group(self) -> pulumi.Output[Optional[str]]:
        """
        Tags the interface to the load balancing group. For a client to connect to interface in this group, the interface should have the same number of already connected clients as all other interfaces in the group or smaller. Useful in setups where ranges of CAPs mostly overlap.
        """
        return pulumi.get(self, "load_balancing_group")

    @property
    @pulumi.getter(name="maxStaCount")
    def max_sta_count(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum number of associated clients.
        """
        return pulumi.get(self, "max_sta_count")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[str]]:
        """
        Set operational mode. Only **ap** currently supported.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="multicastHelper")
    def multicast_helper(self) -> pulumi.Output[Optional[str]]:
        """
        When set to full multicast packets will be sent with unicast destination MAC address, resolving multicast problem on a wireless link. This option should be enabled only on the access point, clients should be configured in station-bridge mode.
        """
        return pulumi.get(self, "multicast_helper")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rates(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Rates inline settings.
        """
        return pulumi.get(self, "rates")

    @property
    @pulumi.getter(name="rxChains")
    def rx_chains(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Which antennas to use for receive.
        """
        return pulumi.get(self, "rx_chains")

    @property
    @pulumi.getter
    def security(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Security inline settings.
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter
    def ssid(self) -> pulumi.Output[Optional[str]]:
        """
        SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
        """
        return pulumi.get(self, "ssid")

    @property
    @pulumi.getter(name="txChains")
    def tx_chains(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Which antennas to use for transmit.
        """
        return pulumi.get(self, "tx_chains")

