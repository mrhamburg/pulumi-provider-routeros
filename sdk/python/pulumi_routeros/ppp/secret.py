# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SecretArgs', 'Secret']

@pulumi.input_type
class SecretArgs:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 caller_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_bytes_in: Optional[pulumi.Input[int]] = None,
                 limit_bytes_out: Optional[pulumi.Input[int]] = None,
                 local_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 remote_address: Optional[pulumi.Input[str]] = None,
                 remote_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Secret resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] caller_id: For PPTP and L2TP it is the IP address a client must connect from. For PPPoE it is the MAC address (written in CAPITAL letters) a client must  connect from. For ISDN it is the caller's number (that may or may not be  provided by the operator) the client may dial-in from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6_routes: IPv6 routes.
        :param pulumi.Input[int] limit_bytes_in: Maximal amount of bytes for a session that client can upload.
        :param pulumi.Input[int] limit_bytes_out: Maximal amount of bytes for a session that client can download.
        :param pulumi.Input[str] local_address: IP address that will be set locally on ppp interface.
        :param pulumi.Input[str] name: Name used for authentication.
        :param pulumi.Input[str] password: Password used for authentication.
        :param pulumi.Input[str] profile: Which user profile to use.
        :param pulumi.Input[str] remote_address: IP address that will be assigned to remote ppp interface.
        :param pulumi.Input[str] remote_ipv6_prefix: IPv6 prefix assigned to ppp client. Prefix is added to ND prefix list enabling stateless address auto-configuration on ppp interface.Available starting from v5.0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] routes: Routes  that appear on the server when the client is connected. The route  format is: dst-address gateway metric (for example, 10.1.0.0/ 24  10.0.0.1 1). Other syntax is not acceptable since it can be represented  in incorrect way. Several routes may be specified separated with commas.  This parameter will be ignored for OpenVPN.
        :param pulumi.Input[str] service: Specifies the services that particular user will be able to use.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if caller_id is not None:
            pulumi.set(__self__, "caller_id", caller_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if ipv6_routes is not None:
            pulumi.set(__self__, "ipv6_routes", ipv6_routes)
        if limit_bytes_in is not None:
            pulumi.set(__self__, "limit_bytes_in", limit_bytes_in)
        if limit_bytes_out is not None:
            pulumi.set(__self__, "limit_bytes_out", limit_bytes_out)
        if local_address is not None:
            pulumi.set(__self__, "local_address", local_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if remote_address is not None:
            pulumi.set(__self__, "remote_address", remote_address)
        if remote_ipv6_prefix is not None:
            pulumi.set(__self__, "remote_ipv6_prefix", remote_ipv6_prefix)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="callerId")
    def caller_id(self) -> Optional[pulumi.Input[str]]:
        """
        For PPTP and L2TP it is the IP address a client must connect from. For PPPoE it is the MAC address (written in CAPITAL letters) a client must  connect from. For ISDN it is the caller's number (that may or may not be  provided by the operator) the client may dial-in from.
        """
        return pulumi.get(self, "caller_id")

    @caller_id.setter
    def caller_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caller_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="ipv6Routes")
    def ipv6_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPv6 routes.
        """
        return pulumi.get(self, "ipv6_routes")

    @ipv6_routes.setter
    def ipv6_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv6_routes", value)

    @property
    @pulumi.getter(name="limitBytesIn")
    def limit_bytes_in(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal amount of bytes for a session that client can upload.
        """
        return pulumi.get(self, "limit_bytes_in")

    @limit_bytes_in.setter
    def limit_bytes_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit_bytes_in", value)

    @property
    @pulumi.getter(name="limitBytesOut")
    def limit_bytes_out(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal amount of bytes for a session that client can download.
        """
        return pulumi.get(self, "limit_bytes_out")

    @limit_bytes_out.setter
    def limit_bytes_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit_bytes_out", value)

    @property
    @pulumi.getter(name="localAddress")
    def local_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address that will be set locally on ppp interface.
        """
        return pulumi.get(self, "local_address")

    @local_address.setter
    def local_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name used for authentication.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password used for authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Which user profile to use.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address that will be assigned to remote ppp interface.
        """
        return pulumi.get(self, "remote_address")

    @remote_address.setter
    def remote_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_address", value)

    @property
    @pulumi.getter(name="remoteIpv6Prefix")
    def remote_ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix assigned to ppp client. Prefix is added to ND prefix list enabling stateless address auto-configuration on ppp interface.Available starting from v5.0.
        """
        return pulumi.get(self, "remote_ipv6_prefix")

    @remote_ipv6_prefix.setter
    def remote_ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_ipv6_prefix", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Routes  that appear on the server when the client is connected. The route  format is: dst-address gateway metric (for example, 10.1.0.0/ 24  10.0.0.1 1). Other syntax is not acceptable since it can be represented  in incorrect way. Several routes may be specified separated with commas.  This parameter will be ignored for OpenVPN.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the services that particular user will be able to use.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class _SecretState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 caller_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 last_caller_id: Optional[pulumi.Input[str]] = None,
                 last_disconnect_reason: Optional[pulumi.Input[str]] = None,
                 last_logged_out: Optional[pulumi.Input[str]] = None,
                 limit_bytes_in: Optional[pulumi.Input[int]] = None,
                 limit_bytes_out: Optional[pulumi.Input[int]] = None,
                 local_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 remote_address: Optional[pulumi.Input[str]] = None,
                 remote_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Secret resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] caller_id: For PPTP and L2TP it is the IP address a client must connect from. For PPPoE it is the MAC address (written in CAPITAL letters) a client must  connect from. For ISDN it is the caller's number (that may or may not be  provided by the operator) the client may dial-in from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6_routes: IPv6 routes.
        :param pulumi.Input[int] limit_bytes_in: Maximal amount of bytes for a session that client can upload.
        :param pulumi.Input[int] limit_bytes_out: Maximal amount of bytes for a session that client can download.
        :param pulumi.Input[str] local_address: IP address that will be set locally on ppp interface.
        :param pulumi.Input[str] name: Name used for authentication.
        :param pulumi.Input[str] password: Password used for authentication.
        :param pulumi.Input[str] profile: Which user profile to use.
        :param pulumi.Input[str] remote_address: IP address that will be assigned to remote ppp interface.
        :param pulumi.Input[str] remote_ipv6_prefix: IPv6 prefix assigned to ppp client. Prefix is added to ND prefix list enabling stateless address auto-configuration on ppp interface.Available starting from v5.0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] routes: Routes  that appear on the server when the client is connected. The route  format is: dst-address gateway metric (for example, 10.1.0.0/ 24  10.0.0.1 1). Other syntax is not acceptable since it can be represented  in incorrect way. Several routes may be specified separated with commas.  This parameter will be ignored for OpenVPN.
        :param pulumi.Input[str] service: Specifies the services that particular user will be able to use.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if caller_id is not None:
            pulumi.set(__self__, "caller_id", caller_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if ipv6_routes is not None:
            pulumi.set(__self__, "ipv6_routes", ipv6_routes)
        if last_caller_id is not None:
            pulumi.set(__self__, "last_caller_id", last_caller_id)
        if last_disconnect_reason is not None:
            pulumi.set(__self__, "last_disconnect_reason", last_disconnect_reason)
        if last_logged_out is not None:
            pulumi.set(__self__, "last_logged_out", last_logged_out)
        if limit_bytes_in is not None:
            pulumi.set(__self__, "limit_bytes_in", limit_bytes_in)
        if limit_bytes_out is not None:
            pulumi.set(__self__, "limit_bytes_out", limit_bytes_out)
        if local_address is not None:
            pulumi.set(__self__, "local_address", local_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if remote_address is not None:
            pulumi.set(__self__, "remote_address", remote_address)
        if remote_ipv6_prefix is not None:
            pulumi.set(__self__, "remote_ipv6_prefix", remote_ipv6_prefix)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="callerId")
    def caller_id(self) -> Optional[pulumi.Input[str]]:
        """
        For PPTP and L2TP it is the IP address a client must connect from. For PPPoE it is the MAC address (written in CAPITAL letters) a client must  connect from. For ISDN it is the caller's number (that may or may not be  provided by the operator) the client may dial-in from.
        """
        return pulumi.get(self, "caller_id")

    @caller_id.setter
    def caller_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caller_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="ipv6Routes")
    def ipv6_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPv6 routes.
        """
        return pulumi.get(self, "ipv6_routes")

    @ipv6_routes.setter
    def ipv6_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv6_routes", value)

    @property
    @pulumi.getter(name="lastCallerId")
    def last_caller_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_caller_id")

    @last_caller_id.setter
    def last_caller_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_caller_id", value)

    @property
    @pulumi.getter(name="lastDisconnectReason")
    def last_disconnect_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_disconnect_reason")

    @last_disconnect_reason.setter
    def last_disconnect_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_disconnect_reason", value)

    @property
    @pulumi.getter(name="lastLoggedOut")
    def last_logged_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_logged_out")

    @last_logged_out.setter
    def last_logged_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_logged_out", value)

    @property
    @pulumi.getter(name="limitBytesIn")
    def limit_bytes_in(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal amount of bytes for a session that client can upload.
        """
        return pulumi.get(self, "limit_bytes_in")

    @limit_bytes_in.setter
    def limit_bytes_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit_bytes_in", value)

    @property
    @pulumi.getter(name="limitBytesOut")
    def limit_bytes_out(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal amount of bytes for a session that client can download.
        """
        return pulumi.get(self, "limit_bytes_out")

    @limit_bytes_out.setter
    def limit_bytes_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit_bytes_out", value)

    @property
    @pulumi.getter(name="localAddress")
    def local_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address that will be set locally on ppp interface.
        """
        return pulumi.get(self, "local_address")

    @local_address.setter
    def local_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name used for authentication.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password used for authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Which user profile to use.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address that will be assigned to remote ppp interface.
        """
        return pulumi.get(self, "remote_address")

    @remote_address.setter
    def remote_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_address", value)

    @property
    @pulumi.getter(name="remoteIpv6Prefix")
    def remote_ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix assigned to ppp client. Prefix is added to ND prefix list enabling stateless address auto-configuration on ppp interface.Available starting from v5.0.
        """
        return pulumi.get(self, "remote_ipv6_prefix")

    @remote_ipv6_prefix.setter
    def remote_ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_ipv6_prefix", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Routes  that appear on the server when the client is connected. The route  format is: dst-address gateway metric (for example, 10.1.0.0/ 24  10.0.0.1 1). Other syntax is not acceptable since it can be represented  in incorrect way. Several routes may be specified separated with commas.  This parameter will be ignored for OpenVPN.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the services that particular user will be able to use.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


class Secret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 caller_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_bytes_in: Optional[pulumi.Input[int]] = None,
                 limit_bytes_out: Optional[pulumi.Input[int]] = None,
                 local_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 remote_address: Optional[pulumi.Input[str]] = None,
                 remote_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test = routeros.ppp.Secret("test",
            password="123",
            profile="default")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ppp/secret get [print show-ids]]

        ```sh
         $ pulumi import routeros:Ppp/secret:Secret test *6
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] caller_id: For PPTP and L2TP it is the IP address a client must connect from. For PPPoE it is the MAC address (written in CAPITAL letters) a client must  connect from. For ISDN it is the caller's number (that may or may not be  provided by the operator) the client may dial-in from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6_routes: IPv6 routes.
        :param pulumi.Input[int] limit_bytes_in: Maximal amount of bytes for a session that client can upload.
        :param pulumi.Input[int] limit_bytes_out: Maximal amount of bytes for a session that client can download.
        :param pulumi.Input[str] local_address: IP address that will be set locally on ppp interface.
        :param pulumi.Input[str] name: Name used for authentication.
        :param pulumi.Input[str] password: Password used for authentication.
        :param pulumi.Input[str] profile: Which user profile to use.
        :param pulumi.Input[str] remote_address: IP address that will be assigned to remote ppp interface.
        :param pulumi.Input[str] remote_ipv6_prefix: IPv6 prefix assigned to ppp client. Prefix is added to ND prefix list enabling stateless address auto-configuration on ppp interface.Available starting from v5.0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] routes: Routes  that appear on the server when the client is connected. The route  format is: dst-address gateway metric (for example, 10.1.0.0/ 24  10.0.0.1 1). Other syntax is not acceptable since it can be represented  in incorrect way. Several routes may be specified separated with commas.  This parameter will be ignored for OpenVPN.
        :param pulumi.Input[str] service: Specifies the services that particular user will be able to use.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SecretArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test = routeros.ppp.Secret("test",
            password="123",
            profile="default")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ppp/secret get [print show-ids]]

        ```sh
         $ pulumi import routeros:Ppp/secret:Secret test *6
        ```

        :param str resource_name: The name of the resource.
        :param SecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 caller_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit_bytes_in: Optional[pulumi.Input[int]] = None,
                 limit_bytes_out: Optional[pulumi.Input[int]] = None,
                 local_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 remote_address: Optional[pulumi.Input[str]] = None,
                 remote_ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecretArgs.__new__(SecretArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["caller_id"] = caller_id
            __props__.__dict__["comment"] = comment
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["ipv6_routes"] = ipv6_routes
            __props__.__dict__["limit_bytes_in"] = limit_bytes_in
            __props__.__dict__["limit_bytes_out"] = limit_bytes_out
            __props__.__dict__["local_address"] = local_address
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["profile"] = profile
            __props__.__dict__["remote_address"] = remote_address
            __props__.__dict__["remote_ipv6_prefix"] = remote_ipv6_prefix
            __props__.__dict__["routes"] = routes
            __props__.__dict__["service"] = service
            __props__.__dict__["last_caller_id"] = None
            __props__.__dict__["last_disconnect_reason"] = None
            __props__.__dict__["last_logged_out"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Secret, __self__).__init__(
            'routeros:Ppp/secret:Secret',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            caller_id: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            ipv6_routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            last_caller_id: Optional[pulumi.Input[str]] = None,
            last_disconnect_reason: Optional[pulumi.Input[str]] = None,
            last_logged_out: Optional[pulumi.Input[str]] = None,
            limit_bytes_in: Optional[pulumi.Input[int]] = None,
            limit_bytes_out: Optional[pulumi.Input[int]] = None,
            local_address: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            profile: Optional[pulumi.Input[str]] = None,
            remote_address: Optional[pulumi.Input[str]] = None,
            remote_ipv6_prefix: Optional[pulumi.Input[str]] = None,
            routes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            service: Optional[pulumi.Input[str]] = None) -> 'Secret':
        """
        Get an existing Secret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] caller_id: For PPTP and L2TP it is the IP address a client must connect from. For PPPoE it is the MAC address (written in CAPITAL letters) a client must  connect from. For ISDN it is the caller's number (that may or may not be  provided by the operator) the client may dial-in from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6_routes: IPv6 routes.
        :param pulumi.Input[int] limit_bytes_in: Maximal amount of bytes for a session that client can upload.
        :param pulumi.Input[int] limit_bytes_out: Maximal amount of bytes for a session that client can download.
        :param pulumi.Input[str] local_address: IP address that will be set locally on ppp interface.
        :param pulumi.Input[str] name: Name used for authentication.
        :param pulumi.Input[str] password: Password used for authentication.
        :param pulumi.Input[str] profile: Which user profile to use.
        :param pulumi.Input[str] remote_address: IP address that will be assigned to remote ppp interface.
        :param pulumi.Input[str] remote_ipv6_prefix: IPv6 prefix assigned to ppp client. Prefix is added to ND prefix list enabling stateless address auto-configuration on ppp interface.Available starting from v5.0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] routes: Routes  that appear on the server when the client is connected. The route  format is: dst-address gateway metric (for example, 10.1.0.0/ 24  10.0.0.1 1). Other syntax is not acceptable since it can be represented  in incorrect way. Several routes may be specified separated with commas.  This parameter will be ignored for OpenVPN.
        :param pulumi.Input[str] service: Specifies the services that particular user will be able to use.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecretState.__new__(_SecretState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["caller_id"] = caller_id
        __props__.__dict__["comment"] = comment
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["ipv6_routes"] = ipv6_routes
        __props__.__dict__["last_caller_id"] = last_caller_id
        __props__.__dict__["last_disconnect_reason"] = last_disconnect_reason
        __props__.__dict__["last_logged_out"] = last_logged_out
        __props__.__dict__["limit_bytes_in"] = limit_bytes_in
        __props__.__dict__["limit_bytes_out"] = limit_bytes_out
        __props__.__dict__["local_address"] = local_address
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["profile"] = profile
        __props__.__dict__["remote_address"] = remote_address
        __props__.__dict__["remote_ipv6_prefix"] = remote_ipv6_prefix
        __props__.__dict__["routes"] = routes
        __props__.__dict__["service"] = service
        return Secret(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter(name="callerId")
    def caller_id(self) -> pulumi.Output[Optional[str]]:
        """
        For PPTP and L2TP it is the IP address a client must connect from. For PPPoE it is the MAC address (written in CAPITAL letters) a client must  connect from. For ISDN it is the caller's number (that may or may not be  provided by the operator) the client may dial-in from.
        """
        return pulumi.get(self, "caller_id")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="ipv6Routes")
    def ipv6_routes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IPv6 routes.
        """
        return pulumi.get(self, "ipv6_routes")

    @property
    @pulumi.getter(name="lastCallerId")
    def last_caller_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_caller_id")

    @property
    @pulumi.getter(name="lastDisconnectReason")
    def last_disconnect_reason(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_disconnect_reason")

    @property
    @pulumi.getter(name="lastLoggedOut")
    def last_logged_out(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_logged_out")

    @property
    @pulumi.getter(name="limitBytesIn")
    def limit_bytes_in(self) -> pulumi.Output[Optional[int]]:
        """
        Maximal amount of bytes for a session that client can upload.
        """
        return pulumi.get(self, "limit_bytes_in")

    @property
    @pulumi.getter(name="limitBytesOut")
    def limit_bytes_out(self) -> pulumi.Output[Optional[int]]:
        """
        Maximal amount of bytes for a session that client can download.
        """
        return pulumi.get(self, "limit_bytes_out")

    @property
    @pulumi.getter(name="localAddress")
    def local_address(self) -> pulumi.Output[Optional[str]]:
        """
        IP address that will be set locally on ppp interface.
        """
        return pulumi.get(self, "local_address")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name used for authentication.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password used for authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Output[Optional[str]]:
        """
        Which user profile to use.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> pulumi.Output[Optional[str]]:
        """
        IP address that will be assigned to remote ppp interface.
        """
        return pulumi.get(self, "remote_address")

    @property
    @pulumi.getter(name="remoteIpv6Prefix")
    def remote_ipv6_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        IPv6 prefix assigned to ppp client. Prefix is added to ND prefix list enabling stateless address auto-configuration on ppp interface.Available starting from v5.0.
        """
        return pulumi.get(self, "remote_ipv6_prefix")

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Routes  that appear on the server when the client is connected. The route  format is: dst-address gateway metric (for example, 10.1.0.0/ 24  10.0.0.1 1). Other syntax is not acceptable since it can be represented  in incorrect way. Several routes may be specified separated with commas.  This parameter will be ignored for OpenVPN.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the services that particular user will be able to use.
        """
        return pulumi.get(self, "service")

