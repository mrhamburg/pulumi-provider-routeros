# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ResourceCapsManChannelArgs', 'ResourceCapsManChannel']

@pulumi.input_type
class ResourceCapsManChannelArgs:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_channel_width: Optional[pulumi.Input[str]] = None,
                 extension_channel: Optional[pulumi.Input[str]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reselect_interval: Optional[pulumi.Input[str]] = None,
                 save_selected: Optional[pulumi.Input[bool]] = None,
                 secondary_frequency: Optional[pulumi.Input[str]] = None,
                 skip_dfs_channels: Optional[pulumi.Input[bool]] = None,
                 tx_power: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ResourceCapsManChannel resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] band: Define operational radio frequency band and mode taken from hardware capability of wireless card.
        :param pulumi.Input[str] control_channel_width: Control channel width.
        :param pulumi.Input[str] extension_channel: Extension channel configuration. (E.g. Ce = extension channel is above Control channel, eC = extension channel is below Control channel)
        :param pulumi.Input[int] frequency: Channel frequency value in MHz on which AP will operate. If left blank, CAPsMAN will automatically determine the best frequency that is least occupied.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] reselect_interval: The interval after which the least occupied frequency is chosen, can be defined as a random interval, ex. as '30m..60m'. Works only if channel.frequency is left blank.
        :param pulumi.Input[bool] save_selected: If channel frequency is chosen automatically and channel.reselect-interval is used, then saves the last picked frequency.
        :param pulumi.Input[str] secondary_frequency: Specifies the second frequency that will be used for 80+80MHz configuration. Set it to Disabled in order to disable 80+80MHz capability.
        :param pulumi.Input[bool] skip_dfs_channels: If channel.frequency is left blank, the selection will skip DFS channels.
        :param pulumi.Input[int] tx_power: TX  Power for CAP interface (for the whole interface not for individual  chains) in dBm. It is not possible to set higher than allowed by country  regulations or interface. By default max allowed by country or  interface is used.
        :param pulumi.Input[str] width: Channel Width in MHz.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if control_channel_width is not None:
            pulumi.set(__self__, "control_channel_width", control_channel_width)
        if extension_channel is not None:
            pulumi.set(__self__, "extension_channel", extension_channel)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reselect_interval is not None:
            pulumi.set(__self__, "reselect_interval", reselect_interval)
        if save_selected is not None:
            pulumi.set(__self__, "save_selected", save_selected)
        if secondary_frequency is not None:
            pulumi.set(__self__, "secondary_frequency", secondary_frequency)
        if skip_dfs_channels is not None:
            pulumi.set(__self__, "skip_dfs_channels", skip_dfs_channels)
        if tx_power is not None:
            pulumi.set(__self__, "tx_power", tx_power)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        Define operational radio frequency band and mode taken from hardware capability of wireless card.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="controlChannelWidth")
    def control_channel_width(self) -> Optional[pulumi.Input[str]]:
        """
        Control channel width.
        """
        return pulumi.get(self, "control_channel_width")

    @control_channel_width.setter
    def control_channel_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_channel_width", value)

    @property
    @pulumi.getter(name="extensionChannel")
    def extension_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Extension channel configuration. (E.g. Ce = extension channel is above Control channel, eC = extension channel is below Control channel)
        """
        return pulumi.get(self, "extension_channel")

    @extension_channel.setter
    def extension_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension_channel", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Channel frequency value in MHz on which AP will operate. If left blank, CAPsMAN will automatically determine the best frequency that is least occupied.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reselectInterval")
    def reselect_interval(self) -> Optional[pulumi.Input[str]]:
        """
        The interval after which the least occupied frequency is chosen, can be defined as a random interval, ex. as '30m..60m'. Works only if channel.frequency is left blank.
        """
        return pulumi.get(self, "reselect_interval")

    @reselect_interval.setter
    def reselect_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reselect_interval", value)

    @property
    @pulumi.getter(name="saveSelected")
    def save_selected(self) -> Optional[pulumi.Input[bool]]:
        """
        If channel frequency is chosen automatically and channel.reselect-interval is used, then saves the last picked frequency.
        """
        return pulumi.get(self, "save_selected")

    @save_selected.setter
    def save_selected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "save_selected", value)

    @property
    @pulumi.getter(name="secondaryFrequency")
    def secondary_frequency(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the second frequency that will be used for 80+80MHz configuration. Set it to Disabled in order to disable 80+80MHz capability.
        """
        return pulumi.get(self, "secondary_frequency")

    @secondary_frequency.setter
    def secondary_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_frequency", value)

    @property
    @pulumi.getter(name="skipDfsChannels")
    def skip_dfs_channels(self) -> Optional[pulumi.Input[bool]]:
        """
        If channel.frequency is left blank, the selection will skip DFS channels.
        """
        return pulumi.get(self, "skip_dfs_channels")

    @skip_dfs_channels.setter
    def skip_dfs_channels(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_dfs_channels", value)

    @property
    @pulumi.getter(name="txPower")
    def tx_power(self) -> Optional[pulumi.Input[int]]:
        """
        TX  Power for CAP interface (for the whole interface not for individual  chains) in dBm. It is not possible to set higher than allowed by country  regulations or interface. By default max allowed by country or  interface is used.
        """
        return pulumi.get(self, "tx_power")

    @tx_power.setter
    def tx_power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tx_power", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        Channel Width in MHz.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class _ResourceCapsManChannelState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_channel_width: Optional[pulumi.Input[str]] = None,
                 extension_channel: Optional[pulumi.Input[str]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reselect_interval: Optional[pulumi.Input[str]] = None,
                 save_selected: Optional[pulumi.Input[bool]] = None,
                 secondary_frequency: Optional[pulumi.Input[str]] = None,
                 skip_dfs_channels: Optional[pulumi.Input[bool]] = None,
                 tx_power: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ResourceCapsManChannel resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] band: Define operational radio frequency band and mode taken from hardware capability of wireless card.
        :param pulumi.Input[str] control_channel_width: Control channel width.
        :param pulumi.Input[str] extension_channel: Extension channel configuration. (E.g. Ce = extension channel is above Control channel, eC = extension channel is below Control channel)
        :param pulumi.Input[int] frequency: Channel frequency value in MHz on which AP will operate. If left blank, CAPsMAN will automatically determine the best frequency that is least occupied.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] reselect_interval: The interval after which the least occupied frequency is chosen, can be defined as a random interval, ex. as '30m..60m'. Works only if channel.frequency is left blank.
        :param pulumi.Input[bool] save_selected: If channel frequency is chosen automatically and channel.reselect-interval is used, then saves the last picked frequency.
        :param pulumi.Input[str] secondary_frequency: Specifies the second frequency that will be used for 80+80MHz configuration. Set it to Disabled in order to disable 80+80MHz capability.
        :param pulumi.Input[bool] skip_dfs_channels: If channel.frequency is left blank, the selection will skip DFS channels.
        :param pulumi.Input[int] tx_power: TX  Power for CAP interface (for the whole interface not for individual  chains) in dBm. It is not possible to set higher than allowed by country  regulations or interface. By default max allowed by country or  interface is used.
        :param pulumi.Input[str] width: Channel Width in MHz.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if control_channel_width is not None:
            pulumi.set(__self__, "control_channel_width", control_channel_width)
        if extension_channel is not None:
            pulumi.set(__self__, "extension_channel", extension_channel)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reselect_interval is not None:
            pulumi.set(__self__, "reselect_interval", reselect_interval)
        if save_selected is not None:
            pulumi.set(__self__, "save_selected", save_selected)
        if secondary_frequency is not None:
            pulumi.set(__self__, "secondary_frequency", secondary_frequency)
        if skip_dfs_channels is not None:
            pulumi.set(__self__, "skip_dfs_channels", skip_dfs_channels)
        if tx_power is not None:
            pulumi.set(__self__, "tx_power", tx_power)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        Define operational radio frequency band and mode taken from hardware capability of wireless card.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="controlChannelWidth")
    def control_channel_width(self) -> Optional[pulumi.Input[str]]:
        """
        Control channel width.
        """
        return pulumi.get(self, "control_channel_width")

    @control_channel_width.setter
    def control_channel_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_channel_width", value)

    @property
    @pulumi.getter(name="extensionChannel")
    def extension_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Extension channel configuration. (E.g. Ce = extension channel is above Control channel, eC = extension channel is below Control channel)
        """
        return pulumi.get(self, "extension_channel")

    @extension_channel.setter
    def extension_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension_channel", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Channel frequency value in MHz on which AP will operate. If left blank, CAPsMAN will automatically determine the best frequency that is least occupied.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reselectInterval")
    def reselect_interval(self) -> Optional[pulumi.Input[str]]:
        """
        The interval after which the least occupied frequency is chosen, can be defined as a random interval, ex. as '30m..60m'. Works only if channel.frequency is left blank.
        """
        return pulumi.get(self, "reselect_interval")

    @reselect_interval.setter
    def reselect_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reselect_interval", value)

    @property
    @pulumi.getter(name="saveSelected")
    def save_selected(self) -> Optional[pulumi.Input[bool]]:
        """
        If channel frequency is chosen automatically and channel.reselect-interval is used, then saves the last picked frequency.
        """
        return pulumi.get(self, "save_selected")

    @save_selected.setter
    def save_selected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "save_selected", value)

    @property
    @pulumi.getter(name="secondaryFrequency")
    def secondary_frequency(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the second frequency that will be used for 80+80MHz configuration. Set it to Disabled in order to disable 80+80MHz capability.
        """
        return pulumi.get(self, "secondary_frequency")

    @secondary_frequency.setter
    def secondary_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_frequency", value)

    @property
    @pulumi.getter(name="skipDfsChannels")
    def skip_dfs_channels(self) -> Optional[pulumi.Input[bool]]:
        """
        If channel.frequency is left blank, the selection will skip DFS channels.
        """
        return pulumi.get(self, "skip_dfs_channels")

    @skip_dfs_channels.setter
    def skip_dfs_channels(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_dfs_channels", value)

    @property
    @pulumi.getter(name="txPower")
    def tx_power(self) -> Optional[pulumi.Input[int]]:
        """
        TX  Power for CAP interface (for the whole interface not for individual  chains) in dBm. It is not possible to set higher than allowed by country  regulations or interface. By default max allowed by country or  interface is used.
        """
        return pulumi.get(self, "tx_power")

    @tx_power.setter
    def tx_power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tx_power", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        Channel Width in MHz.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


class ResourceCapsManChannel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_channel_width: Optional[pulumi.Input[str]] = None,
                 extension_channel: Optional[pulumi.Input[str]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reselect_interval: Optional[pulumi.Input[str]] = None,
                 save_selected: Optional[pulumi.Input[bool]] = None,
                 secondary_frequency: Optional[pulumi.Input[str]] = None,
                 skip_dfs_channels: Optional[pulumi.Input[bool]] = None,
                 tx_power: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_channel = routeros.ResourceCapsManChannel("testChannel",
            band="2ghz-b/g/n",
            comment="test_channel",
            control_channel_width="10mhz",
            extension_channel="eCee",
            frequency=2412,
            reselect_interval="1h",
            save_selected=True,
            secondary_frequency="disabled",
            skip_dfs_channels=True,
            tx_power=20)
        ```

        ## Import

        Import with the name of the CAPsMAN channel configuration in case of the example use test-channel-config

        ```sh
         $ pulumi import routeros:index/resourceCapsManChannel:ResourceCapsManChannel test_channel test-channel-config
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] band: Define operational radio frequency band and mode taken from hardware capability of wireless card.
        :param pulumi.Input[str] control_channel_width: Control channel width.
        :param pulumi.Input[str] extension_channel: Extension channel configuration. (E.g. Ce = extension channel is above Control channel, eC = extension channel is below Control channel)
        :param pulumi.Input[int] frequency: Channel frequency value in MHz on which AP will operate. If left blank, CAPsMAN will automatically determine the best frequency that is least occupied.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] reselect_interval: The interval after which the least occupied frequency is chosen, can be defined as a random interval, ex. as '30m..60m'. Works only if channel.frequency is left blank.
        :param pulumi.Input[bool] save_selected: If channel frequency is chosen automatically and channel.reselect-interval is used, then saves the last picked frequency.
        :param pulumi.Input[str] secondary_frequency: Specifies the second frequency that will be used for 80+80MHz configuration. Set it to Disabled in order to disable 80+80MHz capability.
        :param pulumi.Input[bool] skip_dfs_channels: If channel.frequency is left blank, the selection will skip DFS channels.
        :param pulumi.Input[int] tx_power: TX  Power for CAP interface (for the whole interface not for individual  chains) in dBm. It is not possible to set higher than allowed by country  regulations or interface. By default max allowed by country or  interface is used.
        :param pulumi.Input[str] width: Channel Width in MHz.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ResourceCapsManChannelArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_channel = routeros.ResourceCapsManChannel("testChannel",
            band="2ghz-b/g/n",
            comment="test_channel",
            control_channel_width="10mhz",
            extension_channel="eCee",
            frequency=2412,
            reselect_interval="1h",
            save_selected=True,
            secondary_frequency="disabled",
            skip_dfs_channels=True,
            tx_power=20)
        ```

        ## Import

        Import with the name of the CAPsMAN channel configuration in case of the example use test-channel-config

        ```sh
         $ pulumi import routeros:index/resourceCapsManChannel:ResourceCapsManChannel test_channel test-channel-config
        ```

        :param str resource_name: The name of the resource.
        :param ResourceCapsManChannelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceCapsManChannelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_channel_width: Optional[pulumi.Input[str]] = None,
                 extension_channel: Optional[pulumi.Input[str]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reselect_interval: Optional[pulumi.Input[str]] = None,
                 save_selected: Optional[pulumi.Input[bool]] = None,
                 secondary_frequency: Optional[pulumi.Input[str]] = None,
                 skip_dfs_channels: Optional[pulumi.Input[bool]] = None,
                 tx_power: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceCapsManChannelArgs.__new__(ResourceCapsManChannelArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["band"] = band
            __props__.__dict__["comment"] = comment
            __props__.__dict__["control_channel_width"] = control_channel_width
            __props__.__dict__["extension_channel"] = extension_channel
            __props__.__dict__["frequency"] = frequency
            __props__.__dict__["name"] = name
            __props__.__dict__["reselect_interval"] = reselect_interval
            __props__.__dict__["save_selected"] = save_selected
            __props__.__dict__["secondary_frequency"] = secondary_frequency
            __props__.__dict__["skip_dfs_channels"] = skip_dfs_channels
            __props__.__dict__["tx_power"] = tx_power
            __props__.__dict__["width"] = width
        super(ResourceCapsManChannel, __self__).__init__(
            'routeros:index/resourceCapsManChannel:ResourceCapsManChannel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            band: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            control_channel_width: Optional[pulumi.Input[str]] = None,
            extension_channel: Optional[pulumi.Input[str]] = None,
            frequency: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            reselect_interval: Optional[pulumi.Input[str]] = None,
            save_selected: Optional[pulumi.Input[bool]] = None,
            secondary_frequency: Optional[pulumi.Input[str]] = None,
            skip_dfs_channels: Optional[pulumi.Input[bool]] = None,
            tx_power: Optional[pulumi.Input[int]] = None,
            width: Optional[pulumi.Input[str]] = None) -> 'ResourceCapsManChannel':
        """
        Get an existing ResourceCapsManChannel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] band: Define operational radio frequency band and mode taken from hardware capability of wireless card.
        :param pulumi.Input[str] control_channel_width: Control channel width.
        :param pulumi.Input[str] extension_channel: Extension channel configuration. (E.g. Ce = extension channel is above Control channel, eC = extension channel is below Control channel)
        :param pulumi.Input[int] frequency: Channel frequency value in MHz on which AP will operate. If left blank, CAPsMAN will automatically determine the best frequency that is least occupied.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] reselect_interval: The interval after which the least occupied frequency is chosen, can be defined as a random interval, ex. as '30m..60m'. Works only if channel.frequency is left blank.
        :param pulumi.Input[bool] save_selected: If channel frequency is chosen automatically and channel.reselect-interval is used, then saves the last picked frequency.
        :param pulumi.Input[str] secondary_frequency: Specifies the second frequency that will be used for 80+80MHz configuration. Set it to Disabled in order to disable 80+80MHz capability.
        :param pulumi.Input[bool] skip_dfs_channels: If channel.frequency is left blank, the selection will skip DFS channels.
        :param pulumi.Input[int] tx_power: TX  Power for CAP interface (for the whole interface not for individual  chains) in dBm. It is not possible to set higher than allowed by country  regulations or interface. By default max allowed by country or  interface is used.
        :param pulumi.Input[str] width: Channel Width in MHz.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceCapsManChannelState.__new__(_ResourceCapsManChannelState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["band"] = band
        __props__.__dict__["comment"] = comment
        __props__.__dict__["control_channel_width"] = control_channel_width
        __props__.__dict__["extension_channel"] = extension_channel
        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["name"] = name
        __props__.__dict__["reselect_interval"] = reselect_interval
        __props__.__dict__["save_selected"] = save_selected
        __props__.__dict__["secondary_frequency"] = secondary_frequency
        __props__.__dict__["skip_dfs_channels"] = skip_dfs_channels
        __props__.__dict__["tx_power"] = tx_power
        __props__.__dict__["width"] = width
        return ResourceCapsManChannel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def band(self) -> pulumi.Output[Optional[str]]:
        """
        Define operational radio frequency band and mode taken from hardware capability of wireless card.
        """
        return pulumi.get(self, "band")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="controlChannelWidth")
    def control_channel_width(self) -> pulumi.Output[Optional[str]]:
        """
        Control channel width.
        """
        return pulumi.get(self, "control_channel_width")

    @property
    @pulumi.getter(name="extensionChannel")
    def extension_channel(self) -> pulumi.Output[Optional[str]]:
        """
        Extension channel configuration. (E.g. Ce = extension channel is above Control channel, eC = extension channel is below Control channel)
        """
        return pulumi.get(self, "extension_channel")

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[int]:
        """
        Channel frequency value in MHz on which AP will operate. If left blank, CAPsMAN will automatically determine the best frequency that is least occupied.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reselectInterval")
    def reselect_interval(self) -> pulumi.Output[Optional[str]]:
        """
        The interval after which the least occupied frequency is chosen, can be defined as a random interval, ex. as '30m..60m'. Works only if channel.frequency is left blank.
        """
        return pulumi.get(self, "reselect_interval")

    @property
    @pulumi.getter(name="saveSelected")
    def save_selected(self) -> pulumi.Output[Optional[bool]]:
        """
        If channel frequency is chosen automatically and channel.reselect-interval is used, then saves the last picked frequency.
        """
        return pulumi.get(self, "save_selected")

    @property
    @pulumi.getter(name="secondaryFrequency")
    def secondary_frequency(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the second frequency that will be used for 80+80MHz configuration. Set it to Disabled in order to disable 80+80MHz capability.
        """
        return pulumi.get(self, "secondary_frequency")

    @property
    @pulumi.getter(name="skipDfsChannels")
    def skip_dfs_channels(self) -> pulumi.Output[Optional[bool]]:
        """
        If channel.frequency is left blank, the selection will skip DFS channels.
        """
        return pulumi.get(self, "skip_dfs_channels")

    @property
    @pulumi.getter(name="txPower")
    def tx_power(self) -> pulumi.Output[Optional[int]]:
        """
        TX  Power for CAP interface (for the whole interface not for individual  chains) in dBm. It is not possible to set higher than allowed by country  regulations or interface. By default max allowed by country or  interface is used.
        """
        return pulumi.get(self, "tx_power")

    @property
    @pulumi.getter
    def width(self) -> pulumi.Output[Optional[str]]:
        """
        Channel Width in MHz.
        """
        return pulumi.get(self, "width")

