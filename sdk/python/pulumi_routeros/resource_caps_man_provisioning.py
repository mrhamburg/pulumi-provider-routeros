# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ResourceCapsManProvisioningArgs', 'ResourceCapsManProvisioning']

@pulumi.input_type
class ResourceCapsManProvisioningArgs:
    def __init__(__self__, *,
                 master_configuration: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 common_name_regexp: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 hw_supported_modes: Optional[pulumi.Input[str]] = None,
                 identity_regexp: Optional[pulumi.Input[str]] = None,
                 ip_address_ranges: Optional[pulumi.Input[str]] = None,
                 name_format: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 radio_mac: Optional[pulumi.Input[str]] = None,
                 slave_configurations: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ResourceCapsManProvisioning resource.
        :param pulumi.Input[str] master_configuration: If action specifies to create interfaces, then a new master interface with its configuration set to this configuration profile will be created
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] action: Provisioning action.
        :param pulumi.Input[str] common_name_regexp: Regular expression to match radios by common name. Each CAP's common name identifier can be found under "/caps-man radio" as value "REMOTE-CAP-NAME"
        :param pulumi.Input[str] hw_supported_modes: Match radios by supported wireless modes.
        :param pulumi.Input[str] identity_regexp: Regular expression to match radios by router identity.
        :param pulumi.Input[str] ip_address_ranges: Match CAPs with IPs within configured address range.
        :param pulumi.Input[str] name_format: Specify the syntax of the CAP interface name creation.
        :param pulumi.Input[str] name_prefix: Name prefix which can be used in the name-format for creating the CAP interface names.
        :param pulumi.Input[str] radio_mac: MAC address of radio to be matched, empty MAC (00:00:00:00:00:00) means match all MAC addresses.
        :param pulumi.Input[str] slave_configurations: If action specifies to create interfaces, then a new slave interface for each configuration profile in this list is created.
        """
        pulumi.set(__self__, "master_configuration", master_configuration)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if common_name_regexp is not None:
            pulumi.set(__self__, "common_name_regexp", common_name_regexp)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if hw_supported_modes is not None:
            pulumi.set(__self__, "hw_supported_modes", hw_supported_modes)
        if identity_regexp is not None:
            pulumi.set(__self__, "identity_regexp", identity_regexp)
        if ip_address_ranges is not None:
            pulumi.set(__self__, "ip_address_ranges", ip_address_ranges)
        if name_format is not None:
            pulumi.set(__self__, "name_format", name_format)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if radio_mac is not None:
            pulumi.set(__self__, "radio_mac", radio_mac)
        if slave_configurations is not None:
            pulumi.set(__self__, "slave_configurations", slave_configurations)

    @property
    @pulumi.getter(name="masterConfiguration")
    def master_configuration(self) -> pulumi.Input[str]:
        """
        If action specifies to create interfaces, then a new master interface with its configuration set to this configuration profile will be created
        """
        return pulumi.get(self, "master_configuration")

    @master_configuration.setter
    def master_configuration(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_configuration", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Provisioning action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="commonNameRegexp")
    def common_name_regexp(self) -> Optional[pulumi.Input[str]]:
        """
        Regular expression to match radios by common name. Each CAP's common name identifier can be found under "/caps-man radio" as value "REMOTE-CAP-NAME"
        """
        return pulumi.get(self, "common_name_regexp")

    @common_name_regexp.setter
    def common_name_regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name_regexp", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="hwSupportedModes")
    def hw_supported_modes(self) -> Optional[pulumi.Input[str]]:
        """
        Match radios by supported wireless modes.
        """
        return pulumi.get(self, "hw_supported_modes")

    @hw_supported_modes.setter
    def hw_supported_modes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_supported_modes", value)

    @property
    @pulumi.getter(name="identityRegexp")
    def identity_regexp(self) -> Optional[pulumi.Input[str]]:
        """
        Regular expression to match radios by router identity.
        """
        return pulumi.get(self, "identity_regexp")

    @identity_regexp.setter
    def identity_regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_regexp", value)

    @property
    @pulumi.getter(name="ipAddressRanges")
    def ip_address_ranges(self) -> Optional[pulumi.Input[str]]:
        """
        Match CAPs with IPs within configured address range.
        """
        return pulumi.get(self, "ip_address_ranges")

    @ip_address_ranges.setter
    def ip_address_ranges(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address_ranges", value)

    @property
    @pulumi.getter(name="nameFormat")
    def name_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the syntax of the CAP interface name creation.
        """
        return pulumi.get(self, "name_format")

    @name_format.setter
    def name_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_format", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Name prefix which can be used in the name-format for creating the CAP interface names.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="radioMac")
    def radio_mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address of radio to be matched, empty MAC (00:00:00:00:00:00) means match all MAC addresses.
        """
        return pulumi.get(self, "radio_mac")

    @radio_mac.setter
    def radio_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radio_mac", value)

    @property
    @pulumi.getter(name="slaveConfigurations")
    def slave_configurations(self) -> Optional[pulumi.Input[str]]:
        """
        If action specifies to create interfaces, then a new slave interface for each configuration profile in this list is created.
        """
        return pulumi.get(self, "slave_configurations")

    @slave_configurations.setter
    def slave_configurations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_configurations", value)


@pulumi.input_type
class _ResourceCapsManProvisioningState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 common_name_regexp: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 hw_supported_modes: Optional[pulumi.Input[str]] = None,
                 identity_regexp: Optional[pulumi.Input[str]] = None,
                 ip_address_ranges: Optional[pulumi.Input[str]] = None,
                 master_configuration: Optional[pulumi.Input[str]] = None,
                 name_format: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 radio_mac: Optional[pulumi.Input[str]] = None,
                 slave_configurations: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ResourceCapsManProvisioning resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] action: Provisioning action.
        :param pulumi.Input[str] common_name_regexp: Regular expression to match radios by common name. Each CAP's common name identifier can be found under "/caps-man radio" as value "REMOTE-CAP-NAME"
        :param pulumi.Input[str] hw_supported_modes: Match radios by supported wireless modes.
        :param pulumi.Input[str] identity_regexp: Regular expression to match radios by router identity.
        :param pulumi.Input[str] ip_address_ranges: Match CAPs with IPs within configured address range.
        :param pulumi.Input[str] master_configuration: If action specifies to create interfaces, then a new master interface with its configuration set to this configuration profile will be created
        :param pulumi.Input[str] name_format: Specify the syntax of the CAP interface name creation.
        :param pulumi.Input[str] name_prefix: Name prefix which can be used in the name-format for creating the CAP interface names.
        :param pulumi.Input[str] radio_mac: MAC address of radio to be matched, empty MAC (00:00:00:00:00:00) means match all MAC addresses.
        :param pulumi.Input[str] slave_configurations: If action specifies to create interfaces, then a new slave interface for each configuration profile in this list is created.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if common_name_regexp is not None:
            pulumi.set(__self__, "common_name_regexp", common_name_regexp)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if hw_supported_modes is not None:
            pulumi.set(__self__, "hw_supported_modes", hw_supported_modes)
        if identity_regexp is not None:
            pulumi.set(__self__, "identity_regexp", identity_regexp)
        if ip_address_ranges is not None:
            pulumi.set(__self__, "ip_address_ranges", ip_address_ranges)
        if master_configuration is not None:
            pulumi.set(__self__, "master_configuration", master_configuration)
        if name_format is not None:
            pulumi.set(__self__, "name_format", name_format)
        if name_prefix is not None:
            pulumi.set(__self__, "name_prefix", name_prefix)
        if radio_mac is not None:
            pulumi.set(__self__, "radio_mac", radio_mac)
        if slave_configurations is not None:
            pulumi.set(__self__, "slave_configurations", slave_configurations)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Provisioning action.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="commonNameRegexp")
    def common_name_regexp(self) -> Optional[pulumi.Input[str]]:
        """
        Regular expression to match radios by common name. Each CAP's common name identifier can be found under "/caps-man radio" as value "REMOTE-CAP-NAME"
        """
        return pulumi.get(self, "common_name_regexp")

    @common_name_regexp.setter
    def common_name_regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name_regexp", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="hwSupportedModes")
    def hw_supported_modes(self) -> Optional[pulumi.Input[str]]:
        """
        Match radios by supported wireless modes.
        """
        return pulumi.get(self, "hw_supported_modes")

    @hw_supported_modes.setter
    def hw_supported_modes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_supported_modes", value)

    @property
    @pulumi.getter(name="identityRegexp")
    def identity_regexp(self) -> Optional[pulumi.Input[str]]:
        """
        Regular expression to match radios by router identity.
        """
        return pulumi.get(self, "identity_regexp")

    @identity_regexp.setter
    def identity_regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_regexp", value)

    @property
    @pulumi.getter(name="ipAddressRanges")
    def ip_address_ranges(self) -> Optional[pulumi.Input[str]]:
        """
        Match CAPs with IPs within configured address range.
        """
        return pulumi.get(self, "ip_address_ranges")

    @ip_address_ranges.setter
    def ip_address_ranges(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address_ranges", value)

    @property
    @pulumi.getter(name="masterConfiguration")
    def master_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        If action specifies to create interfaces, then a new master interface with its configuration set to this configuration profile will be created
        """
        return pulumi.get(self, "master_configuration")

    @master_configuration.setter
    def master_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_configuration", value)

    @property
    @pulumi.getter(name="nameFormat")
    def name_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the syntax of the CAP interface name creation.
        """
        return pulumi.get(self, "name_format")

    @name_format.setter
    def name_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_format", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Name prefix which can be used in the name-format for creating the CAP interface names.
        """
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="radioMac")
    def radio_mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address of radio to be matched, empty MAC (00:00:00:00:00:00) means match all MAC addresses.
        """
        return pulumi.get(self, "radio_mac")

    @radio_mac.setter
    def radio_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radio_mac", value)

    @property
    @pulumi.getter(name="slaveConfigurations")
    def slave_configurations(self) -> Optional[pulumi.Input[str]]:
        """
        If action specifies to create interfaces, then a new slave interface for each configuration profile in this list is created.
        """
        return pulumi.get(self, "slave_configurations")

    @slave_configurations.setter
    def slave_configurations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_configurations", value)


class ResourceCapsManProvisioning(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 common_name_regexp: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 hw_supported_modes: Optional[pulumi.Input[str]] = None,
                 identity_regexp: Optional[pulumi.Input[str]] = None,
                 ip_address_ranges: Optional[pulumi.Input[str]] = None,
                 master_configuration: Optional[pulumi.Input[str]] = None,
                 name_format: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 radio_mac: Optional[pulumi.Input[str]] = None,
                 slave_configurations: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_configuration = routeros.ResourceCapsManConfiguration("testConfiguration")
        test_provisioning = routeros.ResourceCapsManProvisioning("testProvisioning",
            master_configuration="cfg1",
            action="create-disabled",
            name_prefix="cap-",
            opts=pulumi.ResourceOptions(depends_on=[test_configuration]))
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is ->

        :put [/caps-man/provisioning get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceCapsManProvisioning:ResourceCapsManProvisioning test_provisioning "*B"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] action: Provisioning action.
        :param pulumi.Input[str] common_name_regexp: Regular expression to match radios by common name. Each CAP's common name identifier can be found under "/caps-man radio" as value "REMOTE-CAP-NAME"
        :param pulumi.Input[str] hw_supported_modes: Match radios by supported wireless modes.
        :param pulumi.Input[str] identity_regexp: Regular expression to match radios by router identity.
        :param pulumi.Input[str] ip_address_ranges: Match CAPs with IPs within configured address range.
        :param pulumi.Input[str] master_configuration: If action specifies to create interfaces, then a new master interface with its configuration set to this configuration profile will be created
        :param pulumi.Input[str] name_format: Specify the syntax of the CAP interface name creation.
        :param pulumi.Input[str] name_prefix: Name prefix which can be used in the name-format for creating the CAP interface names.
        :param pulumi.Input[str] radio_mac: MAC address of radio to be matched, empty MAC (00:00:00:00:00:00) means match all MAC addresses.
        :param pulumi.Input[str] slave_configurations: If action specifies to create interfaces, then a new slave interface for each configuration profile in this list is created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceCapsManProvisioningArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        test_configuration = routeros.ResourceCapsManConfiguration("testConfiguration")
        test_provisioning = routeros.ResourceCapsManProvisioning("testProvisioning",
            master_configuration="cfg1",
            action="create-disabled",
            name_prefix="cap-",
            opts=pulumi.ResourceOptions(depends_on=[test_configuration]))
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is ->

        :put [/caps-man/provisioning get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceCapsManProvisioning:ResourceCapsManProvisioning test_provisioning "*B"
        ```

        :param str resource_name: The name of the resource.
        :param ResourceCapsManProvisioningArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceCapsManProvisioningArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 common_name_regexp: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 hw_supported_modes: Optional[pulumi.Input[str]] = None,
                 identity_regexp: Optional[pulumi.Input[str]] = None,
                 ip_address_ranges: Optional[pulumi.Input[str]] = None,
                 master_configuration: Optional[pulumi.Input[str]] = None,
                 name_format: Optional[pulumi.Input[str]] = None,
                 name_prefix: Optional[pulumi.Input[str]] = None,
                 radio_mac: Optional[pulumi.Input[str]] = None,
                 slave_configurations: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceCapsManProvisioningArgs.__new__(ResourceCapsManProvisioningArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["action"] = action
            __props__.__dict__["comment"] = comment
            __props__.__dict__["common_name_regexp"] = common_name_regexp
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["hw_supported_modes"] = hw_supported_modes
            __props__.__dict__["identity_regexp"] = identity_regexp
            __props__.__dict__["ip_address_ranges"] = ip_address_ranges
            if master_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'master_configuration'")
            __props__.__dict__["master_configuration"] = master_configuration
            __props__.__dict__["name_format"] = name_format
            __props__.__dict__["name_prefix"] = name_prefix
            __props__.__dict__["radio_mac"] = radio_mac
            __props__.__dict__["slave_configurations"] = slave_configurations
        super(ResourceCapsManProvisioning, __self__).__init__(
            'routeros:index/resourceCapsManProvisioning:ResourceCapsManProvisioning',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            action: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            common_name_regexp: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            hw_supported_modes: Optional[pulumi.Input[str]] = None,
            identity_regexp: Optional[pulumi.Input[str]] = None,
            ip_address_ranges: Optional[pulumi.Input[str]] = None,
            master_configuration: Optional[pulumi.Input[str]] = None,
            name_format: Optional[pulumi.Input[str]] = None,
            name_prefix: Optional[pulumi.Input[str]] = None,
            radio_mac: Optional[pulumi.Input[str]] = None,
            slave_configurations: Optional[pulumi.Input[str]] = None) -> 'ResourceCapsManProvisioning':
        """
        Get an existing ResourceCapsManProvisioning resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] action: Provisioning action.
        :param pulumi.Input[str] common_name_regexp: Regular expression to match radios by common name. Each CAP's common name identifier can be found under "/caps-man radio" as value "REMOTE-CAP-NAME"
        :param pulumi.Input[str] hw_supported_modes: Match radios by supported wireless modes.
        :param pulumi.Input[str] identity_regexp: Regular expression to match radios by router identity.
        :param pulumi.Input[str] ip_address_ranges: Match CAPs with IPs within configured address range.
        :param pulumi.Input[str] master_configuration: If action specifies to create interfaces, then a new master interface with its configuration set to this configuration profile will be created
        :param pulumi.Input[str] name_format: Specify the syntax of the CAP interface name creation.
        :param pulumi.Input[str] name_prefix: Name prefix which can be used in the name-format for creating the CAP interface names.
        :param pulumi.Input[str] radio_mac: MAC address of radio to be matched, empty MAC (00:00:00:00:00:00) means match all MAC addresses.
        :param pulumi.Input[str] slave_configurations: If action specifies to create interfaces, then a new slave interface for each configuration profile in this list is created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceCapsManProvisioningState.__new__(_ResourceCapsManProvisioningState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["action"] = action
        __props__.__dict__["comment"] = comment
        __props__.__dict__["common_name_regexp"] = common_name_regexp
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["hw_supported_modes"] = hw_supported_modes
        __props__.__dict__["identity_regexp"] = identity_regexp
        __props__.__dict__["ip_address_ranges"] = ip_address_ranges
        __props__.__dict__["master_configuration"] = master_configuration
        __props__.__dict__["name_format"] = name_format
        __props__.__dict__["name_prefix"] = name_prefix
        __props__.__dict__["radio_mac"] = radio_mac
        __props__.__dict__["slave_configurations"] = slave_configurations
        return ResourceCapsManProvisioning(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[str]]:
        """
        Provisioning action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="commonNameRegexp")
    def common_name_regexp(self) -> pulumi.Output[Optional[str]]:
        """
        Regular expression to match radios by common name. Each CAP's common name identifier can be found under "/caps-man radio" as value "REMOTE-CAP-NAME"
        """
        return pulumi.get(self, "common_name_regexp")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="hwSupportedModes")
    def hw_supported_modes(self) -> pulumi.Output[Optional[str]]:
        """
        Match radios by supported wireless modes.
        """
        return pulumi.get(self, "hw_supported_modes")

    @property
    @pulumi.getter(name="identityRegexp")
    def identity_regexp(self) -> pulumi.Output[Optional[str]]:
        """
        Regular expression to match radios by router identity.
        """
        return pulumi.get(self, "identity_regexp")

    @property
    @pulumi.getter(name="ipAddressRanges")
    def ip_address_ranges(self) -> pulumi.Output[Optional[str]]:
        """
        Match CAPs with IPs within configured address range.
        """
        return pulumi.get(self, "ip_address_ranges")

    @property
    @pulumi.getter(name="masterConfiguration")
    def master_configuration(self) -> pulumi.Output[str]:
        """
        If action specifies to create interfaces, then a new master interface with its configuration set to this configuration profile will be created
        """
        return pulumi.get(self, "master_configuration")

    @property
    @pulumi.getter(name="nameFormat")
    def name_format(self) -> pulumi.Output[Optional[str]]:
        """
        Specify the syntax of the CAP interface name creation.
        """
        return pulumi.get(self, "name_format")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        Name prefix which can be used in the name-format for creating the CAP interface names.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="radioMac")
    def radio_mac(self) -> pulumi.Output[Optional[str]]:
        """
        MAC address of radio to be matched, empty MAC (00:00:00:00:00:00) means match all MAC addresses.
        """
        return pulumi.get(self, "radio_mac")

    @property
    @pulumi.getter(name="slaveConfigurations")
    def slave_configurations(self) -> pulumi.Output[Optional[str]]:
        """
        If action specifies to create interfaces, then a new slave interface for each configuration profile in this list is created.
        """
        return pulumi.get(self, "slave_configurations")

