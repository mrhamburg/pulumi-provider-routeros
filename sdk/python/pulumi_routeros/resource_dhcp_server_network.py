# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ResourceDhcpServerNetworkArgs', 'ResourceDhcpServerNetwork']

@pulumi.input_type
class ResourceDhcpServerNetworkArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 boot_file_name: Optional[pulumi.Input[str]] = None,
                 caps_manager: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_option: Optional[pulumi.Input[str]] = None,
                 dhcp_option_set: Optional[pulumi.Input[str]] = None,
                 dns_none: Optional[pulumi.Input[bool]] = None,
                 dns_server: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[int]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server: Optional[pulumi.Input[str]] = None,
                 wins_server: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ResourceDhcpServerNetwork resource.
        :param pulumi.Input[str] address: The network DHCP server(s) will lease addresses from.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] boot_file_name: Boot filename.
        :param pulumi.Input[str] caps_manager: A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
        :param pulumi.Input[str] dhcp_option: Add additional DHCP options from the option list.
        :param pulumi.Input[str] dhcp_option_set: Add an additional set of DHCP options.
        :param pulumi.Input[bool] dns_none: If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
        :param pulumi.Input[str] dns_server: the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
        :param pulumi.Input[str] domain: The DHCP client will use this as the 'DNS domain' setting for the network adapter.
        :param pulumi.Input[str] gateway: The default gateway to be used by DHCP Client.
        :param pulumi.Input[int] netmask: The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
        :param pulumi.Input[str] next_server: The IP address of the next server to use in bootstrap.
        :param pulumi.Input[str] ntp_server: The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
        :param pulumi.Input[str] wins_server: The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
        """
        pulumi.set(__self__, "address", address)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if boot_file_name is not None:
            pulumi.set(__self__, "boot_file_name", boot_file_name)
        if caps_manager is not None:
            pulumi.set(__self__, "caps_manager", caps_manager)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dhcp_option is not None:
            pulumi.set(__self__, "dhcp_option", dhcp_option)
        if dhcp_option_set is not None:
            pulumi.set(__self__, "dhcp_option_set", dhcp_option_set)
        if dns_none is not None:
            pulumi.set(__self__, "dns_none", dns_none)
        if dns_server is not None:
            pulumi.set(__self__, "dns_server", dns_server)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if next_server is not None:
            pulumi.set(__self__, "next_server", next_server)
        if ntp_server is not None:
            pulumi.set(__self__, "ntp_server", ntp_server)
        if wins_server is not None:
            pulumi.set(__self__, "wins_server", wins_server)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The network DHCP server(s) will lease addresses from.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="bootFileName")
    def boot_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Boot filename.
        """
        return pulumi.get(self, "boot_file_name")

    @boot_file_name.setter
    def boot_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_file_name", value)

    @property
    @pulumi.getter(name="capsManager")
    def caps_manager(self) -> Optional[pulumi.Input[str]]:
        """
        A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
        """
        return pulumi.get(self, "caps_manager")

    @caps_manager.setter
    def caps_manager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caps_manager", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dhcpOption")
    def dhcp_option(self) -> Optional[pulumi.Input[str]]:
        """
        Add additional DHCP options from the option list.
        """
        return pulumi.get(self, "dhcp_option")

    @dhcp_option.setter
    def dhcp_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option", value)

    @property
    @pulumi.getter(name="dhcpOptionSet")
    def dhcp_option_set(self) -> Optional[pulumi.Input[str]]:
        """
        Add an additional set of DHCP options.
        """
        return pulumi.get(self, "dhcp_option_set")

    @dhcp_option_set.setter
    def dhcp_option_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option_set", value)

    @property
    @pulumi.getter(name="dnsNone")
    def dns_none(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
        """
        return pulumi.get(self, "dns_none")

    @dns_none.setter
    def dns_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dns_none", value)

    @property
    @pulumi.getter(name="dnsServer")
    def dns_server(self) -> Optional[pulumi.Input[str]]:
        """
        the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
        """
        return pulumi.get(self, "dns_server")

    @dns_server.setter
    def dns_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The DHCP client will use this as the 'DNS domain' setting for the network adapter.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The default gateway to be used by DHCP Client.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[int]]:
        """
        The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter(name="nextServer")
    def next_server(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the next server to use in bootstrap.
        """
        return pulumi.get(self, "next_server")

    @next_server.setter
    def next_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_server", value)

    @property
    @pulumi.getter(name="ntpServer")
    def ntp_server(self) -> Optional[pulumi.Input[str]]:
        """
        The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
        """
        return pulumi.get(self, "ntp_server")

    @ntp_server.setter
    def ntp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server", value)

    @property
    @pulumi.getter(name="winsServer")
    def wins_server(self) -> Optional[pulumi.Input[str]]:
        """
        The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
        """
        return pulumi.get(self, "wins_server")

    @wins_server.setter
    def wins_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server", value)


@pulumi.input_type
class _ResourceDhcpServerNetworkState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 boot_file_name: Optional[pulumi.Input[str]] = None,
                 caps_manager: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_option: Optional[pulumi.Input[str]] = None,
                 dhcp_option_set: Optional[pulumi.Input[str]] = None,
                 dns_none: Optional[pulumi.Input[bool]] = None,
                 dns_server: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[int]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server: Optional[pulumi.Input[str]] = None,
                 wins_server: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ResourceDhcpServerNetwork resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: The network DHCP server(s) will lease addresses from.
        :param pulumi.Input[str] boot_file_name: Boot filename.
        :param pulumi.Input[str] caps_manager: A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
        :param pulumi.Input[str] dhcp_option: Add additional DHCP options from the option list.
        :param pulumi.Input[str] dhcp_option_set: Add an additional set of DHCP options.
        :param pulumi.Input[bool] dns_none: If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
        :param pulumi.Input[str] dns_server: the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
        :param pulumi.Input[str] domain: The DHCP client will use this as the 'DNS domain' setting for the network adapter.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[str] gateway: The default gateway to be used by DHCP Client.
        :param pulumi.Input[int] netmask: The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
        :param pulumi.Input[str] next_server: The IP address of the next server to use in bootstrap.
        :param pulumi.Input[str] ntp_server: The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
        :param pulumi.Input[str] wins_server: The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if boot_file_name is not None:
            pulumi.set(__self__, "boot_file_name", boot_file_name)
        if caps_manager is not None:
            pulumi.set(__self__, "caps_manager", caps_manager)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dhcp_option is not None:
            pulumi.set(__self__, "dhcp_option", dhcp_option)
        if dhcp_option_set is not None:
            pulumi.set(__self__, "dhcp_option_set", dhcp_option_set)
        if dns_none is not None:
            pulumi.set(__self__, "dns_none", dns_none)
        if dns_server is not None:
            pulumi.set(__self__, "dns_server", dns_server)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic is not None:
            pulumi.set(__self__, "dynamic", dynamic)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if next_server is not None:
            pulumi.set(__self__, "next_server", next_server)
        if ntp_server is not None:
            pulumi.set(__self__, "ntp_server", ntp_server)
        if wins_server is not None:
            pulumi.set(__self__, "wins_server", wins_server)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        The network DHCP server(s) will lease addresses from.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="bootFileName")
    def boot_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Boot filename.
        """
        return pulumi.get(self, "boot_file_name")

    @boot_file_name.setter
    def boot_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_file_name", value)

    @property
    @pulumi.getter(name="capsManager")
    def caps_manager(self) -> Optional[pulumi.Input[str]]:
        """
        A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
        """
        return pulumi.get(self, "caps_manager")

    @caps_manager.setter
    def caps_manager(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caps_manager", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dhcpOption")
    def dhcp_option(self) -> Optional[pulumi.Input[str]]:
        """
        Add additional DHCP options from the option list.
        """
        return pulumi.get(self, "dhcp_option")

    @dhcp_option.setter
    def dhcp_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option", value)

    @property
    @pulumi.getter(name="dhcpOptionSet")
    def dhcp_option_set(self) -> Optional[pulumi.Input[str]]:
        """
        Add an additional set of DHCP options.
        """
        return pulumi.get(self, "dhcp_option_set")

    @dhcp_option_set.setter
    def dhcp_option_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_option_set", value)

    @property
    @pulumi.getter(name="dnsNone")
    def dns_none(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
        """
        return pulumi.get(self, "dns_none")

    @dns_none.setter
    def dns_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dns_none", value)

    @property
    @pulumi.getter(name="dnsServer")
    def dns_server(self) -> Optional[pulumi.Input[str]]:
        """
        the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
        """
        return pulumi.get(self, "dns_server")

    @dns_server.setter
    def dns_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The DHCP client will use this as the 'DNS domain' setting for the network adapter.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The default gateway to be used by DHCP Client.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[int]]:
        """
        The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter(name="nextServer")
    def next_server(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address of the next server to use in bootstrap.
        """
        return pulumi.get(self, "next_server")

    @next_server.setter
    def next_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_server", value)

    @property
    @pulumi.getter(name="ntpServer")
    def ntp_server(self) -> Optional[pulumi.Input[str]]:
        """
        The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
        """
        return pulumi.get(self, "ntp_server")

    @ntp_server.setter
    def ntp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server", value)

    @property
    @pulumi.getter(name="winsServer")
    def wins_server(self) -> Optional[pulumi.Input[str]]:
        """
        The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
        """
        return pulumi.get(self, "wins_server")

    @wins_server.setter
    def wins_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server", value)


class ResourceDhcpServerNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 boot_file_name: Optional[pulumi.Input[str]] = None,
                 caps_manager: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_option: Optional[pulumi.Input[str]] = None,
                 dhcp_option_set: Optional[pulumi.Input[str]] = None,
                 dns_none: Optional[pulumi.Input[bool]] = None,
                 dns_server: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[int]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server: Optional[pulumi.Input[str]] = None,
                 wins_server: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        dhcp_server_network = routeros.ResourceDhcpServerNetwork("dhcpServerNetwork",
            address="10.0.0.0/24",
            dns_server="1.1.1.1",
            gateway="10.0.0.1")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/dhcp-server/network get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceDhcpServerNetwork:ResourceDhcpServerNetwork dhcp_server_network "*0"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: The network DHCP server(s) will lease addresses from.
        :param pulumi.Input[str] boot_file_name: Boot filename.
        :param pulumi.Input[str] caps_manager: A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
        :param pulumi.Input[str] dhcp_option: Add additional DHCP options from the option list.
        :param pulumi.Input[str] dhcp_option_set: Add an additional set of DHCP options.
        :param pulumi.Input[bool] dns_none: If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
        :param pulumi.Input[str] dns_server: the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
        :param pulumi.Input[str] domain: The DHCP client will use this as the 'DNS domain' setting for the network adapter.
        :param pulumi.Input[str] gateway: The default gateway to be used by DHCP Client.
        :param pulumi.Input[int] netmask: The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
        :param pulumi.Input[str] next_server: The IP address of the next server to use in bootstrap.
        :param pulumi.Input[str] ntp_server: The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
        :param pulumi.Input[str] wins_server: The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceDhcpServerNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        dhcp_server_network = routeros.ResourceDhcpServerNetwork("dhcpServerNetwork",
            address="10.0.0.0/24",
            dns_server="1.1.1.1",
            gateway="10.0.0.1")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ip/dhcp-server/network get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceDhcpServerNetwork:ResourceDhcpServerNetwork dhcp_server_network "*0"
        ```

        :param str resource_name: The name of the resource.
        :param ResourceDhcpServerNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceDhcpServerNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 boot_file_name: Optional[pulumi.Input[str]] = None,
                 caps_manager: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dhcp_option: Optional[pulumi.Input[str]] = None,
                 dhcp_option_set: Optional[pulumi.Input[str]] = None,
                 dns_none: Optional[pulumi.Input[bool]] = None,
                 dns_server: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[int]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server: Optional[pulumi.Input[str]] = None,
                 wins_server: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceDhcpServerNetworkArgs.__new__(ResourceDhcpServerNetworkArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            if address is None and not opts.urn:
                raise TypeError("Missing required property 'address'")
            __props__.__dict__["address"] = address
            __props__.__dict__["boot_file_name"] = boot_file_name
            __props__.__dict__["caps_manager"] = caps_manager
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dhcp_option"] = dhcp_option
            __props__.__dict__["dhcp_option_set"] = dhcp_option_set
            __props__.__dict__["dns_none"] = dns_none
            __props__.__dict__["dns_server"] = dns_server
            __props__.__dict__["domain"] = domain
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["netmask"] = netmask
            __props__.__dict__["next_server"] = next_server
            __props__.__dict__["ntp_server"] = ntp_server
            __props__.__dict__["wins_server"] = wins_server
            __props__.__dict__["dynamic"] = None
        super(ResourceDhcpServerNetwork, __self__).__init__(
            'routeros:index/resourceDhcpServerNetwork:ResourceDhcpServerNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            address: Optional[pulumi.Input[str]] = None,
            boot_file_name: Optional[pulumi.Input[str]] = None,
            caps_manager: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dhcp_option: Optional[pulumi.Input[str]] = None,
            dhcp_option_set: Optional[pulumi.Input[str]] = None,
            dns_none: Optional[pulumi.Input[bool]] = None,
            dns_server: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dynamic: Optional[pulumi.Input[bool]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            netmask: Optional[pulumi.Input[int]] = None,
            next_server: Optional[pulumi.Input[str]] = None,
            ntp_server: Optional[pulumi.Input[str]] = None,
            wins_server: Optional[pulumi.Input[str]] = None) -> 'ResourceDhcpServerNetwork':
        """
        Get an existing ResourceDhcpServerNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: The network DHCP server(s) will lease addresses from.
        :param pulumi.Input[str] boot_file_name: Boot filename.
        :param pulumi.Input[str] caps_manager: A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
        :param pulumi.Input[str] dhcp_option: Add additional DHCP options from the option list.
        :param pulumi.Input[str] dhcp_option_set: Add an additional set of DHCP options.
        :param pulumi.Input[bool] dns_none: If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
        :param pulumi.Input[str] dns_server: the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
        :param pulumi.Input[str] domain: The DHCP client will use this as the 'DNS domain' setting for the network adapter.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[str] gateway: The default gateway to be used by DHCP Client.
        :param pulumi.Input[int] netmask: The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
        :param pulumi.Input[str] next_server: The IP address of the next server to use in bootstrap.
        :param pulumi.Input[str] ntp_server: The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
        :param pulumi.Input[str] wins_server: The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceDhcpServerNetworkState.__new__(_ResourceDhcpServerNetworkState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["address"] = address
        __props__.__dict__["boot_file_name"] = boot_file_name
        __props__.__dict__["caps_manager"] = caps_manager
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dhcp_option"] = dhcp_option
        __props__.__dict__["dhcp_option_set"] = dhcp_option_set
        __props__.__dict__["dns_none"] = dns_none
        __props__.__dict__["dns_server"] = dns_server
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dynamic"] = dynamic
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["netmask"] = netmask
        __props__.__dict__["next_server"] = next_server
        __props__.__dict__["ntp_server"] = ntp_server
        __props__.__dict__["wins_server"] = wins_server
        return ResourceDhcpServerNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        The network DHCP server(s) will lease addresses from.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="bootFileName")
    def boot_file_name(self) -> pulumi.Output[Optional[str]]:
        """
        Boot filename.
        """
        return pulumi.get(self, "boot_file_name")

    @property
    @pulumi.getter(name="capsManager")
    def caps_manager(self) -> pulumi.Output[Optional[str]]:
        """
        A comma-separated list of IP addresses for one or more CAPsMAN system managers. DHCP Option 138 (capwap) will be used.
        """
        return pulumi.get(self, "caps_manager")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dhcpOption")
    def dhcp_option(self) -> pulumi.Output[Optional[str]]:
        """
        Add additional DHCP options from the option list.
        """
        return pulumi.get(self, "dhcp_option")

    @property
    @pulumi.getter(name="dhcpOptionSet")
    def dhcp_option_set(self) -> pulumi.Output[Optional[str]]:
        """
        Add an additional set of DHCP options.
        """
        return pulumi.get(self, "dhcp_option_set")

    @property
    @pulumi.getter(name="dnsNone")
    def dns_none(self) -> pulumi.Output[Optional[bool]]:
        """
        If set, then DHCP Server will not pass dynamic DNS servers configured on the router to the DHCP clients if no DNS Server in DNS-server is set.
        """
        return pulumi.get(self, "dns_none")

    @property
    @pulumi.getter(name="dnsServer")
    def dns_server(self) -> pulumi.Output[Optional[str]]:
        """
        the DHCP client will use these as the default DNS servers. Two comma-separated DNS servers can be specified to be used by the DHCP client as primary and secondary DNS servers.
        """
        return pulumi.get(self, "dns_server")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        """
        The DHCP client will use this as the 'DNS domain' setting for the network adapter.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def dynamic(self) -> pulumi.Output[bool]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[Optional[str]]:
        """
        The default gateway to be used by DHCP Client.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def netmask(self) -> pulumi.Output[Optional[int]]:
        """
        The actual network mask is to be used by the DHCP client. If set to '0' - netmask from network address will be used.
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter(name="nextServer")
    def next_server(self) -> pulumi.Output[Optional[str]]:
        """
        The IP address of the next server to use in bootstrap.
        """
        return pulumi.get(self, "next_server")

    @property
    @pulumi.getter(name="ntpServer")
    def ntp_server(self) -> pulumi.Output[Optional[str]]:
        """
        The DHCP client will use these as the default NTP servers. Two comma-separated NTP servers can be specified to be used by the DHCP client as primary and secondary NTP servers
        """
        return pulumi.get(self, "ntp_server")

    @property
    @pulumi.getter(name="winsServer")
    def wins_server(self) -> pulumi.Output[Optional[str]]:
        """
        The Windows DHCP client will use these as the default WINS servers. Two comma-separated WINS servers can be specified to be used by the DHCP client as primary and secondary WINS servers
        """
        return pulumi.get(self, "wins_server")

