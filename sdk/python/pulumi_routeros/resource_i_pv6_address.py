# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ResourceIPv6AddressArgs', 'ResourceIPv6Address']

@pulumi.input_type
class ResourceIPv6AddressArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 advertise: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 eui64: Optional[pulumi.Input[bool]] = None,
                 from_pool: Optional[pulumi.Input[str]] = None,
                 no_dad: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ResourceIPv6Address resource.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
        :param pulumi.Input[bool] advertise: Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
        :param pulumi.Input[bool] eui64: Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
        :param pulumi.Input[str] from_pool: Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
        :param pulumi.Input[bool] no_dad: If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
        """
        pulumi.set(__self__, "interface", interface)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)
        if from_pool is not None:
            pulumi.set(__self__, "from_pool", from_pool)
        if no_dad is not None:
            pulumi.set(__self__, "no_dad", no_dad)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
        """
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "advertise", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def eui64(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
        """
        return pulumi.get(self, "eui64")

    @eui64.setter
    def eui64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eui64", value)

    @property
    @pulumi.getter(name="fromPool")
    def from_pool(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
        """
        return pulumi.get(self, "from_pool")

    @from_pool.setter
    def from_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_pool", value)

    @property
    @pulumi.getter(name="noDad")
    def no_dad(self) -> Optional[pulumi.Input[bool]]:
        """
        If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
        """
        return pulumi.get(self, "no_dad")

    @no_dad.setter
    def no_dad(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_dad", value)


@pulumi.input_type
class _ResourceIPv6AddressState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 actual_interface: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 advertise: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 eui64: Optional[pulumi.Input[bool]] = None,
                 from_pool: Optional[pulumi.Input[str]] = None,
                 global_: Optional[pulumi.Input[bool]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 invalid: Optional[pulumi.Input[bool]] = None,
                 link_local: Optional[pulumi.Input[bool]] = None,
                 no_dad: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ResourceIPv6Address resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] actual_interface: Name of the actual interface the logical one is bound to.
        :param pulumi.Input[str] address: IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
        :param pulumi.Input[bool] advertise: Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[bool] eui64: Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
        :param pulumi.Input[str] from_pool: Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
        :param pulumi.Input[bool] global_: Whether address is global.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[bool] link_local: Whether address is link local.
        :param pulumi.Input[bool] no_dad: If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if actual_interface is not None:
            pulumi.set(__self__, "actual_interface", actual_interface)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dynamic is not None:
            pulumi.set(__self__, "dynamic", dynamic)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)
        if from_pool is not None:
            pulumi.set(__self__, "from_pool", from_pool)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if invalid is not None:
            pulumi.set(__self__, "invalid", invalid)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)
        if no_dad is not None:
            pulumi.set(__self__, "no_dad", no_dad)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="actualInterface")
    def actual_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the actual interface the logical one is bound to.
        """
        return pulumi.get(self, "actual_interface")

    @actual_interface.setter
    def actual_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "actual_interface", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
        """
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "advertise", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter
    def eui64(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
        """
        return pulumi.get(self, "eui64")

    @eui64.setter
    def eui64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eui64", value)

    @property
    @pulumi.getter(name="fromPool")
    def from_pool(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
        """
        return pulumi.get(self, "from_pool")

    @from_pool.setter
    def from_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_pool", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether address is global.
        """
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def invalid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "invalid")

    @invalid.setter
    def invalid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "invalid", value)

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether address is link local.
        """
        return pulumi.get(self, "link_local")

    @link_local.setter
    def link_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_local", value)

    @property
    @pulumi.getter(name="noDad")
    def no_dad(self) -> Optional[pulumi.Input[bool]]:
        """
        If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
        """
        return pulumi.get(self, "no_dad")

    @no_dad.setter
    def no_dad(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_dad", value)


class ResourceIPv6Address(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 advertise: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 eui64: Optional[pulumi.Input[bool]] = None,
                 from_pool: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 no_dad: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        ipv6_address = routeros.ResourceIPv6Address("ipv6Address",
            address="fd55::1/64",
            disabled=False,
            interface="ether1")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ipv6/address get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceIPv6Address:ResourceIPv6Address ipv6_address "*0"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] address: IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
        :param pulumi.Input[bool] advertise: Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
        :param pulumi.Input[bool] eui64: Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
        :param pulumi.Input[str] from_pool: Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[bool] no_dad: If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceIPv6AddressArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        ipv6_address = routeros.ResourceIPv6Address("ipv6Address",
            address="fd55::1/64",
            disabled=False,
            interface="ether1")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/ipv6/address get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceIPv6Address:ResourceIPv6Address ipv6_address "*0"
        ```

        :param str resource_name: The name of the resource.
        :param ResourceIPv6AddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceIPv6AddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 advertise: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 eui64: Optional[pulumi.Input[bool]] = None,
                 from_pool: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 no_dad: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceIPv6AddressArgs.__new__(ResourceIPv6AddressArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["address"] = address
            __props__.__dict__["advertise"] = advertise
            __props__.__dict__["comment"] = comment
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["eui64"] = eui64
            __props__.__dict__["from_pool"] = from_pool
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["no_dad"] = no_dad
            __props__.__dict__["actual_interface"] = None
            __props__.__dict__["dynamic"] = None
            __props__.__dict__["global_"] = None
            __props__.__dict__["invalid"] = None
            __props__.__dict__["link_local"] = None
        super(ResourceIPv6Address, __self__).__init__(
            'routeros:index/resourceIPv6Address:ResourceIPv6Address',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            actual_interface: Optional[pulumi.Input[str]] = None,
            address: Optional[pulumi.Input[str]] = None,
            advertise: Optional[pulumi.Input[bool]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            dynamic: Optional[pulumi.Input[bool]] = None,
            eui64: Optional[pulumi.Input[bool]] = None,
            from_pool: Optional[pulumi.Input[str]] = None,
            global_: Optional[pulumi.Input[bool]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            invalid: Optional[pulumi.Input[bool]] = None,
            link_local: Optional[pulumi.Input[bool]] = None,
            no_dad: Optional[pulumi.Input[bool]] = None) -> 'ResourceIPv6Address':
        """
        Get an existing ResourceIPv6Address resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] actual_interface: Name of the actual interface the logical one is bound to.
        :param pulumi.Input[str] address: IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
        :param pulumi.Input[bool] advertise: Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[bool] eui64: Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
        :param pulumi.Input[str] from_pool: Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
        :param pulumi.Input[bool] global_: Whether address is global.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[bool] link_local: Whether address is link local.
        :param pulumi.Input[bool] no_dad: If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceIPv6AddressState.__new__(_ResourceIPv6AddressState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["actual_interface"] = actual_interface
        __props__.__dict__["address"] = address
        __props__.__dict__["advertise"] = advertise
        __props__.__dict__["comment"] = comment
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["dynamic"] = dynamic
        __props__.__dict__["eui64"] = eui64
        __props__.__dict__["from_pool"] = from_pool
        __props__.__dict__["global_"] = global_
        __props__.__dict__["interface"] = interface
        __props__.__dict__["invalid"] = invalid
        __props__.__dict__["link_local"] = link_local
        __props__.__dict__["no_dad"] = no_dad
        return ResourceIPv6Address(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter(name="actualInterface")
    def actual_interface(self) -> pulumi.Output[str]:
        """
        Name of the actual interface the logical one is bound to.
        """
        return pulumi.get(self, "actual_interface")

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        IPv6 address. Using the eui*64 and from*pool options can transform the original address! [See docs](https://wiki.mikrotik.com/wiki/Manual:IPv6/Address#Properties)
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def advertise(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable stateless address configuration. The prefix of that address is automatically advertised to hosts using ICMPv6 protocol. The option is set by default for addresses with prefix length 64.
        """
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dynamic(self) -> pulumi.Output[bool]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def eui64(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to calculate EUI-64 address and use it as last 64 bits of the IPv6 address.
        """
        return pulumi.get(self, "eui64")

    @property
    @pulumi.getter(name="fromPool")
    def from_pool(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the pool from which prefix will be taken to construct IPv6 address taking last part of the address from address property.
        """
        return pulumi.get(self, "from_pool")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> pulumi.Output[bool]:
        """
        Whether address is global.
        """
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def invalid(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> pulumi.Output[bool]:
        """
        Whether address is link local.
        """
        return pulumi.get(self, "link_local")

    @property
    @pulumi.getter(name="noDad")
    def no_dad(self) -> pulumi.Output[Optional[bool]]:
        """
        If set indicates that address is anycast address and Duplicate Address Detection should not be performed.
        """
        return pulumi.get(self, "no_dad")

