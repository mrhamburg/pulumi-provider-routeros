# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ResourceSystemSchedulerArgs', 'ResourceSystemScheduler']

@pulumi.input_type
class ResourceSystemSchedulerArgs:
    def __init__(__self__, *,
                 on_event: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ResourceSystemScheduler resource.
        :param pulumi.Input[str] on_event: Name of the script to execute. It must be presented at /system script.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] interval: Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
               otherwise it is executed repeatedly at the time interval is specified.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policies: List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
               full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
               used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
               that grants user management rights. Should be used together with the write policy. Allows also to see global variables
               created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
               configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
               Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
               Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
               displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
               ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
               access to the router's configuration, except for user management. This policy does not allow to read the configuration,
               so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
        :param pulumi.Input[str] start_date: Date of the first script execution.
        :param pulumi.Input[str] start_time: Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
               start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
               and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
               will not run at startup.
        """
        pulumi.set(__self__, "on_event", on_event)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="onEvent")
    def on_event(self) -> pulumi.Input[str]:
        """
        Name of the script to execute. It must be presented at /system script.
        """
        return pulumi.get(self, "on_event")

    @on_event.setter
    def on_event(self, value: pulumi.Input[str]):
        pulumi.set(self, "on_event", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
        otherwise it is executed repeatedly at the time interval is specified.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
        full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
        used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
        that grants user management rights. Should be used together with the write policy. Allows also to see global variables
        created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
        configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
        Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
        Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
        displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
        ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
        access to the router's configuration, except for user management. This policy does not allow to read the configuration,
        so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        """
        Date of the first script execution.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
        start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
        and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
        will not run at startup.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class _ResourceSystemSchedulerState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 next_run: Optional[pulumi.Input[str]] = None,
                 on_event: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 run_count: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ResourceSystemScheduler resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] interval: Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
               otherwise it is executed repeatedly at the time interval is specified.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] on_event: Name of the script to execute. It must be presented at /system script.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policies: List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
               full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
               used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
               that grants user management rights. Should be used together with the write policy. Allows also to see global variables
               created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
               configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
               Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
               Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
               displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
               ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
               access to the router's configuration, except for user management. This policy does not allow to read the configuration,
               so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
        :param pulumi.Input[str] run_count: This counter is incremented each time the script is executed.
        :param pulumi.Input[str] start_date: Date of the first script execution.
        :param pulumi.Input[str] start_time: Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
               start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
               and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
               will not run at startup.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_run is not None:
            pulumi.set(__self__, "next_run", next_run)
        if on_event is not None:
            pulumi.set(__self__, "on_event", on_event)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if run_count is not None:
            pulumi.set(__self__, "run_count", run_count)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
        otherwise it is executed repeatedly at the time interval is specified.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextRun")
    def next_run(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "next_run")

    @next_run.setter
    def next_run(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_run", value)

    @property
    @pulumi.getter(name="onEvent")
    def on_event(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the script to execute. It must be presented at /system script.
        """
        return pulumi.get(self, "on_event")

    @on_event.setter
    def on_event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_event", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
        full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
        used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
        that grants user management rights. Should be used together with the write policy. Allows also to see global variables
        created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
        configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
        Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
        Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
        displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
        ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
        access to the router's configuration, except for user management. This policy does not allow to read the configuration,
        so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="runCount")
    def run_count(self) -> Optional[pulumi.Input[str]]:
        """
        This counter is incremented each time the script is executed.
        """
        return pulumi.get(self, "run_count")

    @run_count.setter
    def run_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_count", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        """
        Date of the first script execution.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
        start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
        and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
        will not run at startup.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


class ResourceSystemScheduler(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_event: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        schedule1 = routeros.ResourceSystemScheduler("schedule1", on_event="script name")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/system/scheduler get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceSystemScheduler:ResourceSystemScheduler schedule1 "*0"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] interval: Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
               otherwise it is executed repeatedly at the time interval is specified.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] on_event: Name of the script to execute. It must be presented at /system script.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policies: List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
               full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
               used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
               that grants user management rights. Should be used together with the write policy. Allows also to see global variables
               created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
               configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
               Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
               Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
               displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
               ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
               access to the router's configuration, except for user management. This policy does not allow to read the configuration,
               so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
        :param pulumi.Input[str] start_date: Date of the first script execution.
        :param pulumi.Input[str] start_time: Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
               start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
               and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
               will not run at startup.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceSystemSchedulerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        schedule1 = routeros.ResourceSystemScheduler("schedule1", on_event="script name")
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/system/scheduler get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceSystemScheduler:ResourceSystemScheduler schedule1 "*0"
        ```

        :param str resource_name: The name of the resource.
        :param ResourceSystemSchedulerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceSystemSchedulerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 on_event: Optional[pulumi.Input[str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceSystemSchedulerArgs.__new__(ResourceSystemSchedulerArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["comment"] = comment
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["interval"] = interval
            __props__.__dict__["name"] = name
            if on_event is None and not opts.urn:
                raise TypeError("Missing required property 'on_event'")
            __props__.__dict__["on_event"] = on_event
            __props__.__dict__["policies"] = policies
            __props__.__dict__["start_date"] = start_date
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["next_run"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["run_count"] = None
        super(ResourceSystemScheduler, __self__).__init__(
            'routeros:index/resourceSystemScheduler:ResourceSystemScheduler',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            interval: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            next_run: Optional[pulumi.Input[str]] = None,
            on_event: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            run_count: Optional[pulumi.Input[str]] = None,
            start_date: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[str]] = None) -> 'ResourceSystemScheduler':
        """
        Get an existing ResourceSystemScheduler resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] interval: Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
               otherwise it is executed repeatedly at the time interval is specified.
        :param pulumi.Input[str] name: Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
               resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
               integrity for that resource!
        :param pulumi.Input[str] on_event: Name of the script to execute. It must be presented at /system script.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policies: List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
               full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
               used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
               that grants user management rights. Should be used together with the write policy. Allows also to see global variables
               created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
               configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
               Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
               Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
               displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
               ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
               access to the router's configuration, except for user management. This policy does not allow to read the configuration,
               so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
        :param pulumi.Input[str] run_count: This counter is incremented each time the script is executed.
        :param pulumi.Input[str] start_date: Date of the first script execution.
        :param pulumi.Input[str] start_time: Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
               start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
               and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
               will not run at startup.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceSystemSchedulerState.__new__(_ResourceSystemSchedulerState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["comment"] = comment
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["interval"] = interval
        __props__.__dict__["name"] = name
        __props__.__dict__["next_run"] = next_run
        __props__.__dict__["on_event"] = on_event
        __props__.__dict__["owner"] = owner
        __props__.__dict__["policies"] = policies
        __props__.__dict__["run_count"] = run_count
        __props__.__dict__["start_date"] = start_date
        __props__.__dict__["start_time"] = start_time
        return ResourceSystemScheduler(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[str]:
        """
        Interval between two script executions, if time interval is set to zero, the script is only executed at its start time,
        otherwise it is executed repeatedly at the time interval is specified.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Changing the name of this resource will force it to be recreated. > The links of other configuration properties to this
        resource may be lost! > Changing the name of the resource outside of a Terraform will result in a loss of control
        integrity for that resource!
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextRun")
    def next_run(self) -> pulumi.Output[str]:
        return pulumi.get(self, "next_run")

    @property
    @pulumi.getter(name="onEvent")
    def on_event(self) -> pulumi.Output[str]:
        """
        Name of the script to execute. It must be presented at /system script.
        """
        return pulumi.get(self, "on_event")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Sequence[str]]:
        """
        List of applicable policies: * dude - Policy that grants rights to log in to dude server. * ftp - Policy that grants
        full rights to log in remotely via FTP, to read/write/erase files and to transfer files from/to the router. Should be
        used together with read/write policies. * password - Policy that grants rights to change the password. * policy - Policy
        that grants user management rights. Should be used together with the write policy. Allows also to see global variables
        created by other users (requires also 'test' policy). * read - Policy that grants read access to the router's
        configuration. All console commands that do not alter router's configuration are allowed. Doesn't affect FTP. * reboot -
        Policy that allows rebooting the router. * romon - Policy that grants rights to connect to RoMon server. * sensitive -
        Policy that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not
        displayed. * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run
        ping, traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write
        access to the router's configuration, except for user management. This policy does not allow to read the configuration,
        so make sure to enable read policy as well. policy = ["ftp", "read", "write"]
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="runCount")
    def run_count(self) -> pulumi.Output[str]:
        """
        This counter is incremented each time the script is executed.
        """
        return pulumi.get(self, "run_count")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Output[str]:
        """
        Date of the first script execution.
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        Time of the first script execution. If scheduler item has start-time set to startup, it behaves as if start-time and
        start-date were set to time 3 seconds after console starts up. It means that all scripts having start-time is startup
        and interval is 0 will be executed once each time router boots. If the interval is set to value other than 0 scheduler
        will not run at startup.
        """
        return pulumi.get(self, "start_time")

