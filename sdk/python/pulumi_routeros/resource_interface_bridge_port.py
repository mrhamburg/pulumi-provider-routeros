# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ResourceInterfaceBridgePortArgs', 'ResourceInterfaceBridgePort']

@pulumi.input_type
class ResourceInterfaceBridgePortArgs:
    def __init__(__self__, *,
                 bridge: pulumi.Input[str],
                 interface: pulumi.Input[str],
                 pvid: pulumi.Input[int],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 auto_isolate: Optional[pulumi.Input[bool]] = None,
                 bpdu_guard: Optional[pulumi.Input[bool]] = None,
                 broadcast_flood: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 edge: Optional[pulumi.Input[str]] = None,
                 fast_leave: Optional[pulumi.Input[bool]] = None,
                 frame_types: Optional[pulumi.Input[str]] = None,
                 horizon: Optional[pulumi.Input[str]] = None,
                 hw: Optional[pulumi.Input[bool]] = None,
                 ingress_filtering: Optional[pulumi.Input[bool]] = None,
                 internal_path_cost: Optional[pulumi.Input[int]] = None,
                 learn: Optional[pulumi.Input[str]] = None,
                 multicast_router: Optional[pulumi.Input[str]] = None,
                 path_cost: Optional[pulumi.Input[str]] = None,
                 point_to_point: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 restricted_role: Optional[pulumi.Input[bool]] = None,
                 restricted_tcn: Optional[pulumi.Input[bool]] = None,
                 tag_stacking: Optional[pulumi.Input[bool]] = None,
                 trusted: Optional[pulumi.Input[bool]] = None,
                 unknown_multicast_flood: Optional[pulumi.Input[bool]] = None,
                 unknown_unicast_flood: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ResourceInterfaceBridgePort resource.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[int] pvid: ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] auto_isolate: When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when protocol-mode is set to rstp or mstp and edge is set to no.
        :param pulumi.Input[bool] bpdu_guard: This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[bool] broadcast_flood: When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on egress ports.
        :param pulumi.Input[str] edge: Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other bridges attached.
        :param pulumi.Input[bool] fast_leave: Enables IGMP Fast leave feature on the port.
        :param pulumi.Input[str] frame_types: Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] horizon: Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware offloading. This value is integer '0'..'429496729' or 'none'.
        :param pulumi.Input[bool] hw: Enable or disable Hardware Offloading of the interface.
        :param pulumi.Input[bool] ingress_filtering: Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[int] internal_path_cost: Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[str] learn: Changes MAC learning behaviour on a bridge port
        :param pulumi.Input[str] multicast_router: Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
        :param pulumi.Input[str] path_cost: Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between regions. This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[str] point_to_point: Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of failure. This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[str] priority: The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between regions.
        :param pulumi.Input[bool] restricted_role: Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[bool] restricted_tcn: Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to propagate. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[bool] tag_stacking: Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] trusted: When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
        :param pulumi.Input[bool] unknown_multicast_flood: When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
        :param pulumi.Input[bool] unknown_unicast_flood: When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
        """
        pulumi.set(__self__, "bridge", bridge)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "pvid", pvid)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if auto_isolate is not None:
            pulumi.set(__self__, "auto_isolate", auto_isolate)
        if bpdu_guard is not None:
            pulumi.set(__self__, "bpdu_guard", bpdu_guard)
        if broadcast_flood is not None:
            pulumi.set(__self__, "broadcast_flood", broadcast_flood)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if edge is not None:
            pulumi.set(__self__, "edge", edge)
        if fast_leave is not None:
            pulumi.set(__self__, "fast_leave", fast_leave)
        if frame_types is not None:
            pulumi.set(__self__, "frame_types", frame_types)
        if horizon is not None:
            pulumi.set(__self__, "horizon", horizon)
        if hw is not None:
            pulumi.set(__self__, "hw", hw)
        if ingress_filtering is not None:
            pulumi.set(__self__, "ingress_filtering", ingress_filtering)
        if internal_path_cost is not None:
            pulumi.set(__self__, "internal_path_cost", internal_path_cost)
        if learn is not None:
            pulumi.set(__self__, "learn", learn)
        if multicast_router is not None:
            pulumi.set(__self__, "multicast_router", multicast_router)
        if path_cost is not None:
            pulumi.set(__self__, "path_cost", path_cost)
        if point_to_point is not None:
            pulumi.set(__self__, "point_to_point", point_to_point)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if restricted_role is not None:
            pulumi.set(__self__, "restricted_role", restricted_role)
        if restricted_tcn is not None:
            pulumi.set(__self__, "restricted_tcn", restricted_tcn)
        if tag_stacking is not None:
            pulumi.set(__self__, "tag_stacking", tag_stacking)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)
        if unknown_multicast_flood is not None:
            pulumi.set(__self__, "unknown_multicast_flood", unknown_multicast_flood)
        if unknown_unicast_flood is not None:
            pulumi.set(__self__, "unknown_unicast_flood", unknown_unicast_flood)

    @property
    @pulumi.getter
    def bridge(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: pulumi.Input[str]):
        pulumi.set(self, "bridge", value)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def pvid(self) -> pulumi.Input[int]:
        """
        ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "pvid")

    @pvid.setter
    def pvid(self, value: pulumi.Input[int]):
        pulumi.set(self, "pvid", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="autoIsolate")
    def auto_isolate(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when protocol-mode is set to rstp or mstp and edge is set to no.
        """
        return pulumi.get(self, "auto_isolate")

    @auto_isolate.setter
    def auto_isolate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_isolate", value)

    @property
    @pulumi.getter(name="bpduGuard")
    def bpdu_guard(self) -> Optional[pulumi.Input[bool]]:
        """
        This property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "bpdu_guard")

    @bpdu_guard.setter
    def bpdu_guard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bpdu_guard", value)

    @property
    @pulumi.getter(name="broadcastFlood")
    def broadcast_flood(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on egress ports.
        """
        return pulumi.get(self, "broadcast_flood")

    @broadcast_flood.setter
    def broadcast_flood(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "broadcast_flood", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def edge(self) -> Optional[pulumi.Input[str]]:
        """
        Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other bridges attached.
        """
        return pulumi.get(self, "edge")

    @edge.setter
    def edge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge", value)

    @property
    @pulumi.getter(name="fastLeave")
    def fast_leave(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables IGMP Fast leave feature on the port.
        """
        return pulumi.get(self, "fast_leave")

    @fast_leave.setter
    def fast_leave(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fast_leave", value)

    @property
    @pulumi.getter(name="frameTypes")
    def frame_types(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "frame_types")

    @frame_types.setter
    def frame_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frame_types", value)

    @property
    @pulumi.getter
    def horizon(self) -> Optional[pulumi.Input[str]]:
        """
        Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware offloading. This value is integer '0'..'429496729' or 'none'.
        """
        return pulumi.get(self, "horizon")

    @horizon.setter
    def horizon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizon", value)

    @property
    @pulumi.getter
    def hw(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable Hardware Offloading of the interface.
        """
        return pulumi.get(self, "hw")

    @hw.setter
    def hw(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hw", value)

    @property
    @pulumi.getter(name="ingressFiltering")
    def ingress_filtering(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "ingress_filtering")

    @ingress_filtering.setter
    def ingress_filtering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ingress_filtering", value)

    @property
    @pulumi.getter(name="internalPathCost")
    def internal_path_cost(self) -> Optional[pulumi.Input[int]]:
        """
        Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "internal_path_cost")

    @internal_path_cost.setter
    def internal_path_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internal_path_cost", value)

    @property
    @pulumi.getter
    def learn(self) -> Optional[pulumi.Input[str]]:
        """
        Changes MAC learning behaviour on a bridge port
        """
        return pulumi.get(self, "learn")

    @learn.setter
    def learn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learn", value)

    @property
    @pulumi.getter(name="multicastRouter")
    def multicast_router(self) -> Optional[pulumi.Input[str]]:
        """
        Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
        """
        return pulumi.get(self, "multicast_router")

    @multicast_router.setter
    def multicast_router(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_router", value)

    @property
    @pulumi.getter(name="pathCost")
    def path_cost(self) -> Optional[pulumi.Input[str]]:
        """
        Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between regions. This property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "path_cost")

    @path_cost.setter
    def path_cost(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_cost", value)

    @property
    @pulumi.getter(name="pointToPoint")
    def point_to_point(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of failure. This property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "point_to_point")

    @point_to_point.setter
    def point_to_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "point_to_point", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between regions.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="restrictedRole")
    def restricted_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "restricted_role")

    @restricted_role.setter
    def restricted_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restricted_role", value)

    @property
    @pulumi.getter(name="restrictedTcn")
    def restricted_tcn(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to propagate. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "restricted_tcn")

    @restricted_tcn.setter
    def restricted_tcn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restricted_tcn", value)

    @property
    @pulumi.getter(name="tagStacking")
    def tag_stacking(self) -> Optional[pulumi.Input[bool]]:
        """
        Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "tag_stacking")

    @tag_stacking.setter
    def tag_stacking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tag_stacking", value)

    @property
    @pulumi.getter
    def trusted(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
        """
        return pulumi.get(self, "trusted")

    @trusted.setter
    def trusted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trusted", value)

    @property
    @pulumi.getter(name="unknownMulticastFlood")
    def unknown_multicast_flood(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
        """
        return pulumi.get(self, "unknown_multicast_flood")

    @unknown_multicast_flood.setter
    def unknown_multicast_flood(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unknown_multicast_flood", value)

    @property
    @pulumi.getter(name="unknownUnicastFlood")
    def unknown_unicast_flood(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
        """
        return pulumi.get(self, "unknown_unicast_flood")

    @unknown_unicast_flood.setter
    def unknown_unicast_flood(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unknown_unicast_flood", value)


@pulumi.input_type
class _ResourceInterfaceBridgePortState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 auto_isolate: Optional[pulumi.Input[bool]] = None,
                 bpdu_guard: Optional[pulumi.Input[bool]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 broadcast_flood: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 debug_info: Optional[pulumi.Input[str]] = None,
                 designated_bridge: Optional[pulumi.Input[str]] = None,
                 designated_cost: Optional[pulumi.Input[str]] = None,
                 designated_port_number: Optional[pulumi.Input[int]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dynamic: Optional[pulumi.Input[bool]] = None,
                 edge: Optional[pulumi.Input[str]] = None,
                 edge_port: Optional[pulumi.Input[bool]] = None,
                 edge_port_discovery: Optional[pulumi.Input[bool]] = None,
                 external_fdb_status: Optional[pulumi.Input[bool]] = None,
                 fast_leave: Optional[pulumi.Input[bool]] = None,
                 forwarding: Optional[pulumi.Input[bool]] = None,
                 frame_types: Optional[pulumi.Input[str]] = None,
                 horizon: Optional[pulumi.Input[str]] = None,
                 hw: Optional[pulumi.Input[bool]] = None,
                 hw_offload: Optional[pulumi.Input[bool]] = None,
                 hw_offload_group: Optional[pulumi.Input[str]] = None,
                 inactive: Optional[pulumi.Input[bool]] = None,
                 ingress_filtering: Optional[pulumi.Input[bool]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal_path_cost: Optional[pulumi.Input[int]] = None,
                 learn: Optional[pulumi.Input[str]] = None,
                 learning: Optional[pulumi.Input[bool]] = None,
                 multicast_router: Optional[pulumi.Input[str]] = None,
                 nextid: Optional[pulumi.Input[str]] = None,
                 path_cost: Optional[pulumi.Input[str]] = None,
                 point_to_point: Optional[pulumi.Input[str]] = None,
                 point_to_point_port: Optional[pulumi.Input[bool]] = None,
                 port_number: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 pvid: Optional[pulumi.Input[int]] = None,
                 restricted_role: Optional[pulumi.Input[bool]] = None,
                 restricted_tcn: Optional[pulumi.Input[bool]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 root_path_cost: Optional[pulumi.Input[int]] = None,
                 sending_rstp: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag_stacking: Optional[pulumi.Input[bool]] = None,
                 trusted: Optional[pulumi.Input[bool]] = None,
                 unknown_multicast_flood: Optional[pulumi.Input[bool]] = None,
                 unknown_unicast_flood: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ResourceInterfaceBridgePort resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] auto_isolate: When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when protocol-mode is set to rstp or mstp and edge is set to no.
        :param pulumi.Input[bool] bpdu_guard: This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[bool] broadcast_flood: When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on egress ports.
        :param pulumi.Input[str] designated_bridge: Root bridge ID (bridge priority and the bridge MAC address).
        :param pulumi.Input[str] designated_cost: Designated cost.
        :param pulumi.Input[int] designated_port_number: Designated port number.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[str] edge: Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other bridges attached.
        :param pulumi.Input[bool] edge_port: Whether port is an edge port or not.
        :param pulumi.Input[bool] edge_port_discovery: Whether port is set to automatically detect edge ports.
        :param pulumi.Input[bool] external_fdb_status: Whether registration table is used instead of forwarding data base.
        :param pulumi.Input[bool] fast_leave: Enables IGMP Fast leave feature on the port.
        :param pulumi.Input[bool] forwarding: Shows if the port is not blocked by (R/M)STP.
        :param pulumi.Input[str] frame_types: Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] horizon: Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware offloading. This value is integer '0'..'429496729' or 'none'.
        :param pulumi.Input[bool] hw: Enable or disable Hardware Offloading of the interface.
        :param pulumi.Input[bool] hw_offload: Hardware offloading state.
        :param pulumi.Input[str] hw_offload_group: Switch chip used by the port.
        :param pulumi.Input[bool] ingress_filtering: Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[int] internal_path_cost: Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[str] learn: Changes MAC learning behaviour on a bridge port
        :param pulumi.Input[bool] learning: Shows whether the port is capable of learning MAC addresses.
        :param pulumi.Input[str] multicast_router: Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
        :param pulumi.Input[str] path_cost: Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between regions. This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[str] point_to_point: Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of failure. This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[bool] point_to_point_port: Whether the port is connected to a bridge port using full-duplex (true) or half-duplex (false).
        :param pulumi.Input[int] port_number: Port number will be assigned in the order that ports got added to the bridge, but this is only true until reboot. After reboot internal numbering will be used.
        :param pulumi.Input[str] priority: The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between regions.
        :param pulumi.Input[int] pvid: ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] restricted_role: Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[bool] restricted_tcn: Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to propagate. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[str] role: (R/M)STP algorithm assigned role of the port
        :param pulumi.Input[int] root_path_cost: The total cost of the path to the root-bridge.
        :param pulumi.Input[str] sending_rstp: Whether the port is sending RSTP or MSTP BPDU types. A port will transit to STP type when RSTP/MSTP enabled port receives a STP BPDU
        :param pulumi.Input[str] status: Port status ('in-bridge' - port is enabled).
        :param pulumi.Input[bool] tag_stacking: Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] trusted: When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
        :param pulumi.Input[bool] unknown_multicast_flood: When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
        :param pulumi.Input[bool] unknown_unicast_flood: When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if auto_isolate is not None:
            pulumi.set(__self__, "auto_isolate", auto_isolate)
        if bpdu_guard is not None:
            pulumi.set(__self__, "bpdu_guard", bpdu_guard)
        if bridge is not None:
            pulumi.set(__self__, "bridge", bridge)
        if broadcast_flood is not None:
            pulumi.set(__self__, "broadcast_flood", broadcast_flood)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if debug_info is not None:
            pulumi.set(__self__, "debug_info", debug_info)
        if designated_bridge is not None:
            pulumi.set(__self__, "designated_bridge", designated_bridge)
        if designated_cost is not None:
            pulumi.set(__self__, "designated_cost", designated_cost)
        if designated_port_number is not None:
            pulumi.set(__self__, "designated_port_number", designated_port_number)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dynamic is not None:
            pulumi.set(__self__, "dynamic", dynamic)
        if edge is not None:
            pulumi.set(__self__, "edge", edge)
        if edge_port is not None:
            pulumi.set(__self__, "edge_port", edge_port)
        if edge_port_discovery is not None:
            pulumi.set(__self__, "edge_port_discovery", edge_port_discovery)
        if external_fdb_status is not None:
            pulumi.set(__self__, "external_fdb_status", external_fdb_status)
        if fast_leave is not None:
            pulumi.set(__self__, "fast_leave", fast_leave)
        if forwarding is not None:
            pulumi.set(__self__, "forwarding", forwarding)
        if frame_types is not None:
            pulumi.set(__self__, "frame_types", frame_types)
        if horizon is not None:
            pulumi.set(__self__, "horizon", horizon)
        if hw is not None:
            pulumi.set(__self__, "hw", hw)
        if hw_offload is not None:
            pulumi.set(__self__, "hw_offload", hw_offload)
        if hw_offload_group is not None:
            pulumi.set(__self__, "hw_offload_group", hw_offload_group)
        if inactive is not None:
            pulumi.set(__self__, "inactive", inactive)
        if ingress_filtering is not None:
            pulumi.set(__self__, "ingress_filtering", ingress_filtering)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if internal_path_cost is not None:
            pulumi.set(__self__, "internal_path_cost", internal_path_cost)
        if learn is not None:
            pulumi.set(__self__, "learn", learn)
        if learning is not None:
            pulumi.set(__self__, "learning", learning)
        if multicast_router is not None:
            pulumi.set(__self__, "multicast_router", multicast_router)
        if nextid is not None:
            pulumi.set(__self__, "nextid", nextid)
        if path_cost is not None:
            pulumi.set(__self__, "path_cost", path_cost)
        if point_to_point is not None:
            pulumi.set(__self__, "point_to_point", point_to_point)
        if point_to_point_port is not None:
            pulumi.set(__self__, "point_to_point_port", point_to_point_port)
        if port_number is not None:
            pulumi.set(__self__, "port_number", port_number)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if pvid is not None:
            pulumi.set(__self__, "pvid", pvid)
        if restricted_role is not None:
            pulumi.set(__self__, "restricted_role", restricted_role)
        if restricted_tcn is not None:
            pulumi.set(__self__, "restricted_tcn", restricted_tcn)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if root_path_cost is not None:
            pulumi.set(__self__, "root_path_cost", root_path_cost)
        if sending_rstp is not None:
            pulumi.set(__self__, "sending_rstp", sending_rstp)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag_stacking is not None:
            pulumi.set(__self__, "tag_stacking", tag_stacking)
        if trusted is not None:
            pulumi.set(__self__, "trusted", trusted)
        if unknown_multicast_flood is not None:
            pulumi.set(__self__, "unknown_multicast_flood", unknown_multicast_flood)
        if unknown_unicast_flood is not None:
            pulumi.set(__self__, "unknown_unicast_flood", unknown_unicast_flood)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter(name="autoIsolate")
    def auto_isolate(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when protocol-mode is set to rstp or mstp and edge is set to no.
        """
        return pulumi.get(self, "auto_isolate")

    @auto_isolate.setter
    def auto_isolate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_isolate", value)

    @property
    @pulumi.getter(name="bpduGuard")
    def bpdu_guard(self) -> Optional[pulumi.Input[bool]]:
        """
        This property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "bpdu_guard")

    @bpdu_guard.setter
    def bpdu_guard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bpdu_guard", value)

    @property
    @pulumi.getter
    def bridge(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bridge")

    @bridge.setter
    def bridge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bridge", value)

    @property
    @pulumi.getter(name="broadcastFlood")
    def broadcast_flood(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on egress ports.
        """
        return pulumi.get(self, "broadcast_flood")

    @broadcast_flood.setter
    def broadcast_flood(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "broadcast_flood", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="debugInfo")
    def debug_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "debug_info")

    @debug_info.setter
    def debug_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "debug_info", value)

    @property
    @pulumi.getter(name="designatedBridge")
    def designated_bridge(self) -> Optional[pulumi.Input[str]]:
        """
        Root bridge ID (bridge priority and the bridge MAC address).
        """
        return pulumi.get(self, "designated_bridge")

    @designated_bridge.setter
    def designated_bridge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "designated_bridge", value)

    @property
    @pulumi.getter(name="designatedCost")
    def designated_cost(self) -> Optional[pulumi.Input[str]]:
        """
        Designated cost.
        """
        return pulumi.get(self, "designated_cost")

    @designated_cost.setter
    def designated_cost(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "designated_cost", value)

    @property
    @pulumi.getter(name="designatedPortNumber")
    def designated_port_number(self) -> Optional[pulumi.Input[int]]:
        """
        Designated port number.
        """
        return pulumi.get(self, "designated_port_number")

    @designated_port_number.setter
    def designated_port_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "designated_port_number", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def dynamic(self) -> Optional[pulumi.Input[bool]]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @dynamic.setter
    def dynamic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dynamic", value)

    @property
    @pulumi.getter
    def edge(self) -> Optional[pulumi.Input[str]]:
        """
        Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other bridges attached.
        """
        return pulumi.get(self, "edge")

    @edge.setter
    def edge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge", value)

    @property
    @pulumi.getter(name="edgePort")
    def edge_port(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether port is an edge port or not.
        """
        return pulumi.get(self, "edge_port")

    @edge_port.setter
    def edge_port(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "edge_port", value)

    @property
    @pulumi.getter(name="edgePortDiscovery")
    def edge_port_discovery(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether port is set to automatically detect edge ports.
        """
        return pulumi.get(self, "edge_port_discovery")

    @edge_port_discovery.setter
    def edge_port_discovery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "edge_port_discovery", value)

    @property
    @pulumi.getter(name="externalFdbStatus")
    def external_fdb_status(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether registration table is used instead of forwarding data base.
        """
        return pulumi.get(self, "external_fdb_status")

    @external_fdb_status.setter
    def external_fdb_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "external_fdb_status", value)

    @property
    @pulumi.getter(name="fastLeave")
    def fast_leave(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables IGMP Fast leave feature on the port.
        """
        return pulumi.get(self, "fast_leave")

    @fast_leave.setter
    def fast_leave(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fast_leave", value)

    @property
    @pulumi.getter
    def forwarding(self) -> Optional[pulumi.Input[bool]]:
        """
        Shows if the port is not blocked by (R/M)STP.
        """
        return pulumi.get(self, "forwarding")

    @forwarding.setter
    def forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forwarding", value)

    @property
    @pulumi.getter(name="frameTypes")
    def frame_types(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "frame_types")

    @frame_types.setter
    def frame_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frame_types", value)

    @property
    @pulumi.getter
    def horizon(self) -> Optional[pulumi.Input[str]]:
        """
        Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware offloading. This value is integer '0'..'429496729' or 'none'.
        """
        return pulumi.get(self, "horizon")

    @horizon.setter
    def horizon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizon", value)

    @property
    @pulumi.getter
    def hw(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable Hardware Offloading of the interface.
        """
        return pulumi.get(self, "hw")

    @hw.setter
    def hw(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hw", value)

    @property
    @pulumi.getter(name="hwOffload")
    def hw_offload(self) -> Optional[pulumi.Input[bool]]:
        """
        Hardware offloading state.
        """
        return pulumi.get(self, "hw_offload")

    @hw_offload.setter
    def hw_offload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hw_offload", value)

    @property
    @pulumi.getter(name="hwOffloadGroup")
    def hw_offload_group(self) -> Optional[pulumi.Input[str]]:
        """
        Switch chip used by the port.
        """
        return pulumi.get(self, "hw_offload_group")

    @hw_offload_group.setter
    def hw_offload_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_offload_group", value)

    @property
    @pulumi.getter
    def inactive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inactive")

    @inactive.setter
    def inactive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inactive", value)

    @property
    @pulumi.getter(name="ingressFiltering")
    def ingress_filtering(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "ingress_filtering")

    @ingress_filtering.setter
    def ingress_filtering(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ingress_filtering", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="internalPathCost")
    def internal_path_cost(self) -> Optional[pulumi.Input[int]]:
        """
        Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "internal_path_cost")

    @internal_path_cost.setter
    def internal_path_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internal_path_cost", value)

    @property
    @pulumi.getter
    def learn(self) -> Optional[pulumi.Input[str]]:
        """
        Changes MAC learning behaviour on a bridge port
        """
        return pulumi.get(self, "learn")

    @learn.setter
    def learn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learn", value)

    @property
    @pulumi.getter
    def learning(self) -> Optional[pulumi.Input[bool]]:
        """
        Shows whether the port is capable of learning MAC addresses.
        """
        return pulumi.get(self, "learning")

    @learning.setter
    def learning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "learning", value)

    @property
    @pulumi.getter(name="multicastRouter")
    def multicast_router(self) -> Optional[pulumi.Input[str]]:
        """
        Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
        """
        return pulumi.get(self, "multicast_router")

    @multicast_router.setter
    def multicast_router(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_router", value)

    @property
    @pulumi.getter
    def nextid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nextid")

    @nextid.setter
    def nextid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nextid", value)

    @property
    @pulumi.getter(name="pathCost")
    def path_cost(self) -> Optional[pulumi.Input[str]]:
        """
        Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between regions. This property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "path_cost")

    @path_cost.setter
    def path_cost(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_cost", value)

    @property
    @pulumi.getter(name="pointToPoint")
    def point_to_point(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of failure. This property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "point_to_point")

    @point_to_point.setter
    def point_to_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "point_to_point", value)

    @property
    @pulumi.getter(name="pointToPointPort")
    def point_to_point_port(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the port is connected to a bridge port using full-duplex (true) or half-duplex (false).
        """
        return pulumi.get(self, "point_to_point_port")

    @point_to_point_port.setter
    def point_to_point_port(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "point_to_point_port", value)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> Optional[pulumi.Input[int]]:
        """
        Port number will be assigned in the order that ports got added to the bridge, but this is only true until reboot. After reboot internal numbering will be used.
        """
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_number", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between regions.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def pvid(self) -> Optional[pulumi.Input[int]]:
        """
        ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "pvid")

    @pvid.setter
    def pvid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pvid", value)

    @property
    @pulumi.getter(name="restrictedRole")
    def restricted_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "restricted_role")

    @restricted_role.setter
    def restricted_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restricted_role", value)

    @property
    @pulumi.getter(name="restrictedTcn")
    def restricted_tcn(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to propagate. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "restricted_tcn")

    @restricted_tcn.setter
    def restricted_tcn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restricted_tcn", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        (R/M)STP algorithm assigned role of the port
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="rootPathCost")
    def root_path_cost(self) -> Optional[pulumi.Input[int]]:
        """
        The total cost of the path to the root-bridge.
        """
        return pulumi.get(self, "root_path_cost")

    @root_path_cost.setter
    def root_path_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_path_cost", value)

    @property
    @pulumi.getter(name="sendingRstp")
    def sending_rstp(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the port is sending RSTP or MSTP BPDU types. A port will transit to STP type when RSTP/MSTP enabled port receives a STP BPDU
        """
        return pulumi.get(self, "sending_rstp")

    @sending_rstp.setter
    def sending_rstp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sending_rstp", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Port status ('in-bridge' - port is enabled).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tagStacking")
    def tag_stacking(self) -> Optional[pulumi.Input[bool]]:
        """
        Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "tag_stacking")

    @tag_stacking.setter
    def tag_stacking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tag_stacking", value)

    @property
    @pulumi.getter
    def trusted(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
        """
        return pulumi.get(self, "trusted")

    @trusted.setter
    def trusted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trusted", value)

    @property
    @pulumi.getter(name="unknownMulticastFlood")
    def unknown_multicast_flood(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
        """
        return pulumi.get(self, "unknown_multicast_flood")

    @unknown_multicast_flood.setter
    def unknown_multicast_flood(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unknown_multicast_flood", value)

    @property
    @pulumi.getter(name="unknownUnicastFlood")
    def unknown_unicast_flood(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
        """
        return pulumi.get(self, "unknown_unicast_flood")

    @unknown_unicast_flood.setter
    def unknown_unicast_flood(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unknown_unicast_flood", value)


class ResourceInterfaceBridgePort(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 auto_isolate: Optional[pulumi.Input[bool]] = None,
                 bpdu_guard: Optional[pulumi.Input[bool]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 broadcast_flood: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 edge: Optional[pulumi.Input[str]] = None,
                 fast_leave: Optional[pulumi.Input[bool]] = None,
                 frame_types: Optional[pulumi.Input[str]] = None,
                 horizon: Optional[pulumi.Input[str]] = None,
                 hw: Optional[pulumi.Input[bool]] = None,
                 ingress_filtering: Optional[pulumi.Input[bool]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal_path_cost: Optional[pulumi.Input[int]] = None,
                 learn: Optional[pulumi.Input[str]] = None,
                 multicast_router: Optional[pulumi.Input[str]] = None,
                 path_cost: Optional[pulumi.Input[str]] = None,
                 point_to_point: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 pvid: Optional[pulumi.Input[int]] = None,
                 restricted_role: Optional[pulumi.Input[bool]] = None,
                 restricted_tcn: Optional[pulumi.Input[bool]] = None,
                 tag_stacking: Optional[pulumi.Input[bool]] = None,
                 trusted: Optional[pulumi.Input[bool]] = None,
                 unknown_multicast_flood: Optional[pulumi.Input[bool]] = None,
                 unknown_unicast_flood: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        bridge_port = routeros.ResourceInterfaceBridgePort("bridgePort",
            bridge="bridge",
            interface="ether5",
            pvid=50)
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/bridge/port get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceInterfaceBridgePort:ResourceInterfaceBridgePort bridge_port "*0"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] auto_isolate: When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when protocol-mode is set to rstp or mstp and edge is set to no.
        :param pulumi.Input[bool] bpdu_guard: This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[bool] broadcast_flood: When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on egress ports.
        :param pulumi.Input[str] edge: Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other bridges attached.
        :param pulumi.Input[bool] fast_leave: Enables IGMP Fast leave feature on the port.
        :param pulumi.Input[str] frame_types: Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] horizon: Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware offloading. This value is integer '0'..'429496729' or 'none'.
        :param pulumi.Input[bool] hw: Enable or disable Hardware Offloading of the interface.
        :param pulumi.Input[bool] ingress_filtering: Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[int] internal_path_cost: Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[str] learn: Changes MAC learning behaviour on a bridge port
        :param pulumi.Input[str] multicast_router: Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
        :param pulumi.Input[str] path_cost: Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between regions. This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[str] point_to_point: Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of failure. This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[str] priority: The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between regions.
        :param pulumi.Input[int] pvid: ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] restricted_role: Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[bool] restricted_tcn: Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to propagate. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[bool] tag_stacking: Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] trusted: When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
        :param pulumi.Input[bool] unknown_multicast_flood: When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
        :param pulumi.Input[bool] unknown_unicast_flood: When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceInterfaceBridgePortArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        bridge_port = routeros.ResourceInterfaceBridgePort("bridgePort",
            bridge="bridge",
            interface="ether5",
            pvid=50)
        ```

        ## Import

        #The ID can be found via API or the terminal #The command for the terminal is -> :put [/interface/bridge/port get [print show-ids]]

        ```sh
         $ pulumi import routeros:index/resourceInterfaceBridgePort:ResourceInterfaceBridgePort bridge_port "*0"
        ```

        :param str resource_name: The name of the resource.
        :param ResourceInterfaceBridgePortArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceInterfaceBridgePortArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 auto_isolate: Optional[pulumi.Input[bool]] = None,
                 bpdu_guard: Optional[pulumi.Input[bool]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 broadcast_flood: Optional[pulumi.Input[bool]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 edge: Optional[pulumi.Input[str]] = None,
                 fast_leave: Optional[pulumi.Input[bool]] = None,
                 frame_types: Optional[pulumi.Input[str]] = None,
                 horizon: Optional[pulumi.Input[str]] = None,
                 hw: Optional[pulumi.Input[bool]] = None,
                 ingress_filtering: Optional[pulumi.Input[bool]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal_path_cost: Optional[pulumi.Input[int]] = None,
                 learn: Optional[pulumi.Input[str]] = None,
                 multicast_router: Optional[pulumi.Input[str]] = None,
                 path_cost: Optional[pulumi.Input[str]] = None,
                 point_to_point: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 pvid: Optional[pulumi.Input[int]] = None,
                 restricted_role: Optional[pulumi.Input[bool]] = None,
                 restricted_tcn: Optional[pulumi.Input[bool]] = None,
                 tag_stacking: Optional[pulumi.Input[bool]] = None,
                 trusted: Optional[pulumi.Input[bool]] = None,
                 unknown_multicast_flood: Optional[pulumi.Input[bool]] = None,
                 unknown_unicast_flood: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceInterfaceBridgePortArgs.__new__(ResourceInterfaceBridgePortArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["auto_isolate"] = auto_isolate
            __props__.__dict__["bpdu_guard"] = bpdu_guard
            if bridge is None and not opts.urn:
                raise TypeError("Missing required property 'bridge'")
            __props__.__dict__["bridge"] = bridge
            __props__.__dict__["broadcast_flood"] = broadcast_flood
            __props__.__dict__["comment"] = comment
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["edge"] = edge
            __props__.__dict__["fast_leave"] = fast_leave
            __props__.__dict__["frame_types"] = frame_types
            __props__.__dict__["horizon"] = horizon
            __props__.__dict__["hw"] = hw
            __props__.__dict__["ingress_filtering"] = ingress_filtering
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["internal_path_cost"] = internal_path_cost
            __props__.__dict__["learn"] = learn
            __props__.__dict__["multicast_router"] = multicast_router
            __props__.__dict__["path_cost"] = path_cost
            __props__.__dict__["point_to_point"] = point_to_point
            __props__.__dict__["priority"] = priority
            if pvid is None and not opts.urn:
                raise TypeError("Missing required property 'pvid'")
            __props__.__dict__["pvid"] = pvid
            __props__.__dict__["restricted_role"] = restricted_role
            __props__.__dict__["restricted_tcn"] = restricted_tcn
            __props__.__dict__["tag_stacking"] = tag_stacking
            __props__.__dict__["trusted"] = trusted
            __props__.__dict__["unknown_multicast_flood"] = unknown_multicast_flood
            __props__.__dict__["unknown_unicast_flood"] = unknown_unicast_flood
            __props__.__dict__["debug_info"] = None
            __props__.__dict__["designated_bridge"] = None
            __props__.__dict__["designated_cost"] = None
            __props__.__dict__["designated_port_number"] = None
            __props__.__dict__["dynamic"] = None
            __props__.__dict__["edge_port"] = None
            __props__.__dict__["edge_port_discovery"] = None
            __props__.__dict__["external_fdb_status"] = None
            __props__.__dict__["forwarding"] = None
            __props__.__dict__["hw_offload"] = None
            __props__.__dict__["hw_offload_group"] = None
            __props__.__dict__["inactive"] = None
            __props__.__dict__["learning"] = None
            __props__.__dict__["nextid"] = None
            __props__.__dict__["point_to_point_port"] = None
            __props__.__dict__["port_number"] = None
            __props__.__dict__["role"] = None
            __props__.__dict__["root_path_cost"] = None
            __props__.__dict__["sending_rstp"] = None
            __props__.__dict__["status"] = None
        super(ResourceInterfaceBridgePort, __self__).__init__(
            'routeros:index/resourceInterfaceBridgePort:ResourceInterfaceBridgePort',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            auto_isolate: Optional[pulumi.Input[bool]] = None,
            bpdu_guard: Optional[pulumi.Input[bool]] = None,
            bridge: Optional[pulumi.Input[str]] = None,
            broadcast_flood: Optional[pulumi.Input[bool]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            debug_info: Optional[pulumi.Input[str]] = None,
            designated_bridge: Optional[pulumi.Input[str]] = None,
            designated_cost: Optional[pulumi.Input[str]] = None,
            designated_port_number: Optional[pulumi.Input[int]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            dynamic: Optional[pulumi.Input[bool]] = None,
            edge: Optional[pulumi.Input[str]] = None,
            edge_port: Optional[pulumi.Input[bool]] = None,
            edge_port_discovery: Optional[pulumi.Input[bool]] = None,
            external_fdb_status: Optional[pulumi.Input[bool]] = None,
            fast_leave: Optional[pulumi.Input[bool]] = None,
            forwarding: Optional[pulumi.Input[bool]] = None,
            frame_types: Optional[pulumi.Input[str]] = None,
            horizon: Optional[pulumi.Input[str]] = None,
            hw: Optional[pulumi.Input[bool]] = None,
            hw_offload: Optional[pulumi.Input[bool]] = None,
            hw_offload_group: Optional[pulumi.Input[str]] = None,
            inactive: Optional[pulumi.Input[bool]] = None,
            ingress_filtering: Optional[pulumi.Input[bool]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            internal_path_cost: Optional[pulumi.Input[int]] = None,
            learn: Optional[pulumi.Input[str]] = None,
            learning: Optional[pulumi.Input[bool]] = None,
            multicast_router: Optional[pulumi.Input[str]] = None,
            nextid: Optional[pulumi.Input[str]] = None,
            path_cost: Optional[pulumi.Input[str]] = None,
            point_to_point: Optional[pulumi.Input[str]] = None,
            point_to_point_port: Optional[pulumi.Input[bool]] = None,
            port_number: Optional[pulumi.Input[int]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            pvid: Optional[pulumi.Input[int]] = None,
            restricted_role: Optional[pulumi.Input[bool]] = None,
            restricted_tcn: Optional[pulumi.Input[bool]] = None,
            role: Optional[pulumi.Input[str]] = None,
            root_path_cost: Optional[pulumi.Input[int]] = None,
            sending_rstp: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tag_stacking: Optional[pulumi.Input[bool]] = None,
            trusted: Optional[pulumi.Input[bool]] = None,
            unknown_multicast_flood: Optional[pulumi.Input[bool]] = None,
            unknown_unicast_flood: Optional[pulumi.Input[bool]] = None) -> 'ResourceInterfaceBridgePort':
        """
        Get an existing ResourceInterfaceBridgePort resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[bool] auto_isolate: When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when protocol-mode is set to rstp or mstp and edge is set to no.
        :param pulumi.Input[bool] bpdu_guard: This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[bool] broadcast_flood: When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on egress ports.
        :param pulumi.Input[str] designated_bridge: Root bridge ID (bridge priority and the bridge MAC address).
        :param pulumi.Input[str] designated_cost: Designated cost.
        :param pulumi.Input[int] designated_port_number: Designated port number.
        :param pulumi.Input[bool] dynamic: Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        :param pulumi.Input[str] edge: Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other bridges attached.
        :param pulumi.Input[bool] edge_port: Whether port is an edge port or not.
        :param pulumi.Input[bool] edge_port_discovery: Whether port is set to automatically detect edge ports.
        :param pulumi.Input[bool] external_fdb_status: Whether registration table is used instead of forwarding data base.
        :param pulumi.Input[bool] fast_leave: Enables IGMP Fast leave feature on the port.
        :param pulumi.Input[bool] forwarding: Shows if the port is not blocked by (R/M)STP.
        :param pulumi.Input[str] frame_types: Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] horizon: Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware offloading. This value is integer '0'..'429496729' or 'none'.
        :param pulumi.Input[bool] hw: Enable or disable Hardware Offloading of the interface.
        :param pulumi.Input[bool] hw_offload: Hardware offloading state.
        :param pulumi.Input[str] hw_offload_group: Switch chip used by the port.
        :param pulumi.Input[bool] ingress_filtering: Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[str] interface: Name of the interface.
        :param pulumi.Input[int] internal_path_cost: Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[str] learn: Changes MAC learning behaviour on a bridge port
        :param pulumi.Input[bool] learning: Shows whether the port is capable of learning MAC addresses.
        :param pulumi.Input[str] multicast_router: Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
        :param pulumi.Input[str] path_cost: Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between regions. This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[str] point_to_point: Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of failure. This property has no effect when protocol-mode is set to none.
        :param pulumi.Input[bool] point_to_point_port: Whether the port is connected to a bridge port using full-duplex (true) or half-duplex (false).
        :param pulumi.Input[int] port_number: Port number will be assigned in the order that ports got added to the bridge, but this is only true until reboot. After reboot internal numbering will be used.
        :param pulumi.Input[str] priority: The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between regions.
        :param pulumi.Input[int] pvid: ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] restricted_role: Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[bool] restricted_tcn: Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to propagate. This property only has effect when protocol-mode is set to mstp.
        :param pulumi.Input[str] role: (R/M)STP algorithm assigned role of the port
        :param pulumi.Input[int] root_path_cost: The total cost of the path to the root-bridge.
        :param pulumi.Input[str] sending_rstp: Whether the port is sending RSTP or MSTP BPDU types. A port will transit to STP type when RSTP/MSTP enabled port receives a STP BPDU
        :param pulumi.Input[str] status: Port status ('in-bridge' - port is enabled).
        :param pulumi.Input[bool] tag_stacking: Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
        :param pulumi.Input[bool] trusted: When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
        :param pulumi.Input[bool] unknown_multicast_flood: When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
        :param pulumi.Input[bool] unknown_unicast_flood: When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceInterfaceBridgePortState.__new__(_ResourceInterfaceBridgePortState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["auto_isolate"] = auto_isolate
        __props__.__dict__["bpdu_guard"] = bpdu_guard
        __props__.__dict__["bridge"] = bridge
        __props__.__dict__["broadcast_flood"] = broadcast_flood
        __props__.__dict__["comment"] = comment
        __props__.__dict__["debug_info"] = debug_info
        __props__.__dict__["designated_bridge"] = designated_bridge
        __props__.__dict__["designated_cost"] = designated_cost
        __props__.__dict__["designated_port_number"] = designated_port_number
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["dynamic"] = dynamic
        __props__.__dict__["edge"] = edge
        __props__.__dict__["edge_port"] = edge_port
        __props__.__dict__["edge_port_discovery"] = edge_port_discovery
        __props__.__dict__["external_fdb_status"] = external_fdb_status
        __props__.__dict__["fast_leave"] = fast_leave
        __props__.__dict__["forwarding"] = forwarding
        __props__.__dict__["frame_types"] = frame_types
        __props__.__dict__["horizon"] = horizon
        __props__.__dict__["hw"] = hw
        __props__.__dict__["hw_offload"] = hw_offload
        __props__.__dict__["hw_offload_group"] = hw_offload_group
        __props__.__dict__["inactive"] = inactive
        __props__.__dict__["ingress_filtering"] = ingress_filtering
        __props__.__dict__["interface"] = interface
        __props__.__dict__["internal_path_cost"] = internal_path_cost
        __props__.__dict__["learn"] = learn
        __props__.__dict__["learning"] = learning
        __props__.__dict__["multicast_router"] = multicast_router
        __props__.__dict__["nextid"] = nextid
        __props__.__dict__["path_cost"] = path_cost
        __props__.__dict__["point_to_point"] = point_to_point
        __props__.__dict__["point_to_point_port"] = point_to_point_port
        __props__.__dict__["port_number"] = port_number
        __props__.__dict__["priority"] = priority
        __props__.__dict__["pvid"] = pvid
        __props__.__dict__["restricted_role"] = restricted_role
        __props__.__dict__["restricted_tcn"] = restricted_tcn
        __props__.__dict__["role"] = role
        __props__.__dict__["root_path_cost"] = root_path_cost
        __props__.__dict__["sending_rstp"] = sending_rstp
        __props__.__dict__["status"] = status
        __props__.__dict__["tag_stacking"] = tag_stacking
        __props__.__dict__["trusted"] = trusted
        __props__.__dict__["unknown_multicast_flood"] = unknown_multicast_flood
        __props__.__dict__["unknown_unicast_flood"] = unknown_unicast_flood
        return ResourceInterfaceBridgePort(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter(name="autoIsolate")
    def auto_isolate(self) -> pulumi.Output[Optional[bool]]:
        """
        When enabled, prevents a port moving from discarding into forwarding state if no BPDUs are received from the neighboring bridge. The port will change into a forwarding state only when a BPDU is received. This property only has an effect when protocol-mode is set to rstp or mstp and edge is set to no.
        """
        return pulumi.get(self, "auto_isolate")

    @property
    @pulumi.getter(name="bpduGuard")
    def bpdu_guard(self) -> pulumi.Output[Optional[bool]]:
        """
        This property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "bpdu_guard")

    @property
    @pulumi.getter
    def bridge(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bridge")

    @property
    @pulumi.getter(name="broadcastFlood")
    def broadcast_flood(self) -> pulumi.Output[Optional[bool]]:
        """
        When enabled, bridge floods broadcast traffic to all bridge egress ports. When disabled, drops broadcast traffic on egress ports.
        """
        return pulumi.get(self, "broadcast_flood")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="debugInfo")
    def debug_info(self) -> pulumi.Output[str]:
        return pulumi.get(self, "debug_info")

    @property
    @pulumi.getter(name="designatedBridge")
    def designated_bridge(self) -> pulumi.Output[str]:
        """
        Root bridge ID (bridge priority and the bridge MAC address).
        """
        return pulumi.get(self, "designated_bridge")

    @property
    @pulumi.getter(name="designatedCost")
    def designated_cost(self) -> pulumi.Output[str]:
        """
        Designated cost.
        """
        return pulumi.get(self, "designated_cost")

    @property
    @pulumi.getter(name="designatedPortNumber")
    def designated_port_number(self) -> pulumi.Output[int]:
        """
        Designated port number.
        """
        return pulumi.get(self, "designated_port_number")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dynamic(self) -> pulumi.Output[bool]:
        """
        Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        """
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def edge(self) -> pulumi.Output[Optional[str]]:
        """
        Set port as edge port or non-edge port, or enable edge discovery. Edge ports are connected to a LAN that has no other bridges attached.
        """
        return pulumi.get(self, "edge")

    @property
    @pulumi.getter(name="edgePort")
    def edge_port(self) -> pulumi.Output[bool]:
        """
        Whether port is an edge port or not.
        """
        return pulumi.get(self, "edge_port")

    @property
    @pulumi.getter(name="edgePortDiscovery")
    def edge_port_discovery(self) -> pulumi.Output[bool]:
        """
        Whether port is set to automatically detect edge ports.
        """
        return pulumi.get(self, "edge_port_discovery")

    @property
    @pulumi.getter(name="externalFdbStatus")
    def external_fdb_status(self) -> pulumi.Output[bool]:
        """
        Whether registration table is used instead of forwarding data base.
        """
        return pulumi.get(self, "external_fdb_status")

    @property
    @pulumi.getter(name="fastLeave")
    def fast_leave(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables IGMP Fast leave feature on the port.
        """
        return pulumi.get(self, "fast_leave")

    @property
    @pulumi.getter
    def forwarding(self) -> pulumi.Output[bool]:
        """
        Shows if the port is not blocked by (R/M)STP.
        """
        return pulumi.get(self, "forwarding")

    @property
    @pulumi.getter(name="frameTypes")
    def frame_types(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies allowed ingress frame types on a bridge port. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "frame_types")

    @property
    @pulumi.getter
    def horizon(self) -> pulumi.Output[Optional[str]]:
        """
        Use split horizon bridging to prevent bridging loops. Set the same value for group of ports, to prevent them from sending data to ports with the same horizon value. Split horizon is a software feature that disables hardware offloading. This value is integer '0'..'429496729' or 'none'.
        """
        return pulumi.get(self, "horizon")

    @property
    @pulumi.getter
    def hw(self) -> pulumi.Output[bool]:
        """
        Enable or disable Hardware Offloading of the interface.
        """
        return pulumi.get(self, "hw")

    @property
    @pulumi.getter(name="hwOffload")
    def hw_offload(self) -> pulumi.Output[bool]:
        """
        Hardware offloading state.
        """
        return pulumi.get(self, "hw_offload")

    @property
    @pulumi.getter(name="hwOffloadGroup")
    def hw_offload_group(self) -> pulumi.Output[str]:
        """
        Switch chip used by the port.
        """
        return pulumi.get(self, "hw_offload_group")

    @property
    @pulumi.getter
    def inactive(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "inactive")

    @property
    @pulumi.getter(name="ingressFiltering")
    def ingress_filtering(self) -> pulumi.Output[bool]:
        """
        Enables or disables VLAN ingress filtering, which checks if the ingress port is a member of the received VLAN ID in the bridge VLAN table. Should be used with frame-types to specify if the ingress traffic should be tagged or untagged. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "ingress_filtering")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Name of the interface.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="internalPathCost")
    def internal_path_cost(self) -> pulumi.Output[Optional[int]]:
        """
        Path cost to the interface for MSTI0 inside a region. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "internal_path_cost")

    @property
    @pulumi.getter
    def learn(self) -> pulumi.Output[Optional[str]]:
        """
        Changes MAC learning behaviour on a bridge port
        """
        return pulumi.get(self, "learn")

    @property
    @pulumi.getter
    def learning(self) -> pulumi.Output[bool]:
        """
        Shows whether the port is capable of learning MAC addresses.
        """
        return pulumi.get(self, "learning")

    @property
    @pulumi.getter(name="multicastRouter")
    def multicast_router(self) -> pulumi.Output[Optional[str]]:
        """
        Changes the state of a bridge port whether IGMP membership reports are going to be forwarded to this port.
        """
        return pulumi.get(self, "multicast_router")

    @property
    @pulumi.getter
    def nextid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nextid")

    @property
    @pulumi.getter(name="pathCost")
    def path_cost(self) -> pulumi.Output[Optional[str]]:
        """
        Path cost to the interface, used by STP to determine the "best" path, used by MSTP todetermine "best" path between regions. This property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "path_cost")

    @property
    @pulumi.getter(name="pointToPoint")
    def point_to_point(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies if a bridge port is connected to a bridge using a point-to-point link for faster convergence in case of failure. This property has no effect when protocol-mode is set to none.
        """
        return pulumi.get(self, "point_to_point")

    @property
    @pulumi.getter(name="pointToPointPort")
    def point_to_point_port(self) -> pulumi.Output[bool]:
        """
        Whether the port is connected to a bridge port using full-duplex (true) or half-duplex (false).
        """
        return pulumi.get(self, "point_to_point_port")

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Output[int]:
        """
        Port number will be assigned in the order that ports got added to the bridge, but this is only true until reboot. After reboot internal numbering will be used.
        """
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[str]]:
        """
        The priority of the interface, used by STP to determine the root port, used by MSTP to determine root port between regions.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def pvid(self) -> pulumi.Output[int]:
        """
        ort VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is assigned to. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "pvid")

    @property
    @pulumi.getter(name="restrictedRole")
    def restricted_role(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable the restricted role on a port, used by STP to forbid a port becoming a root port. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "restricted_role")

    @property
    @pulumi.getter(name="restrictedTcn")
    def restricted_tcn(self) -> pulumi.Output[Optional[bool]]:
        """
        Disable topology change notification (TCN) sending on a port, used by STP to forbid network topology changes to propagate. This property only has effect when protocol-mode is set to mstp.
        """
        return pulumi.get(self, "restricted_tcn")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        (R/M)STP algorithm assigned role of the port
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="rootPathCost")
    def root_path_cost(self) -> pulumi.Output[int]:
        """
        The total cost of the path to the root-bridge.
        """
        return pulumi.get(self, "root_path_cost")

    @property
    @pulumi.getter(name="sendingRstp")
    def sending_rstp(self) -> pulumi.Output[str]:
        """
        Whether the port is sending RSTP or MSTP BPDU types. A port will transit to STP type when RSTP/MSTP enabled port receives a STP BPDU
        """
        return pulumi.get(self, "sending_rstp")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Port status ('in-bridge' - port is enabled).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tagStacking")
    def tag_stacking(self) -> pulumi.Output[Optional[bool]]:
        """
        Forces all packets to be treated as untagged packets. Packets on ingress port will be tagged with another VLAN tag regardless if a VLAN tag already exists, packets will be tagged with a VLAN ID that matches the pvid value and will use EtherType that is specified in ether-type. This property only has effect when vlan-filtering is set to yes.
        """
        return pulumi.get(self, "tag_stacking")

    @property
    @pulumi.getter
    def trusted(self) -> pulumi.Output[Optional[bool]]:
        """
        When enabled, it allows to forward DHCP packets towards DHCP server through this port. Mainly used to limit unauthorized servers to provide malicious information for users. This property only has effect when dhcp-snooping is set to yes.
        """
        return pulumi.get(self, "trusted")

    @property
    @pulumi.getter(name="unknownMulticastFlood")
    def unknown_multicast_flood(self) -> pulumi.Output[Optional[bool]]:
        """
        When enabled, bridge floods unknown multicast traffic to all bridge egress ports.
        """
        return pulumi.get(self, "unknown_multicast_flood")

    @property
    @pulumi.getter(name="unknownUnicastFlood")
    def unknown_unicast_flood(self) -> pulumi.Output[Optional[bool]]:
        """
        When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
        """
        return pulumi.get(self, "unknown_unicast_flood")

