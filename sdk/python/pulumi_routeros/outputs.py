# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'DatasourceFirewallAddressListResult',
    'DatasourceFirewallMangleResult',
    'DatasourceFirewallNatResult',
    'DatasourceFirewallRuleResult',
    'DatasourceIPAddressesAddressResult',
    'DatasourceIPRoutesRouteResult',
    'DatasourceIPv6AddressesAddressResult',
    'DatasourceInterfacesInterfaceResult',
    'ResourceSystemCertificateSign',
]

@pulumi.output_type
class DatasourceFirewallAddressListResult(dict):
    def __init__(__self__, *,
                 address: str,
                 comment: str,
                 creation_time: str,
                 disabled: bool,
                 dynamic: bool,
                 id: str,
                 list: str,
                 timeout: str,
                 filter: Optional[Mapping[str, Any]] = None):
        """
        :param str id: The ID of this resource.
        :param Mapping[str, Any] filter: Additional request filtering options.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "list", list)
        pulumi.set(__self__, "timeout", timeout)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def list(self) -> str:
        return pulumi.get(self, "list")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def filter(self) -> Optional[Mapping[str, Any]]:
        """
        Additional request filtering options.
        """
        return pulumi.get(self, "filter")


@pulumi.output_type
class DatasourceFirewallMangleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 address_list: str,
                 address_list_timeout: str,
                 bytes: int,
                 chain: str,
                 comment: str,
                 connection_bytes: str,
                 connection_limit: str,
                 connection_mark: str,
                 connection_nat_state: str,
                 connection_rate: str,
                 connection_state: str,
                 connection_type: str,
                 content: str,
                 disabled: bool,
                 dscp: int,
                 dst_address: str,
                 dst_address_list: str,
                 dst_address_type: str,
                 dst_limit: str,
                 dst_port: str,
                 dynamic: bool,
                 fragment: bool,
                 hotspot: str,
                 icmp_options: str,
                 id: str,
                 in_bridge_port: str,
                 in_bridge_port_list: str,
                 in_interface: str,
                 in_interface_list: str,
                 ingress_priority: int,
                 invalid: bool,
                 ipsec_policy: str,
                 ipv4_options: str,
                 jump_target: str,
                 layer7_protocol: str,
                 limit: str,
                 log: bool,
                 log_prefix: str,
                 new_connection_mark: str,
                 new_dscp: int,
                 new_mss: int,
                 new_packet_mark: str,
                 new_priority: str,
                 new_routing_mark: str,
                 new_ttl: str,
                 nth: str,
                 out_bridge_port: str,
                 out_bridge_port_list: str,
                 out_interface: str,
                 out_interface_list: str,
                 packet_mark: str,
                 packet_size: str,
                 packets: int,
                 passthrough: bool,
                 per_connection_classifier: str,
                 port: str,
                 protocol: str,
                 psd: str,
                 random: int,
                 route_dst: str,
                 routing_mark: str,
                 src_address: str,
                 src_address_list: str,
                 src_address_type: str,
                 src_mac_address: str,
                 src_port: str,
                 tcp_flags: str,
                 tcp_mss: str,
                 time: str,
                 tls_host: str,
                 ttl: str,
                 filter: Optional[Mapping[str, Any]] = None):
        """
        :param str id: The ID of this resource.
        :param Mapping[str, Any] filter: Additional request filtering options.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "address_list", address_list)
        pulumi.set(__self__, "address_list_timeout", address_list_timeout)
        pulumi.set(__self__, "bytes", bytes)
        pulumi.set(__self__, "chain", chain)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "connection_bytes", connection_bytes)
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "connection_mark", connection_mark)
        pulumi.set(__self__, "connection_nat_state", connection_nat_state)
        pulumi.set(__self__, "connection_rate", connection_rate)
        pulumi.set(__self__, "connection_state", connection_state)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "dst_address", dst_address)
        pulumi.set(__self__, "dst_address_list", dst_address_list)
        pulumi.set(__self__, "dst_address_type", dst_address_type)
        pulumi.set(__self__, "dst_limit", dst_limit)
        pulumi.set(__self__, "dst_port", dst_port)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "fragment", fragment)
        pulumi.set(__self__, "hotspot", hotspot)
        pulumi.set(__self__, "icmp_options", icmp_options)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "in_bridge_port", in_bridge_port)
        pulumi.set(__self__, "in_bridge_port_list", in_bridge_port_list)
        pulumi.set(__self__, "in_interface", in_interface)
        pulumi.set(__self__, "in_interface_list", in_interface_list)
        pulumi.set(__self__, "ingress_priority", ingress_priority)
        pulumi.set(__self__, "invalid", invalid)
        pulumi.set(__self__, "ipsec_policy", ipsec_policy)
        pulumi.set(__self__, "ipv4_options", ipv4_options)
        pulumi.set(__self__, "jump_target", jump_target)
        pulumi.set(__self__, "layer7_protocol", layer7_protocol)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "log_prefix", log_prefix)
        pulumi.set(__self__, "new_connection_mark", new_connection_mark)
        pulumi.set(__self__, "new_dscp", new_dscp)
        pulumi.set(__self__, "new_mss", new_mss)
        pulumi.set(__self__, "new_packet_mark", new_packet_mark)
        pulumi.set(__self__, "new_priority", new_priority)
        pulumi.set(__self__, "new_routing_mark", new_routing_mark)
        pulumi.set(__self__, "new_ttl", new_ttl)
        pulumi.set(__self__, "nth", nth)
        pulumi.set(__self__, "out_bridge_port", out_bridge_port)
        pulumi.set(__self__, "out_bridge_port_list", out_bridge_port_list)
        pulumi.set(__self__, "out_interface", out_interface)
        pulumi.set(__self__, "out_interface_list", out_interface_list)
        pulumi.set(__self__, "packet_mark", packet_mark)
        pulumi.set(__self__, "packet_size", packet_size)
        pulumi.set(__self__, "packets", packets)
        pulumi.set(__self__, "passthrough", passthrough)
        pulumi.set(__self__, "per_connection_classifier", per_connection_classifier)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "psd", psd)
        pulumi.set(__self__, "random", random)
        pulumi.set(__self__, "route_dst", route_dst)
        pulumi.set(__self__, "routing_mark", routing_mark)
        pulumi.set(__self__, "src_address", src_address)
        pulumi.set(__self__, "src_address_list", src_address_list)
        pulumi.set(__self__, "src_address_type", src_address_type)
        pulumi.set(__self__, "src_mac_address", src_mac_address)
        pulumi.set(__self__, "src_port", src_port)
        pulumi.set(__self__, "tcp_flags", tcp_flags)
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "tls_host", tls_host)
        pulumi.set(__self__, "ttl", ttl)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> str:
        return pulumi.get(self, "address_list")

    @property
    @pulumi.getter(name="addressListTimeout")
    def address_list_timeout(self) -> str:
        return pulumi.get(self, "address_list_timeout")

    @property
    @pulumi.getter
    def bytes(self) -> int:
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter
    def chain(self) -> str:
        return pulumi.get(self, "chain")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="connectionBytes")
    def connection_bytes(self) -> str:
        return pulumi.get(self, "connection_bytes")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> str:
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter(name="connectionMark")
    def connection_mark(self) -> str:
        return pulumi.get(self, "connection_mark")

    @property
    @pulumi.getter(name="connectionNatState")
    def connection_nat_state(self) -> str:
        return pulumi.get(self, "connection_nat_state")

    @property
    @pulumi.getter(name="connectionRate")
    def connection_rate(self) -> str:
        return pulumi.get(self, "connection_rate")

    @property
    @pulumi.getter(name="connectionState")
    def connection_state(self) -> str:
        return pulumi.get(self, "connection_state")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> str:
        return pulumi.get(self, "dst_address")

    @property
    @pulumi.getter(name="dstAddressList")
    def dst_address_list(self) -> str:
        return pulumi.get(self, "dst_address_list")

    @property
    @pulumi.getter(name="dstAddressType")
    def dst_address_type(self) -> str:
        return pulumi.get(self, "dst_address_type")

    @property
    @pulumi.getter(name="dstLimit")
    def dst_limit(self) -> str:
        return pulumi.get(self, "dst_limit")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> str:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def fragment(self) -> bool:
        return pulumi.get(self, "fragment")

    @property
    @pulumi.getter
    def hotspot(self) -> str:
        return pulumi.get(self, "hotspot")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> str:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inBridgePort")
    def in_bridge_port(self) -> str:
        return pulumi.get(self, "in_bridge_port")

    @property
    @pulumi.getter(name="inBridgePortList")
    def in_bridge_port_list(self) -> str:
        return pulumi.get(self, "in_bridge_port_list")

    @property
    @pulumi.getter(name="inInterface")
    def in_interface(self) -> str:
        return pulumi.get(self, "in_interface")

    @property
    @pulumi.getter(name="inInterfaceList")
    def in_interface_list(self) -> str:
        return pulumi.get(self, "in_interface_list")

    @property
    @pulumi.getter(name="ingressPriority")
    def ingress_priority(self) -> int:
        return pulumi.get(self, "ingress_priority")

    @property
    @pulumi.getter
    def invalid(self) -> bool:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter(name="ipsecPolicy")
    def ipsec_policy(self) -> str:
        return pulumi.get(self, "ipsec_policy")

    @property
    @pulumi.getter(name="ipv4Options")
    def ipv4_options(self) -> str:
        return pulumi.get(self, "ipv4_options")

    @property
    @pulumi.getter(name="jumpTarget")
    def jump_target(self) -> str:
        return pulumi.get(self, "jump_target")

    @property
    @pulumi.getter(name="layer7Protocol")
    def layer7_protocol(self) -> str:
        return pulumi.get(self, "layer7_protocol")

    @property
    @pulumi.getter
    def limit(self) -> str:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def log(self) -> bool:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> str:
        return pulumi.get(self, "log_prefix")

    @property
    @pulumi.getter(name="newConnectionMark")
    def new_connection_mark(self) -> str:
        return pulumi.get(self, "new_connection_mark")

    @property
    @pulumi.getter(name="newDscp")
    def new_dscp(self) -> int:
        return pulumi.get(self, "new_dscp")

    @property
    @pulumi.getter(name="newMss")
    def new_mss(self) -> int:
        return pulumi.get(self, "new_mss")

    @property
    @pulumi.getter(name="newPacketMark")
    def new_packet_mark(self) -> str:
        return pulumi.get(self, "new_packet_mark")

    @property
    @pulumi.getter(name="newPriority")
    def new_priority(self) -> str:
        return pulumi.get(self, "new_priority")

    @property
    @pulumi.getter(name="newRoutingMark")
    def new_routing_mark(self) -> str:
        return pulumi.get(self, "new_routing_mark")

    @property
    @pulumi.getter(name="newTtl")
    def new_ttl(self) -> str:
        return pulumi.get(self, "new_ttl")

    @property
    @pulumi.getter
    def nth(self) -> str:
        return pulumi.get(self, "nth")

    @property
    @pulumi.getter(name="outBridgePort")
    def out_bridge_port(self) -> str:
        return pulumi.get(self, "out_bridge_port")

    @property
    @pulumi.getter(name="outBridgePortList")
    def out_bridge_port_list(self) -> str:
        return pulumi.get(self, "out_bridge_port_list")

    @property
    @pulumi.getter(name="outInterface")
    def out_interface(self) -> str:
        return pulumi.get(self, "out_interface")

    @property
    @pulumi.getter(name="outInterfaceList")
    def out_interface_list(self) -> str:
        return pulumi.get(self, "out_interface_list")

    @property
    @pulumi.getter(name="packetMark")
    def packet_mark(self) -> str:
        return pulumi.get(self, "packet_mark")

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> str:
        return pulumi.get(self, "packet_size")

    @property
    @pulumi.getter
    def packets(self) -> int:
        return pulumi.get(self, "packets")

    @property
    @pulumi.getter
    def passthrough(self) -> bool:
        return pulumi.get(self, "passthrough")

    @property
    @pulumi.getter(name="perConnectionClassifier")
    def per_connection_classifier(self) -> str:
        return pulumi.get(self, "per_connection_classifier")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def psd(self) -> str:
        return pulumi.get(self, "psd")

    @property
    @pulumi.getter
    def random(self) -> int:
        return pulumi.get(self, "random")

    @property
    @pulumi.getter(name="routeDst")
    def route_dst(self) -> str:
        return pulumi.get(self, "route_dst")

    @property
    @pulumi.getter(name="routingMark")
    def routing_mark(self) -> str:
        return pulumi.get(self, "routing_mark")

    @property
    @pulumi.getter(name="srcAddress")
    def src_address(self) -> str:
        return pulumi.get(self, "src_address")

    @property
    @pulumi.getter(name="srcAddressList")
    def src_address_list(self) -> str:
        return pulumi.get(self, "src_address_list")

    @property
    @pulumi.getter(name="srcAddressType")
    def src_address_type(self) -> str:
        return pulumi.get(self, "src_address_type")

    @property
    @pulumi.getter(name="srcMacAddress")
    def src_mac_address(self) -> str:
        return pulumi.get(self, "src_mac_address")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> str:
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter(name="tcpFlags")
    def tcp_flags(self) -> str:
        return pulumi.get(self, "tcp_flags")

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> str:
        return pulumi.get(self, "tcp_mss")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="tlsHost")
    def tls_host(self) -> str:
        return pulumi.get(self, "tls_host")

    @property
    @pulumi.getter
    def ttl(self) -> str:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def filter(self) -> Optional[Mapping[str, Any]]:
        """
        Additional request filtering options.
        """
        return pulumi.get(self, "filter")


@pulumi.output_type
class DatasourceFirewallNatResult(dict):
    def __init__(__self__, *,
                 action: str,
                 address_list: str,
                 address_list_timeout: str,
                 bytes: int,
                 chain: str,
                 comment: str,
                 connection_bytes: str,
                 connection_limit: str,
                 connection_mark: str,
                 connection_rate: str,
                 connection_type: str,
                 content: str,
                 disabled: bool,
                 dscp: int,
                 dst_address: str,
                 dst_address_list: str,
                 dst_address_type: str,
                 dst_limit: str,
                 dst_port: str,
                 dynamic: bool,
                 fragment: bool,
                 hotspot: str,
                 icmp_options: str,
                 id: str,
                 in_bridge_port: str,
                 in_bridge_port_list: str,
                 in_interface: str,
                 in_interface_list: str,
                 ingress_priority: int,
                 invalid: bool,
                 ipsec_policy: str,
                 ipv4_options: str,
                 jump_target: str,
                 layer7_protocol: str,
                 limit: str,
                 log: bool,
                 log_prefix: str,
                 nth: str,
                 out_bridge_port: str,
                 out_bridge_port_list: str,
                 out_interface: str,
                 out_interface_list: str,
                 packet_mark: str,
                 packet_size: str,
                 packets: int,
                 per_connection_classifier: str,
                 port: str,
                 priority: int,
                 protocol: str,
                 psd: str,
                 random: int,
                 routing_mark: str,
                 same_not_by_dst: bool,
                 src_address: str,
                 src_address_list: str,
                 src_address_type: str,
                 src_mac_address: str,
                 src_port: str,
                 tcp_mss: str,
                 time: str,
                 to_addresses: str,
                 to_ports: str,
                 ttl: str,
                 filter: Optional[Mapping[str, Any]] = None):
        """
        :param str id: The ID of this resource.
        :param Mapping[str, Any] filter: Additional request filtering options.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "address_list", address_list)
        pulumi.set(__self__, "address_list_timeout", address_list_timeout)
        pulumi.set(__self__, "bytes", bytes)
        pulumi.set(__self__, "chain", chain)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "connection_bytes", connection_bytes)
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "connection_mark", connection_mark)
        pulumi.set(__self__, "connection_rate", connection_rate)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "dst_address", dst_address)
        pulumi.set(__self__, "dst_address_list", dst_address_list)
        pulumi.set(__self__, "dst_address_type", dst_address_type)
        pulumi.set(__self__, "dst_limit", dst_limit)
        pulumi.set(__self__, "dst_port", dst_port)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "fragment", fragment)
        pulumi.set(__self__, "hotspot", hotspot)
        pulumi.set(__self__, "icmp_options", icmp_options)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "in_bridge_port", in_bridge_port)
        pulumi.set(__self__, "in_bridge_port_list", in_bridge_port_list)
        pulumi.set(__self__, "in_interface", in_interface)
        pulumi.set(__self__, "in_interface_list", in_interface_list)
        pulumi.set(__self__, "ingress_priority", ingress_priority)
        pulumi.set(__self__, "invalid", invalid)
        pulumi.set(__self__, "ipsec_policy", ipsec_policy)
        pulumi.set(__self__, "ipv4_options", ipv4_options)
        pulumi.set(__self__, "jump_target", jump_target)
        pulumi.set(__self__, "layer7_protocol", layer7_protocol)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "log_prefix", log_prefix)
        pulumi.set(__self__, "nth", nth)
        pulumi.set(__self__, "out_bridge_port", out_bridge_port)
        pulumi.set(__self__, "out_bridge_port_list", out_bridge_port_list)
        pulumi.set(__self__, "out_interface", out_interface)
        pulumi.set(__self__, "out_interface_list", out_interface_list)
        pulumi.set(__self__, "packet_mark", packet_mark)
        pulumi.set(__self__, "packet_size", packet_size)
        pulumi.set(__self__, "packets", packets)
        pulumi.set(__self__, "per_connection_classifier", per_connection_classifier)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "psd", psd)
        pulumi.set(__self__, "random", random)
        pulumi.set(__self__, "routing_mark", routing_mark)
        pulumi.set(__self__, "same_not_by_dst", same_not_by_dst)
        pulumi.set(__self__, "src_address", src_address)
        pulumi.set(__self__, "src_address_list", src_address_list)
        pulumi.set(__self__, "src_address_type", src_address_type)
        pulumi.set(__self__, "src_mac_address", src_mac_address)
        pulumi.set(__self__, "src_port", src_port)
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "to_addresses", to_addresses)
        pulumi.set(__self__, "to_ports", to_ports)
        pulumi.set(__self__, "ttl", ttl)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> str:
        return pulumi.get(self, "address_list")

    @property
    @pulumi.getter(name="addressListTimeout")
    def address_list_timeout(self) -> str:
        return pulumi.get(self, "address_list_timeout")

    @property
    @pulumi.getter
    def bytes(self) -> int:
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter
    def chain(self) -> str:
        return pulumi.get(self, "chain")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="connectionBytes")
    def connection_bytes(self) -> str:
        return pulumi.get(self, "connection_bytes")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> str:
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter(name="connectionMark")
    def connection_mark(self) -> str:
        return pulumi.get(self, "connection_mark")

    @property
    @pulumi.getter(name="connectionRate")
    def connection_rate(self) -> str:
        return pulumi.get(self, "connection_rate")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> str:
        return pulumi.get(self, "dst_address")

    @property
    @pulumi.getter(name="dstAddressList")
    def dst_address_list(self) -> str:
        return pulumi.get(self, "dst_address_list")

    @property
    @pulumi.getter(name="dstAddressType")
    def dst_address_type(self) -> str:
        return pulumi.get(self, "dst_address_type")

    @property
    @pulumi.getter(name="dstLimit")
    def dst_limit(self) -> str:
        return pulumi.get(self, "dst_limit")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> str:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def fragment(self) -> bool:
        return pulumi.get(self, "fragment")

    @property
    @pulumi.getter
    def hotspot(self) -> str:
        return pulumi.get(self, "hotspot")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> str:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inBridgePort")
    def in_bridge_port(self) -> str:
        return pulumi.get(self, "in_bridge_port")

    @property
    @pulumi.getter(name="inBridgePortList")
    def in_bridge_port_list(self) -> str:
        return pulumi.get(self, "in_bridge_port_list")

    @property
    @pulumi.getter(name="inInterface")
    def in_interface(self) -> str:
        return pulumi.get(self, "in_interface")

    @property
    @pulumi.getter(name="inInterfaceList")
    def in_interface_list(self) -> str:
        return pulumi.get(self, "in_interface_list")

    @property
    @pulumi.getter(name="ingressPriority")
    def ingress_priority(self) -> int:
        return pulumi.get(self, "ingress_priority")

    @property
    @pulumi.getter
    def invalid(self) -> bool:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter(name="ipsecPolicy")
    def ipsec_policy(self) -> str:
        return pulumi.get(self, "ipsec_policy")

    @property
    @pulumi.getter(name="ipv4Options")
    def ipv4_options(self) -> str:
        return pulumi.get(self, "ipv4_options")

    @property
    @pulumi.getter(name="jumpTarget")
    def jump_target(self) -> str:
        return pulumi.get(self, "jump_target")

    @property
    @pulumi.getter(name="layer7Protocol")
    def layer7_protocol(self) -> str:
        return pulumi.get(self, "layer7_protocol")

    @property
    @pulumi.getter
    def limit(self) -> str:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def log(self) -> bool:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> str:
        return pulumi.get(self, "log_prefix")

    @property
    @pulumi.getter
    def nth(self) -> str:
        return pulumi.get(self, "nth")

    @property
    @pulumi.getter(name="outBridgePort")
    def out_bridge_port(self) -> str:
        return pulumi.get(self, "out_bridge_port")

    @property
    @pulumi.getter(name="outBridgePortList")
    def out_bridge_port_list(self) -> str:
        return pulumi.get(self, "out_bridge_port_list")

    @property
    @pulumi.getter(name="outInterface")
    def out_interface(self) -> str:
        return pulumi.get(self, "out_interface")

    @property
    @pulumi.getter(name="outInterfaceList")
    def out_interface_list(self) -> str:
        return pulumi.get(self, "out_interface_list")

    @property
    @pulumi.getter(name="packetMark")
    def packet_mark(self) -> str:
        return pulumi.get(self, "packet_mark")

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> str:
        return pulumi.get(self, "packet_size")

    @property
    @pulumi.getter
    def packets(self) -> int:
        return pulumi.get(self, "packets")

    @property
    @pulumi.getter(name="perConnectionClassifier")
    def per_connection_classifier(self) -> str:
        return pulumi.get(self, "per_connection_classifier")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def psd(self) -> str:
        return pulumi.get(self, "psd")

    @property
    @pulumi.getter
    def random(self) -> int:
        return pulumi.get(self, "random")

    @property
    @pulumi.getter(name="routingMark")
    def routing_mark(self) -> str:
        return pulumi.get(self, "routing_mark")

    @property
    @pulumi.getter(name="sameNotByDst")
    def same_not_by_dst(self) -> bool:
        return pulumi.get(self, "same_not_by_dst")

    @property
    @pulumi.getter(name="srcAddress")
    def src_address(self) -> str:
        return pulumi.get(self, "src_address")

    @property
    @pulumi.getter(name="srcAddressList")
    def src_address_list(self) -> str:
        return pulumi.get(self, "src_address_list")

    @property
    @pulumi.getter(name="srcAddressType")
    def src_address_type(self) -> str:
        return pulumi.get(self, "src_address_type")

    @property
    @pulumi.getter(name="srcMacAddress")
    def src_mac_address(self) -> str:
        return pulumi.get(self, "src_mac_address")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> str:
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> str:
        return pulumi.get(self, "tcp_mss")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="toAddresses")
    def to_addresses(self) -> str:
        return pulumi.get(self, "to_addresses")

    @property
    @pulumi.getter(name="toPorts")
    def to_ports(self) -> str:
        return pulumi.get(self, "to_ports")

    @property
    @pulumi.getter
    def ttl(self) -> str:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def filter(self) -> Optional[Mapping[str, Any]]:
        """
        Additional request filtering options.
        """
        return pulumi.get(self, "filter")


@pulumi.output_type
class DatasourceFirewallRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 address_list_timeout: str,
                 bytes: int,
                 chain: str,
                 comment: str,
                 connection_bytes: str,
                 connection_limit: str,
                 connection_mark: str,
                 connection_nat_state: str,
                 connection_rate: str,
                 connection_state: str,
                 connection_type: str,
                 content: str,
                 disabled: bool,
                 dscp: int,
                 dst_address: str,
                 dst_address_list: str,
                 dst_address_type: str,
                 dst_limit: str,
                 dst_port: str,
                 dynamic: bool,
                 fragment: bool,
                 hotspot: str,
                 hw_offload: bool,
                 icmp_options: str,
                 id: str,
                 in_bridge_port: str,
                 in_bridge_port_list: str,
                 in_interface: str,
                 in_interface_list: str,
                 ingress_priority: int,
                 invalid: bool,
                 ipsec_policy: str,
                 ipv4_options: str,
                 jump_target: str,
                 layer7_protocol: str,
                 limit: str,
                 log: bool,
                 log_prefix: str,
                 nth: str,
                 out_bridge_port: str,
                 out_bridge_port_list: str,
                 out_interface: str,
                 out_interface_list: str,
                 packet_mark: str,
                 packet_size: str,
                 packets: int,
                 per_connection_classifier: str,
                 port: str,
                 priority: int,
                 protocol: str,
                 psd: str,
                 random: int,
                 reject_with: str,
                 routing_mark: str,
                 routing_table: str,
                 src_address: str,
                 src_address_list: str,
                 src_address_type: str,
                 src_mac_address: str,
                 src_port: str,
                 tcp_flags: str,
                 tcp_mss: str,
                 time: str,
                 tls_host: str,
                 ttl: str,
                 filter: Optional[Mapping[str, Any]] = None):
        """
        :param str id: The ID of this resource.
        :param Mapping[str, Any] filter: Additional request filtering options.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "address_list_timeout", address_list_timeout)
        pulumi.set(__self__, "bytes", bytes)
        pulumi.set(__self__, "chain", chain)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "connection_bytes", connection_bytes)
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "connection_mark", connection_mark)
        pulumi.set(__self__, "connection_nat_state", connection_nat_state)
        pulumi.set(__self__, "connection_rate", connection_rate)
        pulumi.set(__self__, "connection_state", connection_state)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "dst_address", dst_address)
        pulumi.set(__self__, "dst_address_list", dst_address_list)
        pulumi.set(__self__, "dst_address_type", dst_address_type)
        pulumi.set(__self__, "dst_limit", dst_limit)
        pulumi.set(__self__, "dst_port", dst_port)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "fragment", fragment)
        pulumi.set(__self__, "hotspot", hotspot)
        pulumi.set(__self__, "hw_offload", hw_offload)
        pulumi.set(__self__, "icmp_options", icmp_options)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "in_bridge_port", in_bridge_port)
        pulumi.set(__self__, "in_bridge_port_list", in_bridge_port_list)
        pulumi.set(__self__, "in_interface", in_interface)
        pulumi.set(__self__, "in_interface_list", in_interface_list)
        pulumi.set(__self__, "ingress_priority", ingress_priority)
        pulumi.set(__self__, "invalid", invalid)
        pulumi.set(__self__, "ipsec_policy", ipsec_policy)
        pulumi.set(__self__, "ipv4_options", ipv4_options)
        pulumi.set(__self__, "jump_target", jump_target)
        pulumi.set(__self__, "layer7_protocol", layer7_protocol)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "log_prefix", log_prefix)
        pulumi.set(__self__, "nth", nth)
        pulumi.set(__self__, "out_bridge_port", out_bridge_port)
        pulumi.set(__self__, "out_bridge_port_list", out_bridge_port_list)
        pulumi.set(__self__, "out_interface", out_interface)
        pulumi.set(__self__, "out_interface_list", out_interface_list)
        pulumi.set(__self__, "packet_mark", packet_mark)
        pulumi.set(__self__, "packet_size", packet_size)
        pulumi.set(__self__, "packets", packets)
        pulumi.set(__self__, "per_connection_classifier", per_connection_classifier)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "psd", psd)
        pulumi.set(__self__, "random", random)
        pulumi.set(__self__, "reject_with", reject_with)
        pulumi.set(__self__, "routing_mark", routing_mark)
        pulumi.set(__self__, "routing_table", routing_table)
        pulumi.set(__self__, "src_address", src_address)
        pulumi.set(__self__, "src_address_list", src_address_list)
        pulumi.set(__self__, "src_address_type", src_address_type)
        pulumi.set(__self__, "src_mac_address", src_mac_address)
        pulumi.set(__self__, "src_port", src_port)
        pulumi.set(__self__, "tcp_flags", tcp_flags)
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "tls_host", tls_host)
        pulumi.set(__self__, "ttl", ttl)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addressListTimeout")
    def address_list_timeout(self) -> str:
        return pulumi.get(self, "address_list_timeout")

    @property
    @pulumi.getter
    def bytes(self) -> int:
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter
    def chain(self) -> str:
        return pulumi.get(self, "chain")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="connectionBytes")
    def connection_bytes(self) -> str:
        return pulumi.get(self, "connection_bytes")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> str:
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter(name="connectionMark")
    def connection_mark(self) -> str:
        return pulumi.get(self, "connection_mark")

    @property
    @pulumi.getter(name="connectionNatState")
    def connection_nat_state(self) -> str:
        return pulumi.get(self, "connection_nat_state")

    @property
    @pulumi.getter(name="connectionRate")
    def connection_rate(self) -> str:
        return pulumi.get(self, "connection_rate")

    @property
    @pulumi.getter(name="connectionState")
    def connection_state(self) -> str:
        return pulumi.get(self, "connection_state")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> str:
        return pulumi.get(self, "dst_address")

    @property
    @pulumi.getter(name="dstAddressList")
    def dst_address_list(self) -> str:
        return pulumi.get(self, "dst_address_list")

    @property
    @pulumi.getter(name="dstAddressType")
    def dst_address_type(self) -> str:
        return pulumi.get(self, "dst_address_type")

    @property
    @pulumi.getter(name="dstLimit")
    def dst_limit(self) -> str:
        return pulumi.get(self, "dst_limit")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> str:
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def fragment(self) -> bool:
        return pulumi.get(self, "fragment")

    @property
    @pulumi.getter
    def hotspot(self) -> str:
        return pulumi.get(self, "hotspot")

    @property
    @pulumi.getter(name="hwOffload")
    def hw_offload(self) -> bool:
        return pulumi.get(self, "hw_offload")

    @property
    @pulumi.getter(name="icmpOptions")
    def icmp_options(self) -> str:
        return pulumi.get(self, "icmp_options")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inBridgePort")
    def in_bridge_port(self) -> str:
        return pulumi.get(self, "in_bridge_port")

    @property
    @pulumi.getter(name="inBridgePortList")
    def in_bridge_port_list(self) -> str:
        return pulumi.get(self, "in_bridge_port_list")

    @property
    @pulumi.getter(name="inInterface")
    def in_interface(self) -> str:
        return pulumi.get(self, "in_interface")

    @property
    @pulumi.getter(name="inInterfaceList")
    def in_interface_list(self) -> str:
        return pulumi.get(self, "in_interface_list")

    @property
    @pulumi.getter(name="ingressPriority")
    def ingress_priority(self) -> int:
        return pulumi.get(self, "ingress_priority")

    @property
    @pulumi.getter
    def invalid(self) -> bool:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter(name="ipsecPolicy")
    def ipsec_policy(self) -> str:
        return pulumi.get(self, "ipsec_policy")

    @property
    @pulumi.getter(name="ipv4Options")
    def ipv4_options(self) -> str:
        return pulumi.get(self, "ipv4_options")

    @property
    @pulumi.getter(name="jumpTarget")
    def jump_target(self) -> str:
        return pulumi.get(self, "jump_target")

    @property
    @pulumi.getter(name="layer7Protocol")
    def layer7_protocol(self) -> str:
        return pulumi.get(self, "layer7_protocol")

    @property
    @pulumi.getter
    def limit(self) -> str:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def log(self) -> bool:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logPrefix")
    def log_prefix(self) -> str:
        return pulumi.get(self, "log_prefix")

    @property
    @pulumi.getter
    def nth(self) -> str:
        return pulumi.get(self, "nth")

    @property
    @pulumi.getter(name="outBridgePort")
    def out_bridge_port(self) -> str:
        return pulumi.get(self, "out_bridge_port")

    @property
    @pulumi.getter(name="outBridgePortList")
    def out_bridge_port_list(self) -> str:
        return pulumi.get(self, "out_bridge_port_list")

    @property
    @pulumi.getter(name="outInterface")
    def out_interface(self) -> str:
        return pulumi.get(self, "out_interface")

    @property
    @pulumi.getter(name="outInterfaceList")
    def out_interface_list(self) -> str:
        return pulumi.get(self, "out_interface_list")

    @property
    @pulumi.getter(name="packetMark")
    def packet_mark(self) -> str:
        return pulumi.get(self, "packet_mark")

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> str:
        return pulumi.get(self, "packet_size")

    @property
    @pulumi.getter
    def packets(self) -> int:
        return pulumi.get(self, "packets")

    @property
    @pulumi.getter(name="perConnectionClassifier")
    def per_connection_classifier(self) -> str:
        return pulumi.get(self, "per_connection_classifier")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def psd(self) -> str:
        return pulumi.get(self, "psd")

    @property
    @pulumi.getter
    def random(self) -> int:
        return pulumi.get(self, "random")

    @property
    @pulumi.getter(name="rejectWith")
    def reject_with(self) -> str:
        return pulumi.get(self, "reject_with")

    @property
    @pulumi.getter(name="routingMark")
    def routing_mark(self) -> str:
        return pulumi.get(self, "routing_mark")

    @property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> str:
        return pulumi.get(self, "routing_table")

    @property
    @pulumi.getter(name="srcAddress")
    def src_address(self) -> str:
        return pulumi.get(self, "src_address")

    @property
    @pulumi.getter(name="srcAddressList")
    def src_address_list(self) -> str:
        return pulumi.get(self, "src_address_list")

    @property
    @pulumi.getter(name="srcAddressType")
    def src_address_type(self) -> str:
        return pulumi.get(self, "src_address_type")

    @property
    @pulumi.getter(name="srcMacAddress")
    def src_mac_address(self) -> str:
        return pulumi.get(self, "src_mac_address")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> str:
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter(name="tcpFlags")
    def tcp_flags(self) -> str:
        return pulumi.get(self, "tcp_flags")

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> str:
        return pulumi.get(self, "tcp_mss")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="tlsHost")
    def tls_host(self) -> str:
        return pulumi.get(self, "tls_host")

    @property
    @pulumi.getter
    def ttl(self) -> str:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def filter(self) -> Optional[Mapping[str, Any]]:
        """
        Additional request filtering options.
        """
        return pulumi.get(self, "filter")


@pulumi.output_type
class DatasourceIPAddressesAddressResult(dict):
    def __init__(__self__, *,
                 actual_interface: str,
                 address: str,
                 disabled: bool,
                 dynamic: bool,
                 id: str,
                 interface: str,
                 invalid: bool,
                 network: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "actual_interface", actual_interface)
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "invalid", invalid)
        pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="actualInterface")
    def actual_interface(self) -> str:
        return pulumi.get(self, "actual_interface")

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def invalid(self) -> bool:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")


@pulumi.output_type
class DatasourceIPRoutesRouteResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 blackhole: bool,
                 connect: bool,
                 dhcp: bool,
                 disabled: bool,
                 distance: int,
                 dst_address: str,
                 dynamic: bool,
                 ecmp: bool,
                 gateway: str,
                 hw_offloaded: bool,
                 id: str,
                 immediate_gw: str,
                 inactive: bool,
                 local_address: str,
                 pref_src: str,
                 routing_table: str,
                 scope: int,
                 static: bool,
                 suppress_hw_offload: bool,
                 target_scope: int,
                 vrf_interface: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "blackhole", blackhole)
        pulumi.set(__self__, "connect", connect)
        pulumi.set(__self__, "dhcp", dhcp)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "dst_address", dst_address)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "ecmp", ecmp)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "hw_offloaded", hw_offloaded)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "immediate_gw", immediate_gw)
        pulumi.set(__self__, "inactive", inactive)
        pulumi.set(__self__, "local_address", local_address)
        pulumi.set(__self__, "pref_src", pref_src)
        pulumi.set(__self__, "routing_table", routing_table)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "static", static)
        pulumi.set(__self__, "suppress_hw_offload", suppress_hw_offload)
        pulumi.set(__self__, "target_scope", target_scope)
        pulumi.set(__self__, "vrf_interface", vrf_interface)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def blackhole(self) -> bool:
        return pulumi.get(self, "blackhole")

    @property
    @pulumi.getter
    def connect(self) -> bool:
        return pulumi.get(self, "connect")

    @property
    @pulumi.getter
    def dhcp(self) -> bool:
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def distance(self) -> int:
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="dstAddress")
    def dst_address(self) -> str:
        return pulumi.get(self, "dst_address")

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def ecmp(self) -> bool:
        return pulumi.get(self, "ecmp")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="hwOffloaded")
    def hw_offloaded(self) -> bool:
        return pulumi.get(self, "hw_offloaded")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="immediateGw")
    def immediate_gw(self) -> str:
        return pulumi.get(self, "immediate_gw")

    @property
    @pulumi.getter
    def inactive(self) -> bool:
        return pulumi.get(self, "inactive")

    @property
    @pulumi.getter(name="localAddress")
    def local_address(self) -> str:
        return pulumi.get(self, "local_address")

    @property
    @pulumi.getter(name="prefSrc")
    def pref_src(self) -> str:
        return pulumi.get(self, "pref_src")

    @property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> str:
        return pulumi.get(self, "routing_table")

    @property
    @pulumi.getter
    def scope(self) -> int:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def static(self) -> bool:
        return pulumi.get(self, "static")

    @property
    @pulumi.getter(name="suppressHwOffload")
    def suppress_hw_offload(self) -> bool:
        return pulumi.get(self, "suppress_hw_offload")

    @property
    @pulumi.getter(name="targetScope")
    def target_scope(self) -> int:
        return pulumi.get(self, "target_scope")

    @property
    @pulumi.getter(name="vrfInterface")
    def vrf_interface(self) -> str:
        return pulumi.get(self, "vrf_interface")


@pulumi.output_type
class DatasourceIPv6AddressesAddressResult(dict):
    def __init__(__self__, *,
                 actual_interface: str,
                 address: str,
                 advertise: bool,
                 comment: str,
                 disabled: bool,
                 dynamic: bool,
                 eui64: bool,
                 from_pool: str,
                 id: str,
                 interface: str,
                 invalid: bool,
                 link_local: bool,
                 no_dad: bool):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "actual_interface", actual_interface)
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "advertise", advertise)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "dynamic", dynamic)
        pulumi.set(__self__, "eui64", eui64)
        pulumi.set(__self__, "from_pool", from_pool)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "invalid", invalid)
        pulumi.set(__self__, "link_local", link_local)
        pulumi.set(__self__, "no_dad", no_dad)

    @property
    @pulumi.getter(name="actualInterface")
    def actual_interface(self) -> str:
        return pulumi.get(self, "actual_interface")

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def advertise(self) -> bool:
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def dynamic(self) -> bool:
        return pulumi.get(self, "dynamic")

    @property
    @pulumi.getter
    def eui64(self) -> bool:
        return pulumi.get(self, "eui64")

    @property
    @pulumi.getter(name="fromPool")
    def from_pool(self) -> str:
        return pulumi.get(self, "from_pool")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def invalid(self) -> bool:
        return pulumi.get(self, "invalid")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> bool:
        return pulumi.get(self, "link_local")

    @property
    @pulumi.getter(name="noDad")
    def no_dad(self) -> bool:
        return pulumi.get(self, "no_dad")


@pulumi.output_type
class DatasourceInterfacesInterfaceResult(dict):
    def __init__(__self__, *,
                 actual_mtu: int,
                 comment: str,
                 default_name: str,
                 disabled: bool,
                 fp_rx_byte: int,
                 fp_rx_packet: int,
                 fp_tx_byte: int,
                 fp_tx_packet: int,
                 id: str,
                 l2mtu: int,
                 last_link_down_time: str,
                 last_link_up_time: str,
                 link_downs: int,
                 mac_address: str,
                 max_l2mtu: int,
                 mtu: str,
                 name: str,
                 running: bool,
                 rx_byte: int,
                 rx_drop: int,
                 rx_error: int,
                 rx_packet: int,
                 slave: bool,
                 tx_byte: int,
                 tx_drop: int,
                 tx_error: int,
                 tx_packet: int,
                 tx_queue_drop: int,
                 type: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "actual_mtu", actual_mtu)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "default_name", default_name)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "fp_rx_byte", fp_rx_byte)
        pulumi.set(__self__, "fp_rx_packet", fp_rx_packet)
        pulumi.set(__self__, "fp_tx_byte", fp_tx_byte)
        pulumi.set(__self__, "fp_tx_packet", fp_tx_packet)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "l2mtu", l2mtu)
        pulumi.set(__self__, "last_link_down_time", last_link_down_time)
        pulumi.set(__self__, "last_link_up_time", last_link_up_time)
        pulumi.set(__self__, "link_downs", link_downs)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "max_l2mtu", max_l2mtu)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "running", running)
        pulumi.set(__self__, "rx_byte", rx_byte)
        pulumi.set(__self__, "rx_drop", rx_drop)
        pulumi.set(__self__, "rx_error", rx_error)
        pulumi.set(__self__, "rx_packet", rx_packet)
        pulumi.set(__self__, "slave", slave)
        pulumi.set(__self__, "tx_byte", tx_byte)
        pulumi.set(__self__, "tx_drop", tx_drop)
        pulumi.set(__self__, "tx_error", tx_error)
        pulumi.set(__self__, "tx_packet", tx_packet)
        pulumi.set(__self__, "tx_queue_drop", tx_queue_drop)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actualMtu")
    def actual_mtu(self) -> int:
        return pulumi.get(self, "actual_mtu")

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="defaultName")
    def default_name(self) -> str:
        return pulumi.get(self, "default_name")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="fpRxByte")
    def fp_rx_byte(self) -> int:
        return pulumi.get(self, "fp_rx_byte")

    @property
    @pulumi.getter(name="fpRxPacket")
    def fp_rx_packet(self) -> int:
        return pulumi.get(self, "fp_rx_packet")

    @property
    @pulumi.getter(name="fpTxByte")
    def fp_tx_byte(self) -> int:
        return pulumi.get(self, "fp_tx_byte")

    @property
    @pulumi.getter(name="fpTxPacket")
    def fp_tx_packet(self) -> int:
        return pulumi.get(self, "fp_tx_packet")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def l2mtu(self) -> int:
        return pulumi.get(self, "l2mtu")

    @property
    @pulumi.getter(name="lastLinkDownTime")
    def last_link_down_time(self) -> str:
        return pulumi.get(self, "last_link_down_time")

    @property
    @pulumi.getter(name="lastLinkUpTime")
    def last_link_up_time(self) -> str:
        return pulumi.get(self, "last_link_up_time")

    @property
    @pulumi.getter(name="linkDowns")
    def link_downs(self) -> int:
        return pulumi.get(self, "link_downs")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="maxL2mtu")
    def max_l2mtu(self) -> int:
        return pulumi.get(self, "max_l2mtu")

    @property
    @pulumi.getter
    def mtu(self) -> str:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def running(self) -> bool:
        return pulumi.get(self, "running")

    @property
    @pulumi.getter(name="rxByte")
    def rx_byte(self) -> int:
        return pulumi.get(self, "rx_byte")

    @property
    @pulumi.getter(name="rxDrop")
    def rx_drop(self) -> int:
        return pulumi.get(self, "rx_drop")

    @property
    @pulumi.getter(name="rxError")
    def rx_error(self) -> int:
        return pulumi.get(self, "rx_error")

    @property
    @pulumi.getter(name="rxPacket")
    def rx_packet(self) -> int:
        return pulumi.get(self, "rx_packet")

    @property
    @pulumi.getter
    def slave(self) -> bool:
        return pulumi.get(self, "slave")

    @property
    @pulumi.getter(name="txByte")
    def tx_byte(self) -> int:
        return pulumi.get(self, "tx_byte")

    @property
    @pulumi.getter(name="txDrop")
    def tx_drop(self) -> int:
        return pulumi.get(self, "tx_drop")

    @property
    @pulumi.getter(name="txError")
    def tx_error(self) -> int:
        return pulumi.get(self, "tx_error")

    @property
    @pulumi.getter(name="txPacket")
    def tx_packet(self) -> int:
        return pulumi.get(self, "tx_packet")

    @property
    @pulumi.getter(name="txQueueDrop")
    def tx_queue_drop(self) -> int:
        return pulumi.get(self, "tx_queue_drop")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class ResourceSystemCertificateSign(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCrlHost":
            suggest = "ca_crl_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResourceSystemCertificateSign. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResourceSystemCertificateSign.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResourceSystemCertificateSign.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca: Optional[str] = None,
                 ca_crl_host: Optional[str] = None):
        """
        :param str ca: Which CA to use if signing issued certificates.
        :param str ca_crl_host: CRL host if issuing CA certificate.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if ca_crl_host is not None:
            pulumi.set(__self__, "ca_crl_host", ca_crl_host)

    @property
    @pulumi.getter
    def ca(self) -> Optional[str]:
        """
        Which CA to use if signing issued certificates.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="caCrlHost")
    def ca_crl_host(self) -> Optional[str]:
        """
        CRL host if issuing CA certificate.
        """
        return pulumi.get(self, "ca_crl_host")


