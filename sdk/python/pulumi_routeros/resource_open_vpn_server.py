# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ResourceOpenVPNServerArgs', 'ResourceOpenVPNServer']

@pulumi.input_type
class ResourceOpenVPNServerArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[str],
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 cipher: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 enable_tun_ipv6: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_prefix_len: Optional[pulumi.Input[int]] = None,
                 keepalive_timeout: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 max_mtu: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 redirect_gateway: Optional[pulumi.Input[str]] = None,
                 reneg_sec: Optional[pulumi.Input[int]] = None,
                 require_client_certificate: Optional[pulumi.Input[bool]] = None,
                 tls_version: Optional[pulumi.Input[str]] = None,
                 tun_server_ipv6: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ResourceOpenVPNServer resource.
        :param pulumi.Input[str] certificate: Name of the certificate that the OVPN server will use.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] auth: Authentication methods that the server will accept.
        :param pulumi.Input[str] cipher: Allowed ciphers.
        :param pulumi.Input[str] default_profile: Default profile to use.
        :param pulumi.Input[bool] enable_tun_ipv6: Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
        :param pulumi.Input[bool] enabled: Defines whether the OVPN server is enabled or not.
        :param pulumi.Input[int] ipv6_prefix_len: Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
        :param pulumi.Input[str] keepalive_timeout: Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
        :param pulumi.Input[str] mac_address: Automatically generated MAC address of the server.
        :param pulumi.Input[int] max_mtu: Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
        :param pulumi.Input[str] mode: Layer3 or layer2 tunnel mode (alternatively tun, tap)
        :param pulumi.Input[int] netmask: Subnet mask to be applied to the client.
        :param pulumi.Input[int] port: Port to run the server on.
        :param pulumi.Input[str] protocol: indicates the protocol to use when connecting with the remote endpoint.
        :param pulumi.Input[str] redirect_gateway: Specifies what kind of routes the OVPN client must add to the routing table. def1 â€“ Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
        :param pulumi.Input[int] reneg_sec: Renegotiate data channel key after n seconds (default=3600).
        :param pulumi.Input[bool] require_client_certificate: If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
        :param pulumi.Input[str] tls_version: Specifies which TLS versions to allow.
        :param pulumi.Input[str] tun_server_ipv6: IPv6 prefix address which will be used when generating the OVPN interface on the server side.
        """
        pulumi.set(__self__, "certificate", certificate)
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if default_profile is not None:
            pulumi.set(__self__, "default_profile", default_profile)
        if enable_tun_ipv6 is not None:
            pulumi.set(__self__, "enable_tun_ipv6", enable_tun_ipv6)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipv6_prefix_len is not None:
            pulumi.set(__self__, "ipv6_prefix_len", ipv6_prefix_len)
        if keepalive_timeout is not None:
            pulumi.set(__self__, "keepalive_timeout", keepalive_timeout)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if max_mtu is not None:
            pulumi.set(__self__, "max_mtu", max_mtu)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if redirect_gateway is not None:
            pulumi.set(__self__, "redirect_gateway", redirect_gateway)
        if reneg_sec is not None:
            pulumi.set(__self__, "reneg_sec", reneg_sec)
        if require_client_certificate is not None:
            pulumi.set(__self__, "require_client_certificate", require_client_certificate)
        if tls_version is not None:
            pulumi.set(__self__, "tls_version", tls_version)
        if tun_server_ipv6 is not None:
            pulumi.set(__self__, "tun_server_ipv6", tun_server_ipv6)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[str]:
        """
        Name of the certificate that the OVPN server will use.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication methods that the server will accept.
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed ciphers.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Default profile to use.
        """
        return pulumi.get(self, "default_profile")

    @default_profile.setter
    def default_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_profile", value)

    @property
    @pulumi.getter(name="enableTunIpv6")
    def enable_tun_ipv6(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
        """
        return pulumi.get(self, "enable_tun_ipv6")

    @enable_tun_ipv6.setter
    def enable_tun_ipv6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_tun_ipv6", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether the OVPN server is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipv6PrefixLen")
    def ipv6_prefix_len(self) -> Optional[pulumi.Input[int]]:
        """
        Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
        """
        return pulumi.get(self, "ipv6_prefix_len")

    @ipv6_prefix_len.setter
    def ipv6_prefix_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_prefix_len", value)

    @property
    @pulumi.getter(name="keepaliveTimeout")
    def keepalive_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
        """
        return pulumi.get(self, "keepalive_timeout")

    @keepalive_timeout.setter
    def keepalive_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keepalive_timeout", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically generated MAC address of the server.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter(name="maxMtu")
    def max_mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
        """
        return pulumi.get(self, "max_mtu")

    @max_mtu.setter
    def max_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_mtu", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Layer3 or layer2 tunnel mode (alternatively tun, tap)
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[int]]:
        """
        Subnet mask to be applied to the client.
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to run the server on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        indicates the protocol to use when connecting with the remote endpoint.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="redirectGateway")
    def redirect_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies what kind of routes the OVPN client must add to the routing table. def1 â€“ Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
        """
        return pulumi.get(self, "redirect_gateway")

    @redirect_gateway.setter
    def redirect_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_gateway", value)

    @property
    @pulumi.getter(name="renegSec")
    def reneg_sec(self) -> Optional[pulumi.Input[int]]:
        """
        Renegotiate data channel key after n seconds (default=3600).
        """
        return pulumi.get(self, "reneg_sec")

    @reneg_sec.setter
    def reneg_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reneg_sec", value)

    @property
    @pulumi.getter(name="requireClientCertificate")
    def require_client_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
        """
        return pulumi.get(self, "require_client_certificate")

    @require_client_certificate.setter
    def require_client_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_client_certificate", value)

    @property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies which TLS versions to allow.
        """
        return pulumi.get(self, "tls_version")

    @tls_version.setter
    def tls_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_version", value)

    @property
    @pulumi.getter(name="tunServerIpv6")
    def tun_server_ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix address which will be used when generating the OVPN interface on the server side.
        """
        return pulumi.get(self, "tun_server_ipv6")

    @tun_server_ipv6.setter
    def tun_server_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tun_server_ipv6", value)


@pulumi.input_type
class _ResourceOpenVPNServerState:
    def __init__(__self__, *,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 cipher: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 enable_tun_ipv6: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_prefix_len: Optional[pulumi.Input[int]] = None,
                 keepalive_timeout: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 max_mtu: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 redirect_gateway: Optional[pulumi.Input[str]] = None,
                 reneg_sec: Optional[pulumi.Input[int]] = None,
                 require_client_certificate: Optional[pulumi.Input[bool]] = None,
                 tls_version: Optional[pulumi.Input[str]] = None,
                 tun_server_ipv6: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ResourceOpenVPNServer resources.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] auth: Authentication methods that the server will accept.
        :param pulumi.Input[str] certificate: Name of the certificate that the OVPN server will use.
        :param pulumi.Input[str] cipher: Allowed ciphers.
        :param pulumi.Input[str] default_profile: Default profile to use.
        :param pulumi.Input[bool] enable_tun_ipv6: Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
        :param pulumi.Input[bool] enabled: Defines whether the OVPN server is enabled or not.
        :param pulumi.Input[int] ipv6_prefix_len: Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
        :param pulumi.Input[str] keepalive_timeout: Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
        :param pulumi.Input[str] mac_address: Automatically generated MAC address of the server.
        :param pulumi.Input[int] max_mtu: Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
        :param pulumi.Input[str] mode: Layer3 or layer2 tunnel mode (alternatively tun, tap)
        :param pulumi.Input[int] netmask: Subnet mask to be applied to the client.
        :param pulumi.Input[int] port: Port to run the server on.
        :param pulumi.Input[str] protocol: indicates the protocol to use when connecting with the remote endpoint.
        :param pulumi.Input[str] redirect_gateway: Specifies what kind of routes the OVPN client must add to the routing table. def1 â€“ Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
        :param pulumi.Input[int] reneg_sec: Renegotiate data channel key after n seconds (default=3600).
        :param pulumi.Input[bool] require_client_certificate: If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
        :param pulumi.Input[str] tls_version: Specifies which TLS versions to allow.
        :param pulumi.Input[str] tun_server_ipv6: IPv6 prefix address which will be used when generating the OVPN interface on the server side.
        """
        if ___id_ is not None:
            pulumi.set(__self__, "___id_", ___id_)
        if ___path_ is not None:
            pulumi.set(__self__, "___path_", ___path_)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if default_profile is not None:
            pulumi.set(__self__, "default_profile", default_profile)
        if enable_tun_ipv6 is not None:
            pulumi.set(__self__, "enable_tun_ipv6", enable_tun_ipv6)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ipv6_prefix_len is not None:
            pulumi.set(__self__, "ipv6_prefix_len", ipv6_prefix_len)
        if keepalive_timeout is not None:
            pulumi.set(__self__, "keepalive_timeout", keepalive_timeout)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if max_mtu is not None:
            pulumi.set(__self__, "max_mtu", max_mtu)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if redirect_gateway is not None:
            pulumi.set(__self__, "redirect_gateway", redirect_gateway)
        if reneg_sec is not None:
            pulumi.set(__self__, "reneg_sec", reneg_sec)
        if require_client_certificate is not None:
            pulumi.set(__self__, "require_client_certificate", require_client_certificate)
        if tls_version is not None:
            pulumi.set(__self__, "tls_version", tls_version)
        if tun_server_ipv6 is not None:
            pulumi.set(__self__, "tun_server_ipv6", tun_server_ipv6)

    @property
    @pulumi.getter
    def ___id_(self) -> Optional[pulumi.Input[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @___id_.setter
    def ___id_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "___id_", value)

    @property
    @pulumi.getter
    def ___path_(self) -> Optional[pulumi.Input[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @___path_.setter
    def ___path_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "___path_", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication methods that the server will accept.
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the certificate that the OVPN server will use.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed ciphers.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Default profile to use.
        """
        return pulumi.get(self, "default_profile")

    @default_profile.setter
    def default_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_profile", value)

    @property
    @pulumi.getter(name="enableTunIpv6")
    def enable_tun_ipv6(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
        """
        return pulumi.get(self, "enable_tun_ipv6")

    @enable_tun_ipv6.setter
    def enable_tun_ipv6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_tun_ipv6", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether the OVPN server is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="ipv6PrefixLen")
    def ipv6_prefix_len(self) -> Optional[pulumi.Input[int]]:
        """
        Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
        """
        return pulumi.get(self, "ipv6_prefix_len")

    @ipv6_prefix_len.setter
    def ipv6_prefix_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_prefix_len", value)

    @property
    @pulumi.getter(name="keepaliveTimeout")
    def keepalive_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
        """
        return pulumi.get(self, "keepalive_timeout")

    @keepalive_timeout.setter
    def keepalive_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keepalive_timeout", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically generated MAC address of the server.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter(name="maxMtu")
    def max_mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
        """
        return pulumi.get(self, "max_mtu")

    @max_mtu.setter
    def max_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_mtu", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Layer3 or layer2 tunnel mode (alternatively tun, tap)
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[int]]:
        """
        Subnet mask to be applied to the client.
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to run the server on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        indicates the protocol to use when connecting with the remote endpoint.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="redirectGateway")
    def redirect_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies what kind of routes the OVPN client must add to the routing table. def1 â€“ Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
        """
        return pulumi.get(self, "redirect_gateway")

    @redirect_gateway.setter
    def redirect_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_gateway", value)

    @property
    @pulumi.getter(name="renegSec")
    def reneg_sec(self) -> Optional[pulumi.Input[int]]:
        """
        Renegotiate data channel key after n seconds (default=3600).
        """
        return pulumi.get(self, "reneg_sec")

    @reneg_sec.setter
    def reneg_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reneg_sec", value)

    @property
    @pulumi.getter(name="requireClientCertificate")
    def require_client_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
        """
        return pulumi.get(self, "require_client_certificate")

    @require_client_certificate.setter
    def require_client_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_client_certificate", value)

    @property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies which TLS versions to allow.
        """
        return pulumi.get(self, "tls_version")

    @tls_version.setter
    def tls_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_version", value)

    @property
    @pulumi.getter(name="tunServerIpv6")
    def tun_server_ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix address which will be used when generating the OVPN interface on the server side.
        """
        return pulumi.get(self, "tun_server_ipv6")

    @tun_server_ipv6.setter
    def tun_server_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tun_server_ipv6", value)


class ResourceOpenVPNServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 cipher: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 enable_tun_ipv6: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_prefix_len: Optional[pulumi.Input[int]] = None,
                 keepalive_timeout: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 max_mtu: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 redirect_gateway: Optional[pulumi.Input[str]] = None,
                 reneg_sec: Optional[pulumi.Input[int]] = None,
                 require_client_certificate: Optional[pulumi.Input[bool]] = None,
                 tls_version: Optional[pulumi.Input[str]] = None,
                 tun_server_ipv6: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # ResourceOpenVPNServer (Resource)

        ##### *<span style="color:red">This resource requires a minimum version of RouterOS 7.8!</span>*

        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        ovpn_pool = routeros.ResourceIPPool("ovpn-pool", ranges=["192.168.77.2-192.168.77.254"])
        ovpn_ca = routeros.ResourceSystemCertificate("ovpnCa",
            common_name="OpenVPN Root CA",
            key_size="prime256v1",
            key_usages=[
                "key-cert-sign",
                "crl-sign",
            ],
            trusted=True,
            signs=[routeros.ResourceSystemCertificateSignArgs()])
        ovpn_server_crt = routeros.ResourceSystemCertificate("ovpnServerCrt",
            common_name="Mikrotik OpenVPN",
            key_size="prime256v1",
            key_usages=[
                "digital-signature",
                "key-encipherment",
                "tls-server",
            ],
            signs=[routeros.ResourceSystemCertificateSignArgs(
                ca=ovpn_ca.name,
            )])
        test_resource_ppp_profile = routeros.ResourcePPPProfile("testResourcePPPProfile",
            local_address="192.168.77.1",
            remote_address="ovpn-pool",
            use_upnp="no")
        test_resource_ppp_secret = routeros.ResourcePPPSecret("testResourcePPPSecret",
            password="123",
            profile=test_resource_ppp_profile.name)
        server = routeros.ResourceOpenVPNServer("server",
            enabled=True,
            certificate=ovpn_server_crt.name,
            auth="sha256,sha512",
            tls_version="only-1.2",
            default_profile=test_resource_ppp_profile.name)
        # The resource should be created only after the OpenVPN server is enabled!
        user1 = routeros.ResourceInterfaceOpenVPNServer("user1", user="user1",
        opts=pulumi.ResourceOptions(depends_on=[server]))
        ```

        ## Import

        ```sh
         $ pulumi import routeros:index/resourceOpenVPNServer:ResourceOpenVPNServer server .
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] auth: Authentication methods that the server will accept.
        :param pulumi.Input[str] certificate: Name of the certificate that the OVPN server will use.
        :param pulumi.Input[str] cipher: Allowed ciphers.
        :param pulumi.Input[str] default_profile: Default profile to use.
        :param pulumi.Input[bool] enable_tun_ipv6: Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
        :param pulumi.Input[bool] enabled: Defines whether the OVPN server is enabled or not.
        :param pulumi.Input[int] ipv6_prefix_len: Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
        :param pulumi.Input[str] keepalive_timeout: Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
        :param pulumi.Input[str] mac_address: Automatically generated MAC address of the server.
        :param pulumi.Input[int] max_mtu: Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
        :param pulumi.Input[str] mode: Layer3 or layer2 tunnel mode (alternatively tun, tap)
        :param pulumi.Input[int] netmask: Subnet mask to be applied to the client.
        :param pulumi.Input[int] port: Port to run the server on.
        :param pulumi.Input[str] protocol: indicates the protocol to use when connecting with the remote endpoint.
        :param pulumi.Input[str] redirect_gateway: Specifies what kind of routes the OVPN client must add to the routing table. def1 â€“ Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
        :param pulumi.Input[int] reneg_sec: Renegotiate data channel key after n seconds (default=3600).
        :param pulumi.Input[bool] require_client_certificate: If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
        :param pulumi.Input[str] tls_version: Specifies which TLS versions to allow.
        :param pulumi.Input[str] tun_server_ipv6: IPv6 prefix address which will be used when generating the OVPN interface on the server side.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceOpenVPNServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # ResourceOpenVPNServer (Resource)

        ##### *<span style="color:red">This resource requires a minimum version of RouterOS 7.8!</span>*

        ## Example Usage

        ```python
        import pulumi
        import pulumi_routeros as routeros

        ovpn_pool = routeros.ResourceIPPool("ovpn-pool", ranges=["192.168.77.2-192.168.77.254"])
        ovpn_ca = routeros.ResourceSystemCertificate("ovpnCa",
            common_name="OpenVPN Root CA",
            key_size="prime256v1",
            key_usages=[
                "key-cert-sign",
                "crl-sign",
            ],
            trusted=True,
            signs=[routeros.ResourceSystemCertificateSignArgs()])
        ovpn_server_crt = routeros.ResourceSystemCertificate("ovpnServerCrt",
            common_name="Mikrotik OpenVPN",
            key_size="prime256v1",
            key_usages=[
                "digital-signature",
                "key-encipherment",
                "tls-server",
            ],
            signs=[routeros.ResourceSystemCertificateSignArgs(
                ca=ovpn_ca.name,
            )])
        test_resource_ppp_profile = routeros.ResourcePPPProfile("testResourcePPPProfile",
            local_address="192.168.77.1",
            remote_address="ovpn-pool",
            use_upnp="no")
        test_resource_ppp_secret = routeros.ResourcePPPSecret("testResourcePPPSecret",
            password="123",
            profile=test_resource_ppp_profile.name)
        server = routeros.ResourceOpenVPNServer("server",
            enabled=True,
            certificate=ovpn_server_crt.name,
            auth="sha256,sha512",
            tls_version="only-1.2",
            default_profile=test_resource_ppp_profile.name)
        # The resource should be created only after the OpenVPN server is enabled!
        user1 = routeros.ResourceInterfaceOpenVPNServer("user1", user="user1",
        opts=pulumi.ResourceOptions(depends_on=[server]))
        ```

        ## Import

        ```sh
         $ pulumi import routeros:index/resourceOpenVPNServer:ResourceOpenVPNServer server .
        ```

        :param str resource_name: The name of the resource.
        :param ResourceOpenVPNServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceOpenVPNServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ___id_: Optional[pulumi.Input[int]] = None,
                 ___path_: Optional[pulumi.Input[str]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 cipher: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 enable_tun_ipv6: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 ipv6_prefix_len: Optional[pulumi.Input[int]] = None,
                 keepalive_timeout: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 max_mtu: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 redirect_gateway: Optional[pulumi.Input[str]] = None,
                 reneg_sec: Optional[pulumi.Input[int]] = None,
                 require_client_certificate: Optional[pulumi.Input[bool]] = None,
                 tls_version: Optional[pulumi.Input[str]] = None,
                 tun_server_ipv6: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceOpenVPNServerArgs.__new__(ResourceOpenVPNServerArgs)

            __props__.__dict__["___id_"] = ___id_
            __props__.__dict__["___path_"] = ___path_
            __props__.__dict__["auth"] = auth
            if certificate is None and not opts.urn:
                raise TypeError("Missing required property 'certificate'")
            __props__.__dict__["certificate"] = certificate
            __props__.__dict__["cipher"] = cipher
            __props__.__dict__["default_profile"] = default_profile
            __props__.__dict__["enable_tun_ipv6"] = enable_tun_ipv6
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["ipv6_prefix_len"] = ipv6_prefix_len
            __props__.__dict__["keepalive_timeout"] = keepalive_timeout
            __props__.__dict__["mac_address"] = mac_address
            __props__.__dict__["max_mtu"] = max_mtu
            __props__.__dict__["mode"] = mode
            __props__.__dict__["netmask"] = netmask
            __props__.__dict__["port"] = port
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["redirect_gateway"] = redirect_gateway
            __props__.__dict__["reneg_sec"] = reneg_sec
            __props__.__dict__["require_client_certificate"] = require_client_certificate
            __props__.__dict__["tls_version"] = tls_version
            __props__.__dict__["tun_server_ipv6"] = tun_server_ipv6
        super(ResourceOpenVPNServer, __self__).__init__(
            'routeros:index/resourceOpenVPNServer:ResourceOpenVPNServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ___id_: Optional[pulumi.Input[int]] = None,
            ___path_: Optional[pulumi.Input[str]] = None,
            auth: Optional[pulumi.Input[str]] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            cipher: Optional[pulumi.Input[str]] = None,
            default_profile: Optional[pulumi.Input[str]] = None,
            enable_tun_ipv6: Optional[pulumi.Input[bool]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            ipv6_prefix_len: Optional[pulumi.Input[int]] = None,
            keepalive_timeout: Optional[pulumi.Input[str]] = None,
            mac_address: Optional[pulumi.Input[str]] = None,
            max_mtu: Optional[pulumi.Input[int]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            netmask: Optional[pulumi.Input[int]] = None,
            port: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            redirect_gateway: Optional[pulumi.Input[str]] = None,
            reneg_sec: Optional[pulumi.Input[int]] = None,
            require_client_certificate: Optional[pulumi.Input[bool]] = None,
            tls_version: Optional[pulumi.Input[str]] = None,
            tun_server_ipv6: Optional[pulumi.Input[str]] = None) -> 'ResourceOpenVPNServer':
        """
        Get an existing ResourceOpenVPNServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ___id_: <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] ___path_: <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        :param pulumi.Input[str] auth: Authentication methods that the server will accept.
        :param pulumi.Input[str] certificate: Name of the certificate that the OVPN server will use.
        :param pulumi.Input[str] cipher: Allowed ciphers.
        :param pulumi.Input[str] default_profile: Default profile to use.
        :param pulumi.Input[bool] enable_tun_ipv6: Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
        :param pulumi.Input[bool] enabled: Defines whether the OVPN server is enabled or not.
        :param pulumi.Input[int] ipv6_prefix_len: Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
        :param pulumi.Input[str] keepalive_timeout: Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
        :param pulumi.Input[str] mac_address: Automatically generated MAC address of the server.
        :param pulumi.Input[int] max_mtu: Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
        :param pulumi.Input[str] mode: Layer3 or layer2 tunnel mode (alternatively tun, tap)
        :param pulumi.Input[int] netmask: Subnet mask to be applied to the client.
        :param pulumi.Input[int] port: Port to run the server on.
        :param pulumi.Input[str] protocol: indicates the protocol to use when connecting with the remote endpoint.
        :param pulumi.Input[str] redirect_gateway: Specifies what kind of routes the OVPN client must add to the routing table. def1 â€“ Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
        :param pulumi.Input[int] reneg_sec: Renegotiate data channel key after n seconds (default=3600).
        :param pulumi.Input[bool] require_client_certificate: If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
        :param pulumi.Input[str] tls_version: Specifies which TLS versions to allow.
        :param pulumi.Input[str] tun_server_ipv6: IPv6 prefix address which will be used when generating the OVPN interface on the server side.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceOpenVPNServerState.__new__(_ResourceOpenVPNServerState)

        __props__.__dict__["___id_"] = ___id_
        __props__.__dict__["___path_"] = ___path_
        __props__.__dict__["auth"] = auth
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["cipher"] = cipher
        __props__.__dict__["default_profile"] = default_profile
        __props__.__dict__["enable_tun_ipv6"] = enable_tun_ipv6
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["ipv6_prefix_len"] = ipv6_prefix_len
        __props__.__dict__["keepalive_timeout"] = keepalive_timeout
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["max_mtu"] = max_mtu
        __props__.__dict__["mode"] = mode
        __props__.__dict__["netmask"] = netmask
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["redirect_gateway"] = redirect_gateway
        __props__.__dict__["reneg_sec"] = reneg_sec
        __props__.__dict__["require_client_certificate"] = require_client_certificate
        __props__.__dict__["tls_version"] = tls_version
        __props__.__dict__["tun_server_ipv6"] = tun_server_ipv6
        return ResourceOpenVPNServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ___id_(self) -> pulumi.Output[Optional[int]]:
        """
        <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___id_")

    @property
    @pulumi.getter
    def ___path_(self) -> pulumi.Output[Optional[str]]:
        """
        <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
        """
        return pulumi.get(self, "___path_")

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication methods that the server will accept.
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        """
        Name of the certificate that the OVPN server will use.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def cipher(self) -> pulumi.Output[Optional[str]]:
        """
        Allowed ciphers.
        """
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Default profile to use.
        """
        return pulumi.get(self, "default_profile")

    @property
    @pulumi.getter(name="enableTunIpv6")
    def enable_tun_ipv6(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies if IPv6 IP tunneling mode should be possible with this OVPN server.
        """
        return pulumi.get(self, "enable_tun_ipv6")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defines whether the OVPN server is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="ipv6PrefixLen")
    def ipv6_prefix_len(self) -> pulumi.Output[Optional[int]]:
        """
        Length of IPv6 prefix for IPv6 address which will be used when generating OVPN interface on the server side.
        """
        return pulumi.get(self, "ipv6_prefix_len")

    @property
    @pulumi.getter(name="keepaliveTimeout")
    def keepalive_timeout(self) -> pulumi.Output[Optional[str]]:
        """
        Defines  the time period (in seconds) after which the router is starting to send  keepalive packets every second. If no traffic and no keepalive  responses have come for that period of time (i.e. 2 *  keepalive-timeout), not responding client is proclaimed disconnected
        """
        return pulumi.get(self, "keepalive_timeout")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[str]:
        """
        Automatically generated MAC address of the server.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="maxMtu")
    def max_mtu(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
        """
        return pulumi.get(self, "max_mtu")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[str]]:
        """
        Layer3 or layer2 tunnel mode (alternatively tun, tap)
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def netmask(self) -> pulumi.Output[Optional[int]]:
        """
        Subnet mask to be applied to the client.
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[int]]:
        """
        Port to run the server on.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[str]]:
        """
        indicates the protocol to use when connecting with the remote endpoint.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="redirectGateway")
    def redirect_gateway(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies what kind of routes the OVPN client must add to the routing table. def1 â€“ Use this flag to override the default gateway by using 0.0.0.0/1 and  128.0.0.0/1 rather than 0.0.0.0/0. This has the benefit of overriding  but not wiping out the original default gateway. disabled - Do not send redirect-gateway flags to the OVPN client. ipv6 - Redirect IPv6 routing into the tunnel on the client side. This works  similarly to the def1 flag, that is, more specific IPv6 routes are added  (2000::/4 and 3000::/4), covering the whole IPv6 unicast space.
        """
        return pulumi.get(self, "redirect_gateway")

    @property
    @pulumi.getter(name="renegSec")
    def reneg_sec(self) -> pulumi.Output[Optional[int]]:
        """
        Renegotiate data channel key after n seconds (default=3600).
        """
        return pulumi.get(self, "reneg_sec")

    @property
    @pulumi.getter(name="requireClientCertificate")
    def require_client_certificate(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to yes, then the server checks whether the client's certificate belongs to the same certificate chain.
        """
        return pulumi.get(self, "require_client_certificate")

    @property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies which TLS versions to allow.
        """
        return pulumi.get(self, "tls_version")

    @property
    @pulumi.getter(name="tunServerIpv6")
    def tun_server_ipv6(self) -> pulumi.Output[Optional[str]]:
        """
        IPv6 prefix address which will be used when generating the OVPN interface on the server side.
        """
        return pulumi.get(self, "tun_server_ipv6")

