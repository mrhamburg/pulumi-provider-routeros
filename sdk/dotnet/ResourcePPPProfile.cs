// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Routeros
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Routeros = Pulumi.Routeros;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Routeros.ResourcePPPProfile("test", new()
    ///     {
    ///         LocalAddress = "192.168.77.1",
    ///         RemoteAddress = "ovpn-pool",
    ///         UseUpnp = "no",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #The ID can be found via API or the terminal #The command for the terminal is -&gt; :put [/ppp/profile get [print show-ids]]
    /// 
    /// ```sh
    ///  $ pulumi import routeros:index/resourcePPPProfile:ResourcePPPProfile test *6
    /// ```
    /// </summary>
    [RouterosResourceType("routeros:index/resourcePPPProfile:ResourcePPPProfile")]
    public partial class ResourcePPPProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// &lt;em&gt;Resource ID type (.id / name). This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Output("___id_")]
        public Output<int?> ___id_ { get; private set; } = null!;

        /// <summary>
        /// &lt;em&gt;Resource path for CRUD operations. This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Output("___path_")]
        public Output<string?> ___path_ { get; private set; } = null!;

        /// <summary>
        /// Address list name to which ppp assigned (on server) or received (on client) address will be added.
        /// </summary>
        [Output("addressList")]
        public Output<string?> AddressList { get; private set; } = null!;

        /// <summary>
        /// Name of the bridge interface to which ppp interface will be added as a slave port. Both  tunnel endpoints (server and client) must be in bridge in order to make  this work, see more details on the BCP bridging manual.
        /// </summary>
        [Output("bridge")]
        public Output<string?> Bridge { get; private set; } = null!;

        /// <summary>
        /// Used  split-horizon value for the dynamically created bridge port. Can be  used to prevent bridging loops and isolate traffic. Set the same value  for a group of ports, to prevent them from sending data to ports with  the same horizon value.
        /// </summary>
        [Output("bridgeHorizon")]
        public Output<int?> BridgeHorizon { get; private set; } = null!;

        /// <summary>
        /// Changes MAC learning behavior on the dynamically created bridge port: yes - enables MAC learning no - disables MAC learning default - derive this value from the interface default profile; same as yes if this is the interface default profile.
        /// </summary>
        [Output("bridgeLearning")]
        public Output<string?> BridgeLearning { get; private set; } = null!;

        /// <summary>
        /// Used  path cost for the dynamically created bridge port, used by STP/RSTP to  determine the best path, used by MSTP to determine the best path between  regions. This property has no effect when a bridge protocol-mode is set to none.
        /// </summary>
        [Output("bridgePathCost")]
        public Output<int?> BridgePathCost { get; private set; } = null!;

        /// <summary>
        /// Used  priority for the dynamically created bridge port, used by STP/RSTP to  determine the root port, used by MSTP to determine root port between  regions. This property has no effect when a bridge protocol-mode is set  to none.
        /// </summary>
        [Output("bridgePortPriority")]
        public Output<int?> BridgePortPriority { get; private set; } = null!;

        /// <summary>
        /// Modifies connection MSS settings (applies only for IPv4): yes - adjust connection MSS value no - do not adjust connection MSS value default - derive this value from the interface default profile; same as no if this is the interface default profile.
        /// </summary>
        [Output("changeTcpMss")]
        public Output<string?> ChangeTcpMss { get; private set; } = null!;

        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Default profile sign.
        /// </summary>
        [Output("default")]
        public Output<string> Default { get; private set; } = null!;

        /// <summary>
        /// Name of the IPv6 pool which will be used by dynamically created DHCPv6-PD server when client connects. [Read more &gt;&gt;](https://wiki.mikrotik.com/wiki/Manual:IPv6_PD_over_PPP)
        /// </summary>
        [Output("dhcpv6PdPool")]
        public Output<string?> Dhcpv6PdPool { get; private set; } = null!;

        /// <summary>
        /// IP address of the DNS server that is supplied to ppp clients.
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// Specifies  the amount of time after which the link will be terminated if there are  no activity present. Timeout is not set by default.
        /// </summary>
        [Output("idleTimeout")]
        public Output<string?> IdleTimeout { get; private set; } = null!;

        /// <summary>
        /// Firewall  chain name for incoming packets. Specified chain gets control for each  packet coming from the client. The ppp chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the examples section.
        /// </summary>
        [Output("incomingFilter")]
        public Output<string?> IncomingFilter { get; private set; } = null!;

        /// <summary>
        /// Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
        /// </summary>
        [Output("insertQueueBefore")]
        public Output<string?> InsertQueueBefore { get; private set; } = null!;

        /// <summary>
        /// Interface list name.
        /// </summary>
        [Output("interfaceList")]
        public Output<string?> InterfaceList { get; private set; } = null!;

        /// <summary>
        /// Tunnel address or name of the pool from which address is assigned to ppp interface locally.
        /// </summary>
        [Output("localAddress")]
        public Output<string?> LocalAddress { get; private set; } = null!;

        /// <summary>
        /// PPP profile name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Execute script on user logging off. See on-up for more details.
        /// </summary>
        [Output("onDown")]
        public Output<string?> OnDown { get; private set; } = null!;

        /// <summary>
        /// Execute script on user login-event. These are available variables that are accessible for the event script: *user *local-address *remote-address *caller-id *called-id *interface.
        /// </summary>
        [Output("onUp")]
        public Output<string?> OnUp { get; private set; } = null!;

        /// <summary>
        /// Defines whether a user is allowed to have more than one ppp session at a time yes - a user is not allowed to have more than one ppp session at a time no - the user is allowed to have more than one ppp session at a time default - derive this value from the interface default profile; same as no if this is the interface default profile.
        /// </summary>
        [Output("onlyOne")]
        public Output<string?> OnlyOne { get; private set; } = null!;

        /// <summary>
        /// Firewall  chain name for outgoing packets. The specified chain gets control for  each packet going to the client. The PPP chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the Examples section.
        /// </summary>
        [Output("outgoingFilter")]
        public Output<string?> OutgoingFilter { get; private set; } = null!;

        /// <summary>
        /// Name of parent simple queue.
        /// </summary>
        [Output("parentQueue")]
        public Output<string?> ParentQueue { get; private set; } = null!;

        /// <summary>
        /// Queue types.
        /// </summary>
        [Output("queueType")]
        public Output<string?> QueueType { get; private set; } = null!;

        /// <summary>
        /// Rate limitation in form of rx-rate[/tx-rate]  [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold]  [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so 'rx' is client upload, and  'tx' is client download). All rates are measured in bits per second,  unless followed by optional 'k' suffix (kilobits per second) or 'M'  suffix (megabits per second). If tx-rate is not specified, rx-rate  serves as tx-rate too. The same applies for tx-burst-rate,  tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and  tx-burst-threshold are not specified (but burst-rate is specified),  rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time  and tx-burst-time are not specified, 1s is used as default. Priority  takes values 1..8, where 1 implies the highest priority, but 8 - the  lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and  tx-rate values are used. The rx-rate-min and tx-rate-min values can not  exceed rx-rate and tx-rate values.
        /// </summary>
        [Output("rateLimit")]
        public Output<string?> RateLimit { get; private set; } = null!;

        /// <summary>
        /// Tunnel address or name of the pool from which address is assigned to remote ppp interface.
        /// </summary>
        [Output("remoteAddress")]
        public Output<string?> RemoteAddress { get; private set; } = null!;

        /// <summary>
        /// Assign prefix from IPv6 pool to the client and install corresponding IPv6 route.
        /// </summary>
        [Output("remoteIpv6PrefixPool")]
        public Output<string?> RemoteIpv6PrefixPool { get; private set; } = null!;

        /// <summary>
        /// Maximum time the connection can stay up. By default no time limit is set.
        /// </summary>
        [Output("sessionTimeout")]
        public Output<string?> SessionTimeout { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to use data compression or not. yes - enable data compression no - disable data compression default - derive this value from the interface default profile; same as no if this is the interface default profile This setting does not affect OVPN tunnels.
        /// </summary>
        [Output("useCompression")]
        public Output<string?> UseCompression { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to use data encryption or not. yes - enable data encryption no - disable data encryption default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires encryption This setting does not work on OVPN and SSTP tunnels.
        /// </summary>
        [Output("useEncryption")]
        public Output<string?> UseEncryption { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to allow IPv6. By default is enabled if IPv6 package is installed. yes - enable IPv6 support no - disable IPv6 support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires IPv6 support.
        /// </summary>
        [Output("useIpv6")]
        public Output<string?> UseIpv6 { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to allow MPLS over PPP. yes - enable MPLS support no - disable MPLS support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires MPLS support
        /// </summary>
        [Output("useMpls")]
        public Output<string?> UseMpls { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to allow UPnP.
        /// </summary>
        [Output("useUpnp")]
        public Output<string?> UseUpnp { get; private set; } = null!;

        /// <summary>
        /// IP address of the WINS server to supply to Windows clients.
        /// </summary>
        [Output("winsServers")]
        public Output<ImmutableArray<string>> WinsServers { get; private set; } = null!;


        /// <summary>
        /// Create a ResourcePPPProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourcePPPProfile(string name, ResourcePPPProfileArgs? args = null, CustomResourceOptions? options = null)
            : base("routeros:index/resourcePPPProfile:ResourcePPPProfile", name, args ?? new ResourcePPPProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourcePPPProfile(string name, Input<string> id, ResourcePPPProfileState? state = null, CustomResourceOptions? options = null)
            : base("routeros:index/resourcePPPProfile:ResourcePPPProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourcePPPProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourcePPPProfile Get(string name, Input<string> id, ResourcePPPProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourcePPPProfile(name, id, state, options);
        }
    }

    public sealed class ResourcePPPProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;em&gt;Resource ID type (.id / name). This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___id_")]
        public Input<int>? ___id_ { get; set; }

        /// <summary>
        /// &lt;em&gt;Resource path for CRUD operations. This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___path_")]
        public Input<string>? ___path_ { get; set; }

        /// <summary>
        /// Address list name to which ppp assigned (on server) or received (on client) address will be added.
        /// </summary>
        [Input("addressList")]
        public Input<string>? AddressList { get; set; }

        /// <summary>
        /// Name of the bridge interface to which ppp interface will be added as a slave port. Both  tunnel endpoints (server and client) must be in bridge in order to make  this work, see more details on the BCP bridging manual.
        /// </summary>
        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        /// <summary>
        /// Used  split-horizon value for the dynamically created bridge port. Can be  used to prevent bridging loops and isolate traffic. Set the same value  for a group of ports, to prevent them from sending data to ports with  the same horizon value.
        /// </summary>
        [Input("bridgeHorizon")]
        public Input<int>? BridgeHorizon { get; set; }

        /// <summary>
        /// Changes MAC learning behavior on the dynamically created bridge port: yes - enables MAC learning no - disables MAC learning default - derive this value from the interface default profile; same as yes if this is the interface default profile.
        /// </summary>
        [Input("bridgeLearning")]
        public Input<string>? BridgeLearning { get; set; }

        /// <summary>
        /// Used  path cost for the dynamically created bridge port, used by STP/RSTP to  determine the best path, used by MSTP to determine the best path between  regions. This property has no effect when a bridge protocol-mode is set to none.
        /// </summary>
        [Input("bridgePathCost")]
        public Input<int>? BridgePathCost { get; set; }

        /// <summary>
        /// Used  priority for the dynamically created bridge port, used by STP/RSTP to  determine the root port, used by MSTP to determine root port between  regions. This property has no effect when a bridge protocol-mode is set  to none.
        /// </summary>
        [Input("bridgePortPriority")]
        public Input<int>? BridgePortPriority { get; set; }

        /// <summary>
        /// Modifies connection MSS settings (applies only for IPv4): yes - adjust connection MSS value no - do not adjust connection MSS value default - derive this value from the interface default profile; same as no if this is the interface default profile.
        /// </summary>
        [Input("changeTcpMss")]
        public Input<string>? ChangeTcpMss { get; set; }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Name of the IPv6 pool which will be used by dynamically created DHCPv6-PD server when client connects. [Read more &gt;&gt;](https://wiki.mikrotik.com/wiki/Manual:IPv6_PD_over_PPP)
        /// </summary>
        [Input("dhcpv6PdPool")]
        public Input<string>? Dhcpv6PdPool { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// IP address of the DNS server that is supplied to ppp clients.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// Specifies  the amount of time after which the link will be terminated if there are  no activity present. Timeout is not set by default.
        /// </summary>
        [Input("idleTimeout")]
        public Input<string>? IdleTimeout { get; set; }

        /// <summary>
        /// Firewall  chain name for incoming packets. Specified chain gets control for each  packet coming from the client. The ppp chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the examples section.
        /// </summary>
        [Input("incomingFilter")]
        public Input<string>? IncomingFilter { get; set; }

        /// <summary>
        /// Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
        /// </summary>
        [Input("insertQueueBefore")]
        public Input<string>? InsertQueueBefore { get; set; }

        /// <summary>
        /// Interface list name.
        /// </summary>
        [Input("interfaceList")]
        public Input<string>? InterfaceList { get; set; }

        /// <summary>
        /// Tunnel address or name of the pool from which address is assigned to ppp interface locally.
        /// </summary>
        [Input("localAddress")]
        public Input<string>? LocalAddress { get; set; }

        /// <summary>
        /// PPP profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Execute script on user logging off. See on-up for more details.
        /// </summary>
        [Input("onDown")]
        public Input<string>? OnDown { get; set; }

        /// <summary>
        /// Execute script on user login-event. These are available variables that are accessible for the event script: *user *local-address *remote-address *caller-id *called-id *interface.
        /// </summary>
        [Input("onUp")]
        public Input<string>? OnUp { get; set; }

        /// <summary>
        /// Defines whether a user is allowed to have more than one ppp session at a time yes - a user is not allowed to have more than one ppp session at a time no - the user is allowed to have more than one ppp session at a time default - derive this value from the interface default profile; same as no if this is the interface default profile.
        /// </summary>
        [Input("onlyOne")]
        public Input<string>? OnlyOne { get; set; }

        /// <summary>
        /// Firewall  chain name for outgoing packets. The specified chain gets control for  each packet going to the client. The PPP chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the Examples section.
        /// </summary>
        [Input("outgoingFilter")]
        public Input<string>? OutgoingFilter { get; set; }

        /// <summary>
        /// Name of parent simple queue.
        /// </summary>
        [Input("parentQueue")]
        public Input<string>? ParentQueue { get; set; }

        /// <summary>
        /// Queue types.
        /// </summary>
        [Input("queueType")]
        public Input<string>? QueueType { get; set; }

        /// <summary>
        /// Rate limitation in form of rx-rate[/tx-rate]  [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold]  [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so 'rx' is client upload, and  'tx' is client download). All rates are measured in bits per second,  unless followed by optional 'k' suffix (kilobits per second) or 'M'  suffix (megabits per second). If tx-rate is not specified, rx-rate  serves as tx-rate too. The same applies for tx-burst-rate,  tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and  tx-burst-threshold are not specified (but burst-rate is specified),  rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time  and tx-burst-time are not specified, 1s is used as default. Priority  takes values 1..8, where 1 implies the highest priority, but 8 - the  lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and  tx-rate values are used. The rx-rate-min and tx-rate-min values can not  exceed rx-rate and tx-rate values.
        /// </summary>
        [Input("rateLimit")]
        public Input<string>? RateLimit { get; set; }

        /// <summary>
        /// Tunnel address or name of the pool from which address is assigned to remote ppp interface.
        /// </summary>
        [Input("remoteAddress")]
        public Input<string>? RemoteAddress { get; set; }

        /// <summary>
        /// Assign prefix from IPv6 pool to the client and install corresponding IPv6 route.
        /// </summary>
        [Input("remoteIpv6PrefixPool")]
        public Input<string>? RemoteIpv6PrefixPool { get; set; }

        /// <summary>
        /// Maximum time the connection can stay up. By default no time limit is set.
        /// </summary>
        [Input("sessionTimeout")]
        public Input<string>? SessionTimeout { get; set; }

        /// <summary>
        /// Specifies whether to use data compression or not. yes - enable data compression no - disable data compression default - derive this value from the interface default profile; same as no if this is the interface default profile This setting does not affect OVPN tunnels.
        /// </summary>
        [Input("useCompression")]
        public Input<string>? UseCompression { get; set; }

        /// <summary>
        /// Specifies whether to use data encryption or not. yes - enable data encryption no - disable data encryption default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires encryption This setting does not work on OVPN and SSTP tunnels.
        /// </summary>
        [Input("useEncryption")]
        public Input<string>? UseEncryption { get; set; }

        /// <summary>
        /// Specifies whether to allow IPv6. By default is enabled if IPv6 package is installed. yes - enable IPv6 support no - disable IPv6 support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires IPv6 support.
        /// </summary>
        [Input("useIpv6")]
        public Input<string>? UseIpv6 { get; set; }

        /// <summary>
        /// Specifies whether to allow MPLS over PPP. yes - enable MPLS support no - disable MPLS support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires MPLS support
        /// </summary>
        [Input("useMpls")]
        public Input<string>? UseMpls { get; set; }

        /// <summary>
        /// Specifies whether to allow UPnP.
        /// </summary>
        [Input("useUpnp")]
        public Input<string>? UseUpnp { get; set; }

        [Input("winsServers")]
        private InputList<string>? _winsServers;

        /// <summary>
        /// IP address of the WINS server to supply to Windows clients.
        /// </summary>
        public InputList<string> WinsServers
        {
            get => _winsServers ?? (_winsServers = new InputList<string>());
            set => _winsServers = value;
        }

        public ResourcePPPProfileArgs()
        {
        }
        public static new ResourcePPPProfileArgs Empty => new ResourcePPPProfileArgs();
    }

    public sealed class ResourcePPPProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;em&gt;Resource ID type (.id / name). This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___id_")]
        public Input<int>? ___id_ { get; set; }

        /// <summary>
        /// &lt;em&gt;Resource path for CRUD operations. This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___path_")]
        public Input<string>? ___path_ { get; set; }

        /// <summary>
        /// Address list name to which ppp assigned (on server) or received (on client) address will be added.
        /// </summary>
        [Input("addressList")]
        public Input<string>? AddressList { get; set; }

        /// <summary>
        /// Name of the bridge interface to which ppp interface will be added as a slave port. Both  tunnel endpoints (server and client) must be in bridge in order to make  this work, see more details on the BCP bridging manual.
        /// </summary>
        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        /// <summary>
        /// Used  split-horizon value for the dynamically created bridge port. Can be  used to prevent bridging loops and isolate traffic. Set the same value  for a group of ports, to prevent them from sending data to ports with  the same horizon value.
        /// </summary>
        [Input("bridgeHorizon")]
        public Input<int>? BridgeHorizon { get; set; }

        /// <summary>
        /// Changes MAC learning behavior on the dynamically created bridge port: yes - enables MAC learning no - disables MAC learning default - derive this value from the interface default profile; same as yes if this is the interface default profile.
        /// </summary>
        [Input("bridgeLearning")]
        public Input<string>? BridgeLearning { get; set; }

        /// <summary>
        /// Used  path cost for the dynamically created bridge port, used by STP/RSTP to  determine the best path, used by MSTP to determine the best path between  regions. This property has no effect when a bridge protocol-mode is set to none.
        /// </summary>
        [Input("bridgePathCost")]
        public Input<int>? BridgePathCost { get; set; }

        /// <summary>
        /// Used  priority for the dynamically created bridge port, used by STP/RSTP to  determine the root port, used by MSTP to determine root port between  regions. This property has no effect when a bridge protocol-mode is set  to none.
        /// </summary>
        [Input("bridgePortPriority")]
        public Input<int>? BridgePortPriority { get; set; }

        /// <summary>
        /// Modifies connection MSS settings (applies only for IPv4): yes - adjust connection MSS value no - do not adjust connection MSS value default - derive this value from the interface default profile; same as no if this is the interface default profile.
        /// </summary>
        [Input("changeTcpMss")]
        public Input<string>? ChangeTcpMss { get; set; }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Default profile sign.
        /// </summary>
        [Input("default")]
        public Input<string>? Default { get; set; }

        /// <summary>
        /// Name of the IPv6 pool which will be used by dynamically created DHCPv6-PD server when client connects. [Read more &gt;&gt;](https://wiki.mikrotik.com/wiki/Manual:IPv6_PD_over_PPP)
        /// </summary>
        [Input("dhcpv6PdPool")]
        public Input<string>? Dhcpv6PdPool { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// IP address of the DNS server that is supplied to ppp clients.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// Specifies  the amount of time after which the link will be terminated if there are  no activity present. Timeout is not set by default.
        /// </summary>
        [Input("idleTimeout")]
        public Input<string>? IdleTimeout { get; set; }

        /// <summary>
        /// Firewall  chain name for incoming packets. Specified chain gets control for each  packet coming from the client. The ppp chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the examples section.
        /// </summary>
        [Input("incomingFilter")]
        public Input<string>? IncomingFilter { get; set; }

        /// <summary>
        /// Specify where to place dynamic simple queue entries for static DCHP leases with rate-limit parameter set.
        /// </summary>
        [Input("insertQueueBefore")]
        public Input<string>? InsertQueueBefore { get; set; }

        /// <summary>
        /// Interface list name.
        /// </summary>
        [Input("interfaceList")]
        public Input<string>? InterfaceList { get; set; }

        /// <summary>
        /// Tunnel address or name of the pool from which address is assigned to ppp interface locally.
        /// </summary>
        [Input("localAddress")]
        public Input<string>? LocalAddress { get; set; }

        /// <summary>
        /// PPP profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Execute script on user logging off. See on-up for more details.
        /// </summary>
        [Input("onDown")]
        public Input<string>? OnDown { get; set; }

        /// <summary>
        /// Execute script on user login-event. These are available variables that are accessible for the event script: *user *local-address *remote-address *caller-id *called-id *interface.
        /// </summary>
        [Input("onUp")]
        public Input<string>? OnUp { get; set; }

        /// <summary>
        /// Defines whether a user is allowed to have more than one ppp session at a time yes - a user is not allowed to have more than one ppp session at a time no - the user is allowed to have more than one ppp session at a time default - derive this value from the interface default profile; same as no if this is the interface default profile.
        /// </summary>
        [Input("onlyOne")]
        public Input<string>? OnlyOne { get; set; }

        /// <summary>
        /// Firewall  chain name for outgoing packets. The specified chain gets control for  each packet going to the client. The PPP chain should be manually added  and rules with action=jump jump-target=ppp should be added to other  relevant chains in order for this feature to work. For more information  look at the Examples section.
        /// </summary>
        [Input("outgoingFilter")]
        public Input<string>? OutgoingFilter { get; set; }

        /// <summary>
        /// Name of parent simple queue.
        /// </summary>
        [Input("parentQueue")]
        public Input<string>? ParentQueue { get; set; }

        /// <summary>
        /// Queue types.
        /// </summary>
        [Input("queueType")]
        public Input<string>? QueueType { get; set; }

        /// <summary>
        /// Rate limitation in form of rx-rate[/tx-rate]  [rx-burst-rate[/tx-burst-rate] [rx-burst-threshold[/tx-burst-threshold]  [rx-burst-time[/tx-burst-time] [priority] [rx-rate-min[/tx-rate-min]]]] from the point of view of the router (so 'rx' is client upload, and  'tx' is client download). All rates are measured in bits per second,  unless followed by optional 'k' suffix (kilobits per second) or 'M'  suffix (megabits per second). If tx-rate is not specified, rx-rate  serves as tx-rate too. The same applies for tx-burst-rate,  tx-burst-threshold and tx-burst-time. If both rx-burst-threshold and  tx-burst-threshold are not specified (but burst-rate is specified),  rx-rate and tx-rate are used as burst thresholds. If both rx-burst-time  and tx-burst-time are not specified, 1s is used as default. Priority  takes values 1..8, where 1 implies the highest priority, but 8 - the  lowest. If rx-rate-min and tx-rate-min are not specified rx-rate and  tx-rate values are used. The rx-rate-min and tx-rate-min values can not  exceed rx-rate and tx-rate values.
        /// </summary>
        [Input("rateLimit")]
        public Input<string>? RateLimit { get; set; }

        /// <summary>
        /// Tunnel address or name of the pool from which address is assigned to remote ppp interface.
        /// </summary>
        [Input("remoteAddress")]
        public Input<string>? RemoteAddress { get; set; }

        /// <summary>
        /// Assign prefix from IPv6 pool to the client and install corresponding IPv6 route.
        /// </summary>
        [Input("remoteIpv6PrefixPool")]
        public Input<string>? RemoteIpv6PrefixPool { get; set; }

        /// <summary>
        /// Maximum time the connection can stay up. By default no time limit is set.
        /// </summary>
        [Input("sessionTimeout")]
        public Input<string>? SessionTimeout { get; set; }

        /// <summary>
        /// Specifies whether to use data compression or not. yes - enable data compression no - disable data compression default - derive this value from the interface default profile; same as no if this is the interface default profile This setting does not affect OVPN tunnels.
        /// </summary>
        [Input("useCompression")]
        public Input<string>? UseCompression { get; set; }

        /// <summary>
        /// Specifies whether to use data encryption or not. yes - enable data encryption no - disable data encryption default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires encryption This setting does not work on OVPN and SSTP tunnels.
        /// </summary>
        [Input("useEncryption")]
        public Input<string>? UseEncryption { get; set; }

        /// <summary>
        /// Specifies whether to allow IPv6. By default is enabled if IPv6 package is installed. yes - enable IPv6 support no - disable IPv6 support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires IPv6 support.
        /// </summary>
        [Input("useIpv6")]
        public Input<string>? UseIpv6 { get; set; }

        /// <summary>
        /// Specifies whether to allow MPLS over PPP. yes - enable MPLS support no - disable MPLS support default - derive this value from the interface default profile; same as no if this is the interface default profile require - explicitly requires MPLS support
        /// </summary>
        [Input("useMpls")]
        public Input<string>? UseMpls { get; set; }

        /// <summary>
        /// Specifies whether to allow UPnP.
        /// </summary>
        [Input("useUpnp")]
        public Input<string>? UseUpnp { get; set; }

        [Input("winsServers")]
        private InputList<string>? _winsServers;

        /// <summary>
        /// IP address of the WINS server to supply to Windows clients.
        /// </summary>
        public InputList<string> WinsServers
        {
            get => _winsServers ?? (_winsServers = new InputList<string>());
            set => _winsServers = value;
        }

        public ResourcePPPProfileState()
        {
        }
        public static new ResourcePPPProfileState Empty => new ResourcePPPProfileState();
    }
}
