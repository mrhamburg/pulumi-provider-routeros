// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Routeros.Iface
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Routeros = Pulumi.Routeros;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var bridgeVlan = new Routeros.Iface.InterfaceBridgeVlan("bridgeVlan", new()
    ///     {
    ///         Bridge = "bridge",
    ///         Taggeds = new[]
    ///         {
    ///             "bridge",
    ///             "ether1",
    ///         },
    ///         Untaggeds = new[]
    ///         {
    ///             "ether5",
    ///         },
    ///         VlanIds = "50",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// #The ID can be found via API or the terminal #The command for the terminal is -&gt; :put [/interface/bridge/vlan get [print show-ids]]
    /// 
    /// ```sh
    ///  $ pulumi import routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan bridge_vlan "*0"
    /// ```
    /// </summary>
    [RouterosResourceType("routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan")]
    public partial class InterfaceBridgeVlan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// &lt;em&gt;Resource ID type (.id / name). This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Output("___id_")]
        public Output<int?> ___id_ { get; private set; } = null!;

        /// <summary>
        /// &lt;em&gt;Resource path for CRUD operations. This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Output("___path_")]
        public Output<string?> ___path_ { get; private set; } = null!;

        /// <summary>
        /// The bridge interface which the respective VLAN entry is intended for.
        /// </summary>
        [Output("bridge")]
        public Output<string> Bridge { get; private set; } = null!;

        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        [Output("currentTaggeds")]
        public Output<ImmutableArray<string>> CurrentTaggeds { get; private set; } = null!;

        [Output("currentUntaggeds")]
        public Output<ImmutableArray<string>> CurrentUntaggeds { get; private set; } = null!;

        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        /// </summary>
        [Output("dynamic")]
        public Output<bool> Dynamic { get; private set; } = null!;

        /// <summary>
        /// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
        /// </summary>
        [Output("taggeds")]
        public Output<ImmutableArray<string>> Taggeds { get; private set; } = null!;

        /// <summary>
        /// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
        /// </summary>
        [Output("untaggeds")]
        public Output<ImmutableArray<string>> Untaggeds { get; private set; } = null!;

        /// <summary>
        /// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
        /// </summary>
        [Output("vlanIds")]
        public Output<string> VlanIds { get; private set; } = null!;


        /// <summary>
        /// Create a InterfaceBridgeVlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InterfaceBridgeVlan(string name, InterfaceBridgeVlanArgs args, CustomResourceOptions? options = null)
            : base("routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan", name, args ?? new InterfaceBridgeVlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InterfaceBridgeVlan(string name, Input<string> id, InterfaceBridgeVlanState? state = null, CustomResourceOptions? options = null)
            : base("routeros:Iface/interfaceBridgeVlan:InterfaceBridgeVlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InterfaceBridgeVlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InterfaceBridgeVlan Get(string name, Input<string> id, InterfaceBridgeVlanState? state = null, CustomResourceOptions? options = null)
        {
            return new InterfaceBridgeVlan(name, id, state, options);
        }
    }

    public sealed class InterfaceBridgeVlanArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;em&gt;Resource ID type (.id / name). This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___id_")]
        public Input<int>? ___id_ { get; set; }

        /// <summary>
        /// &lt;em&gt;Resource path for CRUD operations. This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___path_")]
        public Input<string>? ___path_ { get; set; }

        /// <summary>
        /// The bridge interface which the respective VLAN entry is intended for.
        /// </summary>
        [Input("bridge", required: true)]
        public Input<string> Bridge { get; set; } = null!;

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        [Input("taggeds")]
        private InputList<string>? _taggeds;

        /// <summary>
        /// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
        /// </summary>
        public InputList<string> Taggeds
        {
            get => _taggeds ?? (_taggeds = new InputList<string>());
            set => _taggeds = value;
        }

        [Input("untaggeds")]
        private InputList<string>? _untaggeds;

        /// <summary>
        /// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
        /// </summary>
        public InputList<string> Untaggeds
        {
            get => _untaggeds ?? (_untaggeds = new InputList<string>());
            set => _untaggeds = value;
        }

        /// <summary>
        /// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
        /// </summary>
        [Input("vlanIds", required: true)]
        public Input<string> VlanIds { get; set; } = null!;

        public InterfaceBridgeVlanArgs()
        {
        }
        public static new InterfaceBridgeVlanArgs Empty => new InterfaceBridgeVlanArgs();
    }

    public sealed class InterfaceBridgeVlanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;em&gt;Resource ID type (.id / name). This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___id_")]
        public Input<int>? ___id_ { get; set; }

        /// <summary>
        /// &lt;em&gt;Resource path for CRUD operations. This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___path_")]
        public Input<string>? ___path_ { get; set; }

        /// <summary>
        /// The bridge interface which the respective VLAN entry is intended for.
        /// </summary>
        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("currentTaggeds")]
        private InputList<string>? _currentTaggeds;
        public InputList<string> CurrentTaggeds
        {
            get => _currentTaggeds ?? (_currentTaggeds = new InputList<string>());
            set => _currentTaggeds = value;
        }

        [Input("currentUntaggeds")]
        private InputList<string>? _currentUntaggeds;
        public InputList<string> CurrentUntaggeds
        {
            get => _currentUntaggeds ?? (_currentUntaggeds = new InputList<string>());
            set => _currentUntaggeds = value;
        }

        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Configuration item created by software, not by management interface. It is not exported, and cannot be directly modified.
        /// </summary>
        [Input("dynamic")]
        public Input<bool>? Dynamic { get; set; }

        [Input("taggeds")]
        private InputList<string>? _taggeds;

        /// <summary>
        /// Interface list with a VLAN tag adding action in egress. This setting accepts comma separated values. E.g. tagged=ether1,ether2.
        /// </summary>
        public InputList<string> Taggeds
        {
            get => _taggeds ?? (_taggeds = new InputList<string>());
            set => _taggeds = value;
        }

        [Input("untaggeds")]
        private InputList<string>? _untaggeds;

        /// <summary>
        /// Interface list with a VLAN tag removing action in egress. This setting accepts comma separated values. E.g. untagged=ether3,ether4
        /// </summary>
        public InputList<string> Untaggeds
        {
            get => _untaggeds ?? (_untaggeds = new InputList<string>());
            set => _untaggeds = value;
        }

        /// <summary>
        /// The list of VLAN IDs for certain port configuration. This setting accepts VLAN ID range as well as comma separated values. E.g. vlan-ids=100-115,120,122,128-130.
        /// </summary>
        [Input("vlanIds")]
        public Input<string>? VlanIds { get; set; }

        public InterfaceBridgeVlanState()
        {
        }
        public static new InterfaceBridgeVlanState Empty => new InterfaceBridgeVlanState();
    }
}
