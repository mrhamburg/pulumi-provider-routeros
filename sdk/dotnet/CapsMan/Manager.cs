// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Routeros.CapsMan
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Routeros = Pulumi.Routeros;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testManager = new Routeros.CapsMan.Manager("testManager", new()
    ///     {
    ///         Enabled = true,
    ///         UpgradePolicy = "require-same-version",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import routeros:CapsMan/manager:Manager test_manager .
    /// ```
    /// </summary>
    [RouterosResourceType("routeros:CapsMan/manager:Manager")]
    public partial class Manager : global::Pulumi.CustomResource
    {
        /// <summary>
        /// &lt;em&gt;Resource ID type (.id / name). This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Output("___id_")]
        public Output<int?> ___id_ { get; private set; } = null!;

        /// <summary>
        /// &lt;em&gt;Resource path for CRUD operations. This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Output("___path_")]
        public Output<string?> ___path_ { get; private set; } = null!;

        /// <summary>
        /// Device CA certificate.
        /// </summary>
        [Output("caCertificate")]
        public Output<string?> CaCertificate { get; private set; } = null!;

        /// <summary>
        /// Device certificate.
        /// </summary>
        [Output("certificate")]
        public Output<string?> Certificate { get; private set; } = null!;

        /// <summary>
        /// Disable or enable CAPsMAN functionality.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
        /// </summary>
        [Output("packagePath")]
        public Output<string?> PackagePath { get; private set; } = null!;

        /// <summary>
        /// Require all connecting CAPs to have a valid certificate.
        /// </summary>
        [Output("requirePeerCertificate")]
        public Output<bool?> RequirePeerCertificate { get; private set; } = null!;

        /// <summary>
        /// Upgrade policy options.
        /// </summary>
        [Output("upgradePolicy")]
        public Output<string?> UpgradePolicy { get; private set; } = null!;


        /// <summary>
        /// Create a Manager resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Manager(string name, ManagerArgs? args = null, CustomResourceOptions? options = null)
            : base("routeros:CapsMan/manager:Manager", name, args ?? new ManagerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Manager(string name, Input<string> id, ManagerState? state = null, CustomResourceOptions? options = null)
            : base("routeros:CapsMan/manager:Manager", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Manager resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Manager Get(string name, Input<string> id, ManagerState? state = null, CustomResourceOptions? options = null)
        {
            return new Manager(name, id, state, options);
        }
    }

    public sealed class ManagerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;em&gt;Resource ID type (.id / name). This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___id_")]
        public Input<int>? ___id_ { get; set; }

        /// <summary>
        /// &lt;em&gt;Resource path for CRUD operations. This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___path_")]
        public Input<string>? ___path_ { get; set; }

        /// <summary>
        /// Device CA certificate.
        /// </summary>
        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        /// <summary>
        /// Device certificate.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Disable or enable CAPsMAN functionality.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
        /// </summary>
        [Input("packagePath")]
        public Input<string>? PackagePath { get; set; }

        /// <summary>
        /// Require all connecting CAPs to have a valid certificate.
        /// </summary>
        [Input("requirePeerCertificate")]
        public Input<bool>? RequirePeerCertificate { get; set; }

        /// <summary>
        /// Upgrade policy options.
        /// </summary>
        [Input("upgradePolicy")]
        public Input<string>? UpgradePolicy { get; set; }

        public ManagerArgs()
        {
        }
        public static new ManagerArgs Empty => new ManagerArgs();
    }

    public sealed class ManagerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;em&gt;Resource ID type (.id / name). This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___id_")]
        public Input<int>? ___id_ { get; set; }

        /// <summary>
        /// &lt;em&gt;Resource path for CRUD operations. This is an internal service field, setting a value is not required.&lt;/em&gt;
        /// </summary>
        [Input("___path_")]
        public Input<string>? ___path_ { get; set; }

        /// <summary>
        /// Device CA certificate.
        /// </summary>
        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        /// <summary>
        /// Device certificate.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Disable or enable CAPsMAN functionality.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
        /// </summary>
        [Input("packagePath")]
        public Input<string>? PackagePath { get; set; }

        /// <summary>
        /// Require all connecting CAPs to have a valid certificate.
        /// </summary>
        [Input("requirePeerCertificate")]
        public Input<bool>? RequirePeerCertificate { get; set; }

        /// <summary>
        /// Upgrade policy options.
        /// </summary>
        [Input("upgradePolicy")]
        public Input<string>? UpgradePolicy { get; set; }

        public ManagerState()
        {
        }
        public static new ManagerState Empty => new ManagerState();
    }
}
