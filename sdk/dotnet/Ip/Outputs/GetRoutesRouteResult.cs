// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Routeros.Ip.Outputs
{

    [OutputType]
    public sealed class GetRoutesRouteResult
    {
        public readonly bool Active;
        public readonly bool Blackhole;
        public readonly bool Connect;
        public readonly bool Dhcp;
        public readonly bool Disabled;
        public readonly int Distance;
        public readonly string DstAddress;
        public readonly bool Dynamic;
        public readonly bool Ecmp;
        public readonly string Gateway;
        public readonly bool HwOffloaded;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImmediateGw;
        public readonly bool Inactive;
        public readonly string LocalAddress;
        public readonly string PrefSrc;
        public readonly string RoutingTable;
        public readonly int Scope;
        public readonly bool Static;
        public readonly bool SuppressHwOffload;
        public readonly int TargetScope;
        public readonly string VrfInterface;

        [OutputConstructor]
        private GetRoutesRouteResult(
            bool active,

            bool blackhole,

            bool connect,

            bool dhcp,

            bool disabled,

            int distance,

            string dstAddress,

            bool dynamic,

            bool ecmp,

            string gateway,

            bool hwOffloaded,

            string id,

            string immediateGw,

            bool inactive,

            string localAddress,

            string prefSrc,

            string routingTable,

            int scope,

            bool @static,

            bool suppressHwOffload,

            int targetScope,

            string vrfInterface)
        {
            Active = active;
            Blackhole = blackhole;
            Connect = connect;
            Dhcp = dhcp;
            Disabled = disabled;
            Distance = distance;
            DstAddress = dstAddress;
            Dynamic = dynamic;
            Ecmp = ecmp;
            Gateway = gateway;
            HwOffloaded = hwOffloaded;
            Id = id;
            ImmediateGw = immediateGw;
            Inactive = inactive;
            LocalAddress = localAddress;
            PrefSrc = prefSrc;
            RoutingTable = routingTable;
            Scope = scope;
            Static = @static;
            SuppressHwOffload = suppressHwOffload;
            TargetScope = targetScope;
            VrfInterface = vrfInterface;
        }
    }
}
